name: Integration Tests
on:
  pull_request:
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:
  prepare-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.build-test-matrix.outputs.tests }}
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: installing dependencies and build
        run: |
          yarn install
          tools/align-version.sh
          yarn build
          yarn package
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
      - name: installing test dependencies
        run: |
          cd test && yarn install
      - id: build-test-matrix
        run: |
          ./tools/build-test-matrix.sh

  linux_integration:
    needs: prepare-integration-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare-integration-tests.outputs.tests)}}
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"
      TERRAFORM_VERSION: ${{ matrix.terraform }}

    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: install test dependencies
        run: cd test && yarn
      - name: integration tests
        run: cd test && ./run-against-dist npx jest ${TEST_TARGET}
        env:
          TEST_TARGET: ${{ matrix.target }}
          TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
          TERRAFORM_BINARY_NAME: "terraform${{ matrix.terraform }}"

  windows_integration:
    needs: prepare-integration-tests
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare-integration-tests.outputs.tests)}}
    env:
      CHECKPOINT_DISABLE: "1"
      TERRAFORM_VERSION: ${{ matrix.terraform }}

    steps:
      - uses: actions/checkout@v2
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ matrix.terraform }}
      - name: Install pipenv
        run: pip install pipenv
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: install test dependencies
        run: cd test && yarn
      - name: integration tests
        run: cd test && ./run-against-dist.bat "npx jest ${env:TEST_TARGET}"
        env:
          TEST_TARGET: ${{ matrix.target }}
          TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
