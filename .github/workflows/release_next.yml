name: Release @next
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "website/**"

jobs:
  prepare-release:
    if: github.repository == 'hashicorp/terraform-cdk'
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.build-test-matrix.outputs.tests }}
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # gives standard-version access to all previous commits
      - name: installing dependencies
        run: yarn install
      - name: Configure git user
        run: |
          git config user.name github-team-tf-cdk
          git config user.email github-team-tf-cdk@hashicorp.com
      - run: |
          yarn prepare-next-release
          tools/align-version.sh
      - run: yarn build
      - run: yarn test
      - run: yarn package
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist
      - name: publish tag
        run: git push --follow-tags
      - name: installing test dependencies
        run: |
          cd test && yarn install
      - id: build-test-matrix
        run: |
          ./tools/build-test-matrix.sh

  integration-tests:
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare-release.outputs.tests)}}
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"
    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: install test dependencies
        run: cd test && yarn
      - name: integration tests
        run: cd test && ./run-against-dist npx jest ${TEST_TARGET}
        env:
          TEST_TARGET: ${{ matrix.target }}
          TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

  release_npm:
    name: Release to NPM
    needs:
      - prepare-release
      - integration-tests
    runs-on: ubuntu-latest
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Release
        run: npx -p jsii-release jsii-release-npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_DIST_TAG: next

  release_pypi:
    name: Release to PyPi
    needs:
      - prepare-release
      - integration-tests
    runs-on: ubuntu-latest
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Release
        run: npx -p jsii-release jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

  release_maven:
    name: Release to Maven
    needs:
      - prepare-release
      - integration-tests
    runs-on: ubuntu-latest
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release jsii-release-maven
        env:
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_STAGING_PROFILE_ID: ${{ secrets.MAVEN_STAGING_PROFILE_ID }}

  release_nuget:
    name: Release to NuGet
    needs:
      - prepare-release
      - integration-tests
    runs-on: ubuntu-latest
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release jsii-release-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  release_golang:
    name: Release Go to Github Repo
    needs:
      - prepare-release
      - integration-tests
    runs-on: ubuntu-latest
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release jsii-release-golang
        env:
          GITHUB_TOKEN: ${{ secrets.TERRAFORM_CDK_GO_REPO_GITHUB_TOKEN }}
          GIT_USER_NAME: "CDK for Terraform Team"
          GIT_USER_EMAIL: "github-team-tf-cdk@hashicorp.com"
