// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertFiles a directory with multiple files 1`] = `
"{
  "variable": {
    "cidr": [
      {
        "default": "0.0.0.0/0",
        "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
        "type": "\${string}"
      }
    ],
    "create_vpc": [
      {
        "default": true,
        "description": "Controls if VPC should be created (it affects almost all resources)",
        "type": "\${bool}"
      }
    ],
    "enable_ipv6": [
      {
        "default": false,
        "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
        "type": "\${bool}"
      }
    ],
    "name": [
      {
        "default": "",
        "description": "Name to be used on all the resources as identifier",
        "type": "\${string}"
      }
    ]
  }
}"
`;

exports[`convertFiles a directory with submodule 1`] = `
"{
  "variable": {
    "cidr": [
      {
        "default": "0.0.0.0/0",
        "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
        "type": "\${string}"
      }
    ],
    "enable_ipv6": [
      {
        "default": false,
        "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
        "type": "\${bool}"
      }
    ]
  }
}"
`;

exports[`convertFiles a directory with tf json 1`] = `
"{
  "variable": {
    "cidr": [
      {
        "default": "0.0.0.0/0",
        "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
        "type": "\${string}"
      }
    ],
    "enable_ipv6": [
      {
        "default": false,
        "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
        "type": "\${bool}"
      }
    ],
    "create_vpc": [
      {
        "default": true,
        "description": "Controls if VPC should be created (it affects almost all resources)",
        "type": "bool"
      }
    ],
    "name": [
      {
        "default": "",
        "description": "Name to be used on all the resources as identifier",
        "type": "string"
      }
    ]
  }
}"
`;

exports[`convertFiles a directory with tf json only 1`] = `
"{
  "variable": {
    "create_vpc": [
      {
        "default": true,
        "description": "Controls if VPC should be created (it affects almost all resources)",
        "type": "bool"
      }
    ],
    "name": [
      {
        "default": "",
        "description": "Name to be used on all the resources as identifier",
        "type": "string"
      }
    ]
  }
}"
`;

exports[`convertFiles a simple directory 1`] = `
"{
  "locals": [
    {
      "max_subnet_length": "\${max(\\n    length(var.private_subnets),\\n    length(var.elasticache_subnets),\\n    length(var.database_subnets),\\n    length(var.redshift_subnets),\\n  )}",
      "nat_gateway_count": "\${var.single_nat_gateway ? 1 : var.one_nat_gateway_per_az ? length(var.azs) : local.max_subnet_length}",
      "vpc_id": "\${element(\\n    concat(\\n      aws_vpc_ipv4_cidr_block_association.this.*.vpc_id,\\n      aws_vpc.this.*.id,\\n      [\\"\\"],\\n    ),\\n    0,\\n  )}",
      "vpce_tags": "\${merge(\\n    var.tags,\\n    var.vpc_endpoint_tags,\\n  )}"
    },
    {
      "nat_gateway_ips": "\${split(\\n    \\",\\",\\n    var.reuse_nat_ips ? join(\\",\\", var.external_nat_ip_ids) : join(\\",\\", aws_eip.nat.*.id),\\n  )}"
    }
  ],
  "resource": {
    "aws_customer_gateway": {
      "this": [
        {
          "bgp_asn": "\${each.value[\\"bgp_asn\\"]}",
          "for_each": "\${var.customer_gateways}",
          "ip_address": "\${each.value[\\"ip_address\\"]}",
          "tags": "\${merge(\\n    {\\n      Name = format(\\"%s-%s\\", var.name, each.key)\\n    },\\n    var.tags,\\n    var.customer_gateway_tags,\\n  )}",
          "type": "ipsec.1"
        }
      ]
    },
    "aws_db_subnet_group": {
      "database": [
        {
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 && var.create_database_subnet_group ? 1 : 0}",
          "description": "Database subnet group for \${var.name}",
          "name": "\${lower(var.name)}",
          "subnet_ids": "\${aws_subnet.database.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.database_subnet_group_tags,\\n  )}"
        }
      ]
    },
    "aws_default_network_acl": {
      "this": [
        {
          "count": "\${var.create_vpc && var.manage_default_network_acl ? 1 : 0}",
          "default_network_acl_id": "\${element(concat(aws_vpc.this.*.default_network_acl_id, [\\"\\"]), 0)}",
          "dynamic": {
            "egress": [
              {
                "content": [
                  {
                    "action": "\${egress.value.action}",
                    "cidr_block": "\${lookup(egress.value, \\"cidr_block\\", null)}",
                    "from_port": "\${egress.value.from_port}",
                    "icmp_code": "\${lookup(egress.value, \\"icmp_code\\", null)}",
                    "icmp_type": "\${lookup(egress.value, \\"icmp_type\\", null)}",
                    "ipv6_cidr_block": "\${lookup(egress.value, \\"ipv6_cidr_block\\", null)}",
                    "protocol": "\${egress.value.protocol}",
                    "rule_no": "\${egress.value.rule_no}",
                    "to_port": "\${egress.value.to_port}"
                  }
                ],
                "for_each": "\${var.default_network_acl_egress}"
              }
            ],
            "ingress": [
              {
                "content": [
                  {
                    "action": "\${ingress.value.action}",
                    "cidr_block": "\${lookup(ingress.value, \\"cidr_block\\", null)}",
                    "from_port": "\${ingress.value.from_port}",
                    "icmp_code": "\${lookup(ingress.value, \\"icmp_code\\", null)}",
                    "icmp_type": "\${lookup(ingress.value, \\"icmp_type\\", null)}",
                    "ipv6_cidr_block": "\${lookup(ingress.value, \\"ipv6_cidr_block\\", null)}",
                    "protocol": "\${ingress.value.protocol}",
                    "rule_no": "\${ingress.value.rule_no}",
                    "to_port": "\${ingress.value.to_port}"
                  }
                ],
                "for_each": "\${var.default_network_acl_ingress}"
              }
            ]
          },
          "subnet_ids": "\${setsubtract(\\n    compact(flatten([\\n      aws_subnet.public.*.id,\\n      aws_subnet.private.*.id,\\n      aws_subnet.intra.*.id,\\n      aws_subnet.database.*.id,\\n      aws_subnet.redshift.*.id,\\n      aws_subnet.elasticache.*.id,\\n    ])),\\n    compact(flatten([\\n      aws_network_acl.public.*.subnet_ids,\\n      aws_network_acl.private.*.subnet_ids,\\n      aws_network_acl.intra.*.subnet_ids,\\n      aws_network_acl.database.*.subnet_ids,\\n      aws_network_acl.redshift.*.subnet_ids,\\n      aws_network_acl.elasticache.*.subnet_ids,\\n    ]))\\n  )}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_network_acl_name)\\n    },\\n    var.tags,\\n    var.default_network_acl_tags,\\n  )}"
        }
      ]
    },
    "aws_default_route_table": {
      "default": [
        {
          "count": "\${var.create_vpc && var.manage_default_route_table ? 1 : 0}",
          "default_route_table_id": "\${aws_vpc.this[0].default_route_table_id}",
          "dynamic": {
            "route": [
              {
                "content": [
                  {
                    "cidr_block": "\${route.value.cidr_block}",
                    "egress_only_gateway_id": "\${lookup(route.value, \\"egress_only_gateway_id\\", null)}",
                    "gateway_id": "\${lookup(route.value, \\"gateway_id\\", null)}",
                    "instance_id": "\${lookup(route.value, \\"instance_id\\", null)}",
                    "ipv6_cidr_block": "\${lookup(route.value, \\"ipv6_cidr_block\\", null)}",
                    "nat_gateway_id": "\${lookup(route.value, \\"nat_gateway_id\\", null)}",
                    "network_interface_id": "\${lookup(route.value, \\"network_interface_id\\", null)}",
                    "transit_gateway_id": "\${lookup(route.value, \\"transit_gateway_id\\", null)}",
                    "vpc_peering_connection_id": "\${lookup(route.value, \\"vpc_peering_connection_id\\", null)}"
                  }
                ],
                "for_each": "\${var.default_route_table_routes}"
              }
            ]
          },
          "propagating_vgws": "\${var.default_route_table_propagating_vgws}",
          "tags": "\${merge(\\n    { \\"Name\\" = var.name },\\n    var.tags,\\n    var.default_route_table_tags,\\n  )}"
        }
      ]
    },
    "aws_default_security_group": {
      "this": [
        {
          "count": "\${var.create_vpc && var.manage_default_security_group ? 1 : 0}",
          "dynamic": {
            "egress": [
              {
                "content": [
                  {
                    "cidr_blocks": "\${compact(split(\\",\\", lookup(egress.value, \\"cidr_blocks\\", \\"\\")))}",
                    "description": "\${lookup(egress.value, \\"description\\", null)}",
                    "from_port": "\${lookup(egress.value, \\"from_port\\", 0)}",
                    "ipv6_cidr_blocks": "\${compact(split(\\",\\", lookup(egress.value, \\"ipv6_cidr_blocks\\", \\"\\")))}",
                    "prefix_list_ids": "\${compact(split(\\",\\", lookup(egress.value, \\"prefix_list_ids\\", \\"\\")))}",
                    "protocol": "\${lookup(egress.value, \\"protocol\\", \\"-1\\")}",
                    "security_groups": "\${compact(split(\\",\\", lookup(egress.value, \\"security_groups\\", \\"\\")))}",
                    "self": "\${lookup(egress.value, \\"self\\", null)}",
                    "to_port": "\${lookup(egress.value, \\"to_port\\", 0)}"
                  }
                ],
                "for_each": "\${var.default_security_group_egress}"
              }
            ],
            "ingress": [
              {
                "content": [
                  {
                    "cidr_blocks": "\${compact(split(\\",\\", lookup(ingress.value, \\"cidr_blocks\\", \\"\\")))}",
                    "description": "\${lookup(ingress.value, \\"description\\", null)}",
                    "from_port": "\${lookup(ingress.value, \\"from_port\\", 0)}",
                    "ipv6_cidr_blocks": "\${compact(split(\\",\\", lookup(ingress.value, \\"ipv6_cidr_blocks\\", \\"\\")))}",
                    "prefix_list_ids": "\${compact(split(\\",\\", lookup(ingress.value, \\"prefix_list_ids\\", \\"\\")))}",
                    "protocol": "\${lookup(ingress.value, \\"protocol\\", \\"-1\\")}",
                    "security_groups": "\${compact(split(\\",\\", lookup(ingress.value, \\"security_groups\\", \\"\\")))}",
                    "self": "\${lookup(ingress.value, \\"self\\", null)}",
                    "to_port": "\${lookup(ingress.value, \\"to_port\\", 0)}"
                  }
                ],
                "for_each": "\${var.default_security_group_ingress}"
              }
            ]
          },
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_security_group_name)\\n    },\\n    var.tags,\\n    var.default_security_group_tags,\\n  )}",
          "vpc_id": "\${aws_vpc.this[0].id}"
        }
      ]
    },
    "aws_default_vpc": {
      "this": [
        {
          "count": "\${var.manage_default_vpc ? 1 : 0}",
          "enable_classiclink": "\${var.default_vpc_enable_classiclink}",
          "enable_dns_hostnames": "\${var.default_vpc_enable_dns_hostnames}",
          "enable_dns_support": "\${var.default_vpc_enable_dns_support}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_vpc_name)\\n    },\\n    var.tags,\\n    var.default_vpc_tags,\\n  )}"
        }
      ]
    },
    "aws_egress_only_internet_gateway": {
      "this": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 && local.max_subnet_length > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.igw_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_eip": {
      "nat": [
        {
          "count": "\${var.create_vpc && var.enable_nat_gateway && false == var.reuse_nat_ips ? local.nat_gateway_count : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-%s\\",\\n        var.name,\\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\\n      )\\n    },\\n    var.tags,\\n    var.nat_eip_tags,\\n  )}",
          "vpc": true
        }
      ]
    },
    "aws_elasticache_subnet_group": {
      "elasticache": [
        {
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 && var.create_elasticache_subnet_group ? 1 : 0}",
          "description": "ElastiCache subnet group for \${var.name}",
          "name": "\${var.name}",
          "subnet_ids": "\${aws_subnet.elasticache.*.id}"
        }
      ]
    },
    "aws_internet_gateway": {
      "this": [
        {
          "count": "\${var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.igw_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_nat_gateway": {
      "this": [
        {
          "allocation_id": "\${element(\\n    local.nat_gateway_ips,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "count": "\${var.create_vpc && var.enable_nat_gateway ? local.nat_gateway_count : 0}",
          "depends_on": [
            "\${aws_internet_gateway.this}"
          ],
          "subnet_id": "\${element(\\n    aws_subnet.public.*.id,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-%s\\",\\n        var.name,\\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\\n      )\\n    },\\n    var.tags,\\n    var.nat_gateway_tags,\\n  )}"
        }
      ]
    },
    "aws_network_acl": {
      "database": [
        {
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.database.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.database_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.database_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.elasticache.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.elasticache_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.elasticache_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.intra.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.intra_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.intra_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.private.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.private_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.private_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.public.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.public_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.public_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.redshift.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.redshift_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.redshift_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ]
    },
    "aws_network_acl_rule": {
      "database_inbound": [
        {
          "cidr_block": "\${lookup(var.database_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? length(var.database_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.database_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.database_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.database_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.database_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.database[0].id}",
          "protocol": "\${var.database_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.database_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.database_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.database_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "database_outbound": [
        {
          "cidr_block": "\${lookup(var.database_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? length(var.database_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.database_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.database_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.database_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.database_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.database[0].id}",
          "protocol": "\${var.database_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.database_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.database_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.database_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "elasticache_inbound": [
        {
          "cidr_block": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? length(var.elasticache_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.elasticache[0].id}",
          "protocol": "\${var.elasticache_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.elasticache_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.elasticache_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "elasticache_outbound": [
        {
          "cidr_block": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? length(var.elasticache_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.elasticache[0].id}",
          "protocol": "\${var.elasticache_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.elasticache_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.elasticache_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "intra_inbound": [
        {
          "cidr_block": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? length(var.intra_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.intra[0].id}",
          "protocol": "\${var.intra_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.intra_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.intra_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "intra_outbound": [
        {
          "cidr_block": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? length(var.intra_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.intra[0].id}",
          "protocol": "\${var.intra_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.intra_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.intra_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "private_inbound": [
        {
          "cidr_block": "\${lookup(var.private_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? length(var.private_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.private_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.private_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.private_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.private_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.private[0].id}",
          "protocol": "\${var.private_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.private_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.private_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.private_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "private_outbound": [
        {
          "cidr_block": "\${lookup(var.private_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? length(var.private_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.private_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.private_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.private_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.private_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.private[0].id}",
          "protocol": "\${var.private_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.private_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.private_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.private_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "public_inbound": [
        {
          "cidr_block": "\${lookup(var.public_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? length(var.public_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.public_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.public_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.public_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.public_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.public[0].id}",
          "protocol": "\${var.public_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.public_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.public_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.public_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "public_outbound": [
        {
          "cidr_block": "\${lookup(var.public_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? length(var.public_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.public_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.public_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.public_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.public_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.public[0].id}",
          "protocol": "\${var.public_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.public_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.public_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.public_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "redshift_inbound": [
        {
          "cidr_block": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? length(var.redshift_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.redshift[0].id}",
          "protocol": "\${var.redshift_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.redshift_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.redshift_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "redshift_outbound": [
        {
          "cidr_block": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? length(var.redshift_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.redshift[0].id}",
          "protocol": "\${var.redshift_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.redshift_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.redshift_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ]
    },
    "aws_redshift_subnet_group": {
      "redshift": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && var.create_redshift_subnet_group ? 1 : 0}",
          "description": "Redshift subnet group for \${var.name}",
          "name": "\${lower(var.name)}",
          "subnet_ids": "\${aws_subnet.redshift.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.redshift_subnet_group_tags,\\n  )}"
        }
      ]
    },
    "aws_route": {
      "database_internet_gateway": [
        {
          "count": "\${var.create_vpc && var.create_igw && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && var.create_database_internet_gateway_route && false == var.create_database_nat_gateway_route ? 1 : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.database[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "database_ipv6_egress": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && var.create_database_internet_gateway_route ? 1 : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "egress_only_gateway_id": "\${aws_egress_only_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.database[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "database_nat_gateway": [
        {
          "count": "\${var.create_vpc && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && false == var.create_database_internet_gateway_route && var.create_database_nat_gateway_route && var.enable_nat_gateway ? var.single_nat_gateway ? 1 : length(var.database_subnets) : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "nat_gateway_id": "\${element(aws_nat_gateway.this.*.id, count.index)}",
          "route_table_id": "\${element(aws_route_table.database.*.id, count.index)}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "private_ipv6_egress": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 ? length(var.private_subnets) : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "egress_only_gateway_id": "\${element(aws_egress_only_internet_gateway.this.*.id, 0)}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}"
        }
      ],
      "private_nat_gateway": [
        {
          "count": "\${var.create_vpc && var.enable_nat_gateway ? local.nat_gateway_count : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "nat_gateway_id": "\${element(aws_nat_gateway.this.*.id, count.index)}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "public_internet_gateway": [
        {
          "count": "\${var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.public[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "public_internet_gateway_ipv6": [
        {
          "count": "\${var.create_vpc && var.create_igw && var.enable_ipv6 && length(var.public_subnets) > 0 ? 1 : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.public[0].id}"
        }
      ]
    },
    "aws_route_table": {
      "database": [
        {
          "count": "\${var.create_vpc && var.create_database_subnet_route_table && length(var.database_subnets) > 0 ? var.single_nat_gateway || var.create_database_internet_gateway_route ? 1 : length(var.database_subnets) : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = var.single_nat_gateway || var.create_database_internet_gateway_route ? \\"\${var.name}-\${var.database_subnet_suffix}\\" : format(\\n        \\"%s-\${var.database_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.database_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && var.create_elasticache_subnet_route_table && length(var.elasticache_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.elasticache_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.elasticache_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.intra_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.intra_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && local.max_subnet_length > 0 ? local.nat_gateway_count : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = var.single_nat_gateway ? \\"\${var.name}-\${var.private_subnet_suffix}\\" : format(\\n        \\"%s-\${var.private_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.private_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.public_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.public_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && var.create_redshift_subnet_route_table && length(var.redshift_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.redshift_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.redshift_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_route_table_association": {
      "database": [
        {
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 ? length(var.database_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.database.*.id, aws_route_table.private.*.id),\\n    var.create_database_subnet_route_table ? var.single_nat_gateway || var.create_database_internet_gateway_route ? 0 : count.index : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.database.*.id, count.index)}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 ? length(var.elasticache_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(\\n      aws_route_table.elasticache.*.id,\\n      aws_route_table.private.*.id,\\n    ),\\n    var.single_nat_gateway || var.create_elasticache_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.elasticache.*.id, count.index)}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? length(var.intra_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.intra.*.id, 0)}",
          "subnet_id": "\${element(aws_subnet.intra.*.id, count.index)}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && length(var.private_subnets) > 0 ? length(var.private_subnets) : 0}",
          "route_table_id": "\${element(\\n    aws_route_table.private.*.id,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.private.*.id, count.index)}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 ? length(var.public_subnets) : 0}",
          "route_table_id": "\${aws_route_table.public[0].id}",
          "subnet_id": "\${element(aws_subnet.public.*.id, count.index)}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && false == var.enable_public_redshift ? length(var.redshift_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.redshift.*.id, aws_route_table.private.*.id),\\n    var.single_nat_gateway || var.create_redshift_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.redshift.*.id, count.index)}"
        }
      ],
      "redshift_public": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && var.enable_public_redshift ? length(var.redshift_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.redshift.*.id, aws_route_table.public.*.id),\\n    var.single_nat_gateway || var.create_redshift_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.redshift.*.id, count.index)}"
        }
      ]
    },
    "aws_subnet": {
      "database": [
        {
          "assign_ipv6_address_on_creation": "\${var.database_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.database_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.database_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 ? length(var.database_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.database_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.database_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.database_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.database_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "elasticache": [
        {
          "assign_ipv6_address_on_creation": "\${var.elasticache_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.elasticache_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.elasticache_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 ? length(var.elasticache_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.elasticache_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.elasticache_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.elasticache_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.elasticache_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "intra": [
        {
          "assign_ipv6_address_on_creation": "\${var.intra_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.intra_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.intra_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? length(var.intra_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.intra_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.intra_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.intra_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.intra_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "private": [
        {
          "assign_ipv6_address_on_creation": "\${var.private_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.private_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.private_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.private_subnets) > 0 ? length(var.private_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.private_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.private_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.private_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.private_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "public": [
        {
          "assign_ipv6_address_on_creation": "\${var.public_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.public_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${element(concat(var.public_subnets, [\\"\\"]), count.index)}",
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 && (false == var.one_nat_gateway_per_az || length(var.public_subnets) >= length(var.azs)) ? length(var.public_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.public_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.public_subnet_ipv6_prefixes[count.index]) : null}",
          "map_public_ip_on_launch": "\${var.map_public_ip_on_launch}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.public_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.public_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "redshift": [
        {
          "assign_ipv6_address_on_creation": "\${var.redshift_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.redshift_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.redshift_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 ? length(var.redshift_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.redshift_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.redshift_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.redshift_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.redshift_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpc": {
      "this": [
        {
          "assign_generated_ipv6_cidr_block": "\${var.enable_ipv6}",
          "cidr_block": "\${var.cidr}",
          "count": "\${var.create_vpc ? 1 : 0}",
          "enable_classiclink": "\${var.enable_classiclink}",
          "enable_classiclink_dns_support": "\${var.enable_classiclink_dns_support}",
          "enable_dns_hostnames": "\${var.enable_dns_hostnames}",
          "enable_dns_support": "\${var.enable_dns_support}",
          "instance_tenancy": "\${var.instance_tenancy}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.vpc_tags,\\n  )}"
        }
      ]
    },
    "aws_vpc_dhcp_options": {
      "this": [
        {
          "count": "\${var.create_vpc && var.enable_dhcp_options ? 1 : 0}",
          "domain_name": "\${var.dhcp_options_domain_name}",
          "domain_name_servers": "\${var.dhcp_options_domain_name_servers}",
          "netbios_name_servers": "\${var.dhcp_options_netbios_name_servers}",
          "netbios_node_type": "\${var.dhcp_options_netbios_node_type}",
          "ntp_servers": "\${var.dhcp_options_ntp_servers}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.dhcp_options_tags,\\n  )}"
        }
      ]
    },
    "aws_vpc_dhcp_options_association": {
      "this": [
        {
          "count": "\${var.create_vpc && var.enable_dhcp_options ? 1 : 0}",
          "dhcp_options_id": "\${aws_vpc_dhcp_options.this[0].id}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpc_ipv4_cidr_block_association": {
      "this": [
        {
          "cidr_block": "\${element(var.secondary_cidr_blocks, count.index)}",
          "count": "\${var.create_vpc && length(var.secondary_cidr_blocks) > 0 ? length(var.secondary_cidr_blocks) : 0}",
          "vpc_id": "\${aws_vpc.this[0].id}"
        }
      ]
    },
    "aws_vpn_gateway": {
      "this": [
        {
          "amazon_side_asn": "\${var.amazon_side_asn}",
          "availability_zone": "\${var.vpn_gateway_az}",
          "count": "\${var.create_vpc && var.enable_vpn_gateway ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.vpn_gateway_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpn_gateway_attachment": {
      "this": [
        {
          "count": "\${var.vpn_gateway_id != \\"\\" ? 1 : 0}",
          "vpc_id": "\${local.vpc_id}",
          "vpn_gateway_id": "\${var.vpn_gateway_id}"
        }
      ]
    },
    "aws_vpn_gateway_route_propagation": {
      "intra": [
        {
          "count": "\${var.create_vpc && var.propagate_intra_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? length(var.intra_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.intra.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && var.propagate_private_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? length(var.private_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && var.propagate_public_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? 1 : 0}",
          "route_table_id": "\${element(aws_route_table.public.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ]
    }
  },
  "variable": {
    "access_analyzer_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "access_analyzer_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Access Analyzer endpoint",
        "type": "\${bool}"
      }
    ],
    "access_analyzer_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Access Analyzer endpoint",
        "type": "\${list(string)}"
      }
    ],
    "access_analyzer_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Access Analyzer endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "acm_pca_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "acm_pca_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ACM PCA endpoint",
        "type": "\${bool}"
      }
    ],
    "acm_pca_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ACM PCA endpoint",
        "type": "\${list(string)}"
      }
    ],
    "acm_pca_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ACM PCA endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "amazon_side_asn": [
      {
        "default": "64512",
        "description": "The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN.",
        "type": "\${string}"
      }
    ],
    "apigw_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "apigw_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for API GW endpoint",
        "type": "\${bool}"
      }
    ],
    "apigw_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for API GW  endpoint",
        "type": "\${list(string)}"
      }
    ],
    "apigw_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for API GW endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appmesh_envoy_management_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppMesh endpoint",
        "type": "\${bool}"
      }
    ],
    "appmesh_envoy_management_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppMesh endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appmesh_envoy_management_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppMesh endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appstream_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream API endpoint",
        "type": "\${bool}"
      }
    ],
    "appstream_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppStream API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appstream_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppStream API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appstream_streaming_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream Streaming endpoint",
        "type": "\${bool}"
      }
    ],
    "appstream_streaming_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppStream Streaming endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appstream_streaming_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppStream Streaming endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "assign_ipv6_address_on_creation": [
      {
        "default": false,
        "description": "Assign IPv6 address on subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "athena_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "athena_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Athena endpoint",
        "type": "\${bool}"
      }
    ],
    "athena_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Athena endpoint",
        "type": "\${list(string)}"
      }
    ],
    "athena_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Athena endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "auto_scaling_plans_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "auto_scaling_plans_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Auto Scaling Plans endpoint",
        "type": "\${bool}"
      }
    ],
    "auto_scaling_plans_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Auto Scaling Plans endpoint",
        "type": "\${list(string)}"
      }
    ],
    "auto_scaling_plans_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Auto Scaling Plans endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "azs": [
      {
        "default": [],
        "description": "A list of availability zones names or ids in the region",
        "type": "\${list(string)}"
      }
    ],
    "cidr": [
      {
        "default": "0.0.0.0/0",
        "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
        "type": "\${string}"
      }
    ],
    "cloud_directory_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "cloud_directory_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Cloud Directory endpoint",
        "type": "\${bool}"
      }
    ],
    "cloud_directory_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Cloud Directory endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloud_directory_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Cloud Directory endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "cloudformation_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Cloudformation endpoint",
        "type": "\${bool}"
      }
    ],
    "cloudformation_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Cloudformation endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloudformation_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Cloudformation endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "cloudtrail_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudTrail endpoint",
        "type": "\${bool}"
      }
    ],
    "cloudtrail_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudTrail endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloudtrail_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudTrail endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact API endpoint",
        "type": "\${bool}"
      }
    ],
    "codeartifact_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codeartifact API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codeartifact API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_repositories_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact repositories endpoint",
        "type": "\${bool}"
      }
    ],
    "codeartifact_repositories_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codeartifact repositories endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_repositories_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codeartifact repositories endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codebuild_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "codebuild_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codebuild endpoint",
        "type": "\${bool}"
      }
    ],
    "codebuild_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codebuild endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codebuild_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codebuilt endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codecommit_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "codecommit_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codecommit endpoint",
        "type": "\${bool}"
      }
    ],
    "codecommit_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codecommit endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codecommit_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_commands_secure_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy Commands Secure endpoint",
        "type": "\${bool}"
      }
    ],
    "codedeploy_commands_secure_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodeDeploy Commands Secure endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_commands_secure_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodeDeploy Commands Secure endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy endpoint",
        "type": "\${bool}"
      }
    ],
    "codedeploy_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodeDeploy endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodeDeploy endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codepipeline_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodePipeline endpoint",
        "type": "\${bool}"
      }
    ],
    "codepipeline_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodePipeline endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codepipeline_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodePipeline endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "config_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for config endpoint",
        "type": "\${bool}"
      }
    ],
    "config_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for config endpoint",
        "type": "\${list(string)}"
      }
    ],
    "config_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for config endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "create_database_internet_gateway_route": [
      {
        "default": false,
        "description": "Controls if an internet gateway route for public database access should be created",
        "type": "\${bool}"
      }
    ],
    "create_database_nat_gateway_route": [
      {
        "default": false,
        "description": "Controls if a nat gateway route should be created to give internet access to the database subnets",
        "type": "\${bool}"
      }
    ],
    "create_database_subnet_group": [
      {
        "default": true,
        "description": "Controls if database subnet group should be created (n.b. database_subnets must also be set)",
        "type": "\${bool}"
      }
    ],
    "create_database_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for database should be created",
        "type": "\${bool}"
      }
    ],
    "create_egress_only_igw": [
      {
        "default": true,
        "description": "Controls if an Egress Only Internet Gateway is created and its related routes.",
        "type": "\${bool}"
      }
    ],
    "create_elasticache_subnet_group": [
      {
        "default": true,
        "description": "Controls if elasticache subnet group should be created",
        "type": "\${bool}"
      }
    ],
    "create_elasticache_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for elasticache should be created",
        "type": "\${bool}"
      }
    ],
    "create_flow_log_cloudwatch_iam_role": [
      {
        "default": false,
        "description": "Whether to create IAM role for VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "create_flow_log_cloudwatch_log_group": [
      {
        "default": false,
        "description": "Whether to create CloudWatch log group for VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "create_igw": [
      {
        "default": true,
        "description": "Controls if an Internet Gateway is created for public subnets and the related routes that connect them.",
        "type": "\${bool}"
      }
    ],
    "create_redshift_subnet_group": [
      {
        "default": true,
        "description": "Controls if redshift subnet group should be created",
        "type": "\${bool}"
      }
    ],
    "create_redshift_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for redshift should be created",
        "type": "\${bool}"
      }
    ],
    "create_vpc": [
      {
        "default": true,
        "description": "Controls if VPC should be created (it affects almost all resources)",
        "type": "\${bool}"
      }
    ],
    "customer_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the Customer Gateway",
        "type": "\${map(string)}"
      }
    ],
    "customer_gateways": [
      {
        "default": {},
        "description": "Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)",
        "type": "\${map(map(any))}"
      }
    ],
    "database_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "database_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for database subnets",
        "type": "\${bool}"
      }
    ],
    "database_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Database subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "database_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Database subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "database_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the database route tables",
        "type": "\${map(string)}"
      }
    ],
    "database_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on database subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "database_subnet_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnet group",
        "type": "\${map(string)}"
      }
    ],
    "database_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "database_subnet_suffix": [
      {
        "default": "db",
        "description": "Suffix to append to database subnets name",
        "type": "\${string}"
      }
    ],
    "database_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnets",
        "type": "\${map(string)}"
      }
    ],
    "database_subnets": [
      {
        "default": [],
        "description": "A list of database subnets",
        "type": "\${list(string)}"
      }
    ],
    "datasync_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Data Sync endpoint",
        "type": "\${bool}"
      }
    ],
    "datasync_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Data Sync endpoint",
        "type": "\${list(string)}"
      }
    ],
    "datasync_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Data Sync endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "default_network_acl_egress": [
      {
        "default": [
          {
            "action": "allow",
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_no": 100,
            "to_port": 0
          },
          {
            "action": "allow",
            "from_port": 0,
            "ipv6_cidr_block": "::/0",
            "protocol": "-1",
            "rule_no": 101,
            "to_port": 0
          }
        ],
        "description": "List of maps of egress rules to set on the Default Network ACL",
        "type": "\${list(map(string))}"
      }
    ],
    "default_network_acl_ingress": [
      {
        "default": [
          {
            "action": "allow",
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_no": 100,
            "to_port": 0
          },
          {
            "action": "allow",
            "from_port": 0,
            "ipv6_cidr_block": "::/0",
            "protocol": "-1",
            "rule_no": 101,
            "to_port": 0
          }
        ],
        "description": "List of maps of ingress rules to set on the Default Network ACL",
        "type": "\${list(map(string))}"
      }
    ],
    "default_network_acl_name": [
      {
        "default": "",
        "description": "Name to be used on the Default Network ACL",
        "type": "\${string}"
      }
    ],
    "default_network_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the Default Network ACL",
        "type": "\${map(string)}"
      }
    ],
    "default_route_table_propagating_vgws": [
      {
        "default": [],
        "description": "List of virtual gateways for propagation",
        "type": "\${list(string)}"
      }
    ],
    "default_route_table_routes": [
      {
        "default": [],
        "description": "Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route",
        "type": "\${list(map(string))}"
      }
    ],
    "default_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the default route table",
        "type": "\${map(string)}"
      }
    ],
    "default_security_group_egress": [
      {
        "default": null,
        "description": "List of maps of egress rules to set on the default security group",
        "type": "\${list(map(string))}"
      }
    ],
    "default_security_group_ingress": [
      {
        "default": null,
        "description": "List of maps of ingress rules to set on the default security group",
        "type": "\${list(map(string))}"
      }
    ],
    "default_security_group_name": [
      {
        "default": "default",
        "description": "Name to be used on the default security group",
        "type": "\${string}"
      }
    ],
    "default_security_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the default security group",
        "type": "\${map(string)}"
      }
    ],
    "default_vpc_enable_classiclink": [
      {
        "default": false,
        "description": "Should be true to enable ClassicLink in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_enable_dns_hostnames": [
      {
        "default": false,
        "description": "Should be true to enable DNS hostnames in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_enable_dns_support": [
      {
        "default": true,
        "description": "Should be true to enable DNS support in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_name": [
      {
        "default": "",
        "description": "Name to be used on the Default VPC",
        "type": "\${string}"
      }
    ],
    "default_vpc_tags": [
      {
        "default": {},
        "description": "Additional tags for the Default VPC",
        "type": "\${map(string)}"
      }
    ],
    "dhcp_options_domain_name": [
      {
        "default": "",
        "description": "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${string}"
      }
    ],
    "dhcp_options_domain_name_servers": [
      {
        "default": [
          "AmazonProvidedDNS"
        ],
        "description": "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_netbios_name_servers": [
      {
        "default": [],
        "description": "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_netbios_node_type": [
      {
        "default": "",
        "description": "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${string}"
      }
    ],
    "dhcp_options_ntp_servers": [
      {
        "default": [],
        "description": "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_tags": [
      {
        "default": {},
        "description": "Additional tags for the DHCP option set (requires enable_dhcp_options set to true)",
        "type": "\${map(string)}"
      }
    ],
    "dms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for DMS endpoint",
        "type": "\${bool}"
      }
    ],
    "dms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for DMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "dms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for DMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "dynamodb_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for DynamoDB interface endpoint",
        "type": "\${bool}"
      }
    ],
    "dynamodb_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for DynamoDB interface endpoint",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for DynamoDB interface endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_type": [
      {
        "default": "Gateway",
        "description": "DynamoDB VPC endpoint type. Note - DynamoDB Interface type support is not yet available",
        "type": "\${string}"
      }
    ],
    "ebs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EBS endpoint",
        "type": "\${bool}"
      }
    ],
    "ebs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EBS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ebs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EBS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2_autoscaling_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ec2_autoscaling_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 Autoscaling endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2_autoscaling_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2 Autoscaling endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2_autoscaling_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2 Autoscaling endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ec2_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2 endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2 endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2messages_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2MESSAGES endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2messages_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2MESSAGES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2messages_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2MESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecr_api_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ecr_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR API endpoint",
        "type": "\${bool}"
      }
    ],
    "ecr_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECR API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecr_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECR api endpoint. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecr_dkr_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ecr_dkr_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR DKR endpoint",
        "type": "\${bool}"
      }
    ],
    "ecr_dkr_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECR DKR endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecr_dkr_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECR dkr endpoint. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_agent_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Agent endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_agent_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS Agent endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_agent_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS Agent endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_telemetry_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Telemetry endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_telemetry_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS Telemetry endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_telemetry_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS Telemetry endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "efs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "efs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EFS endpoint",
        "type": "\${bool}"
      }
    ],
    "efs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EFS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "efs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EFS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elastic_inference_runtime_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Inference Runtime endpoint",
        "type": "\${bool}"
      }
    ],
    "elastic_inference_runtime_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Inference Runtime endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elastic_inference_runtime_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Inference Runtime endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticache_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets",
        "type": "\${bool}"
      }
    ],
    "elasticache_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Elasticache subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "elasticache_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Elasticache subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "elasticache_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache route tables",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on elasticache subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "elasticache_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "elasticache_subnet_suffix": [
      {
        "default": "elasticache",
        "description": "Suffix to append to elasticache subnets name",
        "type": "\${string}"
      }
    ],
    "elasticache_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache subnets",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_subnets": [
      {
        "default": [],
        "description": "A list of elasticache subnets",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "elasticbeanstalk_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticbeanstalk_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_health_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk Health endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticbeanstalk_health_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk Health endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_health_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk Health endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticloadbalancing_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "elasticloadbalancing_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Load Balancing endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticloadbalancing_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Load Balancing endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticloadbalancing_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Load Balancing endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "emr_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "emr_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EMR endpoint",
        "type": "\${bool}"
      }
    ],
    "emr_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EMR endpoint",
        "type": "\${list(string)}"
      }
    ],
    "emr_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EMR endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "enable_access_analyzer_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Access Analyzer endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_acm_pca_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ACM PCA endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_apigw_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an api gateway endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appmesh_envoy_management_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppMesh endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appstream_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppStream API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appstream_streaming_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppStream Streaming endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_athena_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Athena endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_auto_scaling_plans_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Auto Scaling Plans endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_classiclink": [
      {
        "default": null,
        "description": "Should be true to enable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic.",
        "type": "\${bool}"
      }
    ],
    "enable_classiclink_dns_support": [
      {
        "default": null,
        "description": "Should be true to enable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic.",
        "type": "\${bool}"
      }
    ],
    "enable_cloud_directory_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Cloud Directory endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_cloudformation_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Cloudformation endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_cloudtrail_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudTrail endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codeartifact_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codeartifact API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codeartifact_repositories_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codeartifact repositories endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codebuild_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codebuild endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codecommit_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codecommit endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codedeploy_commands_secure_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an CodeDeploy Commands Secure endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codedeploy_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an CodeDeploy endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codepipeline_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CodePipeline endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_config_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an config endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_datasync_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Data Sync endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dhcp_options": [
      {
        "default": false,
        "description": "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type",
        "type": "\${bool}"
      }
    ],
    "enable_dms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a DMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dns_hostnames": [
      {
        "default": false,
        "description": "Should be true to enable DNS hostnames in the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dns_support": [
      {
        "default": true,
        "description": "Should be true to enable DNS support in the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dynamodb_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a DynamoDB endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ebs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EBS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2_autoscaling_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2 Autoscaling endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2 endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2messages_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2MESSAGES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecr_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ecr api endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecr_dkr_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ecr dkr endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_agent_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS Agent endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_telemetry_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS Telemetry endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_efs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EFS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elastic_inference_runtime_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Elastic Inference Runtime endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticbeanstalk_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Beanstalk endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticbeanstalk_health_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Beanstalk Health endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticloadbalancing_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Load Balancing endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_emr_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EMR endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_events_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Events endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_flow_log": [
      {
        "default": false,
        "description": "Whether or not to enable VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "enable_git_codecommit_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Git Codecommit endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_glue_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Glue endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ipv6": [
      {
        "default": false,
        "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
        "type": "\${bool}"
      }
    ],
    "enable_kinesis_firehose_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Kinesis Firehose endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_kinesis_streams_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Kinesis Streams endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_kms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a KMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_lambda_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Lambda endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_logs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Logs endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_monitoring_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Monitoring endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_nat_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to provision NAT Gateways for each of your private networks",
        "type": "\${bool}"
      }
    ],
    "enable_public_redshift": [
      {
        "default": false,
        "description": "Controls if redshift should have public routing table",
        "type": "\${bool}"
      }
    ],
    "enable_public_s3_endpoint": [
      {
        "default": true,
        "description": "Whether to enable S3 VPC Endpoint for public subnets",
        "type": "\${bool}"
      }
    ],
    "enable_qldb_session_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an QLDB Session endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_rds_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an RDS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_rekognition_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Rekognition endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_s3_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an S3 endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SageMaker API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_notebook_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Sagemaker Notebook endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_runtime_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SageMaker Runtime endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_secretsmanager_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Secrets Manager endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_servicecatalog_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Service Catalog endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ses_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sns_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SNS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sqs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SQS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ssm_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SSM endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ssmmessages_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SSMMESSAGES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_states_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Step Function endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_storagegateway_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Storage Gateway endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sts_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a STS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_textract_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Textract endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_transfer_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Transfer endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_transferserver_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Transfer Server endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_vpn_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to create a new VPN Gateway resource and attach it to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_workspaces_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Workspaces endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "events_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "events_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Events endpoint",
        "type": "\${bool}"
      }
    ],
    "events_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Events endpoint",
        "type": "\${list(string)}"
      }
    ],
    "events_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Events endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "external_nat_ip_ids": [
      {
        "default": [],
        "description": "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)",
        "type": "\${list(string)}"
      }
    ],
    "external_nat_ips": [
      {
        "default": [],
        "description": "List of EIPs to be used for \`nat_public_ips\` output (used in combination with reuse_nat_ips and external_nat_ip_ids)",
        "type": "\${list(string)}"
      }
    ],
    "flow_log_cloudwatch_iam_role_arn": [
      {
        "default": "",
        "description": "The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_kms_key_id": [
      {
        "default": null,
        "description": "The ARN of the KMS Key to use when encrypting log data for VPC flow logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_name_prefix": [
      {
        "default": "/aws/vpc-flow-log/",
        "description": "Specifies the name prefix of CloudWatch Log Group for VPC flow logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_retention_in_days": [
      {
        "default": null,
        "description": "Specifies the number of days you want to retain log events in the specified log group for VPC flow logs.",
        "type": "\${number}"
      }
    ],
    "flow_log_destination_arn": [
      {
        "default": "",
        "description": "The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided.",
        "type": "\${string}"
      }
    ],
    "flow_log_destination_type": [
      {
        "default": "cloud-watch-logs",
        "description": "Type of flow log destination. Can be s3 or cloud-watch-logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_log_format": [
      {
        "default": null,
        "description": "The fields to include in the flow log record, in the order in which they should appear.",
        "type": "\${string}"
      }
    ],
    "flow_log_max_aggregation_interval": [
      {
        "default": 600,
        "description": "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: \`60\` seconds or \`600\` seconds.",
        "type": "\${number}"
      }
    ],
    "flow_log_traffic_type": [
      {
        "default": "ALL",
        "description": "The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL.",
        "type": "\${string}"
      }
    ],
    "git_codecommit_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Git Codecommit endpoint",
        "type": "\${bool}"
      }
    ],
    "git_codecommit_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Git Codecommit endpoint",
        "type": "\${list(string)}"
      }
    ],
    "git_codecommit_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Git Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "glue_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Glue endpoint",
        "type": "\${bool}"
      }
    ],
    "glue_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Glue endpoint",
        "type": "\${list(string)}"
      }
    ],
    "glue_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Glue endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "igw_tags": [
      {
        "default": {},
        "description": "Additional tags for the internet gateway",
        "type": "\${map(string)}"
      }
    ],
    "instance_tenancy": [
      {
        "default": "default",
        "description": "A tenancy option for instances launched into the VPC",
        "type": "\${string}"
      }
    ],
    "intra_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "intra_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for intra subnets",
        "type": "\${bool}"
      }
    ],
    "intra_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Intra subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "intra_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Intra subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "intra_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra route tables",
        "type": "\${map(string)}"
      }
    ],
    "intra_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on intra subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "intra_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "intra_subnet_suffix": [
      {
        "default": "intra",
        "description": "Suffix to append to intra subnets name",
        "type": "\${string}"
      }
    ],
    "intra_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra subnets",
        "type": "\${map(string)}"
      }
    ],
    "intra_subnets": [
      {
        "default": [],
        "description": "A list of intra subnets",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_firehose_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kinesis_firehose_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Firehose endpoint",
        "type": "\${bool}"
      }
    ],
    "kinesis_firehose_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Kinesis Firehose endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_firehose_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Kinesis Firehose endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_streams_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kinesis_streams_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Streams endpoint",
        "type": "\${bool}"
      }
    ],
    "kinesis_streams_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Kinesis Streams endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_streams_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Kinesis Streams endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "kms_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for KMS endpoint",
        "type": "\${bool}"
      }
    ],
    "kms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for KMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for KMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "lambda_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Lambda endpoint",
        "type": "\${bool}"
      }
    ],
    "lambda_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Lambda endpoint",
        "type": "\${list(string)}"
      }
    ],
    "lambda_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Lambda endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "logs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "logs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Logs endpoint",
        "type": "\${bool}"
      }
    ],
    "logs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Logs endpoint",
        "type": "\${list(string)}"
      }
    ],
    "logs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Logs endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "manage_default_network_acl": [
      {
        "default": false,
        "description": "Should be true to adopt and manage Default Network ACL",
        "type": "\${bool}"
      }
    ],
    "manage_default_route_table": [
      {
        "default": false,
        "description": "Should be true to manage default route table",
        "type": "\${bool}"
      }
    ],
    "manage_default_security_group": [
      {
        "default": false,
        "description": "Should be true to adopt and manage default security group",
        "type": "\${bool}"
      }
    ],
    "manage_default_vpc": [
      {
        "default": false,
        "description": "Should be true to adopt and manage Default VPC",
        "type": "\${bool}"
      }
    ],
    "map_public_ip_on_launch": [
      {
        "default": true,
        "description": "Should be false if you do not want to auto-assign public IP on launch",
        "type": "\${bool}"
      }
    ],
    "monitoring_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "monitoring_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Monitoring endpoint",
        "type": "\${bool}"
      }
    ],
    "monitoring_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Monitoring endpoint",
        "type": "\${list(string)}"
      }
    ],
    "monitoring_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Monitoring endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "name": [
      {
        "default": "",
        "description": "Name to be used on all the resources as identifier",
        "type": "\${string}"
      }
    ],
    "nat_eip_tags": [
      {
        "default": {},
        "description": "Additional tags for the NAT EIP",
        "type": "\${map(string)}"
      }
    ],
    "nat_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the NAT gateways",
        "type": "\${map(string)}"
      }
    ],
    "one_nat_gateway_per_az": [
      {
        "default": false,
        "description": "Should be true if you want only one NAT Gateway per availability zone. Requires \`var.azs\` to be set, and the number of \`public_subnets\` created to be greater than or equal to the number of availability zones specified in \`var.azs\`.",
        "type": "\${bool}"
      }
    ],
    "private_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the private subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "private_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for private subnets",
        "type": "\${bool}"
      }
    ],
    "private_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Private subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "private_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Private subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "private_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the private route tables",
        "type": "\${map(string)}"
      }
    ],
    "private_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on private subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "private_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "private_subnet_suffix": [
      {
        "default": "private",
        "description": "Suffix to append to private subnets name",
        "type": "\${string}"
      }
    ],
    "private_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the private subnets",
        "type": "\${map(string)}"
      }
    ],
    "private_subnets": [
      {
        "default": [],
        "description": "A list of private subnets inside the VPC",
        "type": "\${list(string)}"
      }
    ],
    "propagate_intra_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "propagate_private_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "propagate_public_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "public_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the public subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "public_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for public subnets",
        "type": "\${bool}"
      }
    ],
    "public_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Public subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "public_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Public subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "public_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the public route tables",
        "type": "\${map(string)}"
      }
    ],
    "public_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on public subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "public_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "public_subnet_suffix": [
      {
        "default": "public",
        "description": "Suffix to append to public subnets name",
        "type": "\${string}"
      }
    ],
    "public_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the public subnets",
        "type": "\${map(string)}"
      }
    ],
    "public_subnets": [
      {
        "default": [],
        "description": "A list of public subnets inside the VPC",
        "type": "\${list(string)}"
      }
    ],
    "qldb_session_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for QLDB Session endpoint",
        "type": "\${bool}"
      }
    ],
    "qldb_session_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for QLDB Session endpoint",
        "type": "\${list(string)}"
      }
    ],
    "qldb_session_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for QLDB Session endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "rds_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for RDS endpoint",
        "type": "\${bool}"
      }
    ],
    "rds_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for RDS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "rds_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for RDS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "redshift_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "redshift_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for redshift subnets",
        "type": "\${bool}"
      }
    ],
    "redshift_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Redshift subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "redshift_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Redshift subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "redshift_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift route tables",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on redshift subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "redshift_subnet_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnet group",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "redshift_subnet_suffix": [
      {
        "default": "redshift",
        "description": "Suffix to append to redshift subnets name",
        "type": "\${string}"
      }
    ],
    "redshift_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnets",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnets": [
      {
        "default": [],
        "description": "A list of redshift subnets",
        "type": "\${list(string)}"
      }
    ],
    "rekognition_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "rekognition_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Rekognition endpoint",
        "type": "\${bool}"
      }
    ],
    "rekognition_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Rekognition endpoint",
        "type": "\${list(string)}"
      }
    ],
    "rekognition_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Rekognition endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "reuse_nat_ips": [
      {
        "default": false,
        "description": "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable",
        "type": "\${bool}"
      }
    ],
    "s3_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "s3_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for S3 interface endpoint",
        "type": "\${bool}"
      }
    ],
    "s3_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for S3 interface endpoint",
        "type": "\${list(string)}"
      }
    ],
    "s3_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for S3 interface endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "s3_endpoint_type": [
      {
        "default": "Gateway",
        "description": "S3 VPC endpoint type. Note - S3 Interface type support is only available on AWS provider 3.10 and later",
        "type": "\${string}"
      }
    ],
    "sagemaker_api_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker API endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SageMaker API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SageMaker API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_notebook_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_notebook_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Sagemaker Notebook endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_notebook_endpoint_region": [
      {
        "default": "",
        "description": "Region to use for Sagemaker Notebook endpoint",
        "type": "\${string}"
      }
    ],
    "sagemaker_notebook_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Sagemaker Notebook endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_notebook_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Sagemaker Notebook endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_runtime_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_runtime_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker Runtime endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_runtime_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SageMaker Runtime endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_runtime_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SageMaker Runtime endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "secondary_cidr_blocks": [
      {
        "default": [],
        "description": "List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool",
        "type": "\${list(string)}"
      }
    ],
    "secretsmanager_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "secretsmanager_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Secrets Manager endpoint",
        "type": "\${bool}"
      }
    ],
    "secretsmanager_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Secrets Manager endpoint",
        "type": "\${list(string)}"
      }
    ],
    "secretsmanager_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Secrets Manager endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "servicecatalog_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Service Catalog endpoint",
        "type": "\${bool}"
      }
    ],
    "servicecatalog_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Service Catalog endpoint",
        "type": "\${list(string)}"
      }
    ],
    "servicecatalog_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Service Catalog endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ses_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SES endpoint",
        "type": "\${bool}"
      }
    ],
    "ses_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ses_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "single_nat_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to provision a single shared NAT Gateway across all of your private networks",
        "type": "\${bool}"
      }
    ],
    "sms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SMS endpoint",
        "type": "\${bool}"
      }
    ],
    "sms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SMS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sns_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sns_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SNS endpoint",
        "type": "\${bool}"
      }
    ],
    "sns_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SNS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sns_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SNS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sqs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sqs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SQS endpoint",
        "type": "\${bool}"
      }
    ],
    "sqs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SQS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sqs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SQS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ssm_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SSM endpoint",
        "type": "\${bool}"
      }
    ],
    "ssm_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SSM endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ssm_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SSM endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ssmmessages_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SSMMESSAGES endpoint",
        "type": "\${bool}"
      }
    ],
    "ssmmessages_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SSMMESSAGES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ssmmessages_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SSMMESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "states_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "states_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Step Function endpoint",
        "type": "\${bool}"
      }
    ],
    "states_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Step Function endpoint",
        "type": "\${list(string)}"
      }
    ],
    "states_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Step Function endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "storagegateway_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Storage Gateway endpoint",
        "type": "\${bool}"
      }
    ],
    "storagegateway_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Storage Gateway endpoint",
        "type": "\${list(string)}"
      }
    ],
    "storagegateway_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Storage Gateway endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sts_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sts_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for STS endpoint",
        "type": "\${bool}"
      }
    ],
    "sts_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for STS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sts_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for STS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "tags": [
      {
        "default": {},
        "description": "A map of tags to add to all resources",
        "type": "\${map(string)}"
      }
    ],
    "textract_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Textract endpoint",
        "type": "\${bool}"
      }
    ],
    "textract_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Textract endpoint",
        "type": "\${list(string)}"
      }
    ],
    "textract_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Textract endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "transfer_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer endpoint",
        "type": "\${bool}"
      }
    ],
    "transfer_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Transfer endpoint",
        "type": "\${list(string)}"
      }
    ],
    "transfer_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Transfer endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "transferserver_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer Server endpoint",
        "type": "\${bool}"
      }
    ],
    "transferserver_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Transfer Server endpoint",
        "type": "\${list(string)}"
      }
    ],
    "transferserver_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Transfer Server endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "vpc_endpoint_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC Endpoints",
        "type": "\${map(string)}"
      }
    ],
    "vpc_flow_log_permissions_boundary": [
      {
        "default": null,
        "description": "The ARN of the Permissions Boundary for the VPC Flow Log IAM Role",
        "type": "\${string}"
      }
    ],
    "vpc_flow_log_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC Flow Logs",
        "type": "\${map(string)}"
      }
    ],
    "vpc_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC",
        "type": "\${map(string)}"
      }
    ],
    "vpn_gateway_az": [
      {
        "default": null,
        "description": "The Availability Zone for the VPN Gateway",
        "type": "\${string}"
      }
    ],
    "vpn_gateway_id": [
      {
        "default": "",
        "description": "ID of VPN Gateway to attach to the VPC",
        "type": "\${string}"
      }
    ],
    "vpn_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPN gateway",
        "type": "\${map(string)}"
      }
    ],
    "workspaces_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "workspaces_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Workspaces endpoint",
        "type": "\${bool}"
      }
    ],
    "workspaces_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Workspaces endpoint",
        "type": "\${list(string)}"
      }
    ],
    "workspaces_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Workspaces endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ]
  }
}"
`;

exports[`parse converts VPC module 1`] = `
"{
  "locals": [
    {
      "max_subnet_length": "\${max(\\n    length(var.private_subnets),\\n    length(var.elasticache_subnets),\\n    length(var.database_subnets),\\n    length(var.redshift_subnets),\\n  )}",
      "nat_gateway_count": "\${var.single_nat_gateway ? 1 : var.one_nat_gateway_per_az ? length(var.azs) : local.max_subnet_length}",
      "vpc_id": "\${element(\\n    concat(\\n      aws_vpc_ipv4_cidr_block_association.this.*.vpc_id,\\n      aws_vpc.this.*.id,\\n      [\\"\\"],\\n    ),\\n    0,\\n  )}",
      "vpce_tags": "\${merge(\\n    var.tags,\\n    var.vpc_endpoint_tags,\\n  )}"
    },
    {
      "nat_gateway_ips": "\${split(\\n    \\",\\",\\n    var.reuse_nat_ips ? join(\\",\\", var.external_nat_ip_ids) : join(\\",\\", aws_eip.nat.*.id),\\n  )}"
    }
  ],
  "resource": {
    "aws_customer_gateway": {
      "this": [
        {
          "bgp_asn": "\${each.value[\\"bgp_asn\\"]}",
          "for_each": "\${var.customer_gateways}",
          "ip_address": "\${each.value[\\"ip_address\\"]}",
          "tags": "\${merge(\\n    {\\n      Name = format(\\"%s-%s\\", var.name, each.key)\\n    },\\n    var.tags,\\n    var.customer_gateway_tags,\\n  )}",
          "type": "ipsec.1"
        }
      ]
    },
    "aws_db_subnet_group": {
      "database": [
        {
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 && var.create_database_subnet_group ? 1 : 0}",
          "description": "Database subnet group for \${var.name}",
          "name": "\${lower(var.name)}",
          "subnet_ids": "\${aws_subnet.database.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.database_subnet_group_tags,\\n  )}"
        }
      ]
    },
    "aws_default_network_acl": {
      "this": [
        {
          "count": "\${var.create_vpc && var.manage_default_network_acl ? 1 : 0}",
          "default_network_acl_id": "\${element(concat(aws_vpc.this.*.default_network_acl_id, [\\"\\"]), 0)}",
          "dynamic": {
            "egress": [
              {
                "content": [
                  {
                    "action": "\${egress.value.action}",
                    "cidr_block": "\${lookup(egress.value, \\"cidr_block\\", null)}",
                    "from_port": "\${egress.value.from_port}",
                    "icmp_code": "\${lookup(egress.value, \\"icmp_code\\", null)}",
                    "icmp_type": "\${lookup(egress.value, \\"icmp_type\\", null)}",
                    "ipv6_cidr_block": "\${lookup(egress.value, \\"ipv6_cidr_block\\", null)}",
                    "protocol": "\${egress.value.protocol}",
                    "rule_no": "\${egress.value.rule_no}",
                    "to_port": "\${egress.value.to_port}"
                  }
                ],
                "for_each": "\${var.default_network_acl_egress}"
              }
            ],
            "ingress": [
              {
                "content": [
                  {
                    "action": "\${ingress.value.action}",
                    "cidr_block": "\${lookup(ingress.value, \\"cidr_block\\", null)}",
                    "from_port": "\${ingress.value.from_port}",
                    "icmp_code": "\${lookup(ingress.value, \\"icmp_code\\", null)}",
                    "icmp_type": "\${lookup(ingress.value, \\"icmp_type\\", null)}",
                    "ipv6_cidr_block": "\${lookup(ingress.value, \\"ipv6_cidr_block\\", null)}",
                    "protocol": "\${ingress.value.protocol}",
                    "rule_no": "\${ingress.value.rule_no}",
                    "to_port": "\${ingress.value.to_port}"
                  }
                ],
                "for_each": "\${var.default_network_acl_ingress}"
              }
            ]
          },
          "subnet_ids": "\${setsubtract(\\n    compact(flatten([\\n      aws_subnet.public.*.id,\\n      aws_subnet.private.*.id,\\n      aws_subnet.intra.*.id,\\n      aws_subnet.database.*.id,\\n      aws_subnet.redshift.*.id,\\n      aws_subnet.elasticache.*.id,\\n    ])),\\n    compact(flatten([\\n      aws_network_acl.public.*.subnet_ids,\\n      aws_network_acl.private.*.subnet_ids,\\n      aws_network_acl.intra.*.subnet_ids,\\n      aws_network_acl.database.*.subnet_ids,\\n      aws_network_acl.redshift.*.subnet_ids,\\n      aws_network_acl.elasticache.*.subnet_ids,\\n    ]))\\n  )}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_network_acl_name)\\n    },\\n    var.tags,\\n    var.default_network_acl_tags,\\n  )}"
        }
      ]
    },
    "aws_default_route_table": {
      "default": [
        {
          "count": "\${var.create_vpc && var.manage_default_route_table ? 1 : 0}",
          "default_route_table_id": "\${aws_vpc.this[0].default_route_table_id}",
          "dynamic": {
            "route": [
              {
                "content": [
                  {
                    "cidr_block": "\${route.value.cidr_block}",
                    "egress_only_gateway_id": "\${lookup(route.value, \\"egress_only_gateway_id\\", null)}",
                    "gateway_id": "\${lookup(route.value, \\"gateway_id\\", null)}",
                    "instance_id": "\${lookup(route.value, \\"instance_id\\", null)}",
                    "ipv6_cidr_block": "\${lookup(route.value, \\"ipv6_cidr_block\\", null)}",
                    "nat_gateway_id": "\${lookup(route.value, \\"nat_gateway_id\\", null)}",
                    "network_interface_id": "\${lookup(route.value, \\"network_interface_id\\", null)}",
                    "transit_gateway_id": "\${lookup(route.value, \\"transit_gateway_id\\", null)}",
                    "vpc_peering_connection_id": "\${lookup(route.value, \\"vpc_peering_connection_id\\", null)}"
                  }
                ],
                "for_each": "\${var.default_route_table_routes}"
              }
            ]
          },
          "propagating_vgws": "\${var.default_route_table_propagating_vgws}",
          "tags": "\${merge(\\n    { \\"Name\\" = var.name },\\n    var.tags,\\n    var.default_route_table_tags,\\n  )}"
        }
      ]
    },
    "aws_default_security_group": {
      "this": [
        {
          "count": "\${var.create_vpc && var.manage_default_security_group ? 1 : 0}",
          "dynamic": {
            "egress": [
              {
                "content": [
                  {
                    "cidr_blocks": "\${compact(split(\\",\\", lookup(egress.value, \\"cidr_blocks\\", \\"\\")))}",
                    "description": "\${lookup(egress.value, \\"description\\", null)}",
                    "from_port": "\${lookup(egress.value, \\"from_port\\", 0)}",
                    "ipv6_cidr_blocks": "\${compact(split(\\",\\", lookup(egress.value, \\"ipv6_cidr_blocks\\", \\"\\")))}",
                    "prefix_list_ids": "\${compact(split(\\",\\", lookup(egress.value, \\"prefix_list_ids\\", \\"\\")))}",
                    "protocol": "\${lookup(egress.value, \\"protocol\\", \\"-1\\")}",
                    "security_groups": "\${compact(split(\\",\\", lookup(egress.value, \\"security_groups\\", \\"\\")))}",
                    "self": "\${lookup(egress.value, \\"self\\", null)}",
                    "to_port": "\${lookup(egress.value, \\"to_port\\", 0)}"
                  }
                ],
                "for_each": "\${var.default_security_group_egress}"
              }
            ],
            "ingress": [
              {
                "content": [
                  {
                    "cidr_blocks": "\${compact(split(\\",\\", lookup(ingress.value, \\"cidr_blocks\\", \\"\\")))}",
                    "description": "\${lookup(ingress.value, \\"description\\", null)}",
                    "from_port": "\${lookup(ingress.value, \\"from_port\\", 0)}",
                    "ipv6_cidr_blocks": "\${compact(split(\\",\\", lookup(ingress.value, \\"ipv6_cidr_blocks\\", \\"\\")))}",
                    "prefix_list_ids": "\${compact(split(\\",\\", lookup(ingress.value, \\"prefix_list_ids\\", \\"\\")))}",
                    "protocol": "\${lookup(ingress.value, \\"protocol\\", \\"-1\\")}",
                    "security_groups": "\${compact(split(\\",\\", lookup(ingress.value, \\"security_groups\\", \\"\\")))}",
                    "self": "\${lookup(ingress.value, \\"self\\", null)}",
                    "to_port": "\${lookup(ingress.value, \\"to_port\\", 0)}"
                  }
                ],
                "for_each": "\${var.default_security_group_ingress}"
              }
            ]
          },
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_security_group_name)\\n    },\\n    var.tags,\\n    var.default_security_group_tags,\\n  )}",
          "vpc_id": "\${aws_vpc.this[0].id}"
        }
      ]
    },
    "aws_default_vpc": {
      "this": [
        {
          "count": "\${var.manage_default_vpc ? 1 : 0}",
          "enable_classiclink": "\${var.default_vpc_enable_classiclink}",
          "enable_dns_hostnames": "\${var.default_vpc_enable_dns_hostnames}",
          "enable_dns_support": "\${var.default_vpc_enable_dns_support}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.default_vpc_name)\\n    },\\n    var.tags,\\n    var.default_vpc_tags,\\n  )}"
        }
      ]
    },
    "aws_egress_only_internet_gateway": {
      "this": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 && local.max_subnet_length > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.igw_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_eip": {
      "nat": [
        {
          "count": "\${var.create_vpc && var.enable_nat_gateway && false == var.reuse_nat_ips ? local.nat_gateway_count : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-%s\\",\\n        var.name,\\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\\n      )\\n    },\\n    var.tags,\\n    var.nat_eip_tags,\\n  )}",
          "vpc": true
        }
      ]
    },
    "aws_elasticache_subnet_group": {
      "elasticache": [
        {
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 && var.create_elasticache_subnet_group ? 1 : 0}",
          "description": "ElastiCache subnet group for \${var.name}",
          "name": "\${var.name}",
          "subnet_ids": "\${aws_subnet.elasticache.*.id}"
        }
      ]
    },
    "aws_internet_gateway": {
      "this": [
        {
          "count": "\${var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.igw_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_nat_gateway": {
      "this": [
        {
          "allocation_id": "\${element(\\n    local.nat_gateway_ips,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "count": "\${var.create_vpc && var.enable_nat_gateway ? local.nat_gateway_count : 0}",
          "depends_on": [
            "\${aws_internet_gateway.this}"
          ],
          "subnet_id": "\${element(\\n    aws_subnet.public.*.id,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-%s\\",\\n        var.name,\\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\\n      )\\n    },\\n    var.tags,\\n    var.nat_gateway_tags,\\n  )}"
        }
      ]
    },
    "aws_network_acl": {
      "database": [
        {
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.database.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.database_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.database_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.elasticache.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.elasticache_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.elasticache_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.intra.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.intra_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.intra_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.private.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.private_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.private_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.public.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.public_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.public_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? 1 : 0}",
          "subnet_ids": "\${aws_subnet.redshift.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.redshift_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.redshift_acl_tags,\\n  )}",
          "vpc_id": "\${element(concat(aws_vpc.this.*.id, [\\"\\"]), 0)}"
        }
      ]
    },
    "aws_network_acl_rule": {
      "database_inbound": [
        {
          "cidr_block": "\${lookup(var.database_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? length(var.database_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.database_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.database_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.database_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.database_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.database[0].id}",
          "protocol": "\${var.database_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.database_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.database_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.database_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "database_outbound": [
        {
          "cidr_block": "\${lookup(var.database_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.database_dedicated_network_acl && length(var.database_subnets) > 0 ? length(var.database_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.database_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.database_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.database_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.database_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.database[0].id}",
          "protocol": "\${var.database_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.database_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.database_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.database_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "elasticache_inbound": [
        {
          "cidr_block": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? length(var.elasticache_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.elasticache[0].id}",
          "protocol": "\${var.elasticache_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.elasticache_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.elasticache_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.elasticache_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "elasticache_outbound": [
        {
          "cidr_block": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.elasticache_dedicated_network_acl && length(var.elasticache_subnets) > 0 ? length(var.elasticache_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.elasticache[0].id}",
          "protocol": "\${var.elasticache_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.elasticache_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.elasticache_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.elasticache_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "intra_inbound": [
        {
          "cidr_block": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? length(var.intra_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.intra[0].id}",
          "protocol": "\${var.intra_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.intra_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.intra_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.intra_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "intra_outbound": [
        {
          "cidr_block": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.intra_dedicated_network_acl && length(var.intra_subnets) > 0 ? length(var.intra_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.intra[0].id}",
          "protocol": "\${var.intra_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.intra_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.intra_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.intra_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "private_inbound": [
        {
          "cidr_block": "\${lookup(var.private_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? length(var.private_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.private_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.private_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.private_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.private_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.private[0].id}",
          "protocol": "\${var.private_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.private_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.private_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.private_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "private_outbound": [
        {
          "cidr_block": "\${lookup(var.private_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.private_dedicated_network_acl && length(var.private_subnets) > 0 ? length(var.private_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.private_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.private_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.private_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.private_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.private[0].id}",
          "protocol": "\${var.private_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.private_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.private_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.private_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "public_inbound": [
        {
          "cidr_block": "\${lookup(var.public_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? length(var.public_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.public_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.public_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.public_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.public_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.public[0].id}",
          "protocol": "\${var.public_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.public_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.public_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.public_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "public_outbound": [
        {
          "cidr_block": "\${lookup(var.public_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.public_dedicated_network_acl && length(var.public_subnets) > 0 ? length(var.public_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.public_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.public_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.public_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.public_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.public[0].id}",
          "protocol": "\${var.public_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.public_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.public_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.public_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "redshift_inbound": [
        {
          "cidr_block": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? length(var.redshift_inbound_acl_rules) : 0}",
          "egress": false,
          "from_port": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.redshift[0].id}",
          "protocol": "\${var.redshift_inbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.redshift_inbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.redshift_inbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.redshift_inbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ],
      "redshift_outbound": [
        {
          "cidr_block": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"cidr_block\\", null)}",
          "count": "\${var.create_vpc && var.redshift_dedicated_network_acl && length(var.redshift_subnets) > 0 ? length(var.redshift_outbound_acl_rules) : 0}",
          "egress": true,
          "from_port": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"from_port\\", null)}",
          "icmp_code": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"icmp_code\\", null)}",
          "icmp_type": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"icmp_type\\", null)}",
          "ipv6_cidr_block": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"ipv6_cidr_block\\", null)}",
          "network_acl_id": "\${aws_network_acl.redshift[0].id}",
          "protocol": "\${var.redshift_outbound_acl_rules[count.index][\\"protocol\\"]}",
          "rule_action": "\${var.redshift_outbound_acl_rules[count.index][\\"rule_action\\"]}",
          "rule_number": "\${var.redshift_outbound_acl_rules[count.index][\\"rule_number\\"]}",
          "to_port": "\${lookup(var.redshift_outbound_acl_rules[count.index], \\"to_port\\", null)}"
        }
      ]
    },
    "aws_redshift_subnet_group": {
      "redshift": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && var.create_redshift_subnet_group ? 1 : 0}",
          "description": "Redshift subnet group for \${var.name}",
          "name": "\${lower(var.name)}",
          "subnet_ids": "\${aws_subnet.redshift.*.id}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.redshift_subnet_group_tags,\\n  )}"
        }
      ]
    },
    "aws_route": {
      "database_internet_gateway": [
        {
          "count": "\${var.create_vpc && var.create_igw && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && var.create_database_internet_gateway_route && false == var.create_database_nat_gateway_route ? 1 : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.database[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "database_ipv6_egress": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && var.create_database_internet_gateway_route ? 1 : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "egress_only_gateway_id": "\${aws_egress_only_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.database[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "database_nat_gateway": [
        {
          "count": "\${var.create_vpc && var.create_database_subnet_route_table && length(var.database_subnets) > 0 && false == var.create_database_internet_gateway_route && var.create_database_nat_gateway_route && var.enable_nat_gateway ? var.single_nat_gateway ? 1 : length(var.database_subnets) : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "nat_gateway_id": "\${element(aws_nat_gateway.this.*.id, count.index)}",
          "route_table_id": "\${element(aws_route_table.database.*.id, count.index)}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "private_ipv6_egress": [
        {
          "count": "\${var.create_vpc && var.create_egress_only_igw && var.enable_ipv6 ? length(var.private_subnets) : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "egress_only_gateway_id": "\${element(aws_egress_only_internet_gateway.this.*.id, 0)}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}"
        }
      ],
      "private_nat_gateway": [
        {
          "count": "\${var.create_vpc && var.enable_nat_gateway ? local.nat_gateway_count : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "nat_gateway_id": "\${element(aws_nat_gateway.this.*.id, count.index)}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "public_internet_gateway": [
        {
          "count": "\${var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0}",
          "destination_cidr_block": "0.0.0.0/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.public[0].id}",
          "timeouts": [
            {
              "create": "5m"
            }
          ]
        }
      ],
      "public_internet_gateway_ipv6": [
        {
          "count": "\${var.create_vpc && var.create_igw && var.enable_ipv6 && length(var.public_subnets) > 0 ? 1 : 0}",
          "destination_ipv6_cidr_block": "::/0",
          "gateway_id": "\${aws_internet_gateway.this[0].id}",
          "route_table_id": "\${aws_route_table.public[0].id}"
        }
      ]
    },
    "aws_route_table": {
      "database": [
        {
          "count": "\${var.create_vpc && var.create_database_subnet_route_table && length(var.database_subnets) > 0 ? var.single_nat_gateway || var.create_database_internet_gateway_route ? 1 : length(var.database_subnets) : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = var.single_nat_gateway || var.create_database_internet_gateway_route ? \\"\${var.name}-\${var.database_subnet_suffix}\\" : format(\\n        \\"%s-\${var.database_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.database_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && var.create_elasticache_subnet_route_table && length(var.elasticache_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.elasticache_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.elasticache_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.intra_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.intra_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && local.max_subnet_length > 0 ? local.nat_gateway_count : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = var.single_nat_gateway ? \\"\${var.name}-\${var.private_subnet_suffix}\\" : format(\\n        \\"%s-\${var.private_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.private_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s-\${var.public_subnet_suffix}\\", var.name)\\n    },\\n    var.tags,\\n    var.public_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && var.create_redshift_subnet_route_table && length(var.redshift_subnets) > 0 ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = \\"\${var.name}-\${var.redshift_subnet_suffix}\\"\\n    },\\n    var.tags,\\n    var.redshift_route_table_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_route_table_association": {
      "database": [
        {
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 ? length(var.database_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.database.*.id, aws_route_table.private.*.id),\\n    var.create_database_subnet_route_table ? var.single_nat_gateway || var.create_database_internet_gateway_route ? 0 : count.index : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.database.*.id, count.index)}"
        }
      ],
      "elasticache": [
        {
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 ? length(var.elasticache_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(\\n      aws_route_table.elasticache.*.id,\\n      aws_route_table.private.*.id,\\n    ),\\n    var.single_nat_gateway || var.create_elasticache_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.elasticache.*.id, count.index)}"
        }
      ],
      "intra": [
        {
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? length(var.intra_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.intra.*.id, 0)}",
          "subnet_id": "\${element(aws_subnet.intra.*.id, count.index)}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && length(var.private_subnets) > 0 ? length(var.private_subnets) : 0}",
          "route_table_id": "\${element(\\n    aws_route_table.private.*.id,\\n    var.single_nat_gateway ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.private.*.id, count.index)}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 ? length(var.public_subnets) : 0}",
          "route_table_id": "\${aws_route_table.public[0].id}",
          "subnet_id": "\${element(aws_subnet.public.*.id, count.index)}"
        }
      ],
      "redshift": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && false == var.enable_public_redshift ? length(var.redshift_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.redshift.*.id, aws_route_table.private.*.id),\\n    var.single_nat_gateway || var.create_redshift_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.redshift.*.id, count.index)}"
        }
      ],
      "redshift_public": [
        {
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 && var.enable_public_redshift ? length(var.redshift_subnets) : 0}",
          "route_table_id": "\${element(\\n    coalescelist(aws_route_table.redshift.*.id, aws_route_table.public.*.id),\\n    var.single_nat_gateway || var.create_redshift_subnet_route_table ? 0 : count.index,\\n  )}",
          "subnet_id": "\${element(aws_subnet.redshift.*.id, count.index)}"
        }
      ]
    },
    "aws_subnet": {
      "database": [
        {
          "assign_ipv6_address_on_creation": "\${var.database_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.database_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.database_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.database_subnets) > 0 ? length(var.database_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.database_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.database_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.database_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.database_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "elasticache": [
        {
          "assign_ipv6_address_on_creation": "\${var.elasticache_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.elasticache_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.elasticache_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.elasticache_subnets) > 0 ? length(var.elasticache_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.elasticache_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.elasticache_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.elasticache_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.elasticache_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "intra": [
        {
          "assign_ipv6_address_on_creation": "\${var.intra_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.intra_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.intra_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.intra_subnets) > 0 ? length(var.intra_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.intra_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.intra_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.intra_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.intra_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "private": [
        {
          "assign_ipv6_address_on_creation": "\${var.private_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.private_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.private_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.private_subnets) > 0 ? length(var.private_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.private_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.private_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.private_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.private_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "public": [
        {
          "assign_ipv6_address_on_creation": "\${var.public_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.public_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${element(concat(var.public_subnets, [\\"\\"]), count.index)}",
          "count": "\${var.create_vpc && length(var.public_subnets) > 0 && (false == var.one_nat_gateway_per_az || length(var.public_subnets) >= length(var.azs)) ? length(var.public_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.public_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.public_subnet_ipv6_prefixes[count.index]) : null}",
          "map_public_ip_on_launch": "\${var.map_public_ip_on_launch}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.public_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.public_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ],
      "redshift": [
        {
          "assign_ipv6_address_on_creation": "\${var.redshift_subnet_assign_ipv6_address_on_creation == null ? var.assign_ipv6_address_on_creation : var.redshift_subnet_assign_ipv6_address_on_creation}",
          "availability_zone": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) > 0 ? element(var.azs, count.index) : null}",
          "availability_zone_id": "\${length(regexall(\\"^[a-z]{2}-\\", element(var.azs, count.index))) == 0 ? element(var.azs, count.index) : null}",
          "cidr_block": "\${var.redshift_subnets[count.index]}",
          "count": "\${var.create_vpc && length(var.redshift_subnets) > 0 ? length(var.redshift_subnets) : 0}",
          "ipv6_cidr_block": "\${var.enable_ipv6 && length(var.redshift_subnet_ipv6_prefixes) > 0 ? cidrsubnet(aws_vpc.this[0].ipv6_cidr_block, 8, var.redshift_subnet_ipv6_prefixes[count.index]) : null}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\n        \\"%s-\${var.redshift_subnet_suffix}-%s\\",\\n        var.name,\\n        element(var.azs, count.index),\\n      )\\n    },\\n    var.tags,\\n    var.redshift_subnet_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpc": {
      "this": [
        {
          "assign_generated_ipv6_cidr_block": "\${var.enable_ipv6}",
          "cidr_block": "\${var.cidr}",
          "count": "\${var.create_vpc ? 1 : 0}",
          "enable_classiclink": "\${var.enable_classiclink}",
          "enable_classiclink_dns_support": "\${var.enable_classiclink_dns_support}",
          "enable_dns_hostnames": "\${var.enable_dns_hostnames}",
          "enable_dns_support": "\${var.enable_dns_support}",
          "instance_tenancy": "\${var.instance_tenancy}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.vpc_tags,\\n  )}"
        }
      ]
    },
    "aws_vpc_dhcp_options": {
      "this": [
        {
          "count": "\${var.create_vpc && var.enable_dhcp_options ? 1 : 0}",
          "domain_name": "\${var.dhcp_options_domain_name}",
          "domain_name_servers": "\${var.dhcp_options_domain_name_servers}",
          "netbios_name_servers": "\${var.dhcp_options_netbios_name_servers}",
          "netbios_node_type": "\${var.dhcp_options_netbios_node_type}",
          "ntp_servers": "\${var.dhcp_options_ntp_servers}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.dhcp_options_tags,\\n  )}"
        }
      ]
    },
    "aws_vpc_dhcp_options_association": {
      "this": [
        {
          "count": "\${var.create_vpc && var.enable_dhcp_options ? 1 : 0}",
          "dhcp_options_id": "\${aws_vpc_dhcp_options.this[0].id}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpc_ipv4_cidr_block_association": {
      "this": [
        {
          "cidr_block": "\${element(var.secondary_cidr_blocks, count.index)}",
          "count": "\${var.create_vpc && length(var.secondary_cidr_blocks) > 0 ? length(var.secondary_cidr_blocks) : 0}",
          "vpc_id": "\${aws_vpc.this[0].id}"
        }
      ]
    },
    "aws_vpn_gateway": {
      "this": [
        {
          "amazon_side_asn": "\${var.amazon_side_asn}",
          "availability_zone": "\${var.vpn_gateway_az}",
          "count": "\${var.create_vpc && var.enable_vpn_gateway ? 1 : 0}",
          "tags": "\${merge(\\n    {\\n      \\"Name\\" = format(\\"%s\\", var.name)\\n    },\\n    var.tags,\\n    var.vpn_gateway_tags,\\n  )}",
          "vpc_id": "\${local.vpc_id}"
        }
      ]
    },
    "aws_vpn_gateway_attachment": {
      "this": [
        {
          "count": "\${var.vpn_gateway_id != \\"\\" ? 1 : 0}",
          "vpc_id": "\${local.vpc_id}",
          "vpn_gateway_id": "\${var.vpn_gateway_id}"
        }
      ]
    },
    "aws_vpn_gateway_route_propagation": {
      "intra": [
        {
          "count": "\${var.create_vpc && var.propagate_intra_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? length(var.intra_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.intra.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ],
      "private": [
        {
          "count": "\${var.create_vpc && var.propagate_private_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? length(var.private_subnets) : 0}",
          "route_table_id": "\${element(aws_route_table.private.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ],
      "public": [
        {
          "count": "\${var.create_vpc && var.propagate_public_route_tables_vgw && (var.enable_vpn_gateway || var.vpn_gateway_id != \\"\\") ? 1 : 0}",
          "route_table_id": "\${element(aws_route_table.public.*.id, count.index)}",
          "vpn_gateway_id": "\${element(\\n    concat(\\n      aws_vpn_gateway.this.*.id,\\n      aws_vpn_gateway_attachment.this.*.vpn_gateway_id,\\n    ),\\n    count.index,\\n  )}"
        }
      ]
    }
  },
  "variable": {
    "access_analyzer_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "access_analyzer_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Access Analyzer endpoint",
        "type": "\${bool}"
      }
    ],
    "access_analyzer_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Access Analyzer endpoint",
        "type": "\${list(string)}"
      }
    ],
    "access_analyzer_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Access Analyzer endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "acm_pca_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "acm_pca_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ACM PCA endpoint",
        "type": "\${bool}"
      }
    ],
    "acm_pca_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ACM PCA endpoint",
        "type": "\${list(string)}"
      }
    ],
    "acm_pca_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ACM PCA endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "amazon_side_asn": [
      {
        "default": "64512",
        "description": "The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN.",
        "type": "\${string}"
      }
    ],
    "apigw_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "apigw_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for API GW endpoint",
        "type": "\${bool}"
      }
    ],
    "apigw_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for API GW  endpoint",
        "type": "\${list(string)}"
      }
    ],
    "apigw_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for API GW endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appmesh_envoy_management_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppMesh endpoint",
        "type": "\${bool}"
      }
    ],
    "appmesh_envoy_management_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppMesh endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appmesh_envoy_management_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppMesh endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appstream_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream API endpoint",
        "type": "\${bool}"
      }
    ],
    "appstream_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppStream API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appstream_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppStream API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "appstream_streaming_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream Streaming endpoint",
        "type": "\${bool}"
      }
    ],
    "appstream_streaming_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for AppStream Streaming endpoint",
        "type": "\${list(string)}"
      }
    ],
    "appstream_streaming_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for AppStream Streaming endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "assign_ipv6_address_on_creation": [
      {
        "default": false,
        "description": "Assign IPv6 address on subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "athena_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "athena_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Athena endpoint",
        "type": "\${bool}"
      }
    ],
    "athena_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Athena endpoint",
        "type": "\${list(string)}"
      }
    ],
    "athena_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Athena endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "auto_scaling_plans_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "auto_scaling_plans_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Auto Scaling Plans endpoint",
        "type": "\${bool}"
      }
    ],
    "auto_scaling_plans_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Auto Scaling Plans endpoint",
        "type": "\${list(string)}"
      }
    ],
    "auto_scaling_plans_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Auto Scaling Plans endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "azs": [
      {
        "default": [],
        "description": "A list of availability zones names or ids in the region",
        "type": "\${list(string)}"
      }
    ],
    "cidr": [
      {
        "default": "0.0.0.0/0",
        "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
        "type": "\${string}"
      }
    ],
    "cloud_directory_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "cloud_directory_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Cloud Directory endpoint",
        "type": "\${bool}"
      }
    ],
    "cloud_directory_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Cloud Directory endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloud_directory_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Cloud Directory endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "cloudformation_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Cloudformation endpoint",
        "type": "\${bool}"
      }
    ],
    "cloudformation_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Cloudformation endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloudformation_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Cloudformation endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "cloudtrail_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudTrail endpoint",
        "type": "\${bool}"
      }
    ],
    "cloudtrail_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudTrail endpoint",
        "type": "\${list(string)}"
      }
    ],
    "cloudtrail_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudTrail endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact API endpoint",
        "type": "\${bool}"
      }
    ],
    "codeartifact_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codeartifact API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codeartifact API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_repositories_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact repositories endpoint",
        "type": "\${bool}"
      }
    ],
    "codeartifact_repositories_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codeartifact repositories endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codeartifact_repositories_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codeartifact repositories endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codebuild_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "codebuild_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codebuild endpoint",
        "type": "\${bool}"
      }
    ],
    "codebuild_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codebuild endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codebuild_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codebuilt endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codecommit_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "codecommit_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Codecommit endpoint",
        "type": "\${bool}"
      }
    ],
    "codecommit_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Codecommit endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codecommit_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_commands_secure_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy Commands Secure endpoint",
        "type": "\${bool}"
      }
    ],
    "codedeploy_commands_secure_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodeDeploy Commands Secure endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_commands_secure_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodeDeploy Commands Secure endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy endpoint",
        "type": "\${bool}"
      }
    ],
    "codedeploy_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodeDeploy endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codedeploy_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodeDeploy endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "codepipeline_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CodePipeline endpoint",
        "type": "\${bool}"
      }
    ],
    "codepipeline_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CodePipeline endpoint",
        "type": "\${list(string)}"
      }
    ],
    "codepipeline_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CodePipeline endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "config_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for config endpoint",
        "type": "\${bool}"
      }
    ],
    "config_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for config endpoint",
        "type": "\${list(string)}"
      }
    ],
    "config_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for config endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "create_database_internet_gateway_route": [
      {
        "default": false,
        "description": "Controls if an internet gateway route for public database access should be created",
        "type": "\${bool}"
      }
    ],
    "create_database_nat_gateway_route": [
      {
        "default": false,
        "description": "Controls if a nat gateway route should be created to give internet access to the database subnets",
        "type": "\${bool}"
      }
    ],
    "create_database_subnet_group": [
      {
        "default": true,
        "description": "Controls if database subnet group should be created (n.b. database_subnets must also be set)",
        "type": "\${bool}"
      }
    ],
    "create_database_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for database should be created",
        "type": "\${bool}"
      }
    ],
    "create_egress_only_igw": [
      {
        "default": true,
        "description": "Controls if an Egress Only Internet Gateway is created and its related routes.",
        "type": "\${bool}"
      }
    ],
    "create_elasticache_subnet_group": [
      {
        "default": true,
        "description": "Controls if elasticache subnet group should be created",
        "type": "\${bool}"
      }
    ],
    "create_elasticache_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for elasticache should be created",
        "type": "\${bool}"
      }
    ],
    "create_flow_log_cloudwatch_iam_role": [
      {
        "default": false,
        "description": "Whether to create IAM role for VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "create_flow_log_cloudwatch_log_group": [
      {
        "default": false,
        "description": "Whether to create CloudWatch log group for VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "create_igw": [
      {
        "default": true,
        "description": "Controls if an Internet Gateway is created for public subnets and the related routes that connect them.",
        "type": "\${bool}"
      }
    ],
    "create_redshift_subnet_group": [
      {
        "default": true,
        "description": "Controls if redshift subnet group should be created",
        "type": "\${bool}"
      }
    ],
    "create_redshift_subnet_route_table": [
      {
        "default": false,
        "description": "Controls if separate route table for redshift should be created",
        "type": "\${bool}"
      }
    ],
    "create_vpc": [
      {
        "default": true,
        "description": "Controls if VPC should be created (it affects almost all resources)",
        "type": "\${bool}"
      }
    ],
    "customer_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the Customer Gateway",
        "type": "\${map(string)}"
      }
    ],
    "customer_gateways": [
      {
        "default": {},
        "description": "Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)",
        "type": "\${map(map(any))}"
      }
    ],
    "database_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "database_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for database subnets",
        "type": "\${bool}"
      }
    ],
    "database_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Database subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "database_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Database subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "database_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the database route tables",
        "type": "\${map(string)}"
      }
    ],
    "database_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on database subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "database_subnet_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnet group",
        "type": "\${map(string)}"
      }
    ],
    "database_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "database_subnet_suffix": [
      {
        "default": "db",
        "description": "Suffix to append to database subnets name",
        "type": "\${string}"
      }
    ],
    "database_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the database subnets",
        "type": "\${map(string)}"
      }
    ],
    "database_subnets": [
      {
        "default": [],
        "description": "A list of database subnets",
        "type": "\${list(string)}"
      }
    ],
    "datasync_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Data Sync endpoint",
        "type": "\${bool}"
      }
    ],
    "datasync_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Data Sync endpoint",
        "type": "\${list(string)}"
      }
    ],
    "datasync_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Data Sync endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "default_network_acl_egress": [
      {
        "default": [
          {
            "action": "allow",
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_no": 100,
            "to_port": 0
          },
          {
            "action": "allow",
            "from_port": 0,
            "ipv6_cidr_block": "::/0",
            "protocol": "-1",
            "rule_no": 101,
            "to_port": 0
          }
        ],
        "description": "List of maps of egress rules to set on the Default Network ACL",
        "type": "\${list(map(string))}"
      }
    ],
    "default_network_acl_ingress": [
      {
        "default": [
          {
            "action": "allow",
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_no": 100,
            "to_port": 0
          },
          {
            "action": "allow",
            "from_port": 0,
            "ipv6_cidr_block": "::/0",
            "protocol": "-1",
            "rule_no": 101,
            "to_port": 0
          }
        ],
        "description": "List of maps of ingress rules to set on the Default Network ACL",
        "type": "\${list(map(string))}"
      }
    ],
    "default_network_acl_name": [
      {
        "default": "",
        "description": "Name to be used on the Default Network ACL",
        "type": "\${string}"
      }
    ],
    "default_network_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the Default Network ACL",
        "type": "\${map(string)}"
      }
    ],
    "default_route_table_propagating_vgws": [
      {
        "default": [],
        "description": "List of virtual gateways for propagation",
        "type": "\${list(string)}"
      }
    ],
    "default_route_table_routes": [
      {
        "default": [],
        "description": "Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route",
        "type": "\${list(map(string))}"
      }
    ],
    "default_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the default route table",
        "type": "\${map(string)}"
      }
    ],
    "default_security_group_egress": [
      {
        "default": null,
        "description": "List of maps of egress rules to set on the default security group",
        "type": "\${list(map(string))}"
      }
    ],
    "default_security_group_ingress": [
      {
        "default": null,
        "description": "List of maps of ingress rules to set on the default security group",
        "type": "\${list(map(string))}"
      }
    ],
    "default_security_group_name": [
      {
        "default": "default",
        "description": "Name to be used on the default security group",
        "type": "\${string}"
      }
    ],
    "default_security_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the default security group",
        "type": "\${map(string)}"
      }
    ],
    "default_vpc_enable_classiclink": [
      {
        "default": false,
        "description": "Should be true to enable ClassicLink in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_enable_dns_hostnames": [
      {
        "default": false,
        "description": "Should be true to enable DNS hostnames in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_enable_dns_support": [
      {
        "default": true,
        "description": "Should be true to enable DNS support in the Default VPC",
        "type": "\${bool}"
      }
    ],
    "default_vpc_name": [
      {
        "default": "",
        "description": "Name to be used on the Default VPC",
        "type": "\${string}"
      }
    ],
    "default_vpc_tags": [
      {
        "default": {},
        "description": "Additional tags for the Default VPC",
        "type": "\${map(string)}"
      }
    ],
    "dhcp_options_domain_name": [
      {
        "default": "",
        "description": "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${string}"
      }
    ],
    "dhcp_options_domain_name_servers": [
      {
        "default": [
          "AmazonProvidedDNS"
        ],
        "description": "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_netbios_name_servers": [
      {
        "default": [],
        "description": "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_netbios_node_type": [
      {
        "default": "",
        "description": "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${string}"
      }
    ],
    "dhcp_options_ntp_servers": [
      {
        "default": [],
        "description": "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)",
        "type": "\${list(string)}"
      }
    ],
    "dhcp_options_tags": [
      {
        "default": {},
        "description": "Additional tags for the DHCP option set (requires enable_dhcp_options set to true)",
        "type": "\${map(string)}"
      }
    ],
    "dms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for DMS endpoint",
        "type": "\${bool}"
      }
    ],
    "dms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for DMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "dms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for DMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "dynamodb_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for DynamoDB interface endpoint",
        "type": "\${bool}"
      }
    ],
    "dynamodb_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for DynamoDB interface endpoint",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for DynamoDB interface endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "dynamodb_endpoint_type": [
      {
        "default": "Gateway",
        "description": "DynamoDB VPC endpoint type. Note - DynamoDB Interface type support is not yet available",
        "type": "\${string}"
      }
    ],
    "ebs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EBS endpoint",
        "type": "\${bool}"
      }
    ],
    "ebs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EBS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ebs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EBS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2_autoscaling_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ec2_autoscaling_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 Autoscaling endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2_autoscaling_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2 Autoscaling endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2_autoscaling_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2 Autoscaling endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ec2_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2 endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2 endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ec2messages_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2MESSAGES endpoint",
        "type": "\${bool}"
      }
    ],
    "ec2messages_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EC2MESSAGES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ec2messages_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EC2MESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecr_api_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ecr_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR API endpoint",
        "type": "\${bool}"
      }
    ],
    "ecr_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECR API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecr_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECR api endpoint. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecr_dkr_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "ecr_dkr_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR DKR endpoint",
        "type": "\${bool}"
      }
    ],
    "ecr_dkr_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECR DKR endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecr_dkr_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECR dkr endpoint. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_agent_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Agent endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_agent_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS Agent endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_agent_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS Agent endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ecs_telemetry_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Telemetry endpoint",
        "type": "\${bool}"
      }
    ],
    "ecs_telemetry_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for ECS Telemetry endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ecs_telemetry_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for ECS Telemetry endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "efs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "efs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EFS endpoint",
        "type": "\${bool}"
      }
    ],
    "efs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EFS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "efs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EFS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elastic_inference_runtime_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Inference Runtime endpoint",
        "type": "\${bool}"
      }
    ],
    "elastic_inference_runtime_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Inference Runtime endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elastic_inference_runtime_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Inference Runtime endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticache_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets",
        "type": "\${bool}"
      }
    ],
    "elasticache_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Elasticache subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "elasticache_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Elasticache subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "elasticache_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache route tables",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on elasticache subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "elasticache_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "elasticache_subnet_suffix": [
      {
        "default": "elasticache",
        "description": "Suffix to append to elasticache subnets name",
        "type": "\${string}"
      }
    ],
    "elasticache_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the elasticache subnets",
        "type": "\${map(string)}"
      }
    ],
    "elasticache_subnets": [
      {
        "default": [],
        "description": "A list of elasticache subnets",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "elasticbeanstalk_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticbeanstalk_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_health_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk Health endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticbeanstalk_health_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk Health endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticbeanstalk_health_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk Health endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "elasticloadbalancing_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "elasticloadbalancing_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Load Balancing endpoint",
        "type": "\${bool}"
      }
    ],
    "elasticloadbalancing_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Elastic Load Balancing endpoint",
        "type": "\${list(string)}"
      }
    ],
    "elasticloadbalancing_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Elastic Load Balancing endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "emr_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "emr_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for EMR endpoint",
        "type": "\${bool}"
      }
    ],
    "emr_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for EMR endpoint",
        "type": "\${list(string)}"
      }
    ],
    "emr_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for EMR endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "enable_access_analyzer_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Access Analyzer endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_acm_pca_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ACM PCA endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_apigw_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an api gateway endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appmesh_envoy_management_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppMesh endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appstream_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppStream API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_appstream_streaming_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a AppStream Streaming endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_athena_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Athena endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_auto_scaling_plans_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Auto Scaling Plans endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_classiclink": [
      {
        "default": null,
        "description": "Should be true to enable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic.",
        "type": "\${bool}"
      }
    ],
    "enable_classiclink_dns_support": [
      {
        "default": null,
        "description": "Should be true to enable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic.",
        "type": "\${bool}"
      }
    ],
    "enable_cloud_directory_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Cloud Directory endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_cloudformation_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Cloudformation endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_cloudtrail_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudTrail endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codeartifact_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codeartifact API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codeartifact_repositories_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codeartifact repositories endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codebuild_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codebuild endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codecommit_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Codecommit endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codedeploy_commands_secure_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an CodeDeploy Commands Secure endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codedeploy_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an CodeDeploy endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_codepipeline_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CodePipeline endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_config_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an config endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_datasync_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Data Sync endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dhcp_options": [
      {
        "default": false,
        "description": "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type",
        "type": "\${bool}"
      }
    ],
    "enable_dms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a DMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dns_hostnames": [
      {
        "default": false,
        "description": "Should be true to enable DNS hostnames in the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dns_support": [
      {
        "default": true,
        "description": "Should be true to enable DNS support in the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_dynamodb_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a DynamoDB endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ebs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EBS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2_autoscaling_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2 Autoscaling endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2 endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ec2messages_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EC2MESSAGES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecr_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ecr api endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecr_dkr_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an ecr dkr endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_agent_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS Agent endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ecs_telemetry_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a ECS Telemetry endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_efs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EFS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elastic_inference_runtime_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Elastic Inference Runtime endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticbeanstalk_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Beanstalk endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticbeanstalk_health_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Beanstalk Health endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_elasticloadbalancing_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Elastic Load Balancing endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_emr_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an EMR endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_events_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Events endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_flow_log": [
      {
        "default": false,
        "description": "Whether or not to enable VPC Flow Logs",
        "type": "\${bool}"
      }
    ],
    "enable_git_codecommit_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Git Codecommit endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_glue_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Glue endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ipv6": [
      {
        "default": false,
        "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
        "type": "\${bool}"
      }
    ],
    "enable_kinesis_firehose_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Kinesis Firehose endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_kinesis_streams_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Kinesis Streams endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_kms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a KMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_lambda_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Lambda endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_logs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Logs endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_monitoring_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a CloudWatch Monitoring endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_nat_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to provision NAT Gateways for each of your private networks",
        "type": "\${bool}"
      }
    ],
    "enable_public_redshift": [
      {
        "default": false,
        "description": "Controls if redshift should have public routing table",
        "type": "\${bool}"
      }
    ],
    "enable_public_s3_endpoint": [
      {
        "default": true,
        "description": "Whether to enable S3 VPC Endpoint for public subnets",
        "type": "\${bool}"
      }
    ],
    "enable_qldb_session_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an QLDB Session endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_rds_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an RDS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_rekognition_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Rekognition endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_s3_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an S3 endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_api_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SageMaker API endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_notebook_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Sagemaker Notebook endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sagemaker_runtime_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SageMaker Runtime endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_secretsmanager_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Secrets Manager endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_servicecatalog_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Service Catalog endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ses_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sms_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SMS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sns_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SNS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sqs_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SQS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ssm_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an SSM endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_ssmmessages_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a SSMMESSAGES endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_states_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Step Function endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_storagegateway_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Storage Gateway endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_sts_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a STS endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_textract_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Textract endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_transfer_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Transfer endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_transferserver_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision a Transfer Server endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_vpn_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to create a new VPN Gateway resource and attach it to the VPC",
        "type": "\${bool}"
      }
    ],
    "enable_workspaces_endpoint": [
      {
        "default": false,
        "description": "Should be true if you want to provision an Workspaces endpoint to the VPC",
        "type": "\${bool}"
      }
    ],
    "events_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "events_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Events endpoint",
        "type": "\${bool}"
      }
    ],
    "events_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Events endpoint",
        "type": "\${list(string)}"
      }
    ],
    "events_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Events endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "external_nat_ip_ids": [
      {
        "default": [],
        "description": "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)",
        "type": "\${list(string)}"
      }
    ],
    "external_nat_ips": [
      {
        "default": [],
        "description": "List of EIPs to be used for \`nat_public_ips\` output (used in combination with reuse_nat_ips and external_nat_ip_ids)",
        "type": "\${list(string)}"
      }
    ],
    "flow_log_cloudwatch_iam_role_arn": [
      {
        "default": "",
        "description": "The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_kms_key_id": [
      {
        "default": null,
        "description": "The ARN of the KMS Key to use when encrypting log data for VPC flow logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_name_prefix": [
      {
        "default": "/aws/vpc-flow-log/",
        "description": "Specifies the name prefix of CloudWatch Log Group for VPC flow logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_cloudwatch_log_group_retention_in_days": [
      {
        "default": null,
        "description": "Specifies the number of days you want to retain log events in the specified log group for VPC flow logs.",
        "type": "\${number}"
      }
    ],
    "flow_log_destination_arn": [
      {
        "default": "",
        "description": "The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided.",
        "type": "\${string}"
      }
    ],
    "flow_log_destination_type": [
      {
        "default": "cloud-watch-logs",
        "description": "Type of flow log destination. Can be s3 or cloud-watch-logs.",
        "type": "\${string}"
      }
    ],
    "flow_log_log_format": [
      {
        "default": null,
        "description": "The fields to include in the flow log record, in the order in which they should appear.",
        "type": "\${string}"
      }
    ],
    "flow_log_max_aggregation_interval": [
      {
        "default": 600,
        "description": "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: \`60\` seconds or \`600\` seconds.",
        "type": "\${number}"
      }
    ],
    "flow_log_traffic_type": [
      {
        "default": "ALL",
        "description": "The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL.",
        "type": "\${string}"
      }
    ],
    "git_codecommit_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Git Codecommit endpoint",
        "type": "\${bool}"
      }
    ],
    "git_codecommit_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Git Codecommit endpoint",
        "type": "\${list(string)}"
      }
    ],
    "git_codecommit_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Git Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "glue_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Glue endpoint",
        "type": "\${bool}"
      }
    ],
    "glue_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Glue endpoint",
        "type": "\${list(string)}"
      }
    ],
    "glue_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Glue endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "igw_tags": [
      {
        "default": {},
        "description": "Additional tags for the internet gateway",
        "type": "\${map(string)}"
      }
    ],
    "instance_tenancy": [
      {
        "default": "default",
        "description": "A tenancy option for instances launched into the VPC",
        "type": "\${string}"
      }
    ],
    "intra_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "intra_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for intra subnets",
        "type": "\${bool}"
      }
    ],
    "intra_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Intra subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "intra_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Intra subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "intra_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra route tables",
        "type": "\${map(string)}"
      }
    ],
    "intra_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on intra subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "intra_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "intra_subnet_suffix": [
      {
        "default": "intra",
        "description": "Suffix to append to intra subnets name",
        "type": "\${string}"
      }
    ],
    "intra_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the intra subnets",
        "type": "\${map(string)}"
      }
    ],
    "intra_subnets": [
      {
        "default": [],
        "description": "A list of intra subnets",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_firehose_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kinesis_firehose_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Firehose endpoint",
        "type": "\${bool}"
      }
    ],
    "kinesis_firehose_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Kinesis Firehose endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_firehose_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Kinesis Firehose endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_streams_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kinesis_streams_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Streams endpoint",
        "type": "\${bool}"
      }
    ],
    "kinesis_streams_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Kinesis Streams endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kinesis_streams_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Kinesis Streams endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "kms_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "kms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for KMS endpoint",
        "type": "\${bool}"
      }
    ],
    "kms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for KMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "kms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for KMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "lambda_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Lambda endpoint",
        "type": "\${bool}"
      }
    ],
    "lambda_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Lambda endpoint",
        "type": "\${list(string)}"
      }
    ],
    "lambda_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Lambda endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "logs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "logs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Logs endpoint",
        "type": "\${bool}"
      }
    ],
    "logs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Logs endpoint",
        "type": "\${list(string)}"
      }
    ],
    "logs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Logs endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "manage_default_network_acl": [
      {
        "default": false,
        "description": "Should be true to adopt and manage Default Network ACL",
        "type": "\${bool}"
      }
    ],
    "manage_default_route_table": [
      {
        "default": false,
        "description": "Should be true to manage default route table",
        "type": "\${bool}"
      }
    ],
    "manage_default_security_group": [
      {
        "default": false,
        "description": "Should be true to adopt and manage default security group",
        "type": "\${bool}"
      }
    ],
    "manage_default_vpc": [
      {
        "default": false,
        "description": "Should be true to adopt and manage Default VPC",
        "type": "\${bool}"
      }
    ],
    "map_public_ip_on_launch": [
      {
        "default": true,
        "description": "Should be false if you do not want to auto-assign public IP on launch",
        "type": "\${bool}"
      }
    ],
    "monitoring_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "monitoring_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Monitoring endpoint",
        "type": "\${bool}"
      }
    ],
    "monitoring_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Monitoring endpoint",
        "type": "\${list(string)}"
      }
    ],
    "monitoring_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Monitoring endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "name": [
      {
        "default": "",
        "description": "Name to be used on all the resources as identifier",
        "type": "\${string}"
      }
    ],
    "nat_eip_tags": [
      {
        "default": {},
        "description": "Additional tags for the NAT EIP",
        "type": "\${map(string)}"
      }
    ],
    "nat_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the NAT gateways",
        "type": "\${map(string)}"
      }
    ],
    "one_nat_gateway_per_az": [
      {
        "default": false,
        "description": "Should be true if you want only one NAT Gateway per availability zone. Requires \`var.azs\` to be set, and the number of \`public_subnets\` created to be greater than or equal to the number of availability zones specified in \`var.azs\`.",
        "type": "\${bool}"
      }
    ],
    "private_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the private subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "private_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for private subnets",
        "type": "\${bool}"
      }
    ],
    "private_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Private subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "private_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Private subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "private_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the private route tables",
        "type": "\${map(string)}"
      }
    ],
    "private_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on private subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "private_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "private_subnet_suffix": [
      {
        "default": "private",
        "description": "Suffix to append to private subnets name",
        "type": "\${string}"
      }
    ],
    "private_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the private subnets",
        "type": "\${map(string)}"
      }
    ],
    "private_subnets": [
      {
        "default": [],
        "description": "A list of private subnets inside the VPC",
        "type": "\${list(string)}"
      }
    ],
    "propagate_intra_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "propagate_private_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "propagate_public_route_tables_vgw": [
      {
        "default": false,
        "description": "Should be true if you want route table propagation",
        "type": "\${bool}"
      }
    ],
    "public_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the public subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "public_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for public subnets",
        "type": "\${bool}"
      }
    ],
    "public_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Public subnets inbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "public_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Public subnets outbound network ACLs",
        "type": "\${list(map(string))}"
      }
    ],
    "public_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the public route tables",
        "type": "\${map(string)}"
      }
    ],
    "public_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on public subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "public_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "public_subnet_suffix": [
      {
        "default": "public",
        "description": "Suffix to append to public subnets name",
        "type": "\${string}"
      }
    ],
    "public_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the public subnets",
        "type": "\${map(string)}"
      }
    ],
    "public_subnets": [
      {
        "default": [],
        "description": "A list of public subnets inside the VPC",
        "type": "\${list(string)}"
      }
    ],
    "qldb_session_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for QLDB Session endpoint",
        "type": "\${bool}"
      }
    ],
    "qldb_session_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for QLDB Session endpoint",
        "type": "\${list(string)}"
      }
    ],
    "qldb_session_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for QLDB Session endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "rds_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for RDS endpoint",
        "type": "\${bool}"
      }
    ],
    "rds_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for RDS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "rds_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for RDS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "redshift_acl_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnets network ACL",
        "type": "\${map(string)}"
      }
    ],
    "redshift_dedicated_network_acl": [
      {
        "default": false,
        "description": "Whether to use dedicated network ACL (not default) and custom rules for redshift subnets",
        "type": "\${bool}"
      }
    ],
    "redshift_inbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Redshift subnets inbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "redshift_outbound_acl_rules": [
      {
        "default": [
          {
            "cidr_block": "0.0.0.0/0",
            "from_port": 0,
            "protocol": "-1",
            "rule_action": "allow",
            "rule_number": 100,
            "to_port": 0
          }
        ],
        "description": "Redshift subnets outbound network ACL rules",
        "type": "\${list(map(string))}"
      }
    ],
    "redshift_route_table_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift route tables",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnet_assign_ipv6_address_on_creation": [
      {
        "default": null,
        "description": "Assign IPv6 address on redshift subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
        "type": "\${bool}"
      }
    ],
    "redshift_subnet_group_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnet group",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnet_ipv6_prefixes": [
      {
        "default": [],
        "description": "Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
        "type": "\${list(string)}"
      }
    ],
    "redshift_subnet_suffix": [
      {
        "default": "redshift",
        "description": "Suffix to append to redshift subnets name",
        "type": "\${string}"
      }
    ],
    "redshift_subnet_tags": [
      {
        "default": {},
        "description": "Additional tags for the redshift subnets",
        "type": "\${map(string)}"
      }
    ],
    "redshift_subnets": [
      {
        "default": [],
        "description": "A list of redshift subnets",
        "type": "\${list(string)}"
      }
    ],
    "rekognition_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "rekognition_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Rekognition endpoint",
        "type": "\${bool}"
      }
    ],
    "rekognition_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Rekognition endpoint",
        "type": "\${list(string)}"
      }
    ],
    "rekognition_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Rekognition endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "reuse_nat_ips": [
      {
        "default": false,
        "description": "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable",
        "type": "\${bool}"
      }
    ],
    "s3_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "s3_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for S3 interface endpoint",
        "type": "\${bool}"
      }
    ],
    "s3_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for S3 interface endpoint",
        "type": "\${list(string)}"
      }
    ],
    "s3_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for S3 interface endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "s3_endpoint_type": [
      {
        "default": "Gateway",
        "description": "S3 VPC endpoint type. Note - S3 Interface type support is only available on AWS provider 3.10 and later",
        "type": "\${string}"
      }
    ],
    "sagemaker_api_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_api_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker API endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_api_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SageMaker API endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_api_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SageMaker API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_notebook_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_notebook_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Sagemaker Notebook endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_notebook_endpoint_region": [
      {
        "default": "",
        "description": "Region to use for Sagemaker Notebook endpoint",
        "type": "\${string}"
      }
    ],
    "sagemaker_notebook_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Sagemaker Notebook endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_notebook_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Sagemaker Notebook endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_runtime_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sagemaker_runtime_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker Runtime endpoint",
        "type": "\${bool}"
      }
    ],
    "sagemaker_runtime_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SageMaker Runtime endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sagemaker_runtime_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SageMaker Runtime endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "secondary_cidr_blocks": [
      {
        "default": [],
        "description": "List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool",
        "type": "\${list(string)}"
      }
    ],
    "secretsmanager_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "secretsmanager_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Secrets Manager endpoint",
        "type": "\${bool}"
      }
    ],
    "secretsmanager_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Secrets Manager endpoint",
        "type": "\${list(string)}"
      }
    ],
    "secretsmanager_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Secrets Manager endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "servicecatalog_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Service Catalog endpoint",
        "type": "\${bool}"
      }
    ],
    "servicecatalog_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Service Catalog endpoint",
        "type": "\${list(string)}"
      }
    ],
    "servicecatalog_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Service Catalog endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ses_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SES endpoint",
        "type": "\${bool}"
      }
    ],
    "ses_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ses_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "single_nat_gateway": [
      {
        "default": false,
        "description": "Should be true if you want to provision a single shared NAT Gateway across all of your private networks",
        "type": "\${bool}"
      }
    ],
    "sms_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SMS endpoint",
        "type": "\${bool}"
      }
    ],
    "sms_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SMS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sms_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SMS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sns_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sns_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SNS endpoint",
        "type": "\${bool}"
      }
    ],
    "sns_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SNS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sns_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SNS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sqs_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sqs_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SQS endpoint",
        "type": "\${bool}"
      }
    ],
    "sqs_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SQS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sqs_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SQS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ssm_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SSM endpoint",
        "type": "\${bool}"
      }
    ],
    "ssm_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SSM endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ssm_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SSM endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "ssmmessages_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for SSMMESSAGES endpoint",
        "type": "\${bool}"
      }
    ],
    "ssmmessages_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for SSMMESSAGES endpoint",
        "type": "\${list(string)}"
      }
    ],
    "ssmmessages_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for SSMMESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "states_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "states_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Step Function endpoint",
        "type": "\${bool}"
      }
    ],
    "states_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Step Function endpoint",
        "type": "\${list(string)}"
      }
    ],
    "states_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Step Function endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "storagegateway_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Storage Gateway endpoint",
        "type": "\${bool}"
      }
    ],
    "storagegateway_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Storage Gateway endpoint",
        "type": "\${list(string)}"
      }
    ],
    "storagegateway_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Storage Gateway endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "sts_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "sts_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for STS endpoint",
        "type": "\${bool}"
      }
    ],
    "sts_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for STS endpoint",
        "type": "\${list(string)}"
      }
    ],
    "sts_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for STS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "tags": [
      {
        "default": {},
        "description": "A map of tags to add to all resources",
        "type": "\${map(string)}"
      }
    ],
    "textract_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Textract endpoint",
        "type": "\${bool}"
      }
    ],
    "textract_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Textract endpoint",
        "type": "\${list(string)}"
      }
    ],
    "textract_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Textract endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "transfer_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer endpoint",
        "type": "\${bool}"
      }
    ],
    "transfer_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Transfer endpoint",
        "type": "\${list(string)}"
      }
    ],
    "transfer_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Transfer endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "transferserver_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer Server endpoint",
        "type": "\${bool}"
      }
    ],
    "transferserver_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Transfer Server endpoint",
        "type": "\${list(string)}"
      }
    ],
    "transferserver_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Transfer Server endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ],
    "vpc_endpoint_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC Endpoints",
        "type": "\${map(string)}"
      }
    ],
    "vpc_flow_log_permissions_boundary": [
      {
        "default": null,
        "description": "The ARN of the Permissions Boundary for the VPC Flow Log IAM Role",
        "type": "\${string}"
      }
    ],
    "vpc_flow_log_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC Flow Logs",
        "type": "\${map(string)}"
      }
    ],
    "vpc_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPC",
        "type": "\${map(string)}"
      }
    ],
    "vpn_gateway_az": [
      {
        "default": null,
        "description": "The Availability Zone for the VPN Gateway",
        "type": "\${string}"
      }
    ],
    "vpn_gateway_id": [
      {
        "default": "",
        "description": "ID of VPN Gateway to attach to the VPC",
        "type": "\${string}"
      }
    ],
    "vpn_gateway_tags": [
      {
        "default": {},
        "description": "Additional tags for the VPN gateway",
        "type": "\${map(string)}"
      }
    ],
    "workspaces_endpoint_policy": [
      {
        "default": null,
        "description": "A policy to attach to the endpoint that controls access to the service. Defaults to full access",
        "type": "\${string}"
      }
    ],
    "workspaces_endpoint_private_dns_enabled": [
      {
        "default": false,
        "description": "Whether or not to associate a private hosted zone with the specified VPC for Workspaces endpoint",
        "type": "\${bool}"
      }
    ],
    "workspaces_endpoint_security_group_ids": [
      {
        "default": [],
        "description": "The ID of one or more security groups to associate with the network interface for Workspaces endpoint",
        "type": "\${list(string)}"
      }
    ],
    "workspaces_endpoint_subnet_ids": [
      {
        "default": [],
        "description": "The ID of one or more subnets in which to create a network interface for Workspaces endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
        "type": "\${list(string)}"
      }
    ]
  }
}"
`;

exports[`parse handles escape sequences in templates 1`] = `
"{
  "data": {
    "aws_ssoadmin_instances": {
      "example": [
        {}
      ]
    }
  },
  "resource": {
    "aws_ssoadmin_instance_access_control_attributes": {
      "example": [
        {
          "attribute": [
            {
              "key": "name",
              "value": [
                {
                  "source": [
                    "$\${path:name.givenName}"
                  ]
                }
              ]
            },
            {
              "key": "last",
              "value": [
                {
                  "source": [
                    "$\${path:name.familyName}"
                  ]
                }
              ]
            }
          ],
          "instance_arn": "\${tolist(data.aws_ssoadmin_instances.example.arns)[0]}"
        }
      ]
    }
  }
}"
`;
