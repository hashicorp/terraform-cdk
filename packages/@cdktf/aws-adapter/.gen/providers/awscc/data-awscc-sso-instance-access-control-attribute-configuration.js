"use strict";
// https://www.terraform.io/docs/providers/awscc/d/sso_instance_access_control_attribute_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSsoInstanceAccessControlAttributeConfiguration = exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform = exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfiguration = exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributes = exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValue = exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributes = exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValue = void 0;
const cdktf = require("cdktf");
class DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValue extends cdktf.ComplexComputedList {
    // source - computed: true, optional: false, required: false
    get source() {
        return this.getListAttribute('source');
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValue = DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValue;
function dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.listMapper(cdktf.stringToTerraform)(struct.source),
    };
}
exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform;
class DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributes extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributes = DataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributes;
function dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct.value),
    };
}
exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = dataAwsccSsoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform;
class DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValue extends cdktf.ComplexComputedList {
    // source - computed: true, optional: false, required: false
    get source() {
        return this.getListAttribute('source');
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValue = DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValue;
function dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.listMapper(cdktf.stringToTerraform)(struct.source),
    };
}
exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform;
class DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributes extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributes = DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributes;
function dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct.value),
    };
}
exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform;
class DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfiguration extends cdktf.ComplexComputedList {
    // access_control_attributes - computed: true, optional: false, required: false
    get accessControlAttributes() {
        return this.interpolationForAttribute('access_control_attributes');
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfiguration = DataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfiguration;
function dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_control_attributes: cdktf.listMapper(dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform)(struct.accessControlAttributes),
    };
}
exports.dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform = dataAwsccSsoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/sso_instance_access_control_attribute_configuration.html awscc_sso_instance_access_control_attribute_configuration}
*/
class DataAwsccSsoInstanceAccessControlAttributeConfiguration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/sso_instance_access_control_attribute_configuration.html awscc_sso_instance_access_control_attribute_configuration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSsoInstanceAccessControlAttributeConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sso_instance_access_control_attribute_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // access_control_attributes - computed: true, optional: false, required: false
    get accessControlAttributes() {
        return this.interpolationForAttribute('access_control_attributes');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_access_control_attribute_configuration - computed: true, optional: false, required: false
    get instanceAccessControlAttributeConfiguration() {
        return this.interpolationForAttribute('instance_access_control_attribute_configuration');
    }
    // instance_arn - computed: true, optional: false, required: false
    get instanceArn() {
        return this.getStringAttribute('instance_arn');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSsoInstanceAccessControlAttributeConfiguration = DataAwsccSsoInstanceAccessControlAttributeConfiguration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSsoInstanceAccessControlAttributeConfiguration.tfResourceType = "awscc_sso_instance_access_control_attribute_configuration";
//# sourceMappingURL=data:application/json;base64,