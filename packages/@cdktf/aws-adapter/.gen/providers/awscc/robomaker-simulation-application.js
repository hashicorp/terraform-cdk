"use strict";
// https://www.terraform.io/docs/providers/awscc/r/robomaker_simulation_application.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.RobomakerSimulationApplication = exports.robomakerSimulationApplicationSourcesToTerraform = exports.robomakerSimulationApplicationSimulationSoftwareSuiteToTerraform = exports.robomakerSimulationApplicationRobotSoftwareSuiteToTerraform = exports.robomakerSimulationApplicationRenderingEngineToTerraform = void 0;
const cdktf = require("cdktf");
function robomakerSimulationApplicationRenderingEngineToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.robomakerSimulationApplicationRenderingEngineToTerraform = robomakerSimulationApplicationRenderingEngineToTerraform;
function robomakerSimulationApplicationRobotSoftwareSuiteToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.robomakerSimulationApplicationRobotSoftwareSuiteToTerraform = robomakerSimulationApplicationRobotSoftwareSuiteToTerraform;
function robomakerSimulationApplicationSimulationSoftwareSuiteToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.robomakerSimulationApplicationSimulationSoftwareSuiteToTerraform = robomakerSimulationApplicationSimulationSoftwareSuiteToTerraform;
function robomakerSimulationApplicationSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        architecture: cdktf.stringToTerraform(struct.architecture),
        s3_bucket: cdktf.stringToTerraform(struct.s3Bucket),
        s3_key: cdktf.stringToTerraform(struct.s3Key),
    };
}
exports.robomakerSimulationApplicationSourcesToTerraform = robomakerSimulationApplicationSourcesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/robomaker_simulation_application.html awscc_robomaker_simulation_application}
*/
class RobomakerSimulationApplication extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/robomaker_simulation_application.html awscc_robomaker_simulation_application} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RobomakerSimulationApplicationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_robomaker_simulation_application',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._currentRevisionId = config.currentRevisionId;
        this._environment = config.environment;
        this._name = config.name;
        this._renderingEngine = config.renderingEngine;
        this._robotSoftwareSuite = config.robotSoftwareSuite;
        this._simulationSoftwareSuite = config.simulationSoftwareSuite;
        this._sources = config.sources;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get currentRevisionId() {
        return this.getStringAttribute('current_revision_id');
    }
    set currentRevisionId(value) {
        this._currentRevisionId = value;
    }
    resetCurrentRevisionId() {
        this._currentRevisionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get currentRevisionIdInput() {
        return this._currentRevisionId;
    }
    get environment() {
        return this.getStringAttribute('environment');
    }
    set environment(value) {
        this._environment = value;
    }
    resetEnvironment() {
        this._environment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentInput() {
        return this._environment;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get renderingEngine() {
        return this.interpolationForAttribute('rendering_engine');
    }
    set renderingEngine(value) {
        this._renderingEngine = value;
    }
    resetRenderingEngine() {
        this._renderingEngine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get renderingEngineInput() {
        return this._renderingEngine;
    }
    get robotSoftwareSuite() {
        return this.interpolationForAttribute('robot_software_suite');
    }
    set robotSoftwareSuite(value) {
        this._robotSoftwareSuite = value;
    }
    // Temporarily expose input value. Use with caution.
    get robotSoftwareSuiteInput() {
        return this._robotSoftwareSuite;
    }
    get simulationSoftwareSuite() {
        return this.interpolationForAttribute('simulation_software_suite');
    }
    set simulationSoftwareSuite(value) {
        this._simulationSoftwareSuite = value;
    }
    // Temporarily expose input value. Use with caution.
    get simulationSoftwareSuiteInput() {
        return this._simulationSoftwareSuite;
    }
    get sources() {
        return this.interpolationForAttribute('sources');
    }
    set sources(value) {
        this._sources = value;
    }
    resetSources() {
        this._sources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcesInput() {
        return this._sources;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            current_revision_id: cdktf.stringToTerraform(this._currentRevisionId),
            environment: cdktf.stringToTerraform(this._environment),
            name: cdktf.stringToTerraform(this._name),
            rendering_engine: robomakerSimulationApplicationRenderingEngineToTerraform(this._renderingEngine),
            robot_software_suite: robomakerSimulationApplicationRobotSoftwareSuiteToTerraform(this._robotSoftwareSuite),
            simulation_software_suite: robomakerSimulationApplicationSimulationSoftwareSuiteToTerraform(this._simulationSoftwareSuite),
            sources: cdktf.listMapper(robomakerSimulationApplicationSourcesToTerraform)(this._sources),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.RobomakerSimulationApplication = RobomakerSimulationApplication;
// =================
// STATIC PROPERTIES
// =================
RobomakerSimulationApplication.tfResourceType = "awscc_robomaker_simulation_application";
//# sourceMappingURL=data:application/json;base64,