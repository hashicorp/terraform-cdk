"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudfront_function.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontFunction = exports.cloudfrontFunctionFunctionMetadataToTerraform = exports.cloudfrontFunctionFunctionConfigToTerraform = void 0;
const cdktf = require("cdktf");
function cloudfrontFunctionFunctionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comment: cdktf.stringToTerraform(struct.comment),
        runtime: cdktf.stringToTerraform(struct.runtime),
    };
}
exports.cloudfrontFunctionFunctionConfigToTerraform = cloudfrontFunctionFunctionConfigToTerraform;
function cloudfrontFunctionFunctionMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.cloudfrontFunctionFunctionMetadataToTerraform = cloudfrontFunctionFunctionMetadataToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_function.html awscc_cloudfront_function}
*/
class CloudfrontFunction extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_function.html awscc_cloudfront_function} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontFunctionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_function',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoPublish = config.autoPublish;
        this._functionCode = config.functionCode;
        this._functionConfig = config.functionConfig;
        this._functionMetadata = config.functionMetadata;
        this._name = config.name;
    }
    get autoPublish() {
        return this.getBooleanAttribute('auto_publish');
    }
    set autoPublish(value) {
        this._autoPublish = value;
    }
    resetAutoPublish() {
        this._autoPublish = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoPublishInput() {
        return this._autoPublish;
    }
    // function_arn - computed: true, optional: false, required: false
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    get functionCode() {
        return this.getStringAttribute('function_code');
    }
    set functionCode(value) {
        this._functionCode = value;
    }
    resetFunctionCode() {
        this._functionCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionCodeInput() {
        return this._functionCode;
    }
    get functionConfig() {
        return this.interpolationForAttribute('function_config');
    }
    set functionConfig(value) {
        this._functionConfig = value;
    }
    resetFunctionConfig() {
        this._functionConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionConfigInput() {
        return this._functionConfig;
    }
    get functionMetadata() {
        return this.interpolationForAttribute('function_metadata');
    }
    set functionMetadata(value) {
        this._functionMetadata = value;
    }
    resetFunctionMetadata() {
        this._functionMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionMetadataInput() {
        return this._functionMetadata;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // stage - computed: true, optional: false, required: false
    get stage() {
        return this.getStringAttribute('stage');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_publish: cdktf.booleanToTerraform(this._autoPublish),
            function_code: cdktf.stringToTerraform(this._functionCode),
            function_config: cloudfrontFunctionFunctionConfigToTerraform(this._functionConfig),
            function_metadata: cloudfrontFunctionFunctionMetadataToTerraform(this._functionMetadata),
            name: cdktf.stringToTerraform(this._name),
        };
    }
}
exports.CloudfrontFunction = CloudfrontFunction;
// =================
// STATIC PROPERTIES
// =================
CloudfrontFunction.tfResourceType = "awscc_cloudfront_function";
//# sourceMappingURL=data:application/json;base64,