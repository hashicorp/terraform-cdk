"use strict";
// https://www.terraform.io/docs/providers/awscc/r/groundstation_dataflow_endpoint_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroundstationDataflowEndpointGroup = exports.groundstationDataflowEndpointGroupTagsToTerraform = exports.groundstationDataflowEndpointGroupEndpointDetailsToTerraform = exports.groundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform = exports.groundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform = exports.groundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform = void 0;
const cdktf = require("cdktf");
function groundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.groundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform = groundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform;
function groundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: groundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform(struct.address),
        mtu: cdktf.numberToTerraform(struct.mtu),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.groundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform = groundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform;
function groundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.groundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform = groundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform;
function groundstationDataflowEndpointGroupEndpointDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: groundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform(struct.endpoint),
        security_details: groundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform(struct.securityDetails),
    };
}
exports.groundstationDataflowEndpointGroupEndpointDetailsToTerraform = groundstationDataflowEndpointGroupEndpointDetailsToTerraform;
function groundstationDataflowEndpointGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.groundstationDataflowEndpointGroupTagsToTerraform = groundstationDataflowEndpointGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/groundstation_dataflow_endpoint_group.html awscc_groundstation_dataflow_endpoint_group}
*/
class GroundstationDataflowEndpointGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/groundstation_dataflow_endpoint_group.html awscc_groundstation_dataflow_endpoint_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GroundstationDataflowEndpointGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_groundstation_dataflow_endpoint_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._endpointDetails = config.endpointDetails;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get endpointDetails() {
        return this.interpolationForAttribute('endpoint_details');
    }
    set endpointDetails(value) {
        this._endpointDetails = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointDetailsInput() {
        return this._endpointDetails;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            endpoint_details: cdktf.listMapper(groundstationDataflowEndpointGroupEndpointDetailsToTerraform)(this._endpointDetails),
            tags: cdktf.listMapper(groundstationDataflowEndpointGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.GroundstationDataflowEndpointGroup = GroundstationDataflowEndpointGroup;
// =================
// STATIC PROPERTIES
// =================
GroundstationDataflowEndpointGroup.tfResourceType = "awscc_groundstation_dataflow_endpoint_group";
//# sourceMappingURL=data:application/json;base64,