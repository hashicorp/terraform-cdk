"use strict";
// https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3MultiRegionAccessPointPolicy = exports.s3MultiRegionAccessPointPolicyPolicyStatusToTerraform = exports.S3MultiRegionAccessPointPolicyPolicyStatus = void 0;
const cdktf = require("cdktf");
class S3MultiRegionAccessPointPolicyPolicyStatus extends cdktf.ComplexComputedList {
    // is_public - computed: true, optional: false, required: true
    get isPublic() {
        return this.getStringAttribute('is_public');
    }
}
exports.S3MultiRegionAccessPointPolicyPolicyStatus = S3MultiRegionAccessPointPolicyPolicyStatus;
function s3MultiRegionAccessPointPolicyPolicyStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_public: cdktf.stringToTerraform(struct.isPublic),
    };
}
exports.s3MultiRegionAccessPointPolicyPolicyStatusToTerraform = s3MultiRegionAccessPointPolicyPolicyStatusToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point_policy.html awscc_s3_multi_region_access_point_policy}
*/
class S3MultiRegionAccessPointPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point_policy.html awscc_s3_multi_region_access_point_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3MultiRegionAccessPointPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3_multi_region_access_point_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._mrapName = config.mrapName;
        this._policy = config.policy;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get mrapName() {
        return this.getStringAttribute('mrap_name');
    }
    set mrapName(value) {
        this._mrapName = value;
    }
    // Temporarily expose input value. Use with caution.
    get mrapNameInput() {
        return this._mrapName;
    }
    get policy() {
        return this.interpolationForAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    // policy_status - computed: true, optional: false, required: false
    get policyStatus() {
        return this.interpolationForAttribute('policy_status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            mrap_name: cdktf.stringToTerraform(this._mrapName),
            policy: cdktf.hashMapper(cdktf.anyToTerraform)(this._policy),
        };
    }
}
exports.S3MultiRegionAccessPointPolicy = S3MultiRegionAccessPointPolicy;
// =================
// STATIC PROPERTIES
// =================
S3MultiRegionAccessPointPolicy.tfResourceType = "awscc_s3_multi_region_access_point_policy";
//# sourceMappingURL=data:application/json;base64,