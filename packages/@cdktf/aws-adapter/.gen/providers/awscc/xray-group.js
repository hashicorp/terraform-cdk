"use strict";
// https://www.terraform.io/docs/providers/awscc/r/xray_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayGroup = exports.xrayGroupTagsToTerraform = exports.xrayGroupInsightsConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function xrayGroupInsightsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        insights_enabled: cdktf.booleanToTerraform(struct.insightsEnabled),
        notifications_enabled: cdktf.booleanToTerraform(struct.notificationsEnabled),
    };
}
exports.xrayGroupInsightsConfigurationToTerraform = xrayGroupInsightsConfigurationToTerraform;
function xrayGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.xrayGroupTagsToTerraform = xrayGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/xray_group.html awscc_xray_group}
*/
class XrayGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/xray_group.html awscc_xray_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options XrayGroupConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_xray_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._filterExpression = config.filterExpression;
        this._groupName = config.groupName;
        this._insightsConfiguration = config.insightsConfiguration;
        this._tags = config.tags;
    }
    get filterExpression() {
        return this.getStringAttribute('filter_expression');
    }
    set filterExpression(value) {
        this._filterExpression = value;
    }
    resetFilterExpression() {
        this._filterExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterExpressionInput() {
        return this._filterExpression;
    }
    // group_arn - computed: true, optional: false, required: false
    get groupArn() {
        return this.getStringAttribute('group_arn');
    }
    get groupName() {
        return this.getStringAttribute('group_name');
    }
    set groupName(value) {
        this._groupName = value;
    }
    resetGroupName() {
        this._groupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupNameInput() {
        return this._groupName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get insightsConfiguration() {
        return this.interpolationForAttribute('insights_configuration');
    }
    set insightsConfiguration(value) {
        this._insightsConfiguration = value;
    }
    resetInsightsConfiguration() {
        this._insightsConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insightsConfigurationInput() {
        return this._insightsConfiguration;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            filter_expression: cdktf.stringToTerraform(this._filterExpression),
            group_name: cdktf.stringToTerraform(this._groupName),
            insights_configuration: xrayGroupInsightsConfigurationToTerraform(this._insightsConfiguration),
            tags: cdktf.listMapper(xrayGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.XrayGroup = XrayGroup;
// =================
// STATIC PROPERTIES
// =================
XrayGroup.tfResourceType = "awscc_xray_group";
//# sourceMappingURL=data:application/json;base64,