"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotwireless_device_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotwirelessDeviceProfile = exports.dataAwsccIotwirelessDeviceProfileTagsToTerraform = exports.DataAwsccIotwirelessDeviceProfileTags = exports.dataAwsccIotwirelessDeviceProfileLoRaWanToTerraform = exports.DataAwsccIotwirelessDeviceProfileLoRaWan = void 0;
const cdktf = require("cdktf");
class DataAwsccIotwirelessDeviceProfileLoRaWan extends cdktf.ComplexComputedList {
    // class_b_timeout - computed: true, optional: false, required: false
    get classBTimeout() {
        return this.getNumberAttribute('class_b_timeout');
    }
    // class_c_timeout - computed: true, optional: false, required: false
    get classCTimeout() {
        return this.getNumberAttribute('class_c_timeout');
    }
    // mac_version - computed: true, optional: false, required: false
    get macVersion() {
        return this.getStringAttribute('mac_version');
    }
    // max_duty_cycle - computed: true, optional: false, required: false
    get maxDutyCycle() {
        return this.getNumberAttribute('max_duty_cycle');
    }
    // max_eirp - computed: true, optional: false, required: false
    get maxEirp() {
        return this.getNumberAttribute('max_eirp');
    }
    // ping_slot_dr - computed: true, optional: false, required: false
    get pingSlotDr() {
        return this.getNumberAttribute('ping_slot_dr');
    }
    // ping_slot_freq - computed: true, optional: false, required: false
    get pingSlotFreq() {
        return this.getNumberAttribute('ping_slot_freq');
    }
    // ping_slot_period - computed: true, optional: false, required: false
    get pingSlotPeriod() {
        return this.getNumberAttribute('ping_slot_period');
    }
    // reg_params_revision - computed: true, optional: false, required: false
    get regParamsRevision() {
        return this.getStringAttribute('reg_params_revision');
    }
    // rf_region - computed: true, optional: false, required: false
    get rfRegion() {
        return this.getStringAttribute('rf_region');
    }
    // supports_32_bit_f_cnt - computed: true, optional: false, required: false
    get supports32BitFCnt() {
        return this.getBooleanAttribute('supports_32_bit_f_cnt');
    }
    // supports_class_b - computed: true, optional: false, required: false
    get supportsClassB() {
        return this.getBooleanAttribute('supports_class_b');
    }
    // supports_class_c - computed: true, optional: false, required: false
    get supportsClassC() {
        return this.getBooleanAttribute('supports_class_c');
    }
    // supports_join - computed: true, optional: false, required: false
    get supportsJoin() {
        return this.getBooleanAttribute('supports_join');
    }
}
exports.DataAwsccIotwirelessDeviceProfileLoRaWan = DataAwsccIotwirelessDeviceProfileLoRaWan;
function dataAwsccIotwirelessDeviceProfileLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        class_b_timeout: cdktf.numberToTerraform(struct.classBTimeout),
        class_c_timeout: cdktf.numberToTerraform(struct.classCTimeout),
        mac_version: cdktf.stringToTerraform(struct.macVersion),
        max_duty_cycle: cdktf.numberToTerraform(struct.maxDutyCycle),
        max_eirp: cdktf.numberToTerraform(struct.maxEirp),
        ping_slot_dr: cdktf.numberToTerraform(struct.pingSlotDr),
        ping_slot_freq: cdktf.numberToTerraform(struct.pingSlotFreq),
        ping_slot_period: cdktf.numberToTerraform(struct.pingSlotPeriod),
        reg_params_revision: cdktf.stringToTerraform(struct.regParamsRevision),
        rf_region: cdktf.stringToTerraform(struct.rfRegion),
        supports_32_bit_f_cnt: cdktf.booleanToTerraform(struct.supports32BitFCnt),
        supports_class_b: cdktf.booleanToTerraform(struct.supportsClassB),
        supports_class_c: cdktf.booleanToTerraform(struct.supportsClassC),
        supports_join: cdktf.booleanToTerraform(struct.supportsJoin),
    };
}
exports.dataAwsccIotwirelessDeviceProfileLoRaWanToTerraform = dataAwsccIotwirelessDeviceProfileLoRaWanToTerraform;
class DataAwsccIotwirelessDeviceProfileTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotwirelessDeviceProfileTags = DataAwsccIotwirelessDeviceProfileTags;
function dataAwsccIotwirelessDeviceProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotwirelessDeviceProfileTagsToTerraform = dataAwsccIotwirelessDeviceProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_device_profile.html awscc_iotwireless_device_profile}
*/
class DataAwsccIotwirelessDeviceProfile extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_device_profile.html awscc_iotwireless_device_profile} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotwirelessDeviceProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_device_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // lo_ra_wan - computed: true, optional: false, required: false
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotwirelessDeviceProfile = DataAwsccIotwirelessDeviceProfile;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotwirelessDeviceProfile.tfResourceType = "awscc_iotwireless_device_profile";
//# sourceMappingURL=data:application/json;base64,