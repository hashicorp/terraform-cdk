"use strict";
// https://www.terraform.io/docs/providers/awscc/r/s3_storage_lens.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3StorageLens = exports.s3StorageLensTagsToTerraform = exports.s3StorageLensStorageLensConfigurationToTerraform = exports.s3StorageLensStorageLensConfigurationIncludeToTerraform = exports.s3StorageLensStorageLensConfigurationExcludeToTerraform = exports.s3StorageLensStorageLensConfigurationDataExportToTerraform = exports.s3StorageLensStorageLensConfigurationDataExportS3BucketDestinationToTerraform = exports.s3StorageLensStorageLensConfigurationAwsOrgToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform = exports.s3StorageLensStorageLensConfigurationAccountLevelActivityMetricsToTerraform = void 0;
const cdktf = require("cdktf");
function s3StorageLensStorageLensConfigurationAccountLevelActivityMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_enabled: cdktf.booleanToTerraform(struct.isEnabled),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelActivityMetricsToTerraform = s3StorageLensStorageLensConfigurationAccountLevelActivityMetricsToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_enabled: cdktf.booleanToTerraform(struct.isEnabled),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform = s3StorageLensStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delimiter: cdktf.stringToTerraform(struct.delimiter),
        max_depth: cdktf.numberToTerraform(struct.maxDepth),
        min_storage_bytes_percentage: cdktf.numberToTerraform(struct.minStorageBytesPercentage),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform = s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_enabled: cdktf.booleanToTerraform(struct.isEnabled),
        selection_criteria: s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform(struct.selectionCriteria),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform = s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        storage_metrics: s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform(struct.storageMetrics),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform = s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelBucketLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        activity_metrics: s3StorageLensStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform(struct.activityMetrics),
        prefix_level: s3StorageLensStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform(struct.prefixLevel),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelBucketLevelToTerraform = s3StorageLensStorageLensConfigurationAccountLevelBucketLevelToTerraform;
function s3StorageLensStorageLensConfigurationAccountLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        activity_metrics: s3StorageLensStorageLensConfigurationAccountLevelActivityMetricsToTerraform(struct.activityMetrics),
        bucket_level: s3StorageLensStorageLensConfigurationAccountLevelBucketLevelToTerraform(struct.bucketLevel),
    };
}
exports.s3StorageLensStorageLensConfigurationAccountLevelToTerraform = s3StorageLensStorageLensConfigurationAccountLevelToTerraform;
function s3StorageLensStorageLensConfigurationAwsOrgToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.s3StorageLensStorageLensConfigurationAwsOrgToTerraform = s3StorageLensStorageLensConfigurationAwsOrgToTerraform;
function s3StorageLensStorageLensConfigurationDataExportS3BucketDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        arn: cdktf.stringToTerraform(struct.arn),
        encryption: cdktf.hashMapper(cdktf.anyToTerraform)(struct.encryption),
        format: cdktf.stringToTerraform(struct.format),
        output_schema_version: cdktf.stringToTerraform(struct.outputSchemaVersion),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.s3StorageLensStorageLensConfigurationDataExportS3BucketDestinationToTerraform = s3StorageLensStorageLensConfigurationDataExportS3BucketDestinationToTerraform;
function s3StorageLensStorageLensConfigurationDataExportToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_bucket_destination: s3StorageLensStorageLensConfigurationDataExportS3BucketDestinationToTerraform(struct.s3BucketDestination),
    };
}
exports.s3StorageLensStorageLensConfigurationDataExportToTerraform = s3StorageLensStorageLensConfigurationDataExportToTerraform;
function s3StorageLensStorageLensConfigurationExcludeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        buckets: cdktf.listMapper(cdktf.stringToTerraform)(struct.buckets),
        regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.regions),
    };
}
exports.s3StorageLensStorageLensConfigurationExcludeToTerraform = s3StorageLensStorageLensConfigurationExcludeToTerraform;
function s3StorageLensStorageLensConfigurationIncludeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        buckets: cdktf.listMapper(cdktf.stringToTerraform)(struct.buckets),
        regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.regions),
    };
}
exports.s3StorageLensStorageLensConfigurationIncludeToTerraform = s3StorageLensStorageLensConfigurationIncludeToTerraform;
function s3StorageLensStorageLensConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_level: s3StorageLensStorageLensConfigurationAccountLevelToTerraform(struct.accountLevel),
        aws_org: s3StorageLensStorageLensConfigurationAwsOrgToTerraform(struct.awsOrg),
        data_export: s3StorageLensStorageLensConfigurationDataExportToTerraform(struct.dataExport),
        exclude: s3StorageLensStorageLensConfigurationExcludeToTerraform(struct.exclude),
        id: cdktf.stringToTerraform(struct.id),
        include: s3StorageLensStorageLensConfigurationIncludeToTerraform(struct.include),
        is_enabled: cdktf.booleanToTerraform(struct.isEnabled),
        storage_lens_arn: cdktf.stringToTerraform(struct.storageLensArn),
    };
}
exports.s3StorageLensStorageLensConfigurationToTerraform = s3StorageLensStorageLensConfigurationToTerraform;
function s3StorageLensTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.s3StorageLensTagsToTerraform = s3StorageLensTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/s3_storage_lens.html awscc_s3_storage_lens}
*/
class S3StorageLens extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/s3_storage_lens.html awscc_s3_storage_lens} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3StorageLensConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3_storage_lens',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._storageLensConfiguration = config.storageLensConfiguration;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get storageLensConfiguration() {
        return this.interpolationForAttribute('storage_lens_configuration');
    }
    set storageLensConfiguration(value) {
        this._storageLensConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageLensConfigurationInput() {
        return this._storageLensConfiguration;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            storage_lens_configuration: s3StorageLensStorageLensConfigurationToTerraform(this._storageLensConfiguration),
            tags: cdktf.listMapper(s3StorageLensTagsToTerraform)(this._tags),
        };
    }
}
exports.S3StorageLens = S3StorageLens;
// =================
// STATIC PROPERTIES
// =================
S3StorageLens.tfResourceType = "awscc_s3_storage_lens";
//# sourceMappingURL=data:application/json;base64,