"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotwireless_task_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotwirelessTaskDefinition = exports.iotwirelessTaskDefinitionUpdateToTerraform = exports.iotwirelessTaskDefinitionUpdateLoRaWanToTerraform = exports.iotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform = exports.iotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform = exports.iotwirelessTaskDefinitionTagsToTerraform = exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform = exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform = exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform = void 0;
const cdktf = require("cdktf");
function iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform = iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform;
function iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform = iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform;
function iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        current_version: iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform(struct.currentVersion),
        update_version: iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform(struct.updateVersion),
    };
}
exports.iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform = iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform;
function iotwirelessTaskDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotwirelessTaskDefinitionTagsToTerraform = iotwirelessTaskDefinitionTagsToTerraform;
function iotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.iotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform = iotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform;
function iotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.iotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform = iotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform;
function iotwirelessTaskDefinitionUpdateLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        current_version: iotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform(struct.currentVersion),
        sig_key_crc: cdktf.numberToTerraform(struct.sigKeyCrc),
        update_signature: cdktf.stringToTerraform(struct.updateSignature),
        update_version: iotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform(struct.updateVersion),
    };
}
exports.iotwirelessTaskDefinitionUpdateLoRaWanToTerraform = iotwirelessTaskDefinitionUpdateLoRaWanToTerraform;
function iotwirelessTaskDefinitionUpdateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        lo_ra_wan: iotwirelessTaskDefinitionUpdateLoRaWanToTerraform(struct.loRaWan),
        update_data_role: cdktf.stringToTerraform(struct.updateDataRole),
        update_data_source: cdktf.stringToTerraform(struct.updateDataSource),
    };
}
exports.iotwirelessTaskDefinitionUpdateToTerraform = iotwirelessTaskDefinitionUpdateToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_task_definition.html awscc_iotwireless_task_definition}
*/
class IotwirelessTaskDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_task_definition.html awscc_iotwireless_task_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotwirelessTaskDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_task_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoCreateTasks = config.autoCreateTasks;
        this._loRaWanUpdateGatewayTaskEntry = config.loRaWanUpdateGatewayTaskEntry;
        this._name = config.name;
        this._tags = config.tags;
        this._taskDefinitionType = config.taskDefinitionType;
        this._update = config.update;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoCreateTasks() {
        return this.getBooleanAttribute('auto_create_tasks');
    }
    set autoCreateTasks(value) {
        this._autoCreateTasks = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoCreateTasksInput() {
        return this._autoCreateTasks;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loRaWanUpdateGatewayTaskEntry() {
        return this.interpolationForAttribute('lo_ra_wan_update_gateway_task_entry');
    }
    set loRaWanUpdateGatewayTaskEntry(value) {
        this._loRaWanUpdateGatewayTaskEntry = value;
    }
    resetLoRaWanUpdateGatewayTaskEntry() {
        this._loRaWanUpdateGatewayTaskEntry = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRaWanUpdateGatewayTaskEntryInput() {
        return this._loRaWanUpdateGatewayTaskEntry;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get taskDefinitionType() {
        return this.getStringAttribute('task_definition_type');
    }
    set taskDefinitionType(value) {
        this._taskDefinitionType = value;
    }
    resetTaskDefinitionType() {
        this._taskDefinitionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskDefinitionTypeInput() {
        return this._taskDefinitionType;
    }
    get update() {
        return this.interpolationForAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_create_tasks: cdktf.booleanToTerraform(this._autoCreateTasks),
            lo_ra_wan_update_gateway_task_entry: iotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform(this._loRaWanUpdateGatewayTaskEntry),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(iotwirelessTaskDefinitionTagsToTerraform)(this._tags),
            task_definition_type: cdktf.stringToTerraform(this._taskDefinitionType),
            update: iotwirelessTaskDefinitionUpdateToTerraform(this._update),
        };
    }
}
exports.IotwirelessTaskDefinition = IotwirelessTaskDefinition;
// =================
// STATIC PROPERTIES
// =================
IotwirelessTaskDefinition.tfResourceType = "awscc_iotwireless_task_definition";
//# sourceMappingURL=data:application/json;base64,