"use strict";
// https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_anomaly_detector.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookoutmetricsAnomalyDetector = exports.lookoutmetricsAnomalyDetectorMetricSetListToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListTimestampColumnToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorJsonFormatDescriptorToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorCsvFormatDescriptorToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigVpcConfigurationToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigVpcConfigurationToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceCloudwatchConfigToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceAppFlowConfigToTerraform = exports.lookoutmetricsAnomalyDetectorMetricSetListMetricListToTerraform = exports.lookoutmetricsAnomalyDetectorAnomalyDetectorConfigToTerraform = void 0;
const cdktf = require("cdktf");
function lookoutmetricsAnomalyDetectorAnomalyDetectorConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        anomaly_detector_frequency: cdktf.stringToTerraform(struct.anomalyDetectorFrequency),
    };
}
exports.lookoutmetricsAnomalyDetectorAnomalyDetectorConfigToTerraform = lookoutmetricsAnomalyDetectorAnomalyDetectorConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricListToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aggregation_function: cdktf.stringToTerraform(struct.aggregationFunction),
        metric_name: cdktf.stringToTerraform(struct.metricName),
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricListToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricListToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceAppFlowConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        flow_name: cdktf.stringToTerraform(struct.flowName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceAppFlowConfigToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceAppFlowConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceCloudwatchConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceCloudwatchConfigToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceCloudwatchConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_id_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIdList),
        subnet_id_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIdList),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigVpcConfigurationToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigVpcConfigurationToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database_host: cdktf.stringToTerraform(struct.databaseHost),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        database_port: cdktf.numberToTerraform(struct.databasePort),
        db_instance_identifier: cdktf.stringToTerraform(struct.dbInstanceIdentifier),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_manager_arn: cdktf.stringToTerraform(struct.secretManagerArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        vpc_configuration: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_id_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIdList),
        subnet_id_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIdList),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigVpcConfigurationToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigVpcConfigurationToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_identifier: cdktf.stringToTerraform(struct.clusterIdentifier),
        database_host: cdktf.stringToTerraform(struct.databaseHost),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        database_port: cdktf.numberToTerraform(struct.databasePort),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_manager_arn: cdktf.stringToTerraform(struct.secretManagerArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        vpc_configuration: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorCsvFormatDescriptorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        charset: cdktf.stringToTerraform(struct.charset),
        contains_header: cdktf.booleanToTerraform(struct.containsHeader),
        delimiter: cdktf.stringToTerraform(struct.delimiter),
        file_compression: cdktf.stringToTerraform(struct.fileCompression),
        header_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.headerList),
        quote_symbol: cdktf.stringToTerraform(struct.quoteSymbol),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorCsvFormatDescriptorToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorCsvFormatDescriptorToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorJsonFormatDescriptorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        charset: cdktf.stringToTerraform(struct.charset),
        file_compression: cdktf.stringToTerraform(struct.fileCompression),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorJsonFormatDescriptorToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorJsonFormatDescriptorToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        csv_format_descriptor: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorCsvFormatDescriptorToTerraform(struct.csvFormatDescriptor),
        json_format_descriptor: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorJsonFormatDescriptorToTerraform(struct.jsonFormatDescriptor),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file_format_descriptor: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigFileFormatDescriptorToTerraform(struct.fileFormatDescriptor),
        historical_data_path_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.historicalDataPathList),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        templated_path_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.templatedPathList),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListMetricSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_flow_config: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceAppFlowConfigToTerraform(struct.appFlowConfig),
        cloudwatch_config: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceCloudwatchConfigToTerraform(struct.cloudwatchConfig),
        rds_source_config: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRdsSourceConfigToTerraform(struct.rdsSourceConfig),
        redshift_source_config: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceRedshiftSourceConfigToTerraform(struct.redshiftSourceConfig),
        s3_source_config: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceS3SourceConfigToTerraform(struct.s3SourceConfig),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListMetricSourceToTerraform = lookoutmetricsAnomalyDetectorMetricSetListMetricSourceToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListTimestampColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_format: cdktf.stringToTerraform(struct.columnFormat),
        column_name: cdktf.stringToTerraform(struct.columnName),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListTimestampColumnToTerraform = lookoutmetricsAnomalyDetectorMetricSetListTimestampColumnToTerraform;
function lookoutmetricsAnomalyDetectorMetricSetListToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimension_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.dimensionList),
        metric_list: cdktf.listMapper(lookoutmetricsAnomalyDetectorMetricSetListMetricListToTerraform)(struct.metricList),
        metric_set_description: cdktf.stringToTerraform(struct.metricSetDescription),
        metric_set_frequency: cdktf.stringToTerraform(struct.metricSetFrequency),
        metric_set_name: cdktf.stringToTerraform(struct.metricSetName),
        metric_source: lookoutmetricsAnomalyDetectorMetricSetListMetricSourceToTerraform(struct.metricSource),
        offset: cdktf.numberToTerraform(struct.offset),
        timestamp_column: lookoutmetricsAnomalyDetectorMetricSetListTimestampColumnToTerraform(struct.timestampColumn),
        timezone: cdktf.stringToTerraform(struct.timezone),
    };
}
exports.lookoutmetricsAnomalyDetectorMetricSetListToTerraform = lookoutmetricsAnomalyDetectorMetricSetListToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_anomaly_detector.html awscc_lookoutmetrics_anomaly_detector}
*/
class LookoutmetricsAnomalyDetector extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_anomaly_detector.html awscc_lookoutmetrics_anomaly_detector} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LookoutmetricsAnomalyDetectorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_lookoutmetrics_anomaly_detector',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._anomalyDetectorConfig = config.anomalyDetectorConfig;
        this._anomalyDetectorDescription = config.anomalyDetectorDescription;
        this._anomalyDetectorName = config.anomalyDetectorName;
        this._kmsKeyArn = config.kmsKeyArn;
        this._metricSetList = config.metricSetList;
    }
    get anomalyDetectorConfig() {
        return this.interpolationForAttribute('anomaly_detector_config');
    }
    set anomalyDetectorConfig(value) {
        this._anomalyDetectorConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectorConfigInput() {
        return this._anomalyDetectorConfig;
    }
    get anomalyDetectorDescription() {
        return this.getStringAttribute('anomaly_detector_description');
    }
    set anomalyDetectorDescription(value) {
        this._anomalyDetectorDescription = value;
    }
    resetAnomalyDetectorDescription() {
        this._anomalyDetectorDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectorDescriptionInput() {
        return this._anomalyDetectorDescription;
    }
    get anomalyDetectorName() {
        return this.getStringAttribute('anomaly_detector_name');
    }
    set anomalyDetectorName(value) {
        this._anomalyDetectorName = value;
    }
    resetAnomalyDetectorName() {
        this._anomalyDetectorName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectorNameInput() {
        return this._anomalyDetectorName;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get metricSetList() {
        return this.interpolationForAttribute('metric_set_list');
    }
    set metricSetList(value) {
        this._metricSetList = value;
    }
    // Temporarily expose input value. Use with caution.
    get metricSetListInput() {
        return this._metricSetList;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            anomaly_detector_config: lookoutmetricsAnomalyDetectorAnomalyDetectorConfigToTerraform(this._anomalyDetectorConfig),
            anomaly_detector_description: cdktf.stringToTerraform(this._anomalyDetectorDescription),
            anomaly_detector_name: cdktf.stringToTerraform(this._anomalyDetectorName),
            kms_key_arn: cdktf.stringToTerraform(this._kmsKeyArn),
            metric_set_list: cdktf.listMapper(lookoutmetricsAnomalyDetectorMetricSetListToTerraform)(this._metricSetList),
        };
    }
}
exports.LookoutmetricsAnomalyDetector = LookoutmetricsAnomalyDetector;
// =================
// STATIC PROPERTIES
// =================
LookoutmetricsAnomalyDetector.tfResourceType = "awscc_lookoutmetrics_anomaly_detector";
//# sourceMappingURL=data:application/json;base64,