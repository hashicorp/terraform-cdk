"use strict";
// https://www.terraform.io/docs/providers/awscc/d/sagemaker_project.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSagemakerProject = exports.dataAwsccSagemakerProjectTagsToTerraform = exports.DataAwsccSagemakerProjectTags = exports.dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsToTerraform = exports.DataAwsccSagemakerProjectServiceCatalogProvisioningDetails = exports.dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform = exports.DataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParameters = exports.dataAwsccSagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform = exports.DataAwsccSagemakerProjectServiceCatalogProvisionedProductDetails = void 0;
const cdktf = require("cdktf");
class DataAwsccSagemakerProjectServiceCatalogProvisionedProductDetails extends cdktf.ComplexComputedList {
    // provisioned_product_id - computed: true, optional: false, required: false
    get provisionedProductId() {
        return this.getStringAttribute('provisioned_product_id');
    }
    // provisioned_product_status_message - computed: true, optional: false, required: false
    get provisionedProductStatusMessage() {
        return this.getStringAttribute('provisioned_product_status_message');
    }
}
exports.DataAwsccSagemakerProjectServiceCatalogProvisionedProductDetails = DataAwsccSagemakerProjectServiceCatalogProvisionedProductDetails;
function dataAwsccSagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        provisioned_product_id: cdktf.stringToTerraform(struct.provisionedProductId),
        provisioned_product_status_message: cdktf.stringToTerraform(struct.provisionedProductStatusMessage),
    };
}
exports.dataAwsccSagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform = dataAwsccSagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform;
class DataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParameters extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParameters = DataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParameters;
function dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform = dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform;
class DataAwsccSagemakerProjectServiceCatalogProvisioningDetails extends cdktf.ComplexComputedList {
    // path_id - computed: true, optional: false, required: false
    get pathId() {
        return this.getStringAttribute('path_id');
    }
    // product_id - computed: true, optional: false, required: false
    get productId() {
        return this.getStringAttribute('product_id');
    }
    // provisioning_artifact_id - computed: true, optional: false, required: false
    get provisioningArtifactId() {
        return this.getStringAttribute('provisioning_artifact_id');
    }
    // provisioning_parameters - computed: true, optional: false, required: false
    get provisioningParameters() {
        return this.interpolationForAttribute('provisioning_parameters');
    }
}
exports.DataAwsccSagemakerProjectServiceCatalogProvisioningDetails = DataAwsccSagemakerProjectServiceCatalogProvisioningDetails;
function dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        path_id: cdktf.stringToTerraform(struct.pathId),
        product_id: cdktf.stringToTerraform(struct.productId),
        provisioning_artifact_id: cdktf.stringToTerraform(struct.provisioningArtifactId),
        provisioning_parameters: cdktf.listMapper(dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform)(struct.provisioningParameters),
    };
}
exports.dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsToTerraform = dataAwsccSagemakerProjectServiceCatalogProvisioningDetailsToTerraform;
class DataAwsccSagemakerProjectTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccSagemakerProjectTags = DataAwsccSagemakerProjectTags;
function dataAwsccSagemakerProjectTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccSagemakerProjectTagsToTerraform = dataAwsccSagemakerProjectTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_project.html awscc_sagemaker_project}
*/
class DataAwsccSagemakerProject extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_project.html awscc_sagemaker_project} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSagemakerProjectConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_project',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // project_arn - computed: true, optional: false, required: false
    get projectArn() {
        return this.getStringAttribute('project_arn');
    }
    // project_description - computed: true, optional: false, required: false
    get projectDescription() {
        return this.getStringAttribute('project_description');
    }
    // project_id - computed: true, optional: false, required: false
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    // project_name - computed: true, optional: false, required: false
    get projectName() {
        return this.getStringAttribute('project_name');
    }
    // project_status - computed: true, optional: false, required: false
    get projectStatus() {
        return this.getStringAttribute('project_status');
    }
    // service_catalog_provisioned_product_details - computed: true, optional: false, required: false
    get serviceCatalogProvisionedProductDetails() {
        return this.interpolationForAttribute('service_catalog_provisioned_product_details');
    }
    // service_catalog_provisioning_details - computed: true, optional: false, required: false
    get serviceCatalogProvisioningDetails() {
        return this.interpolationForAttribute('service_catalog_provisioning_details');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSagemakerProject = DataAwsccSagemakerProject;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSagemakerProject.tfResourceType = "awscc_sagemaker_project";
//# sourceMappingURL=data:application/json;base64,