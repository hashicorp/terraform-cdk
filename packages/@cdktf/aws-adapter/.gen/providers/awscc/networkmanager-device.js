"use strict";
// https://www.terraform.io/docs/providers/awscc/r/networkmanager_device.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkmanagerDevice = exports.networkmanagerDeviceTagsToTerraform = exports.networkmanagerDeviceLocationToTerraform = void 0;
const cdktf = require("cdktf");
function networkmanagerDeviceLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: cdktf.stringToTerraform(struct.address),
        latitude: cdktf.stringToTerraform(struct.latitude),
        longitude: cdktf.stringToTerraform(struct.longitude),
    };
}
exports.networkmanagerDeviceLocationToTerraform = networkmanagerDeviceLocationToTerraform;
function networkmanagerDeviceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkmanagerDeviceTagsToTerraform = networkmanagerDeviceTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/networkmanager_device.html awscc_networkmanager_device}
*/
class NetworkmanagerDevice extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/networkmanager_device.html awscc_networkmanager_device} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkmanagerDeviceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkmanager_device',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._globalNetworkId = config.globalNetworkId;
        this._location = config.location;
        this._model = config.model;
        this._serialNumber = config.serialNumber;
        this._siteId = config.siteId;
        this._tags = config.tags;
        this._type = config.type;
        this._vendor = config.vendor;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // device_arn - computed: true, optional: false, required: false
    get deviceArn() {
        return this.getStringAttribute('device_arn');
    }
    // device_id - computed: true, optional: false, required: false
    get deviceId() {
        return this.getStringAttribute('device_id');
    }
    get globalNetworkId() {
        return this.getStringAttribute('global_network_id');
    }
    set globalNetworkId(value) {
        this._globalNetworkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get globalNetworkIdInput() {
        return this._globalNetworkId;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get location() {
        return this.interpolationForAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get model() {
        return this.getStringAttribute('model');
    }
    set model(value) {
        this._model = value;
    }
    resetModel() {
        this._model = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelInput() {
        return this._model;
    }
    get serialNumber() {
        return this.getStringAttribute('serial_number');
    }
    set serialNumber(value) {
        this._serialNumber = value;
    }
    resetSerialNumber() {
        this._serialNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serialNumberInput() {
        return this._serialNumber;
    }
    get siteId() {
        return this.getStringAttribute('site_id');
    }
    set siteId(value) {
        this._siteId = value;
    }
    resetSiteId() {
        this._siteId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get siteIdInput() {
        return this._siteId;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get vendor() {
        return this.getStringAttribute('vendor');
    }
    set vendor(value) {
        this._vendor = value;
    }
    resetVendor() {
        this._vendor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vendorInput() {
        return this._vendor;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            global_network_id: cdktf.stringToTerraform(this._globalNetworkId),
            location: networkmanagerDeviceLocationToTerraform(this._location),
            model: cdktf.stringToTerraform(this._model),
            serial_number: cdktf.stringToTerraform(this._serialNumber),
            site_id: cdktf.stringToTerraform(this._siteId),
            tags: cdktf.listMapper(networkmanagerDeviceTagsToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
            vendor: cdktf.stringToTerraform(this._vendor),
        };
    }
}
exports.NetworkmanagerDevice = NetworkmanagerDevice;
// =================
// STATIC PROPERTIES
// =================
NetworkmanagerDevice.tfResourceType = "awscc_networkmanager_device";
//# sourceMappingURL=data:application/json;base64,