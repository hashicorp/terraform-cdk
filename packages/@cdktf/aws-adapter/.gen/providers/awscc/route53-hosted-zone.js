"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53_hosted_zone.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53HostedZone = exports.route53HostedZoneVpCsToTerraform = exports.route53HostedZoneQueryLoggingConfigToTerraform = exports.route53HostedZoneHostedZoneTagsToTerraform = exports.route53HostedZoneHostedZoneConfigToTerraform = void 0;
const cdktf = require("cdktf");
function route53HostedZoneHostedZoneConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comment: cdktf.stringToTerraform(struct.comment),
    };
}
exports.route53HostedZoneHostedZoneConfigToTerraform = route53HostedZoneHostedZoneConfigToTerraform;
function route53HostedZoneHostedZoneTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.route53HostedZoneHostedZoneTagsToTerraform = route53HostedZoneHostedZoneTagsToTerraform;
function route53HostedZoneQueryLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logs_log_group_arn: cdktf.stringToTerraform(struct.cloudwatchLogsLogGroupArn),
    };
}
exports.route53HostedZoneQueryLoggingConfigToTerraform = route53HostedZoneQueryLoggingConfigToTerraform;
function route53HostedZoneVpCsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
        vpc_region: cdktf.stringToTerraform(struct.vpcRegion),
    };
}
exports.route53HostedZoneVpCsToTerraform = route53HostedZoneVpCsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53_hosted_zone.html awscc_route53_hosted_zone}
*/
class Route53HostedZone extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53_hosted_zone.html awscc_route53_hosted_zone} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53HostedZoneConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53_hosted_zone',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._hostedZoneConfig = config.hostedZoneConfig;
        this._hostedZoneTags = config.hostedZoneTags;
        this._name = config.name;
        this._queryLoggingConfig = config.queryLoggingConfig;
        this._vpCs = config.vpCs;
    }
    get hostedZoneConfig() {
        return this.interpolationForAttribute('hosted_zone_config');
    }
    set hostedZoneConfig(value) {
        this._hostedZoneConfig = value;
    }
    resetHostedZoneConfig() {
        this._hostedZoneConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostedZoneConfigInput() {
        return this._hostedZoneConfig;
    }
    get hostedZoneTags() {
        return this.interpolationForAttribute('hosted_zone_tags');
    }
    set hostedZoneTags(value) {
        this._hostedZoneTags = value;
    }
    resetHostedZoneTags() {
        this._hostedZoneTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostedZoneTagsInput() {
        return this._hostedZoneTags;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // name_servers - computed: true, optional: false, required: false
    get nameServers() {
        return this.getListAttribute('name_servers');
    }
    get queryLoggingConfig() {
        return this.interpolationForAttribute('query_logging_config');
    }
    set queryLoggingConfig(value) {
        this._queryLoggingConfig = value;
    }
    resetQueryLoggingConfig() {
        this._queryLoggingConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryLoggingConfigInput() {
        return this._queryLoggingConfig;
    }
    get vpCs() {
        return this.interpolationForAttribute('vp_cs');
    }
    set vpCs(value) {
        this._vpCs = value;
    }
    resetVpCs() {
        this._vpCs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpCsInput() {
        return this._vpCs;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            hosted_zone_config: route53HostedZoneHostedZoneConfigToTerraform(this._hostedZoneConfig),
            hosted_zone_tags: cdktf.listMapper(route53HostedZoneHostedZoneTagsToTerraform)(this._hostedZoneTags),
            name: cdktf.stringToTerraform(this._name),
            query_logging_config: route53HostedZoneQueryLoggingConfigToTerraform(this._queryLoggingConfig),
            vp_cs: cdktf.listMapper(route53HostedZoneVpCsToTerraform)(this._vpCs),
        };
    }
}
exports.Route53HostedZone = Route53HostedZone;
// =================
// STATIC PROPERTIES
// =================
Route53HostedZone.tfResourceType = "awscc_route53_hosted_zone";
//# sourceMappingURL=data:application/json;base64,