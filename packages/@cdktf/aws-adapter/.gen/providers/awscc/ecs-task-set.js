"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecs_task_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsTaskSet = exports.ecsTaskSetServiceRegistriesToTerraform = exports.ecsTaskSetScaleToTerraform = exports.ecsTaskSetNetworkConfigurationToTerraform = exports.ecsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform = exports.ecsTaskSetLoadBalancersToTerraform = void 0;
const cdktf = require("cdktf");
function ecsTaskSetLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        container_port: cdktf.numberToTerraform(struct.containerPort),
        load_balancer_name: cdktf.stringToTerraform(struct.loadBalancerName),
        target_group_arn: cdktf.stringToTerraform(struct.targetGroupArn),
    };
}
exports.ecsTaskSetLoadBalancersToTerraform = ecsTaskSetLoadBalancersToTerraform;
function ecsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        assign_public_ip: cdktf.stringToTerraform(struct.assignPublicIp),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.ecsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform = ecsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform;
function ecsTaskSetNetworkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aws_vpc_configuration: ecsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform(struct.awsVpcConfiguration),
    };
}
exports.ecsTaskSetNetworkConfigurationToTerraform = ecsTaskSetNetworkConfigurationToTerraform;
function ecsTaskSetScaleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.ecsTaskSetScaleToTerraform = ecsTaskSetScaleToTerraform;
function ecsTaskSetServiceRegistriesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        container_port: cdktf.numberToTerraform(struct.containerPort),
        port: cdktf.numberToTerraform(struct.port),
        registry_arn: cdktf.stringToTerraform(struct.registryArn),
    };
}
exports.ecsTaskSetServiceRegistriesToTerraform = ecsTaskSetServiceRegistriesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecs_task_set.html awscc_ecs_task_set}
*/
class EcsTaskSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecs_task_set.html awscc_ecs_task_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsTaskSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_task_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cluster = config.cluster;
        this._externalId = config.externalId;
        this._launchType = config.launchType;
        this._loadBalancers = config.loadBalancers;
        this._networkConfiguration = config.networkConfiguration;
        this._platformVersion = config.platformVersion;
        this._scale = config.scale;
        this._service = config.service;
        this._serviceRegistries = config.serviceRegistries;
        this._taskDefinition = config.taskDefinition;
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    get externalId() {
        return this.getStringAttribute('external_id');
    }
    set externalId(value) {
        this._externalId = value;
    }
    resetExternalId() {
        this._externalId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalIdInput() {
        return this._externalId;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get launchType() {
        return this.getStringAttribute('launch_type');
    }
    set launchType(value) {
        this._launchType = value;
    }
    resetLaunchType() {
        this._launchType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchTypeInput() {
        return this._launchType;
    }
    get loadBalancers() {
        return this.interpolationForAttribute('load_balancers');
    }
    set loadBalancers(value) {
        this._loadBalancers = value;
    }
    resetLoadBalancers() {
        this._loadBalancers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancersInput() {
        return this._loadBalancers;
    }
    get networkConfiguration() {
        return this.interpolationForAttribute('network_configuration');
    }
    set networkConfiguration(value) {
        this._networkConfiguration = value;
    }
    resetNetworkConfiguration() {
        this._networkConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigurationInput() {
        return this._networkConfiguration;
    }
    get platformVersion() {
        return this.getStringAttribute('platform_version');
    }
    set platformVersion(value) {
        this._platformVersion = value;
    }
    resetPlatformVersion() {
        this._platformVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformVersionInput() {
        return this._platformVersion;
    }
    get scale() {
        return this.interpolationForAttribute('scale');
    }
    set scale(value) {
        this._scale = value;
    }
    resetScale() {
        this._scale = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scaleInput() {
        return this._scale;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get serviceRegistries() {
        return this.interpolationForAttribute('service_registries');
    }
    set serviceRegistries(value) {
        this._serviceRegistries = value;
    }
    resetServiceRegistries() {
        this._serviceRegistries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceRegistriesInput() {
        return this._serviceRegistries;
    }
    get taskDefinition() {
        return this.getStringAttribute('task_definition');
    }
    set taskDefinition(value) {
        this._taskDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskDefinitionInput() {
        return this._taskDefinition;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster: cdktf.stringToTerraform(this._cluster),
            external_id: cdktf.stringToTerraform(this._externalId),
            launch_type: cdktf.stringToTerraform(this._launchType),
            load_balancers: cdktf.listMapper(ecsTaskSetLoadBalancersToTerraform)(this._loadBalancers),
            network_configuration: ecsTaskSetNetworkConfigurationToTerraform(this._networkConfiguration),
            platform_version: cdktf.stringToTerraform(this._platformVersion),
            scale: ecsTaskSetScaleToTerraform(this._scale),
            service: cdktf.stringToTerraform(this._service),
            service_registries: cdktf.listMapper(ecsTaskSetServiceRegistriesToTerraform)(this._serviceRegistries),
            task_definition: cdktf.stringToTerraform(this._taskDefinition),
        };
    }
}
exports.EcsTaskSet = EcsTaskSet;
// =================
// STATIC PROPERTIES
// =================
EcsTaskSet.tfResourceType = "awscc_ecs_task_set";
//# sourceMappingURL=data:application/json;base64,