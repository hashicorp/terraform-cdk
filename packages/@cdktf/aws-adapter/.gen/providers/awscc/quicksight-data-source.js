"use strict";
// https://www.terraform.io/docs/providers/awscc/r/quicksight_data_source.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.quicksightDataSourceDataSourceParametersS3ParametersManifestFileLocationToTerraform = exports.quicksightDataSourceDataSourceParametersRedshiftParametersToTerraform = exports.quicksightDataSourceDataSourceParametersRdsParametersToTerraform = exports.quicksightDataSourceDataSourceParametersPrestoParametersToTerraform = exports.quicksightDataSourceDataSourceParametersPostgreSqlParametersToTerraform = exports.quicksightDataSourceDataSourceParametersOracleParametersToTerraform = exports.quicksightDataSourceDataSourceParametersMySqlParametersToTerraform = exports.quicksightDataSourceDataSourceParametersMariaDbParametersToTerraform = exports.quicksightDataSourceDataSourceParametersAuroraPostgreSqlParametersToTerraform = exports.quicksightDataSourceDataSourceParametersAuroraParametersToTerraform = exports.quicksightDataSourceDataSourceParametersAthenaParametersToTerraform = exports.quicksightDataSourceDataSourceParametersAmazonElasticsearchParametersToTerraform = exports.quicksightDataSourceCredentialsToTerraform = exports.quicksightDataSourceCredentialsCredentialPairToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersTeradataParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSqlServerParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSparkParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSnowflakeParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRedshiftParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRdsParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPrestoParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPostgreSqlParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersOracleParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMySqlParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMariaDbParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAthenaParametersToTerraform = exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersTeradataParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersSqlServerParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersSparkParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersSnowflakeParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersS3ParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersRedshiftParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersRdsParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersPrestoParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersPostgreSqlParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersOracleParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersMySqlParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersMariaDbParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersAuroraParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersAthenaParametersToTerraform = exports.quicksightDataSourceAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform = void 0;
exports.QuicksightDataSource = exports.quicksightDataSourceVpcConnectionPropertiesToTerraform = exports.quicksightDataSourceTagsToTerraform = exports.quicksightDataSourceSslPropertiesToTerraform = exports.quicksightDataSourcePermissionsToTerraform = exports.quicksightDataSourceErrorInfoToTerraform = exports.quicksightDataSourceDataSourceParametersToTerraform = exports.quicksightDataSourceDataSourceParametersTeradataParametersToTerraform = exports.quicksightDataSourceDataSourceParametersSqlServerParametersToTerraform = exports.quicksightDataSourceDataSourceParametersSparkParametersToTerraform = exports.quicksightDataSourceDataSourceParametersSnowflakeParametersToTerraform = exports.quicksightDataSourceDataSourceParametersS3ParametersToTerraform = void 0;
const cdktf = require("cdktf");
function quicksightDataSourceAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersAthenaParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        work_group: cdktf.stringToTerraform(struct.workGroup),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersAthenaParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersAthenaParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersAuroraParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersAuroraParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersAuroraParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersMariaDbParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersMariaDbParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersMariaDbParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersMySqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersMySqlParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersMySqlParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersOracleParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersOracleParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersOracleParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersPostgreSqlParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersPostgreSqlParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersPrestoParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersPrestoParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersPrestoParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersRdsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        instance_id: cdktf.stringToTerraform(struct.instanceId),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersRdsParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersRdsParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersRedshiftParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersRedshiftParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersRedshiftParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform = quicksightDataSourceAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform;
function quicksightDataSourceAlternateDataSourceParametersS3ParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        manifest_file_location: quicksightDataSourceAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct.manifestFileLocation),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersS3ParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersS3ParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersSnowflakeParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersSnowflakeParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersSnowflakeParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersSparkParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersSparkParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersSparkParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersSqlServerParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersSqlServerParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersSqlServerParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersTeradataParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersTeradataParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersTeradataParametersToTerraform;
function quicksightDataSourceAlternateDataSourceParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amazon_elasticsearch_parameters: quicksightDataSourceAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform(struct.amazonElasticsearchParameters),
        athena_parameters: quicksightDataSourceAlternateDataSourceParametersAthenaParametersToTerraform(struct.athenaParameters),
        aurora_parameters: quicksightDataSourceAlternateDataSourceParametersAuroraParametersToTerraform(struct.auroraParameters),
        aurora_postgre_sql_parameters: quicksightDataSourceAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct.auroraPostgreSqlParameters),
        maria_db_parameters: quicksightDataSourceAlternateDataSourceParametersMariaDbParametersToTerraform(struct.mariaDbParameters),
        my_sql_parameters: quicksightDataSourceAlternateDataSourceParametersMySqlParametersToTerraform(struct.mySqlParameters),
        oracle_parameters: quicksightDataSourceAlternateDataSourceParametersOracleParametersToTerraform(struct.oracleParameters),
        postgre_sql_parameters: quicksightDataSourceAlternateDataSourceParametersPostgreSqlParametersToTerraform(struct.postgreSqlParameters),
        presto_parameters: quicksightDataSourceAlternateDataSourceParametersPrestoParametersToTerraform(struct.prestoParameters),
        rds_parameters: quicksightDataSourceAlternateDataSourceParametersRdsParametersToTerraform(struct.rdsParameters),
        redshift_parameters: quicksightDataSourceAlternateDataSourceParametersRedshiftParametersToTerraform(struct.redshiftParameters),
        s3_parameters: quicksightDataSourceAlternateDataSourceParametersS3ParametersToTerraform(struct.s3Parameters),
        snowflake_parameters: quicksightDataSourceAlternateDataSourceParametersSnowflakeParametersToTerraform(struct.snowflakeParameters),
        spark_parameters: quicksightDataSourceAlternateDataSourceParametersSparkParametersToTerraform(struct.sparkParameters),
        sql_server_parameters: quicksightDataSourceAlternateDataSourceParametersSqlServerParametersToTerraform(struct.sqlServerParameters),
        teradata_parameters: quicksightDataSourceAlternateDataSourceParametersTeradataParametersToTerraform(struct.teradataParameters),
    };
}
exports.quicksightDataSourceAlternateDataSourceParametersToTerraform = quicksightDataSourceAlternateDataSourceParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAthenaParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        work_group: cdktf.stringToTerraform(struct.workGroup),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAthenaParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAthenaParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMariaDbParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMariaDbParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMariaDbParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMySqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMySqlParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMySqlParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersOracleParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersOracleParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersOracleParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPostgreSqlParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPostgreSqlParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPrestoParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPrestoParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPrestoParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRdsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        instance_id: cdktf.stringToTerraform(struct.instanceId),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRdsParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRdsParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRedshiftParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRedshiftParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRedshiftParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        manifest_file_location: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct.manifestFileLocation),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSnowflakeParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSnowflakeParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSnowflakeParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSparkParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSparkParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSparkParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSqlServerParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSqlServerParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSqlServerParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersTeradataParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersTeradataParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersTeradataParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amazon_elasticsearch_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAmazonElasticsearchParametersToTerraform(struct.amazonElasticsearchParameters),
        athena_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAthenaParametersToTerraform(struct.athenaParameters),
        aurora_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraParametersToTerraform(struct.auroraParameters),
        aurora_postgre_sql_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct.auroraPostgreSqlParameters),
        maria_db_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMariaDbParametersToTerraform(struct.mariaDbParameters),
        my_sql_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersMySqlParametersToTerraform(struct.mySqlParameters),
        oracle_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersOracleParametersToTerraform(struct.oracleParameters),
        postgre_sql_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPostgreSqlParametersToTerraform(struct.postgreSqlParameters),
        presto_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersPrestoParametersToTerraform(struct.prestoParameters),
        rds_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRdsParametersToTerraform(struct.rdsParameters),
        redshift_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersRedshiftParametersToTerraform(struct.redshiftParameters),
        s3_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersS3ParametersToTerraform(struct.s3Parameters),
        snowflake_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSnowflakeParametersToTerraform(struct.snowflakeParameters),
        spark_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSparkParametersToTerraform(struct.sparkParameters),
        sql_server_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersSqlServerParametersToTerraform(struct.sqlServerParameters),
        teradata_parameters: quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersTeradataParametersToTerraform(struct.teradataParameters),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersToTerraform = quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersToTerraform;
function quicksightDataSourceCredentialsCredentialPairToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alternate_data_source_parameters: cdktf.listMapper(quicksightDataSourceCredentialsCredentialPairAlternateDataSourceParametersToTerraform)(struct.alternateDataSourceParameters),
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairToTerraform = quicksightDataSourceCredentialsCredentialPairToTerraform;
function quicksightDataSourceCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        copy_source_arn: cdktf.stringToTerraform(struct.copySourceArn),
        credential_pair: quicksightDataSourceCredentialsCredentialPairToTerraform(struct.credentialPair),
    };
}
exports.quicksightDataSourceCredentialsToTerraform = quicksightDataSourceCredentialsToTerraform;
function quicksightDataSourceDataSourceParametersAmazonElasticsearchParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.quicksightDataSourceDataSourceParametersAmazonElasticsearchParametersToTerraform = quicksightDataSourceDataSourceParametersAmazonElasticsearchParametersToTerraform;
function quicksightDataSourceDataSourceParametersAthenaParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        work_group: cdktf.stringToTerraform(struct.workGroup),
    };
}
exports.quicksightDataSourceDataSourceParametersAthenaParametersToTerraform = quicksightDataSourceDataSourceParametersAthenaParametersToTerraform;
function quicksightDataSourceDataSourceParametersAuroraParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersAuroraParametersToTerraform = quicksightDataSourceDataSourceParametersAuroraParametersToTerraform;
function quicksightDataSourceDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersAuroraPostgreSqlParametersToTerraform = quicksightDataSourceDataSourceParametersAuroraPostgreSqlParametersToTerraform;
function quicksightDataSourceDataSourceParametersMariaDbParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersMariaDbParametersToTerraform = quicksightDataSourceDataSourceParametersMariaDbParametersToTerraform;
function quicksightDataSourceDataSourceParametersMySqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersMySqlParametersToTerraform = quicksightDataSourceDataSourceParametersMySqlParametersToTerraform;
function quicksightDataSourceDataSourceParametersOracleParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersOracleParametersToTerraform = quicksightDataSourceDataSourceParametersOracleParametersToTerraform;
function quicksightDataSourceDataSourceParametersPostgreSqlParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersPostgreSqlParametersToTerraform = quicksightDataSourceDataSourceParametersPostgreSqlParametersToTerraform;
function quicksightDataSourceDataSourceParametersPrestoParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersPrestoParametersToTerraform = quicksightDataSourceDataSourceParametersPrestoParametersToTerraform;
function quicksightDataSourceDataSourceParametersRdsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        instance_id: cdktf.stringToTerraform(struct.instanceId),
    };
}
exports.quicksightDataSourceDataSourceParametersRdsParametersToTerraform = quicksightDataSourceDataSourceParametersRdsParametersToTerraform;
function quicksightDataSourceDataSourceParametersRedshiftParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersRedshiftParametersToTerraform = quicksightDataSourceDataSourceParametersRedshiftParametersToTerraform;
function quicksightDataSourceDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.quicksightDataSourceDataSourceParametersS3ParametersManifestFileLocationToTerraform = quicksightDataSourceDataSourceParametersS3ParametersManifestFileLocationToTerraform;
function quicksightDataSourceDataSourceParametersS3ParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        manifest_file_location: quicksightDataSourceDataSourceParametersS3ParametersManifestFileLocationToTerraform(struct.manifestFileLocation),
    };
}
exports.quicksightDataSourceDataSourceParametersS3ParametersToTerraform = quicksightDataSourceDataSourceParametersS3ParametersToTerraform;
function quicksightDataSourceDataSourceParametersSnowflakeParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.quicksightDataSourceDataSourceParametersSnowflakeParametersToTerraform = quicksightDataSourceDataSourceParametersSnowflakeParametersToTerraform;
function quicksightDataSourceDataSourceParametersSparkParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersSparkParametersToTerraform = quicksightDataSourceDataSourceParametersSparkParametersToTerraform;
function quicksightDataSourceDataSourceParametersSqlServerParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersSqlServerParametersToTerraform = quicksightDataSourceDataSourceParametersSqlServerParametersToTerraform;
function quicksightDataSourceDataSourceParametersTeradataParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceDataSourceParametersTeradataParametersToTerraform = quicksightDataSourceDataSourceParametersTeradataParametersToTerraform;
function quicksightDataSourceDataSourceParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amazon_elasticsearch_parameters: quicksightDataSourceDataSourceParametersAmazonElasticsearchParametersToTerraform(struct.amazonElasticsearchParameters),
        athena_parameters: quicksightDataSourceDataSourceParametersAthenaParametersToTerraform(struct.athenaParameters),
        aurora_parameters: quicksightDataSourceDataSourceParametersAuroraParametersToTerraform(struct.auroraParameters),
        aurora_postgre_sql_parameters: quicksightDataSourceDataSourceParametersAuroraPostgreSqlParametersToTerraform(struct.auroraPostgreSqlParameters),
        maria_db_parameters: quicksightDataSourceDataSourceParametersMariaDbParametersToTerraform(struct.mariaDbParameters),
        my_sql_parameters: quicksightDataSourceDataSourceParametersMySqlParametersToTerraform(struct.mySqlParameters),
        oracle_parameters: quicksightDataSourceDataSourceParametersOracleParametersToTerraform(struct.oracleParameters),
        postgre_sql_parameters: quicksightDataSourceDataSourceParametersPostgreSqlParametersToTerraform(struct.postgreSqlParameters),
        presto_parameters: quicksightDataSourceDataSourceParametersPrestoParametersToTerraform(struct.prestoParameters),
        rds_parameters: quicksightDataSourceDataSourceParametersRdsParametersToTerraform(struct.rdsParameters),
        redshift_parameters: quicksightDataSourceDataSourceParametersRedshiftParametersToTerraform(struct.redshiftParameters),
        s3_parameters: quicksightDataSourceDataSourceParametersS3ParametersToTerraform(struct.s3Parameters),
        snowflake_parameters: quicksightDataSourceDataSourceParametersSnowflakeParametersToTerraform(struct.snowflakeParameters),
        spark_parameters: quicksightDataSourceDataSourceParametersSparkParametersToTerraform(struct.sparkParameters),
        sql_server_parameters: quicksightDataSourceDataSourceParametersSqlServerParametersToTerraform(struct.sqlServerParameters),
        teradata_parameters: quicksightDataSourceDataSourceParametersTeradataParametersToTerraform(struct.teradataParameters),
    };
}
exports.quicksightDataSourceDataSourceParametersToTerraform = quicksightDataSourceDataSourceParametersToTerraform;
function quicksightDataSourceErrorInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        message: cdktf.stringToTerraform(struct.message),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.quicksightDataSourceErrorInfoToTerraform = quicksightDataSourceErrorInfoToTerraform;
function quicksightDataSourcePermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.quicksightDataSourcePermissionsToTerraform = quicksightDataSourcePermissionsToTerraform;
function quicksightDataSourceSslPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_ssl: cdktf.booleanToTerraform(struct.disableSsl),
    };
}
exports.quicksightDataSourceSslPropertiesToTerraform = quicksightDataSourceSslPropertiesToTerraform;
function quicksightDataSourceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.quicksightDataSourceTagsToTerraform = quicksightDataSourceTagsToTerraform;
function quicksightDataSourceVpcConnectionPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        vpc_connection_arn: cdktf.stringToTerraform(struct.vpcConnectionArn),
    };
}
exports.quicksightDataSourceVpcConnectionPropertiesToTerraform = quicksightDataSourceVpcConnectionPropertiesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/quicksight_data_source.html awscc_quicksight_data_source}
*/
class QuicksightDataSource extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/quicksight_data_source.html awscc_quicksight_data_source} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options QuicksightDataSourceConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_quicksight_data_source',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._alternateDataSourceParameters = config.alternateDataSourceParameters;
        this._awsAccountId = config.awsAccountId;
        this._credentials = config.credentials;
        this._dataSourceId = config.dataSourceId;
        this._dataSourceParameters = config.dataSourceParameters;
        this._errorInfo = config.errorInfo;
        this._name = config.name;
        this._permissions = config.permissions;
        this._sslProperties = config.sslProperties;
        this._tags = config.tags;
        this._type = config.type;
        this._vpcConnectionProperties = config.vpcConnectionProperties;
    }
    get alternateDataSourceParameters() {
        return this.interpolationForAttribute('alternate_data_source_parameters');
    }
    set alternateDataSourceParameters(value) {
        this._alternateDataSourceParameters = value;
    }
    resetAlternateDataSourceParameters() {
        this._alternateDataSourceParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alternateDataSourceParametersInput() {
        return this._alternateDataSourceParameters;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get awsAccountId() {
        return this.getStringAttribute('aws_account_id');
    }
    set awsAccountId(value) {
        this._awsAccountId = value;
    }
    resetAwsAccountId() {
        this._awsAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsAccountIdInput() {
        return this._awsAccountId;
    }
    // created_time - computed: true, optional: false, required: false
    get createdTime() {
        return this.getStringAttribute('created_time');
    }
    get credentials() {
        return this.interpolationForAttribute('credentials');
    }
    set credentials(value) {
        this._credentials = value;
    }
    resetCredentials() {
        this._credentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsInput() {
        return this._credentials;
    }
    get dataSourceId() {
        return this.getStringAttribute('data_source_id');
    }
    set dataSourceId(value) {
        this._dataSourceId = value;
    }
    resetDataSourceId() {
        this._dataSourceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceIdInput() {
        return this._dataSourceId;
    }
    get dataSourceParameters() {
        return this.interpolationForAttribute('data_source_parameters');
    }
    set dataSourceParameters(value) {
        this._dataSourceParameters = value;
    }
    resetDataSourceParameters() {
        this._dataSourceParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceParametersInput() {
        return this._dataSourceParameters;
    }
    get errorInfo() {
        return this.interpolationForAttribute('error_info');
    }
    set errorInfo(value) {
        this._errorInfo = value;
    }
    resetErrorInfo() {
        this._errorInfo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorInfoInput() {
        return this._errorInfo;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_time - computed: true, optional: false, required: false
    get lastUpdatedTime() {
        return this.getStringAttribute('last_updated_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get permissions() {
        return this.interpolationForAttribute('permissions');
    }
    set permissions(value) {
        this._permissions = value;
    }
    resetPermissions() {
        this._permissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    get sslProperties() {
        return this.interpolationForAttribute('ssl_properties');
    }
    set sslProperties(value) {
        this._sslProperties = value;
    }
    resetSslProperties() {
        this._sslProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslPropertiesInput() {
        return this._sslProperties;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get vpcConnectionProperties() {
        return this.interpolationForAttribute('vpc_connection_properties');
    }
    set vpcConnectionProperties(value) {
        this._vpcConnectionProperties = value;
    }
    resetVpcConnectionProperties() {
        this._vpcConnectionProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConnectionPropertiesInput() {
        return this._vpcConnectionProperties;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            alternate_data_source_parameters: cdktf.listMapper(quicksightDataSourceAlternateDataSourceParametersToTerraform)(this._alternateDataSourceParameters),
            aws_account_id: cdktf.stringToTerraform(this._awsAccountId),
            credentials: quicksightDataSourceCredentialsToTerraform(this._credentials),
            data_source_id: cdktf.stringToTerraform(this._dataSourceId),
            data_source_parameters: quicksightDataSourceDataSourceParametersToTerraform(this._dataSourceParameters),
            error_info: quicksightDataSourceErrorInfoToTerraform(this._errorInfo),
            name: cdktf.stringToTerraform(this._name),
            permissions: cdktf.listMapper(quicksightDataSourcePermissionsToTerraform)(this._permissions),
            ssl_properties: quicksightDataSourceSslPropertiesToTerraform(this._sslProperties),
            tags: cdktf.listMapper(quicksightDataSourceTagsToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
            vpc_connection_properties: quicksightDataSourceVpcConnectionPropertiesToTerraform(this._vpcConnectionProperties),
        };
    }
}
exports.QuicksightDataSource = QuicksightDataSource;
// =================
// STATIC PROPERTIES
// =================
QuicksightDataSource.tfResourceType = "awscc_quicksight_data_source";
//# sourceMappingURL=data:application/json;base64,