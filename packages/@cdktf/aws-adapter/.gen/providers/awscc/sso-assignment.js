"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sso_assignment.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsoAssignment = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sso_assignment.html awscc_sso_assignment}
*/
class SsoAssignment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sso_assignment.html awscc_sso_assignment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsoAssignmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sso_assignment',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._instanceArn = config.instanceArn;
        this._permissionSetArn = config.permissionSetArn;
        this._principalId = config.principalId;
        this._principalType = config.principalType;
        this._targetId = config.targetId;
        this._targetType = config.targetType;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceArn() {
        return this.getStringAttribute('instance_arn');
    }
    set instanceArn(value) {
        this._instanceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceArnInput() {
        return this._instanceArn;
    }
    get permissionSetArn() {
        return this.getStringAttribute('permission_set_arn');
    }
    set permissionSetArn(value) {
        this._permissionSetArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get permissionSetArnInput() {
        return this._permissionSetArn;
    }
    get principalId() {
        return this.getStringAttribute('principal_id');
    }
    set principalId(value) {
        this._principalId = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalIdInput() {
        return this._principalId;
    }
    get principalType() {
        return this.getStringAttribute('principal_type');
    }
    set principalType(value) {
        this._principalType = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalTypeInput() {
        return this._principalType;
    }
    get targetId() {
        return this.getStringAttribute('target_id');
    }
    set targetId(value) {
        this._targetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetIdInput() {
        return this._targetId;
    }
    get targetType() {
        return this.getStringAttribute('target_type');
    }
    set targetType(value) {
        this._targetType = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetTypeInput() {
        return this._targetType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            instance_arn: cdktf.stringToTerraform(this._instanceArn),
            permission_set_arn: cdktf.stringToTerraform(this._permissionSetArn),
            principal_id: cdktf.stringToTerraform(this._principalId),
            principal_type: cdktf.stringToTerraform(this._principalType),
            target_id: cdktf.stringToTerraform(this._targetId),
            target_type: cdktf.stringToTerraform(this._targetType),
        };
    }
}
exports.SsoAssignment = SsoAssignment;
// =================
// STATIC PROPERTIES
// =================
SsoAssignment.tfResourceType = "awscc_sso_assignment";
//# sourceMappingURL=data:application/json;base64,