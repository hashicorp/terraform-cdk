"use strict";
// https://www.terraform.io/docs/providers/awscc/d/apigateway_usage_plan.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccApigatewayUsagePlan = exports.dataAwsccApigatewayUsagePlanThrottleToTerraform = exports.DataAwsccApigatewayUsagePlanThrottle = exports.dataAwsccApigatewayUsagePlanTagsToTerraform = exports.DataAwsccApigatewayUsagePlanTags = exports.dataAwsccApigatewayUsagePlanQuotaToTerraform = exports.DataAwsccApigatewayUsagePlanQuota = exports.dataAwsccApigatewayUsagePlanApiStagesToTerraform = exports.DataAwsccApigatewayUsagePlanApiStages = exports.dataAwsccApigatewayUsagePlanApiStagesThrottleToTerraform = exports.DataAwsccApigatewayUsagePlanApiStagesThrottle = void 0;
const cdktf = require("cdktf");
class DataAwsccApigatewayUsagePlanApiStagesThrottle extends cdktf.ComplexComputedList {
    // burst_limit - computed: true, optional: false, required: false
    get burstLimit() {
        return this.getNumberAttribute('burst_limit');
    }
    // rate_limit - computed: true, optional: false, required: false
    get rateLimit() {
        return this.getNumberAttribute('rate_limit');
    }
}
exports.DataAwsccApigatewayUsagePlanApiStagesThrottle = DataAwsccApigatewayUsagePlanApiStagesThrottle;
function dataAwsccApigatewayUsagePlanApiStagesThrottleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        burst_limit: cdktf.numberToTerraform(struct.burstLimit),
        rate_limit: cdktf.numberToTerraform(struct.rateLimit),
    };
}
exports.dataAwsccApigatewayUsagePlanApiStagesThrottleToTerraform = dataAwsccApigatewayUsagePlanApiStagesThrottleToTerraform;
class DataAwsccApigatewayUsagePlanApiStages extends cdktf.ComplexComputedList {
    // api_id - computed: true, optional: false, required: false
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    // stage - computed: true, optional: false, required: false
    get stage() {
        return this.getStringAttribute('stage');
    }
    // throttle - computed: true, optional: false, required: false
    get throttle() {
        return this.interpolationForAttribute('throttle');
    }
}
exports.DataAwsccApigatewayUsagePlanApiStages = DataAwsccApigatewayUsagePlanApiStages;
function dataAwsccApigatewayUsagePlanApiStagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_id: cdktf.stringToTerraform(struct.apiId),
        stage: cdktf.stringToTerraform(struct.stage),
        throttle: cdktf.hashMapper(cdktf.anyToTerraform)(struct.throttle),
    };
}
exports.dataAwsccApigatewayUsagePlanApiStagesToTerraform = dataAwsccApigatewayUsagePlanApiStagesToTerraform;
class DataAwsccApigatewayUsagePlanQuota extends cdktf.ComplexComputedList {
    // limit - computed: true, optional: false, required: false
    get limit() {
        return this.getNumberAttribute('limit');
    }
    // offset - computed: true, optional: false, required: false
    get offset() {
        return this.getNumberAttribute('offset');
    }
    // period - computed: true, optional: false, required: false
    get period() {
        return this.getStringAttribute('period');
    }
}
exports.DataAwsccApigatewayUsagePlanQuota = DataAwsccApigatewayUsagePlanQuota;
function dataAwsccApigatewayUsagePlanQuotaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        limit: cdktf.numberToTerraform(struct.limit),
        offset: cdktf.numberToTerraform(struct.offset),
        period: cdktf.stringToTerraform(struct.period),
    };
}
exports.dataAwsccApigatewayUsagePlanQuotaToTerraform = dataAwsccApigatewayUsagePlanQuotaToTerraform;
class DataAwsccApigatewayUsagePlanTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccApigatewayUsagePlanTags = DataAwsccApigatewayUsagePlanTags;
function dataAwsccApigatewayUsagePlanTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccApigatewayUsagePlanTagsToTerraform = dataAwsccApigatewayUsagePlanTagsToTerraform;
class DataAwsccApigatewayUsagePlanThrottle extends cdktf.ComplexComputedList {
    // burst_limit - computed: true, optional: false, required: false
    get burstLimit() {
        return this.getNumberAttribute('burst_limit');
    }
    // rate_limit - computed: true, optional: false, required: false
    get rateLimit() {
        return this.getNumberAttribute('rate_limit');
    }
}
exports.DataAwsccApigatewayUsagePlanThrottle = DataAwsccApigatewayUsagePlanThrottle;
function dataAwsccApigatewayUsagePlanThrottleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        burst_limit: cdktf.numberToTerraform(struct.burstLimit),
        rate_limit: cdktf.numberToTerraform(struct.rateLimit),
    };
}
exports.dataAwsccApigatewayUsagePlanThrottleToTerraform = dataAwsccApigatewayUsagePlanThrottleToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/apigateway_usage_plan.html awscc_apigateway_usage_plan}
*/
class DataAwsccApigatewayUsagePlan extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/apigateway_usage_plan.html awscc_apigateway_usage_plan} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccApigatewayUsagePlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_apigateway_usage_plan',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // api_stages - computed: true, optional: false, required: false
    get apiStages() {
        return this.interpolationForAttribute('api_stages');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // quota - computed: true, optional: false, required: false
    get quota() {
        return this.interpolationForAttribute('quota');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // throttle - computed: true, optional: false, required: false
    get throttle() {
        return this.interpolationForAttribute('throttle');
    }
    // usage_plan_name - computed: true, optional: false, required: false
    get usagePlanName() {
        return this.getStringAttribute('usage_plan_name');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccApigatewayUsagePlan = DataAwsccApigatewayUsagePlan;
// =================
// STATIC PROPERTIES
// =================
DataAwsccApigatewayUsagePlan.tfResourceType = "awscc_apigateway_usage_plan";
//# sourceMappingURL=data:application/json;base64,