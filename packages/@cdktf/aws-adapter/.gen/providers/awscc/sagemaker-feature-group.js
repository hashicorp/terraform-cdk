"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_feature_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerFeatureGroup = exports.sagemakerFeatureGroupTagsToTerraform = exports.sagemakerFeatureGroupOnlineStoreConfigToTerraform = exports.sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform = exports.sagemakerFeatureGroupOfflineStoreConfigToTerraform = exports.sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform = exports.SagemakerFeatureGroupOfflineStoreConfigS3StorageConfig = exports.sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform = exports.sagemakerFeatureGroupFeatureDefinitionsToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerFeatureGroupFeatureDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        feature_name: cdktf.stringToTerraform(struct.featureName),
        feature_type: cdktf.stringToTerraform(struct.featureType),
    };
}
exports.sagemakerFeatureGroupFeatureDefinitionsToTerraform = sagemakerFeatureGroupFeatureDefinitionsToTerraform;
function sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        database: cdktf.stringToTerraform(struct.database),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform = sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform;
class SagemakerFeatureGroupOfflineStoreConfigS3StorageConfig extends cdktf.ComplexComputedList {
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // s3_uri - computed: true, optional: false, required: true
    get s3Uri() {
        return this.getStringAttribute('s3_uri');
    }
}
exports.SagemakerFeatureGroupOfflineStoreConfigS3StorageConfig = SagemakerFeatureGroupOfflineStoreConfigS3StorageConfig;
function sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform = sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform;
function sagemakerFeatureGroupOfflineStoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_catalog_config: sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform(struct.dataCatalogConfig),
        disable_glue_table_creation: cdktf.booleanToTerraform(struct.disableGlueTableCreation),
        s3_storage_config: sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform(struct.s3StorageConfig),
    };
}
exports.sagemakerFeatureGroupOfflineStoreConfigToTerraform = sagemakerFeatureGroupOfflineStoreConfigToTerraform;
function sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
    };
}
exports.sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform = sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform;
function sagemakerFeatureGroupOnlineStoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_online_store: cdktf.booleanToTerraform(struct.enableOnlineStore),
        security_config: sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform(struct.securityConfig),
    };
}
exports.sagemakerFeatureGroupOnlineStoreConfigToTerraform = sagemakerFeatureGroupOnlineStoreConfigToTerraform;
function sagemakerFeatureGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerFeatureGroupTagsToTerraform = sagemakerFeatureGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_feature_group.html awscc_sagemaker_feature_group}
*/
class SagemakerFeatureGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_feature_group.html awscc_sagemaker_feature_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerFeatureGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_feature_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._eventTimeFeatureName = config.eventTimeFeatureName;
        this._featureDefinitions = config.featureDefinitions;
        this._featureGroupName = config.featureGroupName;
        this._offlineStoreConfig = config.offlineStoreConfig;
        this._onlineStoreConfig = config.onlineStoreConfig;
        this._recordIdentifierFeatureName = config.recordIdentifierFeatureName;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get eventTimeFeatureName() {
        return this.getStringAttribute('event_time_feature_name');
    }
    set eventTimeFeatureName(value) {
        this._eventTimeFeatureName = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTimeFeatureNameInput() {
        return this._eventTimeFeatureName;
    }
    get featureDefinitions() {
        return this.interpolationForAttribute('feature_definitions');
    }
    set featureDefinitions(value) {
        this._featureDefinitions = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureDefinitionsInput() {
        return this._featureDefinitions;
    }
    get featureGroupName() {
        return this.getStringAttribute('feature_group_name');
    }
    set featureGroupName(value) {
        this._featureGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureGroupNameInput() {
        return this._featureGroupName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get offlineStoreConfig() {
        return this.interpolationForAttribute('offline_store_config');
    }
    set offlineStoreConfig(value) {
        this._offlineStoreConfig = value;
    }
    resetOfflineStoreConfig() {
        this._offlineStoreConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offlineStoreConfigInput() {
        return this._offlineStoreConfig;
    }
    get onlineStoreConfig() {
        return this.interpolationForAttribute('online_store_config');
    }
    set onlineStoreConfig(value) {
        this._onlineStoreConfig = value;
    }
    resetOnlineStoreConfig() {
        this._onlineStoreConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onlineStoreConfigInput() {
        return this._onlineStoreConfig;
    }
    get recordIdentifierFeatureName() {
        return this.getStringAttribute('record_identifier_feature_name');
    }
    set recordIdentifierFeatureName(value) {
        this._recordIdentifierFeatureName = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordIdentifierFeatureNameInput() {
        return this._recordIdentifierFeatureName;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            event_time_feature_name: cdktf.stringToTerraform(this._eventTimeFeatureName),
            feature_definitions: cdktf.listMapper(sagemakerFeatureGroupFeatureDefinitionsToTerraform)(this._featureDefinitions),
            feature_group_name: cdktf.stringToTerraform(this._featureGroupName),
            offline_store_config: sagemakerFeatureGroupOfflineStoreConfigToTerraform(this._offlineStoreConfig),
            online_store_config: sagemakerFeatureGroupOnlineStoreConfigToTerraform(this._onlineStoreConfig),
            record_identifier_feature_name: cdktf.stringToTerraform(this._recordIdentifierFeatureName),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(sagemakerFeatureGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerFeatureGroup = SagemakerFeatureGroup;
// =================
// STATIC PROPERTIES
// =================
SagemakerFeatureGroup.tfResourceType = "awscc_sagemaker_feature_group";
//# sourceMappingURL=data:application/json;base64,