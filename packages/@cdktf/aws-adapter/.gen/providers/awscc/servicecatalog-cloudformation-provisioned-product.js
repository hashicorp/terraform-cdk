"use strict";
// https://www.terraform.io/docs/providers/awscc/r/servicecatalog_cloudformation_provisioned_product.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicecatalogCloudformationProvisionedProduct = exports.servicecatalogCloudformationProvisionedProductTagsToTerraform = exports.servicecatalogCloudformationProvisionedProductProvisioningPreferencesToTerraform = exports.servicecatalogCloudformationProvisionedProductProvisioningParametersToTerraform = void 0;
const cdktf = require("cdktf");
function servicecatalogCloudformationProvisionedProductProvisioningParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.servicecatalogCloudformationProvisionedProductProvisioningParametersToTerraform = servicecatalogCloudformationProvisionedProductProvisioningParametersToTerraform;
function servicecatalogCloudformationProvisionedProductProvisioningPreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        stack_set_accounts: cdktf.listMapper(cdktf.stringToTerraform)(struct.stackSetAccounts),
        stack_set_failure_tolerance_count: cdktf.numberToTerraform(struct.stackSetFailureToleranceCount),
        stack_set_failure_tolerance_percentage: cdktf.numberToTerraform(struct.stackSetFailureTolerancePercentage),
        stack_set_max_concurrency_count: cdktf.numberToTerraform(struct.stackSetMaxConcurrencyCount),
        stack_set_max_concurrency_percentage: cdktf.numberToTerraform(struct.stackSetMaxConcurrencyPercentage),
        stack_set_operation_type: cdktf.stringToTerraform(struct.stackSetOperationType),
        stack_set_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.stackSetRegions),
    };
}
exports.servicecatalogCloudformationProvisionedProductProvisioningPreferencesToTerraform = servicecatalogCloudformationProvisionedProductProvisioningPreferencesToTerraform;
function servicecatalogCloudformationProvisionedProductTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.servicecatalogCloudformationProvisionedProductTagsToTerraform = servicecatalogCloudformationProvisionedProductTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/servicecatalog_cloudformation_provisioned_product.html awscc_servicecatalog_cloudformation_provisioned_product}
*/
class ServicecatalogCloudformationProvisionedProduct extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/servicecatalog_cloudformation_provisioned_product.html awscc_servicecatalog_cloudformation_provisioned_product} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ServicecatalogCloudformationProvisionedProductConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_servicecatalog_cloudformation_provisioned_product',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._acceptLanguage = config.acceptLanguage;
        this._notificationArns = config.notificationArns;
        this._pathId = config.pathId;
        this._pathName = config.pathName;
        this._productId = config.productId;
        this._productName = config.productName;
        this._provisionedProductName = config.provisionedProductName;
        this._provisioningArtifactId = config.provisioningArtifactId;
        this._provisioningArtifactName = config.provisioningArtifactName;
        this._provisioningParameters = config.provisioningParameters;
        this._provisioningPreferences = config.provisioningPreferences;
        this._tags = config.tags;
    }
    get acceptLanguage() {
        return this.getStringAttribute('accept_language');
    }
    set acceptLanguage(value) {
        this._acceptLanguage = value;
    }
    resetAcceptLanguage() {
        this._acceptLanguage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceptLanguageInput() {
        return this._acceptLanguage;
    }
    // cloudformation_stack_arn - computed: true, optional: false, required: false
    get cloudformationStackArn() {
        return this.getStringAttribute('cloudformation_stack_arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get notificationArns() {
        return this.getListAttribute('notification_arns');
    }
    set notificationArns(value) {
        this._notificationArns = value;
    }
    resetNotificationArns() {
        this._notificationArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationArnsInput() {
        return this._notificationArns;
    }
    // outputs - computed: true, optional: false, required: false
    outputs(key) {
        return new cdktf.StringMap(this, 'outputs').lookup(key);
    }
    get pathId() {
        return this.getStringAttribute('path_id');
    }
    set pathId(value) {
        this._pathId = value;
    }
    resetPathId() {
        this._pathId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathIdInput() {
        return this._pathId;
    }
    get pathName() {
        return this.getStringAttribute('path_name');
    }
    set pathName(value) {
        this._pathName = value;
    }
    resetPathName() {
        this._pathName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathNameInput() {
        return this._pathName;
    }
    get productId() {
        return this.getStringAttribute('product_id');
    }
    set productId(value) {
        this._productId = value;
    }
    resetProductId() {
        this._productId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get productIdInput() {
        return this._productId;
    }
    get productName() {
        return this.getStringAttribute('product_name');
    }
    set productName(value) {
        this._productName = value;
    }
    resetProductName() {
        this._productName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get productNameInput() {
        return this._productName;
    }
    // provisioned_product_id - computed: true, optional: false, required: false
    get provisionedProductId() {
        return this.getStringAttribute('provisioned_product_id');
    }
    get provisionedProductName() {
        return this.getStringAttribute('provisioned_product_name');
    }
    set provisionedProductName(value) {
        this._provisionedProductName = value;
    }
    resetProvisionedProductName() {
        this._provisionedProductName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedProductNameInput() {
        return this._provisionedProductName;
    }
    get provisioningArtifactId() {
        return this.getStringAttribute('provisioning_artifact_id');
    }
    set provisioningArtifactId(value) {
        this._provisioningArtifactId = value;
    }
    resetProvisioningArtifactId() {
        this._provisioningArtifactId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningArtifactIdInput() {
        return this._provisioningArtifactId;
    }
    get provisioningArtifactName() {
        return this.getStringAttribute('provisioning_artifact_name');
    }
    set provisioningArtifactName(value) {
        this._provisioningArtifactName = value;
    }
    resetProvisioningArtifactName() {
        this._provisioningArtifactName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningArtifactNameInput() {
        return this._provisioningArtifactName;
    }
    get provisioningParameters() {
        return this.interpolationForAttribute('provisioning_parameters');
    }
    set provisioningParameters(value) {
        this._provisioningParameters = value;
    }
    resetProvisioningParameters() {
        this._provisioningParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningParametersInput() {
        return this._provisioningParameters;
    }
    get provisioningPreferences() {
        return this.interpolationForAttribute('provisioning_preferences');
    }
    set provisioningPreferences(value) {
        this._provisioningPreferences = value;
    }
    resetProvisioningPreferences() {
        this._provisioningPreferences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningPreferencesInput() {
        return this._provisioningPreferences;
    }
    // record_id - computed: true, optional: false, required: false
    get recordId() {
        return this.getStringAttribute('record_id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            accept_language: cdktf.stringToTerraform(this._acceptLanguage),
            notification_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._notificationArns),
            path_id: cdktf.stringToTerraform(this._pathId),
            path_name: cdktf.stringToTerraform(this._pathName),
            product_id: cdktf.stringToTerraform(this._productId),
            product_name: cdktf.stringToTerraform(this._productName),
            provisioned_product_name: cdktf.stringToTerraform(this._provisionedProductName),
            provisioning_artifact_id: cdktf.stringToTerraform(this._provisioningArtifactId),
            provisioning_artifact_name: cdktf.stringToTerraform(this._provisioningArtifactName),
            provisioning_parameters: cdktf.listMapper(servicecatalogCloudformationProvisionedProductProvisioningParametersToTerraform)(this._provisioningParameters),
            provisioning_preferences: servicecatalogCloudformationProvisionedProductProvisioningPreferencesToTerraform(this._provisioningPreferences),
            tags: cdktf.listMapper(servicecatalogCloudformationProvisionedProductTagsToTerraform)(this._tags),
        };
    }
}
exports.ServicecatalogCloudformationProvisionedProduct = ServicecatalogCloudformationProvisionedProduct;
// =================
// STATIC PROPERTIES
// =================
ServicecatalogCloudformationProvisionedProduct.tfResourceType = "awscc_servicecatalog_cloudformation_provisioned_product";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZWNhdGFsb2ctY2xvdWRmb3JtYXRpb24tcHJvdmlzaW9uZWQtcHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZpY2VjYXRhbG9nLWNsb3VkZm9ybWF0aW9uLXByb3Zpc2lvbmVkLXByb2R1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlHQUF5RztBQUN6RywyQ0FBMkM7OztBQUczQywrQkFBK0I7QUFpRS9CLFNBQWdCLCtFQUErRSxDQUFDLE1BQTZFO0lBQzNLLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsR0FBRyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsR0FBRyxDQUFDO1FBQ3pDLEtBQUssRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLEtBQUssQ0FBQztLQUM5QyxDQUFBO0FBQ0gsQ0FBQztBQU5ELDBLQU1DO0FBaUNELFNBQWdCLGdGQUFnRixDQUFDLE1BQThFO0lBQzdLLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDdkYsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyw2QkFBNkIsQ0FBQztRQUNqRyxzQ0FBc0MsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLGtDQUFrQyxDQUFDO1FBQzNHLCtCQUErQixFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsMkJBQTJCLENBQUM7UUFDN0Ysb0NBQW9DLEVBQUUsS0FBSyxD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d3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbFxuLy8gZ2VuZXJhdGVkIGZyb20gdGVycmFmb3JtIHJlc291cmNlIHNjaGVtYVxuXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGNka3RmIGZyb20gJ2Nka3RmJztcblxuLy8gQ29uZmlndXJhdGlvblxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjYWNjZXB0X2xhbmd1YWdlIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QjYWNjZXB0X2xhbmd1YWdlfVxuICAqL1xuICByZWFkb25seSBhY2NlcHRMYW5ndWFnZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjbm90aWZpY2F0aW9uX2FybnMgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNub3RpZmljYXRpb25fYXJuc31cbiAgKi9cbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uQXJucz86IHN0cmluZ1tdO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwYXRoX2lkIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QjcGF0aF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgcGF0aElkPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwYXRoX25hbWUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNwYXRoX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IHBhdGhOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwcm9kdWN0X2lkIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QjcHJvZHVjdF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgcHJvZHVjdElkPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwcm9kdWN0X25hbWUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNwcm9kdWN0X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IHByb2R1Y3ROYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwcm92aXNpb25lZF9wcm9kdWN0X25hbWUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNwcm92aXNpb25lZF9wcm9kdWN0X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IHByb3Zpc2lvbmVkUHJvZHVjdE5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3Ivc2VydmljZWNhdGFsb2dfY2xvdWRmb3JtYXRpb25fcHJvdmlzaW9uZWRfcHJvZHVjdC5odG1sI3Byb3Zpc2lvbmluZ19hcnRpZmFjdF9pZCBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I3Byb3Zpc2lvbmluZ19hcnRpZmFjdF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZD86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjcHJvdmlzaW9uaW5nX2FydGlmYWN0X25hbWUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNwcm92aXNpb25pbmdfYXJ0aWZhY3RfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgcHJvdmlzaW9uaW5nQXJ0aWZhY3ROYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNwcm92aXNpb25pbmdfcGFyYW1ldGVycyBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I3Byb3Zpc2lvbmluZ19wYXJhbWV0ZXJzfVxuICAqL1xuICByZWFkb25seSBwcm92aXNpb25pbmdQYXJhbWV0ZXJzPzogU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdFByb3Zpc2lvbmluZ1BhcmFtZXRlcnNbXTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjcHJvdmlzaW9uaW5nX3ByZWZlcmVuY2VzIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QjcHJvdmlzaW9uaW5nX3ByZWZlcmVuY2VzfVxuICAqL1xuICByZWFkb25seSBwcm92aXNpb25pbmdQcmVmZXJlbmNlcz86IFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RQcm92aXNpb25pbmdQcmVmZXJlbmNlcztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjdGFncyBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I3RhZ3N9XG4gICovXG4gIHJlYWRvbmx5IHRhZ3M/OiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0VGFnc1tdO1xufVxuZXhwb3J0IGludGVyZmFjZSBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUGFyYW1ldGVycyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3Ivc2VydmljZWNhdGFsb2dfY2xvdWRmb3JtYXRpb25fcHJvdmlzaW9uZWRfcHJvZHVjdC5odG1sI2tleSBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I2tleX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3Ivc2VydmljZWNhdGFsb2dfY2xvdWRmb3JtYXRpb25fcHJvdmlzaW9uZWRfcHJvZHVjdC5odG1sI3ZhbHVlIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QjdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUGFyYW1ldGVyc1RvVGVycmFmb3JtKHN0cnVjdD86IFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RQcm92aXNpb25pbmdQYXJhbWV0ZXJzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGtleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5rZXkpLFxuICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnZhbHVlKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RQcm92aXNpb25pbmdQcmVmZXJlbmNlcyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3Ivc2VydmljZWNhdGFsb2dfY2xvdWRmb3JtYXRpb25fcHJvdmlzaW9uZWRfcHJvZHVjdC5odG1sI3N0YWNrX3NldF9hY2NvdW50cyBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I3N0YWNrX3NldF9hY2NvdW50c31cbiAgKi9cbiAgcmVhZG9ubHkgc3RhY2tTZXRBY2NvdW50cz86IHN0cmluZ1tdO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNzdGFja19zZXRfZmFpbHVyZV90b2xlcmFuY2VfY291bnQgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNzdGFja19zZXRfZmFpbHVyZV90b2xlcmFuY2VfY291bnR9XG4gICovXG4gIHJlYWRvbmx5IHN0YWNrU2V0RmFpbHVyZVRvbGVyYW5jZUNvdW50PzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNzdGFja19zZXRfZmFpbHVyZV90b2xlcmFuY2VfcGVyY2VudGFnZSBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0I3N0YWNrX3NldF9mYWlsdXJlX3RvbGVyYW5jZV9wZXJjZW50YWdlfVxuICAqL1xuICByZWFkb25seSBzdGFja1NldEZhaWx1cmVUb2xlcmFuY2VQZXJjZW50YWdlPzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNzdGFja19zZXRfbWF4X2NvbmN1cnJlbmN5X2NvdW50IFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3Qjc3RhY2tfc2V0X21heF9jb25jdXJyZW5jeV9jb3VudH1cbiAgKi9cbiAgcmVhZG9ubHkgc3RhY2tTZXRNYXhDb25jdXJyZW5jeUNvdW50PzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNzdGFja19zZXRfbWF4X2NvbmN1cnJlbmN5X3BlcmNlbnRhZ2UgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNzdGFja19zZXRfbWF4X2NvbmN1cnJlbmN5X3BlcmNlbnRhZ2V9XG4gICovXG4gIHJlYWRvbmx5IHN0YWNrU2V0TWF4Q29uY3VycmVuY3lQZXJjZW50YWdlPzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCNzdGFja19zZXRfb3BlcmF0aW9uX3R5cGUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNzdGFja19zZXRfb3BlcmF0aW9uX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IHN0YWNrU2V0T3BlcmF0aW9uVHlwZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjc3RhY2tfc2V0X3JlZ2lvbnMgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCNzdGFja19zZXRfcmVnaW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgc3RhY2tTZXRSZWdpb25zPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUHJlZmVyZW5jZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUHJlZmVyZW5jZXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgc3RhY2tfc2V0X2FjY291bnRzOiBjZGt0Zi5saXN0TWFwcGVyKGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKShzdHJ1Y3QhLnN0YWNrU2V0QWNjb3VudHMpLFxuICAgIHN0YWNrX3NldF9mYWlsdXJlX3RvbGVyYW5jZV9jb3VudDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zdGFja1NldEZhaWx1cmVUb2xlcmFuY2VDb3VudCksXG4gICAgc3RhY2tfc2V0X2ZhaWx1cmVfdG9sZXJhbmNlX3BlcmNlbnRhZ2U6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuc3RhY2tTZXRGYWlsdXJlVG9sZXJhbmNlUGVyY2VudGFnZSksXG4gICAgc3RhY2tfc2V0X21heF9jb25jdXJyZW5jeV9jb3VudDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zdGFja1NldE1heENvbmN1cnJlbmN5Q291bnQpLFxuICAgIHN0YWNrX3NldF9tYXhfY29uY3VycmVuY3lfcGVyY2VudGFnZTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zdGFja1NldE1heENvbmN1cnJlbmN5UGVyY2VudGFnZSksXG4gICAgc3RhY2tfc2V0X29wZXJhdGlvbl90eXBlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnN0YWNrU2V0T3BlcmF0aW9uVHlwZSksXG4gICAgc3RhY2tfc2V0X3JlZ2lvbnM6IGNka3RmLmxpc3RNYXBwZXIoY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0pKHN0cnVjdCEuc3RhY2tTZXRSZWdpb25zKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RUYWdzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwja2V5IFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3Qja2V5fVxuICAqL1xuICByZWFkb25seSBrZXk6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0Lmh0bWwjdmFsdWUgU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdCN2YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RUYWdzVG9UZXJyYWZvcm0oc3RydWN0PzogU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdFRhZ3MpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAga2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudmFsdWUpLFxuICB9XG59XG5cblxuLyoqXG4qIFJlcHJlc2VudHMgYSB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3Ivc2VydmljZWNhdGFsb2dfY2xvdWRmb3JtYXRpb25fcHJvdmlzaW9uZWRfcHJvZHVjdC5odG1sIGF3c2NjX3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3R9XG4qL1xuZXhwb3J0IGNsYXNzIFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3QgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0XCI7XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL3NlcnZpY2VjYXRhbG9nX2Nsb3VkZm9ybWF0aW9uX3Byb3Zpc2lvbmVkX3Byb2R1Y3QuaHRtbCBhd3NjY19zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0fSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0Q29uZmlnID0ge31cbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICB0ZXJyYWZvcm1SZXNvdXJjZVR5cGU6ICdhd3NjY19zZXJ2aWNlY2F0YWxvZ19jbG91ZGZvcm1hdGlvbl9wcm92aXNpb25lZF9wcm9kdWN0JyxcbiAgICAgIHRlcnJhZm9ybUdlbmVyYXRvck1ldGFkYXRhOiB7XG4gICAgICAgIHByb3ZpZGVyTmFtZTogJ2F3c2NjJ1xuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyOiBjb25maWcucHJvdmlkZXIsXG4gICAgICBkZXBlbmRzT246IGNvbmZpZy5kZXBlbmRzT24sXG4gICAgICBjb3VudDogY29uZmlnLmNvdW50LFxuICAgICAgbGlmZWN5Y2xlOiBjb25maWcubGlmZWN5Y2xlXG4gICAgfSk7XG4gICAgdGhpcy5fYWNjZXB0TGFuZ3VhZ2UgPSBjb25maWcuYWNjZXB0TGFuZ3VhZ2U7XG4gICAgdGhpcy5fbm90aWZpY2F0aW9uQXJucyA9IGNvbmZpZy5ub3RpZmljYXRpb25Bcm5zO1xuICAgIHRoaXMuX3BhdGhJZCA9IGNvbmZpZy5wYXRoSWQ7XG4gICAgdGhpcy5fcGF0aE5hbWUgPSBjb25maWcucGF0aE5hbWU7XG4gICAgdGhpcy5fcHJvZHVjdElkID0gY29uZmlnLnByb2R1Y3RJZDtcbiAgICB0aGlzLl9wcm9kdWN0TmFtZSA9IGNvbmZpZy5wcm9kdWN0TmFtZTtcbiAgICB0aGlzLl9wcm92aXNpb25lZFByb2R1Y3ROYW1lID0gY29uZmlnLnByb3Zpc2lvbmVkUHJvZHVjdE5hbWU7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZCA9IGNvbmZpZy5wcm92aXNpb25pbmdBcnRpZmFjdElkO1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ0FydGlmYWN0TmFtZSA9IGNvbmZpZy5wcm92aXNpb25pbmdBcnRpZmFjdE5hbWU7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nUGFyYW1ldGVycyA9IGNvbmZpZy5wcm92aXNpb25pbmdQYXJhbWV0ZXJzO1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ1ByZWZlcmVuY2VzID0gY29uZmlnLnByb3Zpc2lvbmluZ1ByZWZlcmVuY2VzO1xuICAgIHRoaXMuX3RhZ3MgPSBjb25maWcudGFncztcbiAgfVxuXG4gIC8vID09PT09PT09PT1cbiAgLy8gQVRUUklCVVRFU1xuICAvLyA9PT09PT09PT09XG5cbiAgLy8gYWNjZXB0X2xhbmd1YWdlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2FjY2VwdExhbmd1YWdlPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGFjY2VwdExhbmd1YWdlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnYWNjZXB0X2xhbmd1YWdlJyk7XG4gIH1cbiAgcHVibGljIHNldCBhY2NlcHRMYW5ndWFnZSh2YWx1ZTogc3RyaW5nICkge1xuICAgIHRoaXMuX2FjY2VwdExhbmd1YWdlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0QWNjZXB0TGFuZ3VhZ2UoKSB7XG4gICAgdGhpcy5fYWNjZXB0TGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGFjY2VwdExhbmd1YWdlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjY2VwdExhbmd1YWdlXG4gIH1cblxuICAvLyBjbG91ZGZvcm1hdGlvbl9zdGFja19hcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBjbG91ZGZvcm1hdGlvblN0YWNrQXJuKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY2xvdWRmb3JtYXRpb25fc3RhY2tfYXJuJyk7XG4gIH1cblxuICAvLyBpZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaWQnKTtcbiAgfVxuXG4gIC8vIG5vdGlmaWNhdGlvbl9hcm5zIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbm90aWZpY2F0aW9uQXJucz86IHN0cmluZ1tdO1xuICBwdWJsaWMgZ2V0IG5vdGlmaWNhdGlvbkFybnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGlzdEF0dHJpYnV0ZSgnbm90aWZpY2F0aW9uX2FybnMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG5vdGlmaWNhdGlvbkFybnModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fbm90aWZpY2F0aW9uQXJucyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE5vdGlmaWNhdGlvbkFybnMoKSB7XG4gICAgdGhpcy5fbm90aWZpY2F0aW9uQXJucyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbm90aWZpY2F0aW9uQXJuc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ub3RpZmljYXRpb25Bcm5zXG4gIH1cblxuICAvLyBvdXRwdXRzIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBvdXRwdXRzKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IGNka3RmLlN0cmluZ01hcCh0aGlzLCAnb3V0cHV0cycpLmxvb2t1cChrZXkpO1xuICB9XG5cbiAgLy8gcGF0aF9pZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9wYXRoSWQ/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgcGF0aElkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgncGF0aF9pZCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgcGF0aElkKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fcGF0aElkID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0UGF0aElkKCkge1xuICAgIHRoaXMuX3BhdGhJZCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcGF0aElkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGhJZFxuICB9XG5cbiAgLy8gcGF0aF9uYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3BhdGhOYW1lPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IHBhdGhOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgncGF0aF9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBwYXRoTmFtZSh2YWx1ZTogc3RyaW5nICkge1xuICAgIHRoaXMuX3BhdGhOYW1lID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0UGF0aE5hbWUoKSB7XG4gICAgdGhpcy5fcGF0aE5hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHBhdGhOYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGhOYW1lXG4gIH1cblxuICAvLyBwcm9kdWN0X2lkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3Byb2R1Y3RJZD86IHN0cmluZztcbiAgcHVibGljIGdldCBwcm9kdWN0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdwcm9kdWN0X2lkJyk7XG4gIH1cbiAgcHVibGljIHNldCBwcm9kdWN0SWQodmFsdWU6IHN0cmluZyApIHtcbiAgICB0aGlzLl9wcm9kdWN0SWQgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRQcm9kdWN0SWQoKSB7XG4gICAgdGhpcy5fcHJvZHVjdElkID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBwcm9kdWN0SWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZHVjdElkXG4gIH1cblxuICAvLyBwcm9kdWN0X25hbWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfcHJvZHVjdE5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgcHJvZHVjdE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdwcm9kdWN0X25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHByb2R1Y3ROYW1lKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fcHJvZHVjdE5hbWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRQcm9kdWN0TmFtZSgpIHtcbiAgICB0aGlzLl9wcm9kdWN0TmFtZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcHJvZHVjdE5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZHVjdE5hbWVcbiAgfVxuXG4gIC8vIHByb3Zpc2lvbmVkX3Byb2R1Y3RfaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBwcm92aXNpb25lZFByb2R1Y3RJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3Byb3Zpc2lvbmVkX3Byb2R1Y3RfaWQnKTtcbiAgfVxuXG4gIC8vIHByb3Zpc2lvbmVkX3Byb2R1Y3RfbmFtZSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3Byb3Zpc2lvbmVkUHJvZHVjdE5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgcHJvdmlzaW9uZWRQcm9kdWN0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3Byb3Zpc2lvbmVkX3Byb2R1Y3RfbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgcHJvdmlzaW9uZWRQcm9kdWN0TmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uZWRQcm9kdWN0TmFtZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFByb3Zpc2lvbmVkUHJvZHVjdE5hbWUoKSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uZWRQcm9kdWN0TmFtZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcHJvdmlzaW9uZWRQcm9kdWN0TmFtZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9wcm92aXNpb25lZFByb2R1Y3ROYW1lXG4gIH1cblxuICAvLyBwcm92aXNpb25pbmdfYXJ0aWZhY3RfaWQgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZD86IHN0cmluZztcbiAgcHVibGljIGdldCBwcm92aXNpb25pbmdBcnRpZmFjdElkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgncHJvdmlzaW9uaW5nX2FydGlmYWN0X2lkJyk7XG4gIH1cbiAgcHVibGljIHNldCBwcm92aXNpb25pbmdBcnRpZmFjdElkKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFByb3Zpc2lvbmluZ0FydGlmYWN0SWQoKSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9wcm92aXNpb25pbmdBcnRpZmFjdElkXG4gIH1cblxuICAvLyBwcm92aXNpb25pbmdfYXJ0aWZhY3RfbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9wcm92aXNpb25pbmdBcnRpZmFjdE5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgcHJvdmlzaW9uaW5nQXJ0aWZhY3ROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgncHJvdmlzaW9uaW5nX2FydGlmYWN0X25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHByb3Zpc2lvbmluZ0FydGlmYWN0TmFtZSh2YWx1ZTogc3RyaW5nICkge1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ0FydGlmYWN0TmFtZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFByb3Zpc2lvbmluZ0FydGlmYWN0TmFtZSgpIHtcbiAgICB0aGlzLl9wcm92aXNpb25pbmdBcnRpZmFjdE5hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHByb3Zpc2lvbmluZ0FydGlmYWN0TmFtZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9wcm92aXNpb25pbmdBcnRpZmFjdE5hbWVcbiAgfVxuXG4gIC8vIHByb3Zpc2lvbmluZ19wYXJhbWV0ZXJzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3Byb3Zpc2lvbmluZ1BhcmFtZXRlcnM/OiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUGFyYW1ldGVyc1tdO1xuICBwdWJsaWMgZ2V0IHByb3Zpc2lvbmluZ1BhcmFtZXRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgncHJvdmlzaW9uaW5nX3BhcmFtZXRlcnMnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBwcm92aXNpb25pbmdQYXJhbWV0ZXJzKHZhbHVlOiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUGFyYW1ldGVyc1tdICkge1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ1BhcmFtZXRlcnMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRQcm92aXNpb25pbmdQYXJhbWV0ZXJzKCkge1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ1BhcmFtZXRlcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHByb3Zpc2lvbmluZ1BhcmFtZXRlcnNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvdmlzaW9uaW5nUGFyYW1ldGVyc1xuICB9XG5cbiAgLy8gcHJvdmlzaW9uaW5nX3ByZWZlcmVuY2VzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3Byb3Zpc2lvbmluZ1ByZWZlcmVuY2VzPzogU2VydmljZWNhdGFsb2dDbG91ZGZvcm1hdGlvblByb3Zpc2lvbmVkUHJvZHVjdFByb3Zpc2lvbmluZ1ByZWZlcmVuY2VzO1xuICBwdWJsaWMgZ2V0IHByb3Zpc2lvbmluZ1ByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoJ3Byb3Zpc2lvbmluZ19wcmVmZXJlbmNlcycpIGFzIGFueTtcbiAgfVxuICBwdWJsaWMgc2V0IHByb3Zpc2lvbmluZ1ByZWZlcmVuY2VzKHZhbHVlOiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUHJlZmVyZW5jZXMgKSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nUHJlZmVyZW5jZXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRQcm92aXNpb25pbmdQcmVmZXJlbmNlcygpIHtcbiAgICB0aGlzLl9wcm92aXNpb25pbmdQcmVmZXJlbmNlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcHJvdmlzaW9uaW5nUHJlZmVyZW5jZXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvdmlzaW9uaW5nUHJlZmVyZW5jZXNcbiAgfVxuXG4gIC8vIHJlY29yZF9pZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IHJlY29yZElkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgncmVjb3JkX2lkJyk7XG4gIH1cblxuICAvLyB0YWdzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RhZ3M/OiBTZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0VGFnc1tdO1xuICBwdWJsaWMgZ2V0IHRhZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgndGFncycpIGFzIGFueTtcbiAgfVxuICBwdWJsaWMgc2V0IHRhZ3ModmFsdWU6IFNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RUYWdzW10gKSB7XG4gICAgdGhpcy5fdGFncyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRhZ3MoKSB7XG4gICAgdGhpcy5fdGFncyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGFnc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90YWdzXG4gIH1cblxuICAvLyA9PT09PT09PT1cbiAgLy8gU1lOVEhFU0lTXG4gIC8vID09PT09PT09PVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY2VwdF9sYW5ndWFnZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fYWNjZXB0TGFuZ3VhZ2UpLFxuICAgICAgbm90aWZpY2F0aW9uX2FybnM6IGNka3RmLmxpc3RNYXBwZXIoY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0pKHRoaXMuX25vdGlmaWNhdGlvbkFybnMpLFxuICAgICAgcGF0aF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcGF0aElkKSxcbiAgICAgIHBhdGhfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcGF0aE5hbWUpLFxuICAgICAgcHJvZHVjdF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcHJvZHVjdElkKSxcbiAgICAgIHByb2R1Y3RfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcHJvZHVjdE5hbWUpLFxuICAgICAgcHJvdmlzaW9uZWRfcHJvZHVjdF9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9wcm92aXNpb25lZFByb2R1Y3ROYW1lKSxcbiAgICAgIHByb3Zpc2lvbmluZ19hcnRpZmFjdF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcHJvdmlzaW9uaW5nQXJ0aWZhY3RJZCksXG4gICAgICBwcm92aXNpb25pbmdfYXJ0aWZhY3RfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fcHJvdmlzaW9uaW5nQXJ0aWZhY3ROYW1lKSxcbiAgICAgIHByb3Zpc2lvbmluZ19wYXJhbWV0ZXJzOiBjZGt0Zi5saXN0TWFwcGVyKHNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RQcm92aXNpb25pbmdQYXJhbWV0ZXJzVG9UZXJyYWZvcm0pKHRoaXMuX3Byb3Zpc2lvbmluZ1BhcmFtZXRlcnMpLFxuICAgICAgcHJvdmlzaW9uaW5nX3ByZWZlcmVuY2VzOiBzZXJ2aWNlY2F0YWxvZ0Nsb3VkZm9ybWF0aW9uUHJvdmlzaW9uZWRQcm9kdWN0UHJvdmlzaW9uaW5nUHJlZmVyZW5jZXNUb1RlcnJhZm9ybSh0aGlzLl9wcm92aXNpb25pbmdQcmVmZXJlbmNlcyksXG4gICAgICB0YWdzOiBjZGt0Zi5saXN0TWFwcGVyKHNlcnZpY2VjYXRhbG9nQ2xvdWRmb3JtYXRpb25Qcm92aXNpb25lZFByb2R1Y3RUYWdzVG9UZXJyYWZvcm0pKHRoaXMuX3RhZ3MpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==