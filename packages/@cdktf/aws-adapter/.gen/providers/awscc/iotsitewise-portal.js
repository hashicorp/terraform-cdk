"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotsitewise_portal.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotsitewisePortal = exports.iotsitewisePortalTagsToTerraform = exports.iotsitewisePortalAlarmsToTerraform = void 0;
const cdktf = require("cdktf");
function iotsitewisePortalAlarmsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_role_arn: cdktf.stringToTerraform(struct.alarmRoleArn),
        notification_lambda_arn: cdktf.stringToTerraform(struct.notificationLambdaArn),
    };
}
exports.iotsitewisePortalAlarmsToTerraform = iotsitewisePortalAlarmsToTerraform;
function iotsitewisePortalTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotsitewisePortalTagsToTerraform = iotsitewisePortalTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_portal.html awscc_iotsitewise_portal}
*/
class IotsitewisePortal extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_portal.html awscc_iotsitewise_portal} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotsitewisePortalConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_portal',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._alarms = config.alarms;
        this._notificationSenderEmail = config.notificationSenderEmail;
        this._portalAuthMode = config.portalAuthMode;
        this._portalContactEmail = config.portalContactEmail;
        this._portalDescription = config.portalDescription;
        this._portalName = config.portalName;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
    }
    get alarms() {
        return this.interpolationForAttribute('alarms');
    }
    set alarms(value) {
        this._alarms = value;
    }
    resetAlarms() {
        this._alarms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alarmsInput() {
        return this._alarms;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get notificationSenderEmail() {
        return this.getStringAttribute('notification_sender_email');
    }
    set notificationSenderEmail(value) {
        this._notificationSenderEmail = value;
    }
    resetNotificationSenderEmail() {
        this._notificationSenderEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationSenderEmailInput() {
        return this._notificationSenderEmail;
    }
    // portal_arn - computed: true, optional: false, required: false
    get portalArn() {
        return this.getStringAttribute('portal_arn');
    }
    get portalAuthMode() {
        return this.getStringAttribute('portal_auth_mode');
    }
    set portalAuthMode(value) {
        this._portalAuthMode = value;
    }
    resetPortalAuthMode() {
        this._portalAuthMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portalAuthModeInput() {
        return this._portalAuthMode;
    }
    // portal_client_id - computed: true, optional: false, required: false
    get portalClientId() {
        return this.getStringAttribute('portal_client_id');
    }
    get portalContactEmail() {
        return this.getStringAttribute('portal_contact_email');
    }
    set portalContactEmail(value) {
        this._portalContactEmail = value;
    }
    // Temporarily expose input value. Use with caution.
    get portalContactEmailInput() {
        return this._portalContactEmail;
    }
    get portalDescription() {
        return this.getStringAttribute('portal_description');
    }
    set portalDescription(value) {
        this._portalDescription = value;
    }
    resetPortalDescription() {
        this._portalDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portalDescriptionInput() {
        return this._portalDescription;
    }
    // portal_id - computed: true, optional: false, required: false
    get portalId() {
        return this.getStringAttribute('portal_id');
    }
    get portalName() {
        return this.getStringAttribute('portal_name');
    }
    set portalName(value) {
        this._portalName = value;
    }
    // Temporarily expose input value. Use with caution.
    get portalNameInput() {
        return this._portalName;
    }
    // portal_start_url - computed: true, optional: false, required: false
    get portalStartUrl() {
        return this.getStringAttribute('portal_start_url');
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            alarms: iotsitewisePortalAlarmsToTerraform(this._alarms),
            notification_sender_email: cdktf.stringToTerraform(this._notificationSenderEmail),
            portal_auth_mode: cdktf.stringToTerraform(this._portalAuthMode),
            portal_contact_email: cdktf.stringToTerraform(this._portalContactEmail),
            portal_description: cdktf.stringToTerraform(this._portalDescription),
            portal_name: cdktf.stringToTerraform(this._portalName),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(iotsitewisePortalTagsToTerraform)(this._tags),
        };
    }
}
exports.IotsitewisePortal = IotsitewisePortal;
// =================
// STATIC PROPERTIES
// =================
IotsitewisePortal.tfResourceType = "awscc_iotsitewise_portal";
//# sourceMappingURL=data:application/json;base64,