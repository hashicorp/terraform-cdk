"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudfront_cloudfront_origin_access_identity.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontCloudfrontOriginAccessIdentity = exports.cloudfrontCloudfrontOriginAccessIdentityCloudfrontOriginAccessIdentityConfigToTerraform = void 0;
const cdktf = require("cdktf");
function cloudfrontCloudfrontOriginAccessIdentityCloudfrontOriginAccessIdentityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comment: cdktf.stringToTerraform(struct.comment),
    };
}
exports.cloudfrontCloudfrontOriginAccessIdentityCloudfrontOriginAccessIdentityConfigToTerraform = cloudfrontCloudfrontOriginAccessIdentityCloudfrontOriginAccessIdentityConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_cloudfront_origin_access_identity.html awscc_cloudfront_cloudfront_origin_access_identity}
*/
class CloudfrontCloudfrontOriginAccessIdentity extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_cloudfront_origin_access_identity.html awscc_cloudfront_cloudfront_origin_access_identity} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontCloudfrontOriginAccessIdentityConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_cloudfront_origin_access_identity',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cloudfrontOriginAccessIdentityConfig = config.cloudfrontOriginAccessIdentityConfig;
    }
    get cloudfrontOriginAccessIdentityConfig() {
        return this.interpolationForAttribute('cloudfront_origin_access_identity_config');
    }
    set cloudfrontOriginAccessIdentityConfig(value) {
        this._cloudfrontOriginAccessIdentityConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudfrontOriginAccessIdentityConfigInput() {
        return this._cloudfrontOriginAccessIdentityConfig;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // s3_canonical_user_id - computed: true, optional: false, required: false
    get s3CanonicalUserId() {
        return this.getStringAttribute('s3_canonical_user_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cloudfront_origin_access_identity_config: cloudfrontCloudfrontOriginAccessIdentityCloudfrontOriginAccessIdentityConfigToTerraform(this._cloudfrontOriginAccessIdentityConfig),
        };
    }
}
exports.CloudfrontCloudfrontOriginAccessIdentity = CloudfrontCloudfrontOriginAccessIdentity;
// =================
// STATIC PROPERTIES
// =================
CloudfrontCloudfrontOriginAccessIdentity.tfResourceType = "awscc_cloudfront_cloudfront_origin_access_identity";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmcm9udC1jbG91ZGZyb250LW9yaWdpbi1hY2Nlc3MtaWRlbnRpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG91ZGZyb250LWNsb3VkZnJvbnQtb3JpZ2luLWFjY2Vzcy1pZGVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0dBQW9HO0FBQ3BHLDJDQUEyQzs7O0FBRzNDLCtCQUErQjtBQWlCL0IsU0FBZ0IsdUZBQXVGLENBQUMsTUFBcUY7SUFDM0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxPQUFPLENBQUM7S0FDbEQsQ0FBQTtBQUNILENBQUM7QUFMRCwwTEFLQztBQUdEOztFQUVFO0FBQ0YsTUFBYSx3Q0FBeUMsU0FBUSxLQUFLLENBQUMsaUJBQWlCO0lBT25GLGNBQWM7SUFDZCxjQUFjO0lBQ2QsY0FBYztJQUVkOzs7Ozs7TUFNRTtJQUNGLFlBQW1CLEtBQWdCLEVBQUUsRUFBVSxFQUFFLE1BQXNEO1FBQ3JHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YscUJBQXFCLEVBQUUsb0RBQW9EO1lBQzNFLDBCQUEwQixFQUFFO2dCQUMxQixZQUFZLEVBQUUsT0FBTzthQUN0QjtZQUNELFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtZQUN6QixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7WUFDM0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQ25CLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztTQUM1QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMscUNBQXFDLEdBQUcsTUFBTSxDQUFDLG9DQUFvQyxDQUFDO0lBQzNGLENBQUM7SUFRRCxJQUFXLG9DQUFvQztRQUM3QyxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQywwQ0FBMEMsQ0FBUSxDQUFDO0lBQzNGLENBQUM7SUFDRCxJQUFXLG9DQUFvQyxDQUFDLEtBQW1GO1FBQ2pJLElBQUksQ0FBQyxxQ0FBcUMsR0FBRyxLQUFLLENBQUM7SUFDckQsQ0FBQztJQUNELG9EQUFvRDtJQUNwRCxJQUFXLHlDQUF5QztRQUNsRCxPQUFPLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQTtJQUNuRCxDQUFDO0lBRUQsd0RBQXdEO0lBQ3hELElBQVcsRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwwRUFBMEU7SUFDMUUsSUFBVyxpQkFBaUI7UUFDMUIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBRUYsb0JBQW9CO1FBQzVCLE9BQU87WUFDTCx3Q0FBd0MsRUFBRSx1RkFBdUYsQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUM7U0FDOUssQ0FBQztJQUNKLENBQUM7O0FBbkVILDRGQW9FQztBQWxFQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNHLHVEQUFjLEdBQVcsb0RBQW9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jbG91ZGZyb250X2Nsb3VkZnJvbnRfb3JpZ2luX2FjY2Vzc19pZGVudGl0eS5odG1sXG4vLyBnZW5lcmF0ZWQgZnJvbSB0ZXJyYWZvcm0gcmVzb3VyY2Ugc2NoZW1hXG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY2RrdGYgZnJvbSAnY2RrdGYnO1xuXG4vLyBDb25maWd1cmF0aW9uXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRmcm9udENsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZyBleHRlbmRzIGNka3RmLlRlcnJhZm9ybU1ldGFBcmd1bWVudHMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2Nsb3VkZnJvbnRfY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5Lmh0bWwjY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5X2NvbmZpZyBDbG91ZGZyb250Q2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5I2Nsb3VkZnJvbnRfb3JpZ2luX2FjY2Vzc19pZGVudGl0eV9jb25maWd9XG4gICovXG4gIHJlYWRvbmx5IGNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZzogQ2xvdWRmcm9udENsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRmcm9udENsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY2xvdWRmcm9udF9jbG91ZGZyb250X29yaWdpbl9hY2Nlc3NfaWRlbnRpdHkuaHRtbCNjb21tZW50IENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHkjY29tbWVudH1cbiAgKi9cbiAgcmVhZG9ubHkgY29tbWVudDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvdWRmcm9udENsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdD86IENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgY29tbWVudDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jb21tZW50KSxcbiAgfVxufVxuXG5cbi8qKlxuKiBSZXByZXNlbnRzIGEge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2Nsb3VkZnJvbnRfY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5Lmh0bWwgYXdzY2NfY2xvdWRmcm9udF9jbG91ZGZyb250X29yaWdpbl9hY2Nlc3NfaWRlbnRpdHl9XG4qL1xuZXhwb3J0IGNsYXNzIENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHkgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19jbG91ZGZyb250X2Nsb3VkZnJvbnRfb3JpZ2luX2FjY2Vzc19pZGVudGl0eVwiO1xuXG4gIC8vID09PT09PT09PT09XG4gIC8vIElOSVRJQUxJWkVSXG4gIC8vID09PT09PT09PT09XG5cbiAgLyoqXG4gICogQ3JlYXRlIGEgbmV3IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jbG91ZGZyb250X2Nsb3VkZnJvbnRfb3JpZ2luX2FjY2Vzc19pZGVudGl0eS5odG1sIGF3c2NjX2Nsb3VkZnJvbnRfY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5fSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBDbG91ZGZyb250Q2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5Q29uZmlnXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBjb25maWc6IENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHRlcnJhZm9ybVJlc291cmNlVHlwZTogJ2F3c2NjX2Nsb3VkZnJvbnRfY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5JyxcbiAgICAgIHRlcnJhZm9ybUdlbmVyYXRvck1ldGFkYXRhOiB7XG4gICAgICAgIHByb3ZpZGVyTmFtZTogJ2F3c2NjJ1xuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyOiBjb25maWcucHJvdmlkZXIsXG4gICAgICBkZXBlbmRzT246IGNvbmZpZy5kZXBlbmRzT24sXG4gICAgICBjb3VudDogY29uZmlnLmNvdW50LFxuICAgICAgbGlmZWN5Y2xlOiBjb25maWcubGlmZWN5Y2xlXG4gICAgfSk7XG4gICAgdGhpcy5fY2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5Q29uZmlnID0gY29uZmlnLmNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZztcbiAgfVxuXG4gIC8vID09PT09PT09PT1cbiAgLy8gQVRUUklCVVRFU1xuICAvLyA9PT09PT09PT09XG5cbiAgLy8gY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5X2NvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWc6IENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWc7XG4gIHB1YmxpYyBnZXQgY2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoJ2Nsb3VkZnJvbnRfb3JpZ2luX2FjY2Vzc19pZGVudGl0eV9jb25maWcnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBjbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWcodmFsdWU6IENsb3VkZnJvbnRDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWcpIHtcbiAgICB0aGlzLl9jbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWcgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5Q29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZ1xuICB9XG5cbiAgLy8gaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2lkJyk7XG4gIH1cblxuICAvLyBzM19jYW5vbmljYWxfdXNlcl9pZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IHMzQ2Fub25pY2FsVXNlcklkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnczNfY2Fub25pY2FsX3VzZXJfaWQnKTtcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xvdWRmcm9udF9vcmlnaW5fYWNjZXNzX2lkZW50aXR5X2NvbmZpZzogY2xvdWRmcm9udENsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZ1RvVGVycmFmb3JtKHRoaXMuX2Nsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eUNvbmZpZyksXG4gICAgfTtcbiAgfVxufVxuIl19