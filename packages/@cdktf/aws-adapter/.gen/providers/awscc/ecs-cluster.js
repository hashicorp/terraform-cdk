"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecs_cluster.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsCluster = exports.ecsClusterTagsToTerraform = exports.ecsClusterDefaultCapacityProviderStrategyToTerraform = exports.ecsClusterConfigurationToTerraform = exports.ecsClusterConfigurationExecuteCommandConfigurationToTerraform = exports.ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform = exports.ecsClusterClusterSettingsToTerraform = void 0;
const cdktf = require("cdktf");
function ecsClusterClusterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsClusterClusterSettingsToTerraform = ecsClusterClusterSettingsToTerraform;
function ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_encryption_enabled: cdktf.booleanToTerraform(struct.cloudwatchEncryptionEnabled),
        cloudwatch_log_group_name: cdktf.stringToTerraform(struct.cloudwatchLogGroupName),
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_encryption_enabled: cdktf.booleanToTerraform(struct.s3EncryptionEnabled),
        s3_key_prefix: cdktf.stringToTerraform(struct.s3KeyPrefix),
    };
}
exports.ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform = ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform;
function ecsClusterConfigurationExecuteCommandConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        log_configuration: ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform(struct.logConfiguration),
        logging: cdktf.stringToTerraform(struct.logging),
    };
}
exports.ecsClusterConfigurationExecuteCommandConfigurationToTerraform = ecsClusterConfigurationExecuteCommandConfigurationToTerraform;
function ecsClusterConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execute_command_configuration: ecsClusterConfigurationExecuteCommandConfigurationToTerraform(struct.executeCommandConfiguration),
    };
}
exports.ecsClusterConfigurationToTerraform = ecsClusterConfigurationToTerraform;
function ecsClusterDefaultCapacityProviderStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        base: cdktf.numberToTerraform(struct.base),
        capacity_provider: cdktf.stringToTerraform(struct.capacityProvider),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.ecsClusterDefaultCapacityProviderStrategyToTerraform = ecsClusterDefaultCapacityProviderStrategyToTerraform;
function ecsClusterTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsClusterTagsToTerraform = ecsClusterTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecs_cluster.html awscc_ecs_cluster}
*/
class EcsCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecs_cluster.html awscc_ecs_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsClusterConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_cluster',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._capacityProviders = config.capacityProviders;
        this._clusterName = config.clusterName;
        this._clusterSettings = config.clusterSettings;
        this._configuration = config.configuration;
        this._defaultCapacityProviderStrategy = config.defaultCapacityProviderStrategy;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get capacityProviders() {
        return this.getListAttribute('capacity_providers');
    }
    set capacityProviders(value) {
        this._capacityProviders = value;
    }
    resetCapacityProviders() {
        this._capacityProviders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityProvidersInput() {
        return this._capacityProviders;
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    resetClusterName() {
        this._clusterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    get clusterSettings() {
        return this.interpolationForAttribute('cluster_settings');
    }
    set clusterSettings(value) {
        this._clusterSettings = value;
    }
    resetClusterSettings() {
        this._clusterSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterSettingsInput() {
        return this._clusterSettings;
    }
    get configuration() {
        return this.interpolationForAttribute('configuration');
    }
    set configuration(value) {
        this._configuration = value;
    }
    resetConfiguration() {
        this._configuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration;
    }
    get defaultCapacityProviderStrategy() {
        return this.interpolationForAttribute('default_capacity_provider_strategy');
    }
    set defaultCapacityProviderStrategy(value) {
        this._defaultCapacityProviderStrategy = value;
    }
    resetDefaultCapacityProviderStrategy() {
        this._defaultCapacityProviderStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultCapacityProviderStrategyInput() {
        return this._defaultCapacityProviderStrategy;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            capacity_providers: cdktf.listMapper(cdktf.stringToTerraform)(this._capacityProviders),
            cluster_name: cdktf.stringToTerraform(this._clusterName),
            cluster_settings: cdktf.listMapper(ecsClusterClusterSettingsToTerraform)(this._clusterSettings),
            configuration: ecsClusterConfigurationToTerraform(this._configuration),
            default_capacity_provider_strategy: cdktf.listMapper(ecsClusterDefaultCapacityProviderStrategyToTerraform)(this._defaultCapacityProviderStrategy),
            tags: cdktf.listMapper(ecsClusterTagsToTerraform)(this._tags),
        };
    }
}
exports.EcsCluster = EcsCluster;
// =================
// STATIC PROPERTIES
// =================
EcsCluster.tfResourceType = "awscc_ecs_cluster";
//# sourceMappingURL=data:application/json;base64,