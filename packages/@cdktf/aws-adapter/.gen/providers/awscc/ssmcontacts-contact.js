"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmcontactsContact = exports.ssmcontactsContactPlanToTerraform = exports.ssmcontactsContactPlanTargetsToTerraform = exports.ssmcontactsContactPlanTargetsContactTargetInfoToTerraform = exports.ssmcontactsContactPlanTargetsChannelTargetInfoToTerraform = void 0;
const cdktf = require("cdktf");
function ssmcontactsContactPlanTargetsChannelTargetInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        channel_id: cdktf.stringToTerraform(struct.channelId),
        retry_interval_in_minutes: cdktf.numberToTerraform(struct.retryIntervalInMinutes),
    };
}
exports.ssmcontactsContactPlanTargetsChannelTargetInfoToTerraform = ssmcontactsContactPlanTargetsChannelTargetInfoToTerraform;
function ssmcontactsContactPlanTargetsContactTargetInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_id: cdktf.stringToTerraform(struct.contactId),
        is_essential: cdktf.booleanToTerraform(struct.isEssential),
    };
}
exports.ssmcontactsContactPlanTargetsContactTargetInfoToTerraform = ssmcontactsContactPlanTargetsContactTargetInfoToTerraform;
function ssmcontactsContactPlanTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        channel_target_info: ssmcontactsContactPlanTargetsChannelTargetInfoToTerraform(struct.channelTargetInfo),
        contact_target_info: ssmcontactsContactPlanTargetsContactTargetInfoToTerraform(struct.contactTargetInfo),
    };
}
exports.ssmcontactsContactPlanTargetsToTerraform = ssmcontactsContactPlanTargetsToTerraform;
function ssmcontactsContactPlanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_minutes: cdktf.numberToTerraform(struct.durationInMinutes),
        targets: cdktf.listMapper(ssmcontactsContactPlanTargetsToTerraform)(struct.targets),
    };
}
exports.ssmcontactsContactPlanToTerraform = ssmcontactsContactPlanToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact.html awscc_ssmcontacts_contact}
*/
class SsmcontactsContact extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact.html awscc_ssmcontacts_contact} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmcontactsContactConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssmcontacts_contact',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._alias = config.alias;
        this._displayName = config.displayName;
        this._plan = config.plan;
        this._type = config.type;
    }
    get alias() {
        return this.getStringAttribute('alias');
    }
    set alias(value) {
        this._alias = value;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get plan() {
        return this.interpolationForAttribute('plan');
    }
    set plan(value) {
        this._plan = value;
    }
    // Temporarily expose input value. Use with caution.
    get planInput() {
        return this._plan;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            alias: cdktf.stringToTerraform(this._alias),
            display_name: cdktf.stringToTerraform(this._displayName),
            plan: cdktf.listMapper(ssmcontactsContactPlanToTerraform)(this._plan),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.SsmcontactsContact = SsmcontactsContact;
// =================
// STATIC PROPERTIES
// =================
SsmcontactsContact.tfResourceType = "awscc_ssmcontacts_contact";
//# sourceMappingURL=data:application/json;base64,