"use strict";
// https://www.terraform.io/docs/providers/awscc/r/elasticache_global_replication_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticacheGlobalReplicationGroup = exports.elasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform = exports.elasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform = exports.elasticacheGlobalReplicationGroupMembersToTerraform = void 0;
const cdktf = require("cdktf");
function elasticacheGlobalReplicationGroupMembersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replication_group_id: cdktf.stringToTerraform(struct.replicationGroupId),
        replication_group_region: cdktf.stringToTerraform(struct.replicationGroupRegion),
        role: cdktf.stringToTerraform(struct.role),
    };
}
exports.elasticacheGlobalReplicationGroupMembersToTerraform = elasticacheGlobalReplicationGroupMembersToTerraform;
function elasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        node_group_id: cdktf.stringToTerraform(struct.nodeGroupId),
        preferred_availability_zones: cdktf.listMapper(cdktf.stringToTerraform)(struct.preferredAvailabilityZones),
    };
}
exports.elasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform = elasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform;
function elasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replication_group_id: cdktf.stringToTerraform(struct.replicationGroupId),
        replication_group_region: cdktf.stringToTerraform(struct.replicationGroupRegion),
        resharding_configurations: cdktf.listMapper(elasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform)(struct.reshardingConfigurations),
    };
}
exports.elasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform = elasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/elasticache_global_replication_group.html awscc_elasticache_global_replication_group}
*/
class ElasticacheGlobalReplicationGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/elasticache_global_replication_group.html awscc_elasticache_global_replication_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ElasticacheGlobalReplicationGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_elasticache_global_replication_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._automaticFailoverEnabled = config.automaticFailoverEnabled;
        this._cacheNodeType = config.cacheNodeType;
        this._cacheParameterGroupName = config.cacheParameterGroupName;
        this._engineVersion = config.engineVersion;
        this._globalNodeGroupCount = config.globalNodeGroupCount;
        this._globalReplicationGroupDescription = config.globalReplicationGroupDescription;
        this._globalReplicationGroupIdSuffix = config.globalReplicationGroupIdSuffix;
        this._members = config.members;
        this._regionalConfigurations = config.regionalConfigurations;
    }
    get automaticFailoverEnabled() {
        return this.getBooleanAttribute('automatic_failover_enabled');
    }
    set automaticFailoverEnabled(value) {
        this._automaticFailoverEnabled = value;
    }
    resetAutomaticFailoverEnabled() {
        this._automaticFailoverEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticFailoverEnabledInput() {
        return this._automaticFailoverEnabled;
    }
    get cacheNodeType() {
        return this.getStringAttribute('cache_node_type');
    }
    set cacheNodeType(value) {
        this._cacheNodeType = value;
    }
    resetCacheNodeType() {
        this._cacheNodeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheNodeTypeInput() {
        return this._cacheNodeType;
    }
    get cacheParameterGroupName() {
        return this.getStringAttribute('cache_parameter_group_name');
    }
    set cacheParameterGroupName(value) {
        this._cacheParameterGroupName = value;
    }
    resetCacheParameterGroupName() {
        this._cacheParameterGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheParameterGroupNameInput() {
        return this._cacheParameterGroupName;
    }
    get engineVersion() {
        return this.getStringAttribute('engine_version');
    }
    set engineVersion(value) {
        this._engineVersion = value;
    }
    resetEngineVersion() {
        this._engineVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineVersionInput() {
        return this._engineVersion;
    }
    get globalNodeGroupCount() {
        return this.getNumberAttribute('global_node_group_count');
    }
    set globalNodeGroupCount(value) {
        this._globalNodeGroupCount = value;
    }
    resetGlobalNodeGroupCount() {
        this._globalNodeGroupCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalNodeGroupCountInput() {
        return this._globalNodeGroupCount;
    }
    get globalReplicationGroupDescription() {
        return this.getStringAttribute('global_replication_group_description');
    }
    set globalReplicationGroupDescription(value) {
        this._globalReplicationGroupDescription = value;
    }
    resetGlobalReplicationGroupDescription() {
        this._globalReplicationGroupDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalReplicationGroupDescriptionInput() {
        return this._globalReplicationGroupDescription;
    }
    // global_replication_group_id - computed: true, optional: false, required: false
    get globalReplicationGroupId() {
        return this.getStringAttribute('global_replication_group_id');
    }
    get globalReplicationGroupIdSuffix() {
        return this.getStringAttribute('global_replication_group_id_suffix');
    }
    set globalReplicationGroupIdSuffix(value) {
        this._globalReplicationGroupIdSuffix = value;
    }
    resetGlobalReplicationGroupIdSuffix() {
        this._globalReplicationGroupIdSuffix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalReplicationGroupIdSuffixInput() {
        return this._globalReplicationGroupIdSuffix;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get members() {
        return this.interpolationForAttribute('members');
    }
    set members(value) {
        this._members = value;
    }
    // Temporarily expose input value. Use with caution.
    get membersInput() {
        return this._members;
    }
    get regionalConfigurations() {
        return this.interpolationForAttribute('regional_configurations');
    }
    set regionalConfigurations(value) {
        this._regionalConfigurations = value;
    }
    resetRegionalConfigurations() {
        this._regionalConfigurations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionalConfigurationsInput() {
        return this._regionalConfigurations;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            automatic_failover_enabled: cdktf.booleanToTerraform(this._automaticFailoverEnabled),
            cache_node_type: cdktf.stringToTerraform(this._cacheNodeType),
            cache_parameter_group_name: cdktf.stringToTerraform(this._cacheParameterGroupName),
            engine_version: cdktf.stringToTerraform(this._engineVersion),
            global_node_group_count: cdktf.numberToTerraform(this._globalNodeGroupCount),
            global_replication_group_description: cdktf.stringToTerraform(this._globalReplicationGroupDescription),
            global_replication_group_id_suffix: cdktf.stringToTerraform(this._globalReplicationGroupIdSuffix),
            members: cdktf.listMapper(elasticacheGlobalReplicationGroupMembersToTerraform)(this._members),
            regional_configurations: cdktf.listMapper(elasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform)(this._regionalConfigurations),
        };
    }
}
exports.ElasticacheGlobalReplicationGroup = ElasticacheGlobalReplicationGroup;
// =================
// STATIC PROPERTIES
// =================
ElasticacheGlobalReplicationGroup.tfResourceType = "awscc_elasticache_global_replication_group";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxhc3RpY2FjaGUtZ2xvYmFsLXJlcGxpY2F0aW9uLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWxhc3RpY2FjaGUtZ2xvYmFsLXJlcGxpY2F0aW9uLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0RkFBNEY7QUFDNUYsMkNBQTJDOzs7QUFHM0MsK0JBQStCO0FBaUYvQixTQUFnQixtREFBbUQsQ0FBQyxNQUFpRDtJQUNuSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDekUsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxzQkFBc0IsQ0FBQztRQUNqRixJQUFJLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxJQUFJLENBQUM7S0FDNUMsQ0FBQTtBQUNILENBQUM7QUFQRCxrSEFPQztBQWlCRCxTQUFnQiwwRkFBMEYsQ0FBQyxNQUF3RjtJQUNqTSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLGFBQWEsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLFdBQVcsQ0FBQztRQUMzRCw0QkFBNEIsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU8sQ0FBQywwQkFBMEIsQ0FBQztLQUM1RyxDQUFBO0FBQ0gsQ0FBQztBQU5ELGdNQU1DO0FBdUJELFNBQWdCLGtFQUFrRSxDQUFDLE1BQWdFO0lBQ2pKLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFF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QzVJLENBQUM7SUFDSixDQUFDOztBQXhOSCw4RUF5TkM7QUF2TkMsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDRyxnREFBYyxHQUFXLDRDQUE0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWxcbi8vIGdlbmVyYXRlZCBmcm9tIHRlcnJhZm9ybSByZXNvdXJjZSBzY2hlbWFcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGt0ZiBmcm9tICdjZGt0Zic7XG5cbi8vIENvbmZpZ3VyYXRpb25cblxuZXhwb3J0IGludGVyZmFjZSBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogQXV0b21hdGljRmFpbG92ZXJFbmFibGVkXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNhdXRvbWF0aWNfZmFpbG92ZXJfZW5hYmxlZCBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAjYXV0b21hdGljX2ZhaWxvdmVyX2VuYWJsZWR9XG4gICovXG4gIHJlYWRvbmx5IGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogVGhlIGNhY2hlIG5vZGUgdHlwZSBvZiB0aGUgR2xvYmFsIERhdGFzdG9yZVxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWwjY2FjaGVfbm9kZV90eXBlIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNjYWNoZV9ub2RlX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IGNhY2hlTm9kZVR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIENhY2hlIHBhcmFtZXRlciBncm91cCBuYW1lIHRvIHVzZSBmb3IgdGhlIG5ldyBlbmdpbmUgdmVyc2lvbi4gVGhpcyBwYXJhbWV0ZXIgY2Fubm90IGJlIG1vZGlmaWVkIGluZGVwZW5kZW50bHkuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNjYWNoZV9wYXJhbWV0ZXJfZ3JvdXBfbmFtZSBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAjY2FjaGVfcGFyYW1ldGVyX2dyb3VwX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNhY2hlUGFyYW1ldGVyR3JvdXBOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgZW5naW5lIHZlcnNpb24gb2YgdGhlIEdsb2JhbCBEYXRhc3RvcmUuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNlbmdpbmVfdmVyc2lvbiBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAjZW5naW5lX3ZlcnNpb259XG4gICovXG4gIHJlYWRvbmx5IGVuZ2luZVZlcnNpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAqIEluZGljYXRlcyB0aGUgbnVtYmVyIG9mIG5vZGUgZ3JvdXBzIGluIHRoZSBHbG9iYWwgRGF0YXN0b3JlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWwjZ2xvYmFsX25vZGVfZ3JvdXBfY291bnQgRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwI2dsb2JhbF9ub2RlX2dyb3VwX2NvdW50fVxuICAqL1xuICByZWFkb25seSBnbG9iYWxOb2RlR3JvdXBDb3VudD86IG51bWJlcjtcbiAgLyoqXG4gICogVGhlIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHRoZSBHbG9iYWwgRGF0YXN0b3JlXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfZGVzY3JpcHRpb24gRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwI2dsb2JhbF9yZXBsaWNhdGlvbl9ncm91cF9kZXNjcmlwdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgc3VmZml4IG5hbWUgb2YgYSBHbG9iYWwgRGF0YXN0b3JlLiBBbWF6b24gRWxhc3RpQ2FjaGUgYXV0b21hdGljYWxseSBhcHBsaWVzIGEgcHJlZml4IHRvIHRoZSBHbG9iYWwgRGF0YXN0b3JlIElEIHdoZW4gaXQgaXMgY3JlYXRlZC4gRWFjaCBBV1MgUmVnaW9uIGhhcyBpdHMgb3duIHByZWZpeC4gXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfaWRfc3VmZml4IEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfaWRfc3VmZml4fVxuICAqL1xuICByZWFkb25seSBnbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXg/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFRoZSByZXBsaWNhdGlvbiBncm91cHMgdGhhdCBjb21wcmlzZSB0aGUgR2xvYmFsIERhdGFzdG9yZS5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VsYXN0aWNhY2hlX2dsb2JhbF9yZXBsaWNhdGlvbl9ncm91cC5odG1sI21lbWJlcnMgRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwI21lbWJlcnN9XG4gICovXG4gIHJlYWRvbmx5IG1lbWJlcnM6IEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cE1lbWJlcnNbXTtcbiAgLyoqXG4gICogRGVzY3JpYmVzIHRoZSByZXBsaWNhdGlvbiBncm91cCBJRHMsIHRoZSBBV1MgcmVnaW9ucyB3aGVyZSB0aGV5IGFyZSBzdG9yZWQgYW5kIHRoZSBzaGFyZCBjb25maWd1cmF0aW9uIGZvciBlYWNoIHRoYXQgY29tcHJpc2UgdGhlIEdsb2JhbCBEYXRhc3RvcmUgXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNyZWdpb25hbF9jb25maWd1cmF0aW9ucyBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAjcmVnaW9uYWxfY29uZmlndXJhdGlvbnN9XG4gICovXG4gIHJlYWRvbmx5IHJlZ2lvbmFsQ29uZmlndXJhdGlvbnM/OiBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBSZWdpb25hbENvbmZpZ3VyYXRpb25zW107XG59XG5leHBvcnQgaW50ZXJmYWNlIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cE1lbWJlcnMge1xuICAvKipcbiAgKiBSZWdpb25hbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVtYmVyIGkuZS4gUmVwbGljYXRpb25Hcm91cElkLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWwjcmVwbGljYXRpb25fZ3JvdXBfaWQgRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwI3JlcGxpY2F0aW9uX2dyb3VwX2lkfVxuICAqL1xuICByZWFkb25seSByZXBsaWNhdGlvbkdyb3VwSWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFRoZSBBV1MgcmVnaW9uIG9mIHRoZSBHbG9iYWwgRGF0YXN0b3JlIG1lbWJlci5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VsYXN0aWNhY2hlX2dsb2JhbF9yZXBsaWNhdGlvbl9ncm91cC5odG1sI3JlcGxpY2F0aW9uX2dyb3VwX3JlZ2lvbiBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAjcmVwbGljYXRpb25fZ3JvdXBfcmVnaW9ufVxuICAqL1xuICByZWFkb25seSByZXBsaWNhdGlvbkdyb3VwUmVnaW9uPzogc3RyaW5nO1xuICAvKipcbiAgKiBJbmRpY2F0ZXMgdGhlIHJvbGUgb2YgdGhlIG1lbWJlciwgcHJpbWFyeSBvciBzZWNvbmRhcnkuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNyb2xlIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNyb2xlfVxuICAqL1xuICByZWFkb25seSByb2xlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwTWVtYmVyc1RvVGVycmFmb3JtKHN0cnVjdD86IEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cE1lbWJlcnMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgcmVwbGljYXRpb25fZ3JvdXBfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVwbGljYXRpb25Hcm91cElkKSxcbiAgICByZXBsaWNhdGlvbl9ncm91cF9yZWdpb246IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVwbGljYXRpb25Hcm91cFJlZ2lvbiksXG4gICAgcm9sZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yb2xlKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cFJlZ2lvbmFsQ29uZmlndXJhdGlvbnNSZXNoYXJkaW5nQ29uZmlndXJhdGlvbnMge1xuICAvKipcbiAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIE5vZGUgR3JvdXAuIFRoaXMgaXMgZWl0aGVyIGF1dG8tZ2VuZXJhdGVkIGJ5IEVsYXN0aUNhY2hlICg0LWRpZ2l0IGlkKSBvciBhIHVzZXIgc3VwcGxpZWQgaWQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNub2RlX2dyb3VwX2lkIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNub2RlX2dyb3VwX2lkfVxuICAqL1xuICByZWFkb25seSBub2RlR3JvdXBJZD86IHN0cmluZztcbiAgLyoqXG4gICogQSBsaXN0IG9mIHByZWZlcnJlZCBhdmFpbGFiaWxpdHkgem9uZXMgZm9yIHRoZSBub2RlcyBvZiBuZXcgbm9kZSBncm91cHMuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNwcmVmZXJyZWRfYXZhaWxhYmlsaXR5X3pvbmVzIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNwcmVmZXJyZWRfYXZhaWxhYmlsaXR5X3pvbmVzfVxuICAqL1xuICByZWFkb25seSBwcmVmZXJyZWRBdmFpbGFiaWxpdHlab25lcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwUmVnaW9uYWxDb25maWd1cmF0aW9uc1Jlc2hhcmRpbmdDb25maWd1cmF0aW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cFJlZ2lvbmFsQ29uZmlndXJhdGlvbnNSZXNoYXJkaW5nQ29uZmlndXJhdGlvbnMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgbm9kZV9ncm91cF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5ub2RlR3JvdXBJZCksXG4gICAgcHJlZmVycmVkX2F2YWlsYWJpbGl0eV96b25lczogY2RrdGYubGlzdE1hcHBlcihjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSkoc3RydWN0IS5wcmVmZXJyZWRBdmFpbGFiaWxpdHlab25lcyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBSZWdpb25hbENvbmZpZ3VyYXRpb25zIHtcbiAgLyoqXG4gICogVGhlIHJlcGxpY2F0aW9uIGdyb3VwIGlkIG9mIHRoZSBHbG9iYWwgRGF0YXN0b3JlIG1lbWJlci5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VsYXN0aWNhY2hlX2dsb2JhbF9yZXBsaWNhdGlvbl9ncm91cC5odG1sI3JlcGxpY2F0aW9uX2dyb3VwX2lkIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNyZXBsaWNhdGlvbl9ncm91cF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgcmVwbGljYXRpb25Hcm91cElkPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgQVdTIHJlZ2lvbiBvZiB0aGUgR2xvYmFsIERhdGFzdG9yZSBtZW1iZXIuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNyZXBsaWNhdGlvbl9ncm91cF9yZWdpb24gRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwI3JlcGxpY2F0aW9uX2dyb3VwX3JlZ2lvbn1cbiAgKi9cbiAgcmVhZG9ubHkgcmVwbGljYXRpb25Hcm91cFJlZ2lvbj86IHN0cmluZztcbiAgLyoqXG4gICogQSBsaXN0IG9mIFByZWZlcnJlZEF2YWlsYWJpbGl0eVpvbmVzIG9iamVjdHMgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYSBub2RlIGdyb3VwIGluIHRoZSByZXNoYXJkZWQgY2x1c3Rlci4gXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAuaHRtbCNyZXNoYXJkaW5nX2NvbmZpZ3VyYXRpb25zIEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cCNyZXNoYXJkaW5nX2NvbmZpZ3VyYXRpb25zfVxuICAqL1xuICByZWFkb25seSByZXNoYXJkaW5nQ29uZmlndXJhdGlvbnM/OiBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBSZWdpb25hbENvbmZpZ3VyYXRpb25zUmVzaGFyZGluZ0NvbmZpZ3VyYXRpb25zW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBSZWdpb25hbENvbmZpZ3VyYXRpb25zVG9UZXJyYWZvcm0oc3RydWN0PzogRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwUmVnaW9uYWxDb25maWd1cmF0aW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICByZXBsaWNhdGlvbl9ncm91cF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZXBsaWNhdGlvbkdyb3VwSWQpLFxuICAgIHJlcGxpY2F0aW9uX2dyb3VwX3JlZ2lvbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZXBsaWNhdGlvbkdyb3VwUmVnaW9uKSxcbiAgICByZXNoYXJkaW5nX2NvbmZpZ3VyYXRpb25zOiBjZGt0Zi5saXN0TWFwcGVyKGVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cFJlZ2lvbmFsQ29uZmlndXJhdGlvbnNSZXNoYXJkaW5nQ29uZmlndXJhdGlvbnNUb1RlcnJhZm9ybSkoc3RydWN0IS5yZXNoYXJkaW5nQ29uZmlndXJhdGlvbnMpLFxuICB9XG59XG5cblxuLyoqXG4qIFJlcHJlc2VudHMgYSB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWwgYXdzY2NfZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwfVxuKi9cbmV4cG9ydCBjbGFzcyBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXAgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBcIjtcblxuICAvLyA9PT09PT09PT09PVxuICAvLyBJTklUSUFMSVpFUlxuICAvLyA9PT09PT09PT09PVxuXG4gIC8qKlxuICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwLmh0bWwgYXdzY2NfZWxhc3RpY2FjaGVfZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwfSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBDb25maWdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwQ29uZmlnKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICB0ZXJyYWZvcm1SZXNvdXJjZVR5cGU6ICdhd3NjY19lbGFzdGljYWNoZV9nbG9iYWxfcmVwbGljYXRpb25fZ3JvdXAnLFxuICAgICAgdGVycmFmb3JtR2VuZXJhdG9yTWV0YWRhdGE6IHtcbiAgICAgICAgcHJvdmlkZXJOYW1lOiAnYXdzY2MnXG4gICAgICB9LFxuICAgICAgcHJvdmlkZXI6IGNvbmZpZy5wcm92aWRlcixcbiAgICAgIGRlcGVuZHNPbjogY29uZmlnLmRlcGVuZHNPbixcbiAgICAgIGNvdW50OiBjb25maWcuY291bnQsXG4gICAgICBsaWZlY3ljbGU6IGNvbmZpZy5saWZlY3ljbGVcbiAgICB9KTtcbiAgICB0aGlzLl9hdXRvbWF0aWNGYWlsb3ZlckVuYWJsZWQgPSBjb25maWcuYXV0b21hdGljRmFpbG92ZXJFbmFibGVkO1xuICAgIHRoaXMuX2NhY2hlTm9kZVR5cGUgPSBjb25maWcuY2FjaGVOb2RlVHlwZTtcbiAgICB0aGlzLl9jYWNoZVBhcmFtZXRlckdyb3VwTmFtZSA9IGNvbmZpZy5jYWNoZVBhcmFtZXRlckdyb3VwTmFtZTtcbiAgICB0aGlzLl9lbmdpbmVWZXJzaW9uID0gY29uZmlnLmVuZ2luZVZlcnNpb247XG4gICAgdGhpcy5fZ2xvYmFsTm9kZUdyb3VwQ291bnQgPSBjb25maWcuZ2xvYmFsTm9kZUdyb3VwQ291bnQ7XG4gICAgdGhpcy5fZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uID0gY29uZmlnLmdsb2JhbFJlcGxpY2F0aW9uR3JvdXBEZXNjcmlwdGlvbjtcbiAgICB0aGlzLl9nbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXggPSBjb25maWcuZ2xvYmFsUmVwbGljYXRpb25Hcm91cElkU3VmZml4O1xuICAgIHRoaXMuX21lbWJlcnMgPSBjb25maWcubWVtYmVycztcbiAgICB0aGlzLl9yZWdpb25hbENvbmZpZ3VyYXRpb25zID0gY29uZmlnLnJlZ2lvbmFsQ29uZmlndXJhdGlvbnM7XG4gIH1cblxuICAvLyA9PT09PT09PT09XG4gIC8vIEFUVFJJQlVURVNcbiAgLy8gPT09PT09PT09PVxuXG4gIC8vIGF1dG9tYXRpY19mYWlsb3Zlcl9lbmFibGVkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2F1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgcHVibGljIGdldCBhdXRvbWF0aWNGYWlsb3ZlckVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgnYXV0b21hdGljX2ZhaWxvdmVyX2VuYWJsZWQnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZCh2YWx1ZTogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlICkge1xuICAgIHRoaXMuX2F1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZCgpIHtcbiAgICB0aGlzLl9hdXRvbWF0aWNGYWlsb3ZlckVuYWJsZWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9hdXRvbWF0aWNGYWlsb3ZlckVuYWJsZWRcbiAgfVxuXG4gIC8vIGNhY2hlX25vZGVfdHlwZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jYWNoZU5vZGVUeXBlPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGNhY2hlTm9kZVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjYWNoZV9ub2RlX3R5cGUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNhY2hlTm9kZVR5cGUodmFsdWU6IHN0cmluZyApIHtcbiAgICB0aGlzLl9jYWNoZU5vZGVUeXBlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q2FjaGVOb2RlVHlwZSgpIHtcbiAgICB0aGlzLl9jYWNoZU5vZGVUeXBlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjYWNoZU5vZGVUeXBlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlTm9kZVR5cGVcbiAgfVxuXG4gIC8vIGNhY2hlX3BhcmFtZXRlcl9ncm91cF9uYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NhY2hlUGFyYW1ldGVyR3JvdXBOYW1lPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGNhY2hlUGFyYW1ldGVyR3JvdXBOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY2FjaGVfcGFyYW1ldGVyX2dyb3VwX25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNhY2hlUGFyYW1ldGVyR3JvdXBOYW1lKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fY2FjaGVQYXJhbWV0ZXJHcm91cE5hbWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDYWNoZVBhcmFtZXRlckdyb3VwTmFtZSgpIHtcbiAgICB0aGlzLl9jYWNoZVBhcmFtZXRlckdyb3VwTmFtZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY2FjaGVQYXJhbWV0ZXJHcm91cE5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVQYXJhbWV0ZXJHcm91cE5hbWVcbiAgfVxuXG4gIC8vIGVuZ2luZV92ZXJzaW9uIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2VuZ2luZVZlcnNpb24/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgZW5naW5lVmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2VuZ2luZV92ZXJzaW9uJyk7XG4gIH1cbiAgcHVibGljIHNldCBlbmdpbmVWZXJzaW9uKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fZW5naW5lVmVyc2lvbiA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEVuZ2luZVZlcnNpb24oKSB7XG4gICAgdGhpcy5fZW5naW5lVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZW5naW5lVmVyc2lvbklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9lbmdpbmVWZXJzaW9uXG4gIH1cblxuICAvLyBnbG9iYWxfbm9kZV9ncm91cF9jb3VudCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9nbG9iYWxOb2RlR3JvdXBDb3VudD86IG51bWJlcjtcbiAgcHVibGljIGdldCBnbG9iYWxOb2RlR3JvdXBDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2dsb2JhbF9ub2RlX2dyb3VwX2NvdW50Jyk7XG4gIH1cbiAgcHVibGljIHNldCBnbG9iYWxOb2RlR3JvdXBDb3VudCh2YWx1ZTogbnVtYmVyICkge1xuICAgIHRoaXMuX2dsb2JhbE5vZGVHcm91cENvdW50ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0R2xvYmFsTm9kZUdyb3VwQ291bnQoKSB7XG4gICAgdGhpcy5fZ2xvYmFsTm9kZUdyb3VwQ291bnQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGdsb2JhbE5vZGVHcm91cENvdW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsb2JhbE5vZGVHcm91cENvdW50XG4gIH1cblxuICAvLyBnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfZGVzY3JpcHRpb24gLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGdsb2JhbFJlcGxpY2F0aW9uR3JvdXBEZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2dsb2JhbF9yZXBsaWNhdGlvbl9ncm91cF9kZXNjcmlwdGlvbicpO1xuICB9XG4gIHB1YmxpYyBzZXQgZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uKHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0R2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uKCkge1xuICAgIHRoaXMuX2dsb2JhbFJlcGxpY2F0aW9uR3JvdXBEZXNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZ2xvYmFsUmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsb2JhbFJlcGxpY2F0aW9uR3JvdXBEZXNjcmlwdGlvblxuICB9XG5cbiAgLy8gZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwX2lkIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgZ2xvYmFsUmVwbGljYXRpb25Hcm91cElkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwX2lkJyk7XG4gIH1cblxuICAvLyBnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfaWRfc3VmZml4IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2dsb2JhbFJlcGxpY2F0aW9uR3JvdXBJZFN1ZmZpeD86IHN0cmluZztcbiAgcHVibGljIGdldCBnbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdnbG9iYWxfcmVwbGljYXRpb25fZ3JvdXBfaWRfc3VmZml4Jyk7XG4gIH1cbiAgcHVibGljIHNldCBnbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXgodmFsdWU6IHN0cmluZyApIHtcbiAgICB0aGlzLl9nbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXggPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRHbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXgoKSB7XG4gICAgdGhpcy5fZ2xvYmFsUmVwbGljYXRpb25Hcm91cElkU3VmZml4ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBnbG9iYWxSZXBsaWNhdGlvbkdyb3VwSWRTdWZmaXhJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xvYmFsUmVwbGljYXRpb25Hcm91cElkU3VmZml4XG4gIH1cblxuICAvLyBpZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaWQnKTtcbiAgfVxuXG4gIC8vIG1lbWJlcnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfbWVtYmVyczogRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwTWVtYmVyc1tdO1xuICBwdWJsaWMgZ2V0IG1lbWJlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnbWVtYmVycycpIGFzIGFueTtcbiAgfVxuICBwdWJsaWMgc2V0IG1lbWJlcnModmFsdWU6IEVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cE1lbWJlcnNbXSkge1xuICAgIHRoaXMuX21lbWJlcnMgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbWVtYmVyc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9tZW1iZXJzXG4gIH1cblxuICAvLyByZWdpb25hbF9jb25maWd1cmF0aW9ucyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9yZWdpb25hbENvbmZpZ3VyYXRpb25zPzogRWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwUmVnaW9uYWxDb25maWd1cmF0aW9uc1tdO1xuICBwdWJsaWMgZ2V0IHJlZ2lvbmFsQ29uZmlndXJhdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgncmVnaW9uYWxfY29uZmlndXJhdGlvbnMnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCByZWdpb25hbENvbmZpZ3VyYXRpb25zKHZhbHVlOiBFbGFzdGljYWNoZUdsb2JhbFJlcGxpY2F0aW9uR3JvdXBSZWdpb25hbENvbmZpZ3VyYXRpb25zW10gKSB7XG4gICAgdGhpcy5fcmVnaW9uYWxDb25maWd1cmF0aW9ucyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFJlZ2lvbmFsQ29uZmlndXJhdGlvbnMoKSB7XG4gICAgdGhpcy5fcmVnaW9uYWxDb25maWd1cmF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcmVnaW9uYWxDb25maWd1cmF0aW9uc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWdpb25hbENvbmZpZ3VyYXRpb25zXG4gIH1cblxuICAvLyBzdGF0dXMgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdzdGF0dXMnKTtcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0b21hdGljX2ZhaWxvdmVyX2VuYWJsZWQ6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybSh0aGlzLl9hdXRvbWF0aWNGYWlsb3ZlckVuYWJsZWQpLFxuICAgICAgY2FjaGVfbm9kZV90eXBlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9jYWNoZU5vZGVUeXBlKSxcbiAgICAgIGNhY2hlX3BhcmFtZXRlcl9ncm91cF9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9jYWNoZVBhcmFtZXRlckdyb3VwTmFtZSksXG4gICAgICBlbmdpbmVfdmVyc2lvbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fZW5naW5lVmVyc2lvbiksXG4gICAgICBnbG9iYWxfbm9kZV9ncm91cF9jb3VudDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0odGhpcy5fZ2xvYmFsTm9kZUdyb3VwQ291bnQpLFxuICAgICAgZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwX2Rlc2NyaXB0aW9uOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9nbG9iYWxSZXBsaWNhdGlvbkdyb3VwRGVzY3JpcHRpb24pLFxuICAgICAgZ2xvYmFsX3JlcGxpY2F0aW9uX2dyb3VwX2lkX3N1ZmZpeDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fZ2xvYmFsUmVwbGljYXRpb25Hcm91cElkU3VmZml4KSxcbiAgICAgIG1lbWJlcnM6IGNka3RmLmxpc3RNYXBwZXIoZWxhc3RpY2FjaGVHbG9iYWxSZXBsaWNhdGlvbkdyb3VwTWVtYmVyc1RvVGVycmFmb3JtKSh0aGlzLl9tZW1iZXJzKSxcbiAgICAgIHJlZ2lvbmFsX2NvbmZpZ3VyYXRpb25zOiBjZGt0Zi5saXN0TWFwcGVyKGVsYXN0aWNhY2hlR2xvYmFsUmVwbGljYXRpb25Hcm91cFJlZ2lvbmFsQ29uZmlndXJhdGlvbnNUb1RlcnJhZm9ybSkodGhpcy5fcmVnaW9uYWxDb25maWd1cmF0aW9ucyksXG4gICAgfTtcbiAgfVxufVxuIl19