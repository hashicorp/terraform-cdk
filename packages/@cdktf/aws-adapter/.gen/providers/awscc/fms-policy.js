"use strict";
// https://www.terraform.io/docs/providers/awscc/r/fms_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.FmsPolicy = exports.fmsPolicyTagsToTerraform = exports.fmsPolicySecurityServicePolicyDataToTerraform = exports.fmsPolicyResourceTagsToTerraform = exports.fmsPolicyIncludeMapToTerraform = exports.fmsPolicyExcludeMapToTerraform = void 0;
const cdktf = require("cdktf");
function fmsPolicyExcludeMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account: cdktf.listMapper(cdktf.stringToTerraform)(struct.account),
        orgunit: cdktf.listMapper(cdktf.stringToTerraform)(struct.orgunit),
    };
}
exports.fmsPolicyExcludeMapToTerraform = fmsPolicyExcludeMapToTerraform;
function fmsPolicyIncludeMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account: cdktf.listMapper(cdktf.stringToTerraform)(struct.account),
        orgunit: cdktf.listMapper(cdktf.stringToTerraform)(struct.orgunit),
    };
}
exports.fmsPolicyIncludeMapToTerraform = fmsPolicyIncludeMapToTerraform;
function fmsPolicyResourceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.fmsPolicyResourceTagsToTerraform = fmsPolicyResourceTagsToTerraform;
function fmsPolicySecurityServicePolicyDataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        managed_service_data: cdktf.stringToTerraform(struct.managedServiceData),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.fmsPolicySecurityServicePolicyDataToTerraform = fmsPolicySecurityServicePolicyDataToTerraform;
function fmsPolicyTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.fmsPolicyTagsToTerraform = fmsPolicyTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/fms_policy.html awscc_fms_policy}
*/
class FmsPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/fms_policy.html awscc_fms_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FmsPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_fms_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deleteAllPolicyResources = config.deleteAllPolicyResources;
        this._excludeMap = config.excludeMap;
        this._excludeResourceTags = config.excludeResourceTags;
        this._includeMap = config.includeMap;
        this._policyName = config.policyName;
        this._remediationEnabled = config.remediationEnabled;
        this._resourceTags = config.resourceTags;
        this._resourceType = config.resourceType;
        this._resourceTypeList = config.resourceTypeList;
        this._securityServicePolicyData = config.securityServicePolicyData;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deleteAllPolicyResources() {
        return this.getBooleanAttribute('delete_all_policy_resources');
    }
    set deleteAllPolicyResources(value) {
        this._deleteAllPolicyResources = value;
    }
    resetDeleteAllPolicyResources() {
        this._deleteAllPolicyResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteAllPolicyResourcesInput() {
        return this._deleteAllPolicyResources;
    }
    get excludeMap() {
        return this.interpolationForAttribute('exclude_map');
    }
    set excludeMap(value) {
        this._excludeMap = value;
    }
    resetExcludeMap() {
        this._excludeMap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeMapInput() {
        return this._excludeMap;
    }
    get excludeResourceTags() {
        return this.getBooleanAttribute('exclude_resource_tags');
    }
    set excludeResourceTags(value) {
        this._excludeResourceTags = value;
    }
    // Temporarily expose input value. Use with caution.
    get excludeResourceTagsInput() {
        return this._excludeResourceTags;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get includeMap() {
        return this.interpolationForAttribute('include_map');
    }
    set includeMap(value) {
        this._includeMap = value;
    }
    resetIncludeMap() {
        this._includeMap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeMapInput() {
        return this._includeMap;
    }
    get policyName() {
        return this.getStringAttribute('policy_name');
    }
    set policyName(value) {
        this._policyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyNameInput() {
        return this._policyName;
    }
    get remediationEnabled() {
        return this.getBooleanAttribute('remediation_enabled');
    }
    set remediationEnabled(value) {
        this._remediationEnabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get remediationEnabledInput() {
        return this._remediationEnabled;
    }
    get resourceTags() {
        return this.interpolationForAttribute('resource_tags');
    }
    set resourceTags(value) {
        this._resourceTags = value;
    }
    resetResourceTags() {
        this._resourceTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTagsInput() {
        return this._resourceTags;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get resourceTypeList() {
        return this.getListAttribute('resource_type_list');
    }
    set resourceTypeList(value) {
        this._resourceTypeList = value;
    }
    resetResourceTypeList() {
        this._resourceTypeList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeListInput() {
        return this._resourceTypeList;
    }
    get securityServicePolicyData() {
        return this.interpolationForAttribute('security_service_policy_data');
    }
    set securityServicePolicyData(value) {
        this._securityServicePolicyData = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityServicePolicyDataInput() {
        return this._securityServicePolicyData;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            delete_all_policy_resources: cdktf.booleanToTerraform(this._deleteAllPolicyResources),
            exclude_map: fmsPolicyExcludeMapToTerraform(this._excludeMap),
            exclude_resource_tags: cdktf.booleanToTerraform(this._excludeResourceTags),
            include_map: fmsPolicyIncludeMapToTerraform(this._includeMap),
            policy_name: cdktf.stringToTerraform(this._policyName),
            remediation_enabled: cdktf.booleanToTerraform(this._remediationEnabled),
            resource_tags: cdktf.listMapper(fmsPolicyResourceTagsToTerraform)(this._resourceTags),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            resource_type_list: cdktf.listMapper(cdktf.stringToTerraform)(this._resourceTypeList),
            security_service_policy_data: fmsPolicySecurityServicePolicyDataToTerraform(this._securityServicePolicyData),
            tags: cdktf.listMapper(fmsPolicyTagsToTerraform)(this._tags),
        };
    }
}
exports.FmsPolicy = FmsPolicy;
// =================
// STATIC PROPERTIES
// =================
FmsPolicy.tfResourceType = "awscc_fms_policy";
//# sourceMappingURL=data:application/json;base64,