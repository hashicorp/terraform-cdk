"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotsitewise_gateway.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotsitewiseGateway = exports.iotsitewiseGatewayTagsToTerraform = exports.iotsitewiseGatewayGatewayPlatformToTerraform = exports.iotsitewiseGatewayGatewayPlatformGreengrassToTerraform = exports.iotsitewiseGatewayGatewayCapabilitySummariesToTerraform = void 0;
const cdktf = require("cdktf");
function iotsitewiseGatewayGatewayCapabilitySummariesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        capability_configuration: cdktf.stringToTerraform(struct.capabilityConfiguration),
        capability_namespace: cdktf.stringToTerraform(struct.capabilityNamespace),
    };
}
exports.iotsitewiseGatewayGatewayCapabilitySummariesToTerraform = iotsitewiseGatewayGatewayCapabilitySummariesToTerraform;
function iotsitewiseGatewayGatewayPlatformGreengrassToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        group_arn: cdktf.stringToTerraform(struct.groupArn),
    };
}
exports.iotsitewiseGatewayGatewayPlatformGreengrassToTerraform = iotsitewiseGatewayGatewayPlatformGreengrassToTerraform;
function iotsitewiseGatewayGatewayPlatformToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        greengrass: iotsitewiseGatewayGatewayPlatformGreengrassToTerraform(struct.greengrass),
    };
}
exports.iotsitewiseGatewayGatewayPlatformToTerraform = iotsitewiseGatewayGatewayPlatformToTerraform;
function iotsitewiseGatewayTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotsitewiseGatewayTagsToTerraform = iotsitewiseGatewayTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_gateway.html awscc_iotsitewise_gateway}
*/
class IotsitewiseGateway extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_gateway.html awscc_iotsitewise_gateway} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotsitewiseGatewayConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_gateway',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._gatewayCapabilitySummaries = config.gatewayCapabilitySummaries;
        this._gatewayName = config.gatewayName;
        this._gatewayPlatform = config.gatewayPlatform;
        this._tags = config.tags;
    }
    get gatewayCapabilitySummaries() {
        return this.interpolationForAttribute('gateway_capability_summaries');
    }
    set gatewayCapabilitySummaries(value) {
        this._gatewayCapabilitySummaries = value;
    }
    resetGatewayCapabilitySummaries() {
        this._gatewayCapabilitySummaries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gatewayCapabilitySummariesInput() {
        return this._gatewayCapabilitySummaries;
    }
    // gateway_id - computed: true, optional: false, required: false
    get gatewayId() {
        return this.getStringAttribute('gateway_id');
    }
    get gatewayName() {
        return this.getStringAttribute('gateway_name');
    }
    set gatewayName(value) {
        this._gatewayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get gatewayNameInput() {
        return this._gatewayName;
    }
    get gatewayPlatform() {
        return this.interpolationForAttribute('gateway_platform');
    }
    set gatewayPlatform(value) {
        this._gatewayPlatform = value;
    }
    // Temporarily expose input value. Use with caution.
    get gatewayPlatformInput() {
        return this._gatewayPlatform;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            gateway_capability_summaries: cdktf.listMapper(iotsitewiseGatewayGatewayCapabilitySummariesToTerraform)(this._gatewayCapabilitySummaries),
            gateway_name: cdktf.stringToTerraform(this._gatewayName),
            gateway_platform: iotsitewiseGatewayGatewayPlatformToTerraform(this._gatewayPlatform),
            tags: cdktf.listMapper(iotsitewiseGatewayTagsToTerraform)(this._tags),
        };
    }
}
exports.IotsitewiseGateway = IotsitewiseGateway;
// =================
// STATIC PROPERTIES
// =================
IotsitewiseGateway.tfResourceType = "awscc_iotsitewise_gateway";
//# sourceMappingURL=data:application/json;base64,