"use strict";
// https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio_component.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NimblestudioStudioComponent = exports.nimblestudioStudioComponentScriptParametersToTerraform = exports.nimblestudioStudioComponentInitializationScriptsToTerraform = exports.nimblestudioStudioComponentConfigurationToTerraform = exports.nimblestudioStudioComponentConfigurationSharedFileSystemConfigurationToTerraform = exports.nimblestudioStudioComponentConfigurationLicenseServiceConfigurationToTerraform = exports.nimblestudioStudioComponentConfigurationComputeFarmConfigurationToTerraform = exports.nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationToTerraform = exports.nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationComputerAttributesToTerraform = void 0;
const cdktf = require("cdktf");
function nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationComputerAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationComputerAttributesToTerraform = nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationComputerAttributesToTerraform;
function nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        computer_attributes: cdktf.listMapper(nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationComputerAttributesToTerraform)(struct.computerAttributes),
        directory_id: cdktf.stringToTerraform(struct.directoryId),
        organizational_unit_distinguished_name: cdktf.stringToTerraform(struct.organizationalUnitDistinguishedName),
    };
}
exports.nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationToTerraform = nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationToTerraform;
function nimblestudioStudioComponentConfigurationComputeFarmConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        active_directory_user: cdktf.stringToTerraform(struct.activeDirectoryUser),
        endpoint: cdktf.stringToTerraform(struct.endpoint),
    };
}
exports.nimblestudioStudioComponentConfigurationComputeFarmConfigurationToTerraform = nimblestudioStudioComponentConfigurationComputeFarmConfigurationToTerraform;
function nimblestudioStudioComponentConfigurationLicenseServiceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
    };
}
exports.nimblestudioStudioComponentConfigurationLicenseServiceConfigurationToTerraform = nimblestudioStudioComponentConfigurationLicenseServiceConfigurationToTerraform;
function nimblestudioStudioComponentConfigurationSharedFileSystemConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
        linux_mount_point: cdktf.stringToTerraform(struct.linuxMountPoint),
        share_name: cdktf.stringToTerraform(struct.shareName),
        windows_mount_drive: cdktf.stringToTerraform(struct.windowsMountDrive),
    };
}
exports.nimblestudioStudioComponentConfigurationSharedFileSystemConfigurationToTerraform = nimblestudioStudioComponentConfigurationSharedFileSystemConfigurationToTerraform;
function nimblestudioStudioComponentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        active_directory_configuration: nimblestudioStudioComponentConfigurationActiveDirectoryConfigurationToTerraform(struct.activeDirectoryConfiguration),
        compute_farm_configuration: nimblestudioStudioComponentConfigurationComputeFarmConfigurationToTerraform(struct.computeFarmConfiguration),
        license_service_configuration: nimblestudioStudioComponentConfigurationLicenseServiceConfigurationToTerraform(struct.licenseServiceConfiguration),
        shared_file_system_configuration: nimblestudioStudioComponentConfigurationSharedFileSystemConfigurationToTerraform(struct.sharedFileSystemConfiguration),
    };
}
exports.nimblestudioStudioComponentConfigurationToTerraform = nimblestudioStudioComponentConfigurationToTerraform;
function nimblestudioStudioComponentInitializationScriptsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_profile_protocol_version: cdktf.stringToTerraform(struct.launchProfileProtocolVersion),
        platform: cdktf.stringToTerraform(struct.platform),
        run_context: cdktf.stringToTerraform(struct.runContext),
        script: cdktf.stringToTerraform(struct.script),
    };
}
exports.nimblestudioStudioComponentInitializationScriptsToTerraform = nimblestudioStudioComponentInitializationScriptsToTerraform;
function nimblestudioStudioComponentScriptParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.nimblestudioStudioComponentScriptParametersToTerraform = nimblestudioStudioComponentScriptParametersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio_component.html awscc_nimblestudio_studio_component}
*/
class NimblestudioStudioComponent extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio_component.html awscc_nimblestudio_studio_component} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NimblestudioStudioComponentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_nimblestudio_studio_component',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._configuration = config.configuration;
        this._description = config.description;
        this._ec2SecurityGroupIds = config.ec2SecurityGroupIds;
        this._initializationScripts = config.initializationScripts;
        this._name = config.name;
        this._scriptParameters = config.scriptParameters;
        this._studioId = config.studioId;
        this._subtype = config.subtype;
        this._tags = config.tags;
        this._type = config.type;
    }
    get configuration() {
        return this.interpolationForAttribute('configuration');
    }
    set configuration(value) {
        this._configuration = value;
    }
    resetConfiguration() {
        this._configuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get ec2SecurityGroupIds() {
        return this.getListAttribute('ec_2_security_group_ids');
    }
    set ec2SecurityGroupIds(value) {
        this._ec2SecurityGroupIds = value;
    }
    resetEc2SecurityGroupIds() {
        this._ec2SecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ec2SecurityGroupIdsInput() {
        return this._ec2SecurityGroupIds;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get initializationScripts() {
        return this.interpolationForAttribute('initialization_scripts');
    }
    set initializationScripts(value) {
        this._initializationScripts = value;
    }
    resetInitializationScripts() {
        this._initializationScripts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initializationScriptsInput() {
        return this._initializationScripts;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get scriptParameters() {
        return this.interpolationForAttribute('script_parameters');
    }
    set scriptParameters(value) {
        this._scriptParameters = value;
    }
    resetScriptParameters() {
        this._scriptParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptParametersInput() {
        return this._scriptParameters;
    }
    // studio_component_id - computed: true, optional: false, required: false
    get studioComponentId() {
        return this.getStringAttribute('studio_component_id');
    }
    get studioId() {
        return this.getStringAttribute('studio_id');
    }
    set studioId(value) {
        this._studioId = value;
    }
    // Temporarily expose input value. Use with caution.
    get studioIdInput() {
        return this._studioId;
    }
    get subtype() {
        return this.getStringAttribute('subtype');
    }
    set subtype(value) {
        this._subtype = value;
    }
    resetSubtype() {
        this._subtype = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtypeInput() {
        return this._subtype;
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            configuration: nimblestudioStudioComponentConfigurationToTerraform(this._configuration),
            description: cdktf.stringToTerraform(this._description),
            ec_2_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._ec2SecurityGroupIds),
            initialization_scripts: cdktf.listMapper(nimblestudioStudioComponentInitializationScriptsToTerraform)(this._initializationScripts),
            name: cdktf.stringToTerraform(this._name),
            script_parameters: cdktf.listMapper(nimblestudioStudioComponentScriptParametersToTerraform)(this._scriptParameters),
            studio_id: cdktf.stringToTerraform(this._studioId),
            subtype: cdktf.stringToTerraform(this._subtype),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.NimblestudioStudioComponent = NimblestudioStudioComponent;
// =================
// STATIC PROPERTIES
// =================
NimblestudioStudioComponent.tfResourceType = "awscc_nimblestudio_studio_component";
//# sourceMappingURL=data:application/json;base64,