"use strict";
// https://www.terraform.io/docs/providers/awscc/d/cloudfront_realtime_log_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccCloudfrontRealtimeLogConfig = exports.dataAwsccCloudfrontRealtimeLogConfigEndPointsToTerraform = exports.DataAwsccCloudfrontRealtimeLogConfigEndPoints = exports.dataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform = exports.DataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfig = void 0;
const cdktf = require("cdktf");
class DataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfig extends cdktf.ComplexComputedList {
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // stream_arn - computed: true, optional: false, required: false
    get streamArn() {
        return this.getStringAttribute('stream_arn');
    }
}
exports.DataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfig = DataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfig;
function dataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        stream_arn: cdktf.stringToTerraform(struct.streamArn),
    };
}
exports.dataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform = dataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform;
class DataAwsccCloudfrontRealtimeLogConfigEndPoints extends cdktf.ComplexComputedList {
    // kinesis_stream_config - computed: true, optional: false, required: false
    get kinesisStreamConfig() {
        return this.interpolationForAttribute('kinesis_stream_config');
    }
    // stream_type - computed: true, optional: false, required: false
    get streamType() {
        return this.getStringAttribute('stream_type');
    }
}
exports.DataAwsccCloudfrontRealtimeLogConfigEndPoints = DataAwsccCloudfrontRealtimeLogConfigEndPoints;
function dataAwsccCloudfrontRealtimeLogConfigEndPointsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kinesis_stream_config: dataAwsccCloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform(struct.kinesisStreamConfig),
        stream_type: cdktf.stringToTerraform(struct.streamType),
    };
}
exports.dataAwsccCloudfrontRealtimeLogConfigEndPointsToTerraform = dataAwsccCloudfrontRealtimeLogConfigEndPointsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/cloudfront_realtime_log_config.html awscc_cloudfront_realtime_log_config}
*/
class DataAwsccCloudfrontRealtimeLogConfig extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/cloudfront_realtime_log_config.html awscc_cloudfront_realtime_log_config} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccCloudfrontRealtimeLogConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_realtime_log_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // end_points - computed: true, optional: false, required: false
    get endPoints() {
        return this.interpolationForAttribute('end_points');
    }
    // fields - computed: true, optional: false, required: false
    get fields() {
        return this.getListAttribute('fields');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // sampling_rate - computed: true, optional: false, required: false
    get samplingRate() {
        return this.getNumberAttribute('sampling_rate');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccCloudfrontRealtimeLogConfig = DataAwsccCloudfrontRealtimeLogConfig;
// =================
// STATIC PROPERTIES
// =================
DataAwsccCloudfrontRealtimeLogConfig.tfResourceType = "awscc_cloudfront_realtime_log_config";
//# sourceMappingURL=data:application/json;base64,