"use strict";
// https://www.terraform.io/docs/providers/awscc/r/lambda_code_signing_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaCodeSigningConfig = exports.lambdaCodeSigningConfigCodeSigningPoliciesToTerraform = exports.lambdaCodeSigningConfigAllowedPublishersToTerraform = void 0;
const cdktf = require("cdktf");
function lambdaCodeSigningConfigAllowedPublishersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        signing_profile_version_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.signingProfileVersionArns),
    };
}
exports.lambdaCodeSigningConfigAllowedPublishersToTerraform = lambdaCodeSigningConfigAllowedPublishersToTerraform;
function lambdaCodeSigningConfigCodeSigningPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        untrusted_artifact_on_deployment: cdktf.stringToTerraform(struct.untrustedArtifactOnDeployment),
    };
}
exports.lambdaCodeSigningConfigCodeSigningPoliciesToTerraform = lambdaCodeSigningConfigCodeSigningPoliciesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/lambda_code_signing_config.html awscc_lambda_code_signing_config}
*/
class LambdaCodeSigningConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/lambda_code_signing_config.html awscc_lambda_code_signing_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LambdaCodeSigningConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_lambda_code_signing_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._allowedPublishers = config.allowedPublishers;
        this._codeSigningPolicies = config.codeSigningPolicies;
        this._description = config.description;
    }
    get allowedPublishers() {
        return this.interpolationForAttribute('allowed_publishers');
    }
    set allowedPublishers(value) {
        this._allowedPublishers = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedPublishersInput() {
        return this._allowedPublishers;
    }
    // code_signing_config_arn - computed: true, optional: false, required: false
    get codeSigningConfigArn() {
        return this.getStringAttribute('code_signing_config_arn');
    }
    // code_signing_config_id - computed: true, optional: false, required: false
    get codeSigningConfigId() {
        return this.getStringAttribute('code_signing_config_id');
    }
    get codeSigningPolicies() {
        return this.interpolationForAttribute('code_signing_policies');
    }
    set codeSigningPolicies(value) {
        this._codeSigningPolicies = value;
    }
    resetCodeSigningPolicies() {
        this._codeSigningPolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeSigningPoliciesInput() {
        return this._codeSigningPolicies;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allowed_publishers: lambdaCodeSigningConfigAllowedPublishersToTerraform(this._allowedPublishers),
            code_signing_policies: lambdaCodeSigningConfigCodeSigningPoliciesToTerraform(this._codeSigningPolicies),
            description: cdktf.stringToTerraform(this._description),
        };
    }
}
exports.LambdaCodeSigningConfig = LambdaCodeSigningConfig;
// =================
// STATIC PROPERTIES
// =================
LambdaCodeSigningConfig.tfResourceType = "awscc_lambda_code_signing_config";
//# sourceMappingURL=data:application/json;base64,