"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_app_image_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerAppImageConfig = exports.sagemakerAppImageConfigTagsToTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigToTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_gid: cdktf.numberToTerraform(struct.defaultGid),
        default_uid: cdktf.numberToTerraform(struct.defaultUid),
        mount_path: cdktf.stringToTerraform(struct.mountPath),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform;
function sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform;
function sagemakerAppImageConfigKernelGatewayImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file_system_config: sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct.fileSystemConfig),
        kernel_specs: cdktf.listMapper(sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform)(struct.kernelSpecs),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigToTerraform;
function sagemakerAppImageConfigTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerAppImageConfigTagsToTerraform = sagemakerAppImageConfigTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_app_image_config.html awscc_sagemaker_app_image_config}
*/
class SagemakerAppImageConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_app_image_config.html awscc_sagemaker_app_image_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerAppImageConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_app_image_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._appImageConfigName = config.appImageConfigName;
        this._kernelGatewayImageConfig = config.kernelGatewayImageConfig;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // app_image_config_arn - computed: true, optional: false, required: false
    get appImageConfigArn() {
        return this.getStringAttribute('app_image_config_arn');
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kernelGatewayImageConfig() {
        return this.interpolationForAttribute('kernel_gateway_image_config');
    }
    set kernelGatewayImageConfig(value) {
        this._kernelGatewayImageConfig = value;
    }
    resetKernelGatewayImageConfig() {
        this._kernelGatewayImageConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayImageConfigInput() {
        return this._kernelGatewayImageConfig;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_image_config_name: cdktf.stringToTerraform(this._appImageConfigName),
            kernel_gateway_image_config: sagemakerAppImageConfigKernelGatewayImageConfigToTerraform(this._kernelGatewayImageConfig),
            tags: cdktf.listMapper(sagemakerAppImageConfigTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerAppImageConfig = SagemakerAppImageConfig;
// =================
// STATIC PROPERTIES
// =================
SagemakerAppImageConfig.tfResourceType = "awscc_sagemaker_app_image_config";
//# sourceMappingURL=data:application/json;base64,