"use strict";
// https://www.terraform.io/docs/providers/awscc/d/sagemaker_app_image_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSagemakerAppImageConfig = exports.dataAwsccSagemakerAppImageConfigTagsToTerraform = exports.DataAwsccSagemakerAppImageConfigTags = exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigToTerraform = exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfig = exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform = exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecs = exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfig = void 0;
const cdktf = require("cdktf");
class DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfig extends cdktf.ComplexComputedList {
    // default_gid - computed: true, optional: false, required: false
    get defaultGid() {
        return this.getNumberAttribute('default_gid');
    }
    // default_uid - computed: true, optional: false, required: false
    get defaultUid() {
        return this.getNumberAttribute('default_uid');
    }
    // mount_path - computed: true, optional: false, required: false
    get mountPath() {
        return this.getStringAttribute('mount_path');
    }
}
exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfig = DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfig;
function dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_gid: cdktf.numberToTerraform(struct.defaultGid),
        default_uid: cdktf.numberToTerraform(struct.defaultUid),
        mount_path: cdktf.stringToTerraform(struct.mountPath),
    };
}
exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform;
class DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecs extends cdktf.ComplexComputedList {
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecs = DataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecs;
function dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform = dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform;
class DataAwsccSagemakerAppImageConfigKernelGatewayImageConfig extends cdktf.ComplexComputedList {
    // file_system_config - computed: true, optional: false, required: false
    get fileSystemConfig() {
        return this.interpolationForAttribute('file_system_config');
    }
    // kernel_specs - computed: true, optional: false, required: false
    get kernelSpecs() {
        return this.interpolationForAttribute('kernel_specs');
    }
}
exports.DataAwsccSagemakerAppImageConfigKernelGatewayImageConfig = DataAwsccSagemakerAppImageConfigKernelGatewayImageConfig;
function dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file_system_config: dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct.fileSystemConfig),
        kernel_specs: cdktf.listMapper(dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigKernelSpecsToTerraform)(struct.kernelSpecs),
    };
}
exports.dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigToTerraform = dataAwsccSagemakerAppImageConfigKernelGatewayImageConfigToTerraform;
class DataAwsccSagemakerAppImageConfigTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccSagemakerAppImageConfigTags = DataAwsccSagemakerAppImageConfigTags;
function dataAwsccSagemakerAppImageConfigTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccSagemakerAppImageConfigTagsToTerraform = dataAwsccSagemakerAppImageConfigTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_app_image_config.html awscc_sagemaker_app_image_config}
*/
class DataAwsccSagemakerAppImageConfig extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_app_image_config.html awscc_sagemaker_app_image_config} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSagemakerAppImageConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_app_image_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // app_image_config_arn - computed: true, optional: false, required: false
    get appImageConfigArn() {
        return this.getStringAttribute('app_image_config_arn');
    }
    // app_image_config_name - computed: true, optional: false, required: false
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // kernel_gateway_image_config - computed: true, optional: false, required: false
    get kernelGatewayImageConfig() {
        return this.interpolationForAttribute('kernel_gateway_image_config');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSagemakerAppImageConfig = DataAwsccSagemakerAppImageConfig;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSagemakerAppImageConfig.tfResourceType = "awscc_sagemaker_app_image_config";
//# sourceMappingURL=data:application/json;base64,