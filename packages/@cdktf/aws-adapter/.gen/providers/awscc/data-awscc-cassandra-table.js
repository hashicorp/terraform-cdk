"use strict";
// https://www.terraform.io/docs/providers/awscc/d/cassandra_table.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccCassandraTable = exports.dataAwsccCassandraTableTagsToTerraform = exports.DataAwsccCassandraTableTags = exports.dataAwsccCassandraTableRegularColumnsToTerraform = exports.DataAwsccCassandraTableRegularColumns = exports.dataAwsccCassandraTablePartitionKeyColumnsToTerraform = exports.DataAwsccCassandraTablePartitionKeyColumns = exports.dataAwsccCassandraTableEncryptionSpecificationToTerraform = exports.DataAwsccCassandraTableEncryptionSpecification = exports.dataAwsccCassandraTableClusteringKeyColumnsToTerraform = exports.DataAwsccCassandraTableClusteringKeyColumns = exports.dataAwsccCassandraTableClusteringKeyColumnsColumnToTerraform = exports.DataAwsccCassandraTableClusteringKeyColumnsColumn = exports.dataAwsccCassandraTableBillingModeToTerraform = exports.DataAwsccCassandraTableBillingMode = exports.dataAwsccCassandraTableBillingModeProvisionedThroughputToTerraform = exports.DataAwsccCassandraTableBillingModeProvisionedThroughput = void 0;
const cdktf = require("cdktf");
class DataAwsccCassandraTableBillingModeProvisionedThroughput extends cdktf.ComplexComputedList {
    // read_capacity_units - computed: true, optional: false, required: false
    get readCapacityUnits() {
        return this.getNumberAttribute('read_capacity_units');
    }
    // write_capacity_units - computed: true, optional: false, required: false
    get writeCapacityUnits() {
        return this.getNumberAttribute('write_capacity_units');
    }
}
exports.DataAwsccCassandraTableBillingModeProvisionedThroughput = DataAwsccCassandraTableBillingModeProvisionedThroughput;
function dataAwsccCassandraTableBillingModeProvisionedThroughputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_capacity_units: cdktf.numberToTerraform(struct.readCapacityUnits),
        write_capacity_units: cdktf.numberToTerraform(struct.writeCapacityUnits),
    };
}
exports.dataAwsccCassandraTableBillingModeProvisionedThroughputToTerraform = dataAwsccCassandraTableBillingModeProvisionedThroughputToTerraform;
class DataAwsccCassandraTableBillingMode extends cdktf.ComplexComputedList {
    // mode - computed: true, optional: false, required: false
    get mode() {
        return this.getStringAttribute('mode');
    }
    // provisioned_throughput - computed: true, optional: false, required: false
    get provisionedThroughput() {
        return this.interpolationForAttribute('provisioned_throughput');
    }
}
exports.DataAwsccCassandraTableBillingMode = DataAwsccCassandraTableBillingMode;
function dataAwsccCassandraTableBillingModeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        provisioned_throughput: dataAwsccCassandraTableBillingModeProvisionedThroughputToTerraform(struct.provisionedThroughput),
    };
}
exports.dataAwsccCassandraTableBillingModeToTerraform = dataAwsccCassandraTableBillingModeToTerraform;
class DataAwsccCassandraTableClusteringKeyColumnsColumn extends cdktf.ComplexComputedList {
    // column_name - computed: true, optional: false, required: false
    get columnName() {
        return this.getStringAttribute('column_name');
    }
    // column_type - computed: true, optional: false, required: false
    get columnType() {
        return this.getStringAttribute('column_type');
    }
}
exports.DataAwsccCassandraTableClusteringKeyColumnsColumn = DataAwsccCassandraTableClusteringKeyColumnsColumn;
function dataAwsccCassandraTableClusteringKeyColumnsColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.dataAwsccCassandraTableClusteringKeyColumnsColumnToTerraform = dataAwsccCassandraTableClusteringKeyColumnsColumnToTerraform;
class DataAwsccCassandraTableClusteringKeyColumns extends cdktf.ComplexComputedList {
    // column - computed: true, optional: false, required: false
    get column() {
        return this.interpolationForAttribute('column');
    }
    // order_by - computed: true, optional: false, required: false
    get orderBy() {
        return this.getStringAttribute('order_by');
    }
}
exports.DataAwsccCassandraTableClusteringKeyColumns = DataAwsccCassandraTableClusteringKeyColumns;
function dataAwsccCassandraTableClusteringKeyColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column: dataAwsccCassandraTableClusteringKeyColumnsColumnToTerraform(struct.column),
        order_by: cdktf.stringToTerraform(struct.orderBy),
    };
}
exports.dataAwsccCassandraTableClusteringKeyColumnsToTerraform = dataAwsccCassandraTableClusteringKeyColumnsToTerraform;
class DataAwsccCassandraTableEncryptionSpecification extends cdktf.ComplexComputedList {
    // encryption_type - computed: true, optional: false, required: false
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    // kms_key_identifier - computed: true, optional: false, required: false
    get kmsKeyIdentifier() {
        return this.getStringAttribute('kms_key_identifier');
    }
}
exports.DataAwsccCassandraTableEncryptionSpecification = DataAwsccCassandraTableEncryptionSpecification;
function dataAwsccCassandraTableEncryptionSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        kms_key_identifier: cdktf.stringToTerraform(struct.kmsKeyIdentifier),
    };
}
exports.dataAwsccCassandraTableEncryptionSpecificationToTerraform = dataAwsccCassandraTableEncryptionSpecificationToTerraform;
class DataAwsccCassandraTablePartitionKeyColumns extends cdktf.ComplexComputedList {
    // column_name - computed: true, optional: false, required: false
    get columnName() {
        return this.getStringAttribute('column_name');
    }
    // column_type - computed: true, optional: false, required: false
    get columnType() {
        return this.getStringAttribute('column_type');
    }
}
exports.DataAwsccCassandraTablePartitionKeyColumns = DataAwsccCassandraTablePartitionKeyColumns;
function dataAwsccCassandraTablePartitionKeyColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.dataAwsccCassandraTablePartitionKeyColumnsToTerraform = dataAwsccCassandraTablePartitionKeyColumnsToTerraform;
class DataAwsccCassandraTableRegularColumns extends cdktf.ComplexComputedList {
    // column_name - computed: true, optional: false, required: false
    get columnName() {
        return this.getStringAttribute('column_name');
    }
    // column_type - computed: true, optional: false, required: false
    get columnType() {
        return this.getStringAttribute('column_type');
    }
}
exports.DataAwsccCassandraTableRegularColumns = DataAwsccCassandraTableRegularColumns;
function dataAwsccCassandraTableRegularColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.dataAwsccCassandraTableRegularColumnsToTerraform = dataAwsccCassandraTableRegularColumnsToTerraform;
class DataAwsccCassandraTableTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccCassandraTableTags = DataAwsccCassandraTableTags;
function dataAwsccCassandraTableTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccCassandraTableTagsToTerraform = dataAwsccCassandraTableTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/cassandra_table.html awscc_cassandra_table}
*/
class DataAwsccCassandraTable extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/cassandra_table.html awscc_cassandra_table} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccCassandraTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cassandra_table',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // billing_mode - computed: true, optional: false, required: false
    get billingMode() {
        return this.interpolationForAttribute('billing_mode');
    }
    // clustering_key_columns - computed: true, optional: false, required: false
    get clusteringKeyColumns() {
        return this.interpolationForAttribute('clustering_key_columns');
    }
    // encryption_specification - computed: true, optional: false, required: false
    get encryptionSpecification() {
        return this.interpolationForAttribute('encryption_specification');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // keyspace_name - computed: true, optional: false, required: false
    get keyspaceName() {
        return this.getStringAttribute('keyspace_name');
    }
    // partition_key_columns - computed: true, optional: false, required: false
    get partitionKeyColumns() {
        return this.interpolationForAttribute('partition_key_columns');
    }
    // point_in_time_recovery_enabled - computed: true, optional: false, required: false
    get pointInTimeRecoveryEnabled() {
        return this.getBooleanAttribute('point_in_time_recovery_enabled');
    }
    // regular_columns - computed: true, optional: false, required: false
    get regularColumns() {
        return this.interpolationForAttribute('regular_columns');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccCassandraTable = DataAwsccCassandraTable;
// =================
// STATIC PROPERTIES
// =================
DataAwsccCassandraTable.tfResourceType = "awscc_cassandra_table";
//# sourceMappingURL=data:application/json;base64,