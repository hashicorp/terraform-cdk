"use strict";
// https://www.terraform.io/docs/providers/awscc/d/athena_work_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccAthenaWorkGroup = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdates = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdates = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfiguration = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersion = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfiguration = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfiguration = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfiguration = exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform = exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersion = exports.dataAwsccAthenaWorkGroupTagsToTerraform = exports.DataAwsccAthenaWorkGroupTags = void 0;
const cdktf = require("cdktf");
class DataAwsccAthenaWorkGroupTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccAthenaWorkGroupTags = DataAwsccAthenaWorkGroupTags;
function dataAwsccAthenaWorkGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccAthenaWorkGroupTagsToTerraform = dataAwsccAthenaWorkGroupTagsToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersion extends cdktf.ComplexComputedList {
    // effective_engine_version - computed: true, optional: false, required: false
    get effectiveEngineVersion() {
        return this.getStringAttribute('effective_engine_version');
    }
    // selected_engine_version - computed: true, optional: false, required: false
    get selectedEngineVersion() {
        return this.getStringAttribute('selected_engine_version');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersion = DataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersion;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        effective_engine_version: cdktf.stringToTerraform(struct.effectiveEngineVersion),
        selected_engine_version: cdktf.stringToTerraform(struct.selectedEngineVersion),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfiguration extends cdktf.ComplexComputedList {
    // encryption_option - computed: true, optional: false, required: false
    get encryptionOption() {
        return this.getStringAttribute('encryption_option');
    }
    // kms_key - computed: true, optional: false, required: false
    get kmsKey() {
        return this.getStringAttribute('kms_key');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfiguration = DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfiguration;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfiguration extends cdktf.ComplexComputedList {
    // encryption_configuration - computed: true, optional: false, required: false
    get encryptionConfiguration() {
        return this.interpolationForAttribute('encryption_configuration');
    }
    // output_location - computed: true, optional: false, required: false
    get outputLocation() {
        return this.getStringAttribute('output_location');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfiguration = DataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfiguration;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_configuration: dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfiguration extends cdktf.ComplexComputedList {
    // bytes_scanned_cutoff_per_query - computed: true, optional: false, required: false
    get bytesScannedCutoffPerQuery() {
        return this.getNumberAttribute('bytes_scanned_cutoff_per_query');
    }
    // enforce_work_group_configuration - computed: true, optional: false, required: false
    get enforceWorkGroupConfiguration() {
        return this.getBooleanAttribute('enforce_work_group_configuration');
    }
    // engine_version - computed: true, optional: false, required: false
    get engineVersion() {
        return this.interpolationForAttribute('engine_version');
    }
    // publish_cloudwatch_metrics_enabled - computed: true, optional: false, required: false
    get publishCloudwatchMetricsEnabled() {
        return this.getBooleanAttribute('publish_cloudwatch_metrics_enabled');
    }
    // requester_pays_enabled - computed: true, optional: false, required: false
    get requesterPaysEnabled() {
        return this.getBooleanAttribute('requester_pays_enabled');
    }
    // result_configuration - computed: true, optional: false, required: false
    get resultConfiguration() {
        return this.interpolationForAttribute('result_configuration');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfiguration = DataAwsccAthenaWorkGroupWorkGroupConfiguration;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bytes_scanned_cutoff_per_query: cdktf.numberToTerraform(struct.bytesScannedCutoffPerQuery),
        enforce_work_group_configuration: cdktf.booleanToTerraform(struct.enforceWorkGroupConfiguration),
        engine_version: dataAwsccAthenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform(struct.engineVersion),
        publish_cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.publishCloudwatchMetricsEnabled),
        requester_pays_enabled: cdktf.booleanToTerraform(struct.requesterPaysEnabled),
        result_configuration: dataAwsccAthenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform(struct.resultConfiguration),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersion extends cdktf.ComplexComputedList {
    // effective_engine_version - computed: true, optional: false, required: false
    get effectiveEngineVersion() {
        return this.getStringAttribute('effective_engine_version');
    }
    // selected_engine_version - computed: true, optional: false, required: false
    get selectedEngineVersion() {
        return this.getStringAttribute('selected_engine_version');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersion = DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersion;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        effective_engine_version: cdktf.stringToTerraform(struct.effectiveEngineVersion),
        selected_engine_version: cdktf.stringToTerraform(struct.selectedEngineVersion),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfiguration extends cdktf.ComplexComputedList {
    // encryption_option - computed: true, optional: false, required: false
    get encryptionOption() {
        return this.getStringAttribute('encryption_option');
    }
    // kms_key - computed: true, optional: false, required: false
    get kmsKey() {
        return this.getStringAttribute('kms_key');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfiguration = DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfiguration;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdates extends cdktf.ComplexComputedList {
    // encryption_configuration - computed: true, optional: false, required: false
    get encryptionConfiguration() {
        return this.interpolationForAttribute('encryption_configuration');
    }
    // output_location - computed: true, optional: false, required: false
    get outputLocation() {
        return this.getStringAttribute('output_location');
    }
    // remove_encryption_configuration - computed: true, optional: false, required: false
    get removeEncryptionConfiguration() {
        return this.getBooleanAttribute('remove_encryption_configuration');
    }
    // remove_output_location - computed: true, optional: false, required: false
    get removeOutputLocation() {
        return this.getBooleanAttribute('remove_output_location');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdates = DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdates;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_configuration: dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
        remove_encryption_configuration: cdktf.booleanToTerraform(struct.removeEncryptionConfiguration),
        remove_output_location: cdktf.booleanToTerraform(struct.removeOutputLocation),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform;
class DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdates extends cdktf.ComplexComputedList {
    // bytes_scanned_cutoff_per_query - computed: true, optional: false, required: false
    get bytesScannedCutoffPerQuery() {
        return this.getNumberAttribute('bytes_scanned_cutoff_per_query');
    }
    // enforce_work_group_configuration - computed: true, optional: false, required: false
    get enforceWorkGroupConfiguration() {
        return this.getBooleanAttribute('enforce_work_group_configuration');
    }
    // engine_version - computed: true, optional: false, required: false
    get engineVersion() {
        return this.interpolationForAttribute('engine_version');
    }
    // publish_cloudwatch_metrics_enabled - computed: true, optional: false, required: false
    get publishCloudwatchMetricsEnabled() {
        return this.getBooleanAttribute('publish_cloudwatch_metrics_enabled');
    }
    // remove_bytes_scanned_cutoff_per_query - computed: true, optional: false, required: false
    get removeBytesScannedCutoffPerQuery() {
        return this.getBooleanAttribute('remove_bytes_scanned_cutoff_per_query');
    }
    // requester_pays_enabled - computed: true, optional: false, required: false
    get requesterPaysEnabled() {
        return this.getBooleanAttribute('requester_pays_enabled');
    }
    // result_configuration_updates - computed: true, optional: false, required: false
    get resultConfigurationUpdates() {
        return this.interpolationForAttribute('result_configuration_updates');
    }
}
exports.DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdates = DataAwsccAthenaWorkGroupWorkGroupConfigurationUpdates;
function dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bytes_scanned_cutoff_per_query: cdktf.numberToTerraform(struct.bytesScannedCutoffPerQuery),
        enforce_work_group_configuration: cdktf.booleanToTerraform(struct.enforceWorkGroupConfiguration),
        engine_version: dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform(struct.engineVersion),
        publish_cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.publishCloudwatchMetricsEnabled),
        remove_bytes_scanned_cutoff_per_query: cdktf.booleanToTerraform(struct.removeBytesScannedCutoffPerQuery),
        requester_pays_enabled: cdktf.booleanToTerraform(struct.requesterPaysEnabled),
        result_configuration_updates: dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform(struct.resultConfigurationUpdates),
    };
}
exports.dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesToTerraform = dataAwsccAthenaWorkGroupWorkGroupConfigurationUpdatesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/athena_work_group.html awscc_athena_work_group}
*/
class DataAwsccAthenaWorkGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/athena_work_group.html awscc_athena_work_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccAthenaWorkGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_athena_work_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // recursive_delete_option - computed: true, optional: false, required: false
    get recursiveDeleteOption() {
        return this.getBooleanAttribute('recursive_delete_option');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // work_group_configuration - computed: true, optional: false, required: false
    get workGroupConfiguration() {
        return this.interpolationForAttribute('work_group_configuration');
    }
    // work_group_configuration_updates - computed: true, optional: false, required: false
    get workGroupConfigurationUpdates() {
        return this.interpolationForAttribute('work_group_configuration_updates');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccAthenaWorkGroup = DataAwsccAthenaWorkGroup;
// =================
// STATIC PROPERTIES
// =================
DataAwsccAthenaWorkGroup.tfResourceType = "awscc_athena_work_group";
//# sourceMappingURL=data:application/json;base64,