"use strict";
// https://www.terraform.io/docs/providers/awscc/d/route53recoveryreadiness_resource_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccRoute53RecoveryreadinessResourceSet = exports.dataAwsccRoute53RecoveryreadinessResourceSetTagsToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetTags = exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetResources = exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResource = exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResource = exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53Resource = exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResource = void 0;
const cdktf = require("cdktf");
class DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResource extends cdktf.ComplexComputedList {
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResource = DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResource;
function dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform;
class DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53Resource extends cdktf.ComplexComputedList {
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    // record_set_id - computed: true, optional: false, required: false
    get recordSetId() {
        return this.getStringAttribute('record_set_id');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53Resource = DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53Resource;
function dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform;
class DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResource extends cdktf.ComplexComputedList {
    // nlb_resource - computed: true, optional: false, required: false
    get nlbResource() {
        return this.interpolationForAttribute('nlb_resource');
    }
    // r53_resource - computed: true, optional: false, required: false
    get r53Resource() {
        return this.interpolationForAttribute('r53_resource');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResource = DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResource;
function dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        nlb_resource: dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct.nlbResource),
        r53_resource: dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct.r53Resource),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform;
class DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResource extends cdktf.ComplexComputedList {
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    // hosted_zone_arn - computed: true, optional: false, required: false
    get hostedZoneArn() {
        return this.getStringAttribute('hosted_zone_arn');
    }
    // record_set_id - computed: true, optional: false, required: false
    get recordSetId() {
        return this.getStringAttribute('record_set_id');
    }
    // record_type - computed: true, optional: false, required: false
    get recordType() {
        return this.getStringAttribute('record_type');
    }
    // target_resource - computed: true, optional: false, required: false
    get targetResource() {
        return this.interpolationForAttribute('target_resource');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResource = DataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResource;
function dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        hosted_zone_arn: cdktf.stringToTerraform(struct.hostedZoneArn),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
        record_type: cdktf.stringToTerraform(struct.recordType),
        target_resource: dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct.targetResource),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform;
class DataAwsccRoute53RecoveryreadinessResourceSetResources extends cdktf.ComplexComputedList {
    // component_id - computed: true, optional: false, required: false
    get componentId() {
        return this.getStringAttribute('component_id');
    }
    // dns_target_resource - computed: true, optional: false, required: false
    get dnsTargetResource() {
        return this.interpolationForAttribute('dns_target_resource');
    }
    // readiness_scopes - computed: true, optional: false, required: false
    get readinessScopes() {
        return this.getListAttribute('readiness_scopes');
    }
    // resource_arn - computed: true, optional: false, required: false
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetResources = DataAwsccRoute53RecoveryreadinessResourceSetResources;
function dataAwsccRoute53RecoveryreadinessResourceSetResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_id: cdktf.stringToTerraform(struct.componentId),
        dns_target_resource: dataAwsccRoute53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct.dnsTargetResource),
        readiness_scopes: cdktf.listMapper(cdktf.stringToTerraform)(struct.readinessScopes),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetResourcesToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetResourcesToTerraform;
class DataAwsccRoute53RecoveryreadinessResourceSetTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getListAttribute('value');
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSetTags = DataAwsccRoute53RecoveryreadinessResourceSetTags;
function dataAwsccRoute53RecoveryreadinessResourceSetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.listMapper(cdktf.stringToTerraform)(struct.value),
    };
}
exports.dataAwsccRoute53RecoveryreadinessResourceSetTagsToTerraform = dataAwsccRoute53RecoveryreadinessResourceSetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/route53recoveryreadiness_resource_set.html awscc_route53recoveryreadiness_resource_set}
*/
class DataAwsccRoute53RecoveryreadinessResourceSet extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/route53recoveryreadiness_resource_set.html awscc_route53recoveryreadiness_resource_set} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccRoute53RecoveryreadinessResourceSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoveryreadiness_resource_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // resource_set_arn - computed: true, optional: false, required: false
    get resourceSetArn() {
        return this.getStringAttribute('resource_set_arn');
    }
    // resource_set_name - computed: true, optional: false, required: false
    get resourceSetName() {
        return this.getStringAttribute('resource_set_name');
    }
    // resource_set_type - computed: true, optional: false, required: false
    get resourceSetType() {
        return this.getStringAttribute('resource_set_type');
    }
    // resources - computed: true, optional: false, required: false
    get resources() {
        return this.interpolationForAttribute('resources');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccRoute53RecoveryreadinessResourceSet = DataAwsccRoute53RecoveryreadinessResourceSet;
// =================
// STATIC PROPERTIES
// =================
DataAwsccRoute53RecoveryreadinessResourceSet.tfResourceType = "awscc_route53recoveryreadiness_resource_set";
//# sourceMappingURL=data:application/json;base64,