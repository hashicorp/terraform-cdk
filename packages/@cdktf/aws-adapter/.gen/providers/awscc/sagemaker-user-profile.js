"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_user_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerUserProfile = exports.sagemakerUserProfileUserSettingsToTerraform = exports.sagemakerUserProfileUserSettingsSharingSettingsToTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.sagemakerUserProfileTagsToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerUserProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerUserProfileTagsToTerraform = sagemakerUserProfileTagsToTerraform;
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_images: cdktf.listMapper(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform)(struct.customImages),
        default_resource_spec: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.sagemakerUserProfileUserSettingsSharingSettingsToTerraform = sagemakerUserProfileUserSettingsSharingSettingsToTerraform;
function sagemakerUserProfileUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        jupyter_server_app_settings: sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        sharing_settings: sagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
    };
}
exports.sagemakerUserProfileUserSettingsToTerraform = sagemakerUserProfileUserSettingsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_user_profile.html awscc_sagemaker_user_profile}
*/
class SagemakerUserProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_user_profile.html awscc_sagemaker_user_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerUserProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._domainId = config.domainId;
        this._singleSignOnUserIdentifier = config.singleSignOnUserIdentifier;
        this._singleSignOnUserValue = config.singleSignOnUserValue;
        this._tags = config.tags;
        this._userProfileName = config.userProfileName;
        this._userSettings = config.userSettings;
    }
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    set domainId(value) {
        this._domainId = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainIdInput() {
        return this._domainId;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get singleSignOnUserIdentifier() {
        return this.getStringAttribute('single_sign_on_user_identifier');
    }
    set singleSignOnUserIdentifier(value) {
        this._singleSignOnUserIdentifier = value;
    }
    resetSingleSignOnUserIdentifier() {
        this._singleSignOnUserIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserIdentifierInput() {
        return this._singleSignOnUserIdentifier;
    }
    get singleSignOnUserValue() {
        return this.getStringAttribute('single_sign_on_user_value');
    }
    set singleSignOnUserValue(value) {
        this._singleSignOnUserValue = value;
    }
    resetSingleSignOnUserValue() {
        this._singleSignOnUserValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserValueInput() {
        return this._singleSignOnUserValue;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // user_profile_arn - computed: true, optional: false, required: false
    get userProfileArn() {
        return this.getStringAttribute('user_profile_arn');
    }
    get userProfileName() {
        return this.getStringAttribute('user_profile_name');
    }
    set userProfileName(value) {
        this._userProfileName = value;
    }
    // Temporarily expose input value. Use with caution.
    get userProfileNameInput() {
        return this._userProfileName;
    }
    get userSettings() {
        return this.interpolationForAttribute('user_settings');
    }
    set userSettings(value) {
        this._userSettings = value;
    }
    resetUserSettings() {
        this._userSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userSettingsInput() {
        return this._userSettings;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_id: cdktf.stringToTerraform(this._domainId),
            single_sign_on_user_identifier: cdktf.stringToTerraform(this._singleSignOnUserIdentifier),
            single_sign_on_user_value: cdktf.stringToTerraform(this._singleSignOnUserValue),
            tags: cdktf.listMapper(sagemakerUserProfileTagsToTerraform)(this._tags),
            user_profile_name: cdktf.stringToTerraform(this._userProfileName),
            user_settings: sagemakerUserProfileUserSettingsToTerraform(this._userSettings),
        };
    }
}
exports.SagemakerUserProfile = SagemakerUserProfile;
// =================
// STATIC PROPERTIES
// =================
SagemakerUserProfile.tfResourceType = "awscc_sagemaker_user_profile";
//# sourceMappingURL=data:application/json;base64,