"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_public_type_version.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationPublicTypeVersion = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_public_type_version.html awscc_cloudformation_public_type_version}
*/
class CloudformationPublicTypeVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_public_type_version.html awscc_cloudformation_public_type_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationPublicTypeVersionConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_public_type_version',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._logDeliveryBucket = config.logDeliveryBucket;
        this._publicVersionNumber = config.publicVersionNumber;
        this._type = config.type;
        this._typeName = config.typeName;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: true, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logDeliveryBucket() {
        return this.getStringAttribute('log_delivery_bucket');
    }
    set logDeliveryBucket(value) {
        this._logDeliveryBucket = value;
    }
    resetLogDeliveryBucket() {
        this._logDeliveryBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDeliveryBucketInput() {
        return this._logDeliveryBucket;
    }
    // public_type_arn - computed: true, optional: false, required: false
    get publicTypeArn() {
        return this.getStringAttribute('public_type_arn');
    }
    get publicVersionNumber() {
        return this.getStringAttribute('public_version_number');
    }
    set publicVersionNumber(value) {
        this._publicVersionNumber = value;
    }
    resetPublicVersionNumber() {
        this._publicVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicVersionNumberInput() {
        return this._publicVersionNumber;
    }
    // publisher_id - computed: true, optional: false, required: false
    get publisherId() {
        return this.getStringAttribute('publisher_id');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    resetTypeName() {
        this._typeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    // type_version_arn - computed: true, optional: false, required: false
    get typeVersionArn() {
        return this.getStringAttribute('type_version_arn');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            log_delivery_bucket: cdktf.stringToTerraform(this._logDeliveryBucket),
            public_version_number: cdktf.stringToTerraform(this._publicVersionNumber),
            type: cdktf.stringToTerraform(this._type),
            type_name: cdktf.stringToTerraform(this._typeName),
        };
    }
}
exports.CloudformationPublicTypeVersion = CloudformationPublicTypeVersion;
// =================
// STATIC PROPERTIES
// =================
CloudformationPublicTypeVersion.tfResourceType = "awscc_cloudformation_public_type_version";
//# sourceMappingURL=data:application/json;base64,