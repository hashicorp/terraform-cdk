"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_default_version.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationResourceDefaultVersion = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_default_version.html awscc_cloudformation_resource_default_version}
*/
class CloudformationResourceDefaultVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_default_version.html awscc_cloudformation_resource_default_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationResourceDefaultVersionConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_resource_default_version',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._typeName = config.typeName;
        this._typeVersionArn = config.typeVersionArn;
        this._versionId = config.versionId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    resetTypeName() {
        this._typeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    get typeVersionArn() {
        return this.getStringAttribute('type_version_arn');
    }
    set typeVersionArn(value) {
        this._typeVersionArn = value;
    }
    resetTypeVersionArn() {
        this._typeVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeVersionArnInput() {
        return this._typeVersionArn;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            type_name: cdktf.stringToTerraform(this._typeName),
            type_version_arn: cdktf.stringToTerraform(this._typeVersionArn),
            version_id: cdktf.stringToTerraform(this._versionId),
        };
    }
}
exports.CloudformationResourceDefaultVersion = CloudformationResourceDefaultVersion;
// =================
// STATIC PROPERTIES
// =================
CloudformationResourceDefaultVersion.tfResourceType = "awscc_cloudformation_resource_default_version";
//# sourceMappingURL=data:application/json;base64,