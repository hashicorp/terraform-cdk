"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_explainability_job_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerModelExplainabilityJobDefinition = exports.sagemakerModelExplainabilityJobDefinitionTagsToTerraform = exports.sagemakerModelExplainabilityJobDefinitionStoppingConditionToTerraform = exports.sagemakerModelExplainabilityJobDefinitionNetworkConfigToTerraform = exports.sagemakerModelExplainabilityJobDefinitionNetworkConfigVpcConfigToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsS3OutputToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputEndpointInputToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigConstraintsResourceToTerraform = exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationToTerraform = exports.sagemakerModelExplainabilityJobDefinitionJobResourcesToTerraform = exports.sagemakerModelExplainabilityJobDefinitionJobResourcesClusterConfigToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerModelExplainabilityJobDefinitionJobResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionJobResourcesClusterConfigToTerraform = sagemakerModelExplainabilityJobDefinitionJobResourcesClusterConfigToTerraform;
function sagemakerModelExplainabilityJobDefinitionJobResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_config: sagemakerModelExplainabilityJobDefinitionJobResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionJobResourcesToTerraform = sagemakerModelExplainabilityJobDefinitionJobResourcesToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        config_uri: cdktf.stringToTerraform(struct.configUri),
        environment: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environment),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigConstraintsResourceToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigConstraintsResourceToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        baselining_job_name: cdktf.stringToTerraform(struct.baseliningJobName),
        constraints_resource: sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        features_attribute: cdktf.stringToTerraform(struct.featuresAttribute),
        inference_attribute: cdktf.stringToTerraform(struct.inferenceAttribute),
        local_path: cdktf.stringToTerraform(struct.localPath),
        probability_attribute: cdktf.stringToTerraform(struct.probabilityAttribute),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputEndpointInputToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputEndpointInputToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_input: sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputEndpointInputToTerraform(struct.endpointInput),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_output: sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsToTerraform;
function sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: cdktf.listMapper(sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigMonitoringOutputsToTerraform)(struct.monitoringOutputs),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigToTerraform = sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigToTerraform;
function sagemakerModelExplainabilityJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerModelExplainabilityJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerModelExplainabilityJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerModelExplainabilityJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionNetworkConfigToTerraform = sagemakerModelExplainabilityJobDefinitionNetworkConfigToTerraform;
function sagemakerModelExplainabilityJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionStoppingConditionToTerraform = sagemakerModelExplainabilityJobDefinitionStoppingConditionToTerraform;
function sagemakerModelExplainabilityJobDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerModelExplainabilityJobDefinitionTagsToTerraform = sagemakerModelExplainabilityJobDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_explainability_job_definition.html awscc_sagemaker_model_explainability_job_definition}
*/
class SagemakerModelExplainabilityJobDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_explainability_job_definition.html awscc_sagemaker_model_explainability_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerModelExplainabilityJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_model_explainability_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._jobDefinitionName = config.jobDefinitionName;
        this._jobResources = config.jobResources;
        this._modelExplainabilityAppSpecification = config.modelExplainabilityAppSpecification;
        this._modelExplainabilityBaselineConfig = config.modelExplainabilityBaselineConfig;
        this._modelExplainabilityJobInput = config.modelExplainabilityJobInput;
        this._modelExplainabilityJobOutputConfig = config.modelExplainabilityJobOutputConfig;
        this._networkConfig = config.networkConfig;
        this._roleArn = config.roleArn;
        this._stoppingCondition = config.stoppingCondition;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // job_definition_arn - computed: true, optional: false, required: false
    get jobDefinitionArn() {
        return this.getStringAttribute('job_definition_arn');
    }
    get jobDefinitionName() {
        return this.getStringAttribute('job_definition_name');
    }
    set jobDefinitionName(value) {
        this._jobDefinitionName = value;
    }
    resetJobDefinitionName() {
        this._jobDefinitionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobDefinitionNameInput() {
        return this._jobDefinitionName;
    }
    get jobResources() {
        return this.interpolationForAttribute('job_resources');
    }
    set jobResources(value) {
        this._jobResources = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobResourcesInput() {
        return this._jobResources;
    }
    get modelExplainabilityAppSpecification() {
        return this.interpolationForAttribute('model_explainability_app_specification');
    }
    set modelExplainabilityAppSpecification(value) {
        this._modelExplainabilityAppSpecification = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelExplainabilityAppSpecificationInput() {
        return this._modelExplainabilityAppSpecification;
    }
    get modelExplainabilityBaselineConfig() {
        return this.interpolationForAttribute('model_explainability_baseline_config');
    }
    set modelExplainabilityBaselineConfig(value) {
        this._modelExplainabilityBaselineConfig = value;
    }
    resetModelExplainabilityBaselineConfig() {
        this._modelExplainabilityBaselineConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelExplainabilityBaselineConfigInput() {
        return this._modelExplainabilityBaselineConfig;
    }
    get modelExplainabilityJobInput() {
        return this.interpolationForAttribute('model_explainability_job_input');
    }
    set modelExplainabilityJobInput(value) {
        this._modelExplainabilityJobInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelExplainabilityJobInputInput() {
        return this._modelExplainabilityJobInput;
    }
    get modelExplainabilityJobOutputConfig() {
        return this.interpolationForAttribute('model_explainability_job_output_config');
    }
    set modelExplainabilityJobOutputConfig(value) {
        this._modelExplainabilityJobOutputConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelExplainabilityJobOutputConfigInput() {
        return this._modelExplainabilityJobOutputConfig;
    }
    get networkConfig() {
        return this.interpolationForAttribute('network_config');
    }
    set networkConfig(value) {
        this._networkConfig = value;
    }
    resetNetworkConfig() {
        this._networkConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stoppingCondition() {
        return this.interpolationForAttribute('stopping_condition');
    }
    set stoppingCondition(value) {
        this._stoppingCondition = value;
    }
    resetStoppingCondition() {
        this._stoppingCondition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stoppingConditionInput() {
        return this._stoppingCondition;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            job_definition_name: cdktf.stringToTerraform(this._jobDefinitionName),
            job_resources: sagemakerModelExplainabilityJobDefinitionJobResourcesToTerraform(this._jobResources),
            model_explainability_app_specification: sagemakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationToTerraform(this._modelExplainabilityAppSpecification),
            model_explainability_baseline_config: sagemakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigToTerraform(this._modelExplainabilityBaselineConfig),
            model_explainability_job_input: sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobInputToTerraform(this._modelExplainabilityJobInput),
            model_explainability_job_output_config: sagemakerModelExplainabilityJobDefinitionModelExplainabilityJobOutputConfigToTerraform(this._modelExplainabilityJobOutputConfig),
            network_config: sagemakerModelExplainabilityJobDefinitionNetworkConfigToTerraform(this._networkConfig),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            stopping_condition: sagemakerModelExplainabilityJobDefinitionStoppingConditionToTerraform(this._stoppingCondition),
            tags: cdktf.listMapper(sagemakerModelExplainabilityJobDefinitionTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerModelExplainabilityJobDefinition = SagemakerModelExplainabilityJobDefinition;
// =================
// STATIC PROPERTIES
// =================
SagemakerModelExplainabilityJobDefinition.tfResourceType = "awscc_sagemaker_model_explainability_job_definition";
//# sourceMappingURL=data:application/json;base64,