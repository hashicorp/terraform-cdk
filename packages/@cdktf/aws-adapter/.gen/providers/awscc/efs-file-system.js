"use strict";
// https://www.terraform.io/docs/providers/awscc/r/efs_file_system.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EfsFileSystem = exports.efsFileSystemLifecyclePoliciesToTerraform = exports.efsFileSystemFileSystemTagsToTerraform = exports.efsFileSystemBackupPolicyToTerraform = void 0;
const cdktf = require("cdktf");
function efsFileSystemBackupPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.efsFileSystemBackupPolicyToTerraform = efsFileSystemBackupPolicyToTerraform;
function efsFileSystemFileSystemTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.efsFileSystemFileSystemTagsToTerraform = efsFileSystemFileSystemTagsToTerraform;
function efsFileSystemLifecyclePoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        transition_to_ia: cdktf.stringToTerraform(struct.transitionToIa),
    };
}
exports.efsFileSystemLifecyclePoliciesToTerraform = efsFileSystemLifecyclePoliciesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/efs_file_system.html awscc_efs_file_system}
*/
class EfsFileSystem extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/efs_file_system.html awscc_efs_file_system} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EfsFileSystemConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_efs_file_system',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._availabilityZoneName = config.availabilityZoneName;
        this._backupPolicy = config.backupPolicy;
        this._bypassPolicyLockoutSafetyCheck = config.bypassPolicyLockoutSafetyCheck;
        this._encrypted = config.encrypted;
        this._fileSystemPolicy = config.fileSystemPolicy;
        this._fileSystemTags = config.fileSystemTags;
        this._kmsKeyId = config.kmsKeyId;
        this._lifecyclePolicies = config.lifecyclePolicies;
        this._performanceMode = config.performanceMode;
        this._provisionedThroughputInMibps = config.provisionedThroughputInMibps;
        this._throughputMode = config.throughputMode;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get availabilityZoneName() {
        return this.getStringAttribute('availability_zone_name');
    }
    set availabilityZoneName(value) {
        this._availabilityZoneName = value;
    }
    resetAvailabilityZoneName() {
        this._availabilityZoneName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneNameInput() {
        return this._availabilityZoneName;
    }
    get backupPolicy() {
        return this.interpolationForAttribute('backup_policy');
    }
    set backupPolicy(value) {
        this._backupPolicy = value;
    }
    resetBackupPolicy() {
        this._backupPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupPolicyInput() {
        return this._backupPolicy;
    }
    get bypassPolicyLockoutSafetyCheck() {
        return this.getBooleanAttribute('bypass_policy_lockout_safety_check');
    }
    set bypassPolicyLockoutSafetyCheck(value) {
        this._bypassPolicyLockoutSafetyCheck = value;
    }
    resetBypassPolicyLockoutSafetyCheck() {
        this._bypassPolicyLockoutSafetyCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bypassPolicyLockoutSafetyCheckInput() {
        return this._bypassPolicyLockoutSafetyCheck;
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    // file_system_id - computed: true, optional: false, required: false
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    get fileSystemPolicy() {
        return this.interpolationForAttribute('file_system_policy');
    }
    set fileSystemPolicy(value) {
        this._fileSystemPolicy = value;
    }
    resetFileSystemPolicy() {
        this._fileSystemPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemPolicyInput() {
        return this._fileSystemPolicy;
    }
    get fileSystemTags() {
        return this.interpolationForAttribute('file_system_tags');
    }
    set fileSystemTags(value) {
        this._fileSystemTags = value;
    }
    resetFileSystemTags() {
        this._fileSystemTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemTagsInput() {
        return this._fileSystemTags;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get lifecyclePolicies() {
        return this.interpolationForAttribute('lifecycle_policies');
    }
    set lifecyclePolicies(value) {
        this._lifecyclePolicies = value;
    }
    resetLifecyclePolicies() {
        this._lifecyclePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecyclePoliciesInput() {
        return this._lifecyclePolicies;
    }
    get performanceMode() {
        return this.getStringAttribute('performance_mode');
    }
    set performanceMode(value) {
        this._performanceMode = value;
    }
    resetPerformanceMode() {
        this._performanceMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceModeInput() {
        return this._performanceMode;
    }
    get provisionedThroughputInMibps() {
        return this.getNumberAttribute('provisioned_throughput_in_mibps');
    }
    set provisionedThroughputInMibps(value) {
        this._provisionedThroughputInMibps = value;
    }
    resetProvisionedThroughputInMibps() {
        this._provisionedThroughputInMibps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedThroughputInMibpsInput() {
        return this._provisionedThroughputInMibps;
    }
    get throughputMode() {
        return this.getStringAttribute('throughput_mode');
    }
    set throughputMode(value) {
        this._throughputMode = value;
    }
    resetThroughputMode() {
        this._throughputMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputModeInput() {
        return this._throughputMode;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            availability_zone_name: cdktf.stringToTerraform(this._availabilityZoneName),
            backup_policy: efsFileSystemBackupPolicyToTerraform(this._backupPolicy),
            bypass_policy_lockout_safety_check: cdktf.booleanToTerraform(this._bypassPolicyLockoutSafetyCheck),
            encrypted: cdktf.booleanToTerraform(this._encrypted),
            file_system_policy: cdktf.hashMapper(cdktf.anyToTerraform)(this._fileSystemPolicy),
            file_system_tags: cdktf.listMapper(efsFileSystemFileSystemTagsToTerraform)(this._fileSystemTags),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            lifecycle_policies: cdktf.listMapper(efsFileSystemLifecyclePoliciesToTerraform)(this._lifecyclePolicies),
            performance_mode: cdktf.stringToTerraform(this._performanceMode),
            provisioned_throughput_in_mibps: cdktf.numberToTerraform(this._provisionedThroughputInMibps),
            throughput_mode: cdktf.stringToTerraform(this._throughputMode),
        };
    }
}
exports.EfsFileSystem = EfsFileSystem;
// =================
// STATIC PROPERTIES
// =================
EfsFileSystem.tfResourceType = "awscc_efs_file_system";
//# sourceMappingURL=data:application/json;base64,