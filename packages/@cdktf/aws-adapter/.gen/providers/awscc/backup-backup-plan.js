"use strict";
// https://www.terraform.io/docs/providers/awscc/r/backup_backup_plan.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupBackupPlan = exports.backupBackupPlanBackupPlanToTerraform = exports.backupBackupPlanBackupPlanBackupPlanRuleToTerraform = exports.backupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform = exports.backupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform = exports.backupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform = exports.backupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform = void 0;
const cdktf = require("cdktf");
function backupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        backup_options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.backupOptions),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
    };
}
exports.backupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform = backupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform;
function backupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_after_days: cdktf.numberToTerraform(struct.deleteAfterDays),
        move_to_cold_storage_after_days: cdktf.numberToTerraform(struct.moveToColdStorageAfterDays),
    };
}
exports.backupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform = backupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform;
function backupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination_backup_vault_arn: cdktf.stringToTerraform(struct.destinationBackupVaultArn),
        lifecycle: backupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform(struct.lifecycle),
    };
}
exports.backupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform = backupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform;
function backupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_after_days: cdktf.numberToTerraform(struct.deleteAfterDays),
        move_to_cold_storage_after_days: cdktf.numberToTerraform(struct.moveToColdStorageAfterDays),
    };
}
exports.backupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform = backupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform;
function backupBackupPlanBackupPlanBackupPlanRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        completion_window_minutes: cdktf.numberToTerraform(struct.completionWindowMinutes),
        copy_actions: cdktf.listMapper(backupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform)(struct.copyActions),
        enable_continuous_backup: cdktf.booleanToTerraform(struct.enableContinuousBackup),
        lifecycle: backupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform(struct.lifecycle),
        recovery_point_tags: cdktf.hashMapper(cdktf.anyToTerraform)(struct.recoveryPointTags),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        start_window_minutes: cdktf.numberToTerraform(struct.startWindowMinutes),
        target_backup_vault: cdktf.stringToTerraform(struct.targetBackupVault),
    };
}
exports.backupBackupPlanBackupPlanBackupPlanRuleToTerraform = backupBackupPlanBackupPlanBackupPlanRuleToTerraform;
function backupBackupPlanBackupPlanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        advanced_backup_settings: cdktf.listMapper(backupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform)(struct.advancedBackupSettings),
        backup_plan_name: cdktf.stringToTerraform(struct.backupPlanName),
        backup_plan_rule: cdktf.listMapper(backupBackupPlanBackupPlanBackupPlanRuleToTerraform)(struct.backupPlanRule),
    };
}
exports.backupBackupPlanBackupPlanToTerraform = backupBackupPlanBackupPlanToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_plan.html awscc_backup_backup_plan}
*/
class BackupBackupPlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_plan.html awscc_backup_backup_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BackupBackupPlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_backup_backup_plan',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._backupPlan = config.backupPlan;
        this._backupPlanTags = config.backupPlanTags;
    }
    get backupPlan() {
        return this.interpolationForAttribute('backup_plan');
    }
    set backupPlan(value) {
        this._backupPlan = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupPlanInput() {
        return this._backupPlan;
    }
    // backup_plan_arn - computed: true, optional: false, required: false
    get backupPlanArn() {
        return this.getStringAttribute('backup_plan_arn');
    }
    // backup_plan_id - computed: true, optional: false, required: false
    get backupPlanId() {
        return this.getStringAttribute('backup_plan_id');
    }
    get backupPlanTags() {
        return this.interpolationForAttribute('backup_plan_tags');
    }
    set backupPlanTags(value) {
        this._backupPlanTags = value;
    }
    resetBackupPlanTags() {
        this._backupPlanTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupPlanTagsInput() {
        return this._backupPlanTags;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // version_id - computed: true, optional: false, required: false
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            backup_plan: backupBackupPlanBackupPlanToTerraform(this._backupPlan),
            backup_plan_tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._backupPlanTags),
        };
    }
}
exports.BackupBackupPlan = BackupBackupPlan;
// =================
// STATIC PROPERTIES
// =================
BackupBackupPlan.tfResourceType = "awscc_backup_backup_plan";
//# sourceMappingURL=data:application/json;base64,