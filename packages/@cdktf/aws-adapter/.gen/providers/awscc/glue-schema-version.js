"use strict";
// https://www.terraform.io/docs/providers/awscc/r/glue_schema_version.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueSchemaVersion = exports.glueSchemaVersionSchemaToTerraform = void 0;
const cdktf = require("cdktf");
function glueSchemaVersionSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        registry_name: cdktf.stringToTerraform(struct.registryName),
        schema_arn: cdktf.stringToTerraform(struct.schemaArn),
        schema_name: cdktf.stringToTerraform(struct.schemaName),
    };
}
exports.glueSchemaVersionSchemaToTerraform = glueSchemaVersionSchemaToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/glue_schema_version.html awscc_glue_schema_version}
*/
class GlueSchemaVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/glue_schema_version.html awscc_glue_schema_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueSchemaVersionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_glue_schema_version',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._schema = config.schema;
        this._schemaDefinition = config.schemaDefinition;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get schema() {
        return this.interpolationForAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get schemaDefinition() {
        return this.getStringAttribute('schema_definition');
    }
    set schemaDefinition(value) {
        this._schemaDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaDefinitionInput() {
        return this._schemaDefinition;
    }
    // version_id - computed: true, optional: false, required: false
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            schema: glueSchemaVersionSchemaToTerraform(this._schema),
            schema_definition: cdktf.stringToTerraform(this._schemaDefinition),
        };
    }
}
exports.GlueSchemaVersion = GlueSchemaVersion;
// =================
// STATIC PROPERTIES
// =================
GlueSchemaVersion.tfResourceType = "awscc_glue_schema_version";
//# sourceMappingURL=data:application/json;base64,