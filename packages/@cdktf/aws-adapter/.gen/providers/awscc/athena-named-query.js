"use strict";
// https://www.terraform.io/docs/providers/awscc/r/athena_named_query.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AthenaNamedQuery = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/athena_named_query.html awscc_athena_named_query}
*/
class AthenaNamedQuery extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/athena_named_query.html awscc_athena_named_query} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AthenaNamedQueryConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_athena_named_query',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._database = config.database;
        this._description = config.description;
        this._name = config.name;
        this._queryString = config.queryString;
        this._workGroup = config.workGroup;
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // named_query_id - computed: true, optional: false, required: false
    get namedQueryId() {
        return this.getStringAttribute('named_query_id');
    }
    get queryString() {
        return this.getStringAttribute('query_string');
    }
    set queryString(value) {
        this._queryString = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringInput() {
        return this._queryString;
    }
    get workGroup() {
        return this.getStringAttribute('work_group');
    }
    set workGroup(value) {
        this._workGroup = value;
    }
    resetWorkGroup() {
        this._workGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workGroupInput() {
        return this._workGroup;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            database: cdktf.stringToTerraform(this._database),
            description: cdktf.stringToTerraform(this._description),
            name: cdktf.stringToTerraform(this._name),
            query_string: cdktf.stringToTerraform(this._queryString),
            work_group: cdktf.stringToTerraform(this._workGroup),
        };
    }
}
exports.AthenaNamedQuery = AthenaNamedQuery;
// =================
// STATIC PROPERTIES
// =================
AthenaNamedQuery.tfResourceType = "awscc_athena_named_query";
//# sourceMappingURL=data:application/json;base64,