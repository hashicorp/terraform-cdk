"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_publisher.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationPublisher = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_publisher.html awscc_cloudformation_publisher}
*/
class CloudformationPublisher extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_publisher.html awscc_cloudformation_publisher} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationPublisherConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_publisher',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._acceptTermsAndConditions = config.acceptTermsAndConditions;
        this._connectionArn = config.connectionArn;
    }
    get acceptTermsAndConditions() {
        return this.getBooleanAttribute('accept_terms_and_conditions');
    }
    set acceptTermsAndConditions(value) {
        this._acceptTermsAndConditions = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceptTermsAndConditionsInput() {
        return this._acceptTermsAndConditions;
    }
    get connectionArn() {
        return this.getStringAttribute('connection_arn');
    }
    set connectionArn(value) {
        this._connectionArn = value;
    }
    resetConnectionArn() {
        this._connectionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionArnInput() {
        return this._connectionArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // identity_provider - computed: true, optional: false, required: false
    get identityProvider() {
        return this.getStringAttribute('identity_provider');
    }
    // publisher_id - computed: true, optional: false, required: false
    get publisherId() {
        return this.getStringAttribute('publisher_id');
    }
    // publisher_profile - computed: true, optional: false, required: false
    get publisherProfile() {
        return this.getStringAttribute('publisher_profile');
    }
    // publisher_status - computed: true, optional: false, required: false
    get publisherStatus() {
        return this.getStringAttribute('publisher_status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            accept_terms_and_conditions: cdktf.booleanToTerraform(this._acceptTermsAndConditions),
            connection_arn: cdktf.stringToTerraform(this._connectionArn),
        };
    }
}
exports.CloudformationPublisher = CloudformationPublisher;
// =================
// STATIC PROPERTIES
// =================
CloudformationPublisher.tfResourceType = "awscc_cloudformation_publisher";
//# sourceMappingURL=data:application/json;base64,