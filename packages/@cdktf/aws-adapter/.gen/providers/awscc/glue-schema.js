"use strict";
// https://www.terraform.io/docs/providers/awscc/r/glue_schema.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueSchema = exports.glueSchemaTagsToTerraform = exports.glueSchemaRegistryToTerraform = exports.glueSchemaCheckpointVersionToTerraform = void 0;
const cdktf = require("cdktf");
function glueSchemaCheckpointVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_latest: cdktf.booleanToTerraform(struct.isLatest),
        version_number: cdktf.numberToTerraform(struct.versionNumber),
    };
}
exports.glueSchemaCheckpointVersionToTerraform = glueSchemaCheckpointVersionToTerraform;
function glueSchemaRegistryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.glueSchemaRegistryToTerraform = glueSchemaRegistryToTerraform;
function glueSchemaTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.glueSchemaTagsToTerraform = glueSchemaTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/glue_schema.html awscc_glue_schema}
*/
class GlueSchema extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/glue_schema.html awscc_glue_schema} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueSchemaConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_glue_schema',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._checkpointVersion = config.checkpointVersion;
        this._compatibility = config.compatibility;
        this._dataFormat = config.dataFormat;
        this._description = config.description;
        this._name = config.name;
        this._registry = config.registry;
        this._schemaDefinition = config.schemaDefinition;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get checkpointVersion() {
        return this.interpolationForAttribute('checkpoint_version');
    }
    set checkpointVersion(value) {
        this._checkpointVersion = value;
    }
    resetCheckpointVersion() {
        this._checkpointVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkpointVersionInput() {
        return this._checkpointVersion;
    }
    get compatibility() {
        return this.getStringAttribute('compatibility');
    }
    set compatibility(value) {
        this._compatibility = value;
    }
    // Temporarily expose input value. Use with caution.
    get compatibilityInput() {
        return this._compatibility;
    }
    get dataFormat() {
        return this.getStringAttribute('data_format');
    }
    set dataFormat(value) {
        this._dataFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataFormatInput() {
        return this._dataFormat;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // initial_schema_version_id - computed: true, optional: false, required: false
    get initialSchemaVersionId() {
        return this.getStringAttribute('initial_schema_version_id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get registry() {
        return this.interpolationForAttribute('registry');
    }
    set registry(value) {
        this._registry = value;
    }
    resetRegistry() {
        this._registry = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get registryInput() {
        return this._registry;
    }
    get schemaDefinition() {
        return this.getStringAttribute('schema_definition');
    }
    set schemaDefinition(value) {
        this._schemaDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaDefinitionInput() {
        return this._schemaDefinition;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            checkpoint_version: glueSchemaCheckpointVersionToTerraform(this._checkpointVersion),
            compatibility: cdktf.stringToTerraform(this._compatibility),
            data_format: cdktf.stringToTerraform(this._dataFormat),
            description: cdktf.stringToTerraform(this._description),
            name: cdktf.stringToTerraform(this._name),
            registry: glueSchemaRegistryToTerraform(this._registry),
            schema_definition: cdktf.stringToTerraform(this._schemaDefinition),
            tags: cdktf.listMapper(glueSchemaTagsToTerraform)(this._tags),
        };
    }
}
exports.GlueSchema = GlueSchema;
// =================
// STATIC PROPERTIES
// =================
GlueSchema.tfResourceType = "awscc_glue_schema";
//# sourceMappingURL=data:application/json;base64,