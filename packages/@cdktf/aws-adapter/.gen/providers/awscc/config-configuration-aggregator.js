"use strict";
// https://www.terraform.io/docs/providers/awscc/r/config_configuration_aggregator.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigConfigurationAggregator = exports.configConfigurationAggregatorTagsToTerraform = exports.configConfigurationAggregatorOrganizationAggregationSourceToTerraform = exports.configConfigurationAggregatorAccountAggregationSourcesToTerraform = void 0;
const cdktf = require("cdktf");
function configConfigurationAggregatorAccountAggregationSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.accountIds),
        all_aws_regions: cdktf.booleanToTerraform(struct.allAwsRegions),
        aws_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.awsRegions),
    };
}
exports.configConfigurationAggregatorAccountAggregationSourcesToTerraform = configConfigurationAggregatorAccountAggregationSourcesToTerraform;
function configConfigurationAggregatorOrganizationAggregationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        all_aws_regions: cdktf.booleanToTerraform(struct.allAwsRegions),
        aws_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.awsRegions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.configConfigurationAggregatorOrganizationAggregationSourceToTerraform = configConfigurationAggregatorOrganizationAggregationSourceToTerraform;
function configConfigurationAggregatorTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.configConfigurationAggregatorTagsToTerraform = configConfigurationAggregatorTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/config_configuration_aggregator.html awscc_config_configuration_aggregator}
*/
class ConfigConfigurationAggregator extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/config_configuration_aggregator.html awscc_config_configuration_aggregator} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigConfigurationAggregatorConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_config_configuration_aggregator',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accountAggregationSources = config.accountAggregationSources;
        this._configurationAggregatorName = config.configurationAggregatorName;
        this._organizationAggregationSource = config.organizationAggregationSource;
        this._tags = config.tags;
    }
    get accountAggregationSources() {
        return this.interpolationForAttribute('account_aggregation_sources');
    }
    set accountAggregationSources(value) {
        this._accountAggregationSources = value;
    }
    resetAccountAggregationSources() {
        this._accountAggregationSources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountAggregationSourcesInput() {
        return this._accountAggregationSources;
    }
    // configuration_aggregator_arn - computed: true, optional: false, required: false
    get configurationAggregatorArn() {
        return this.getStringAttribute('configuration_aggregator_arn');
    }
    get configurationAggregatorName() {
        return this.getStringAttribute('configuration_aggregator_name');
    }
    set configurationAggregatorName(value) {
        this._configurationAggregatorName = value;
    }
    resetConfigurationAggregatorName() {
        this._configurationAggregatorName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationAggregatorNameInput() {
        return this._configurationAggregatorName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get organizationAggregationSource() {
        return this.interpolationForAttribute('organization_aggregation_source');
    }
    set organizationAggregationSource(value) {
        this._organizationAggregationSource = value;
    }
    resetOrganizationAggregationSource() {
        this._organizationAggregationSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationAggregationSourceInput() {
        return this._organizationAggregationSource;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_aggregation_sources: cdktf.listMapper(configConfigurationAggregatorAccountAggregationSourcesToTerraform)(this._accountAggregationSources),
            configuration_aggregator_name: cdktf.stringToTerraform(this._configurationAggregatorName),
            organization_aggregation_source: configConfigurationAggregatorOrganizationAggregationSourceToTerraform(this._organizationAggregationSource),
            tags: cdktf.listMapper(configConfigurationAggregatorTagsToTerraform)(this._tags),
        };
    }
}
exports.ConfigConfigurationAggregator = ConfigConfigurationAggregator;
// =================
// STATIC PROPERTIES
// =================
ConfigConfigurationAggregator.tfResourceType = "awscc_config_configuration_aggregator";
//# sourceMappingURL=data:application/json;base64,