"use strict";
// https://www.terraform.io/docs/providers/awscc/r/s3_access_point.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3AccessPoint = exports.s3AccessPointVpcConfigurationToTerraform = exports.s3AccessPointPublicAccessBlockConfigurationToTerraform = exports.s3AccessPointPolicyStatusToTerraform = void 0;
const cdktf = require("cdktf");
function s3AccessPointPolicyStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_public: cdktf.stringToTerraform(struct.isPublic),
    };
}
exports.s3AccessPointPolicyStatusToTerraform = s3AccessPointPolicyStatusToTerraform;
function s3AccessPointPublicAccessBlockConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_public_acls: cdktf.booleanToTerraform(struct.blockPublicAcls),
        block_public_policy: cdktf.booleanToTerraform(struct.blockPublicPolicy),
        ignore_public_acls: cdktf.booleanToTerraform(struct.ignorePublicAcls),
        restrict_public_buckets: cdktf.booleanToTerraform(struct.restrictPublicBuckets),
    };
}
exports.s3AccessPointPublicAccessBlockConfigurationToTerraform = s3AccessPointPublicAccessBlockConfigurationToTerraform;
function s3AccessPointVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.s3AccessPointVpcConfigurationToTerraform = s3AccessPointVpcConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/s3_access_point.html awscc_s3_access_point}
*/
class S3AccessPoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/s3_access_point.html awscc_s3_access_point} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3AccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3_access_point',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._bucket = config.bucket;
        this._policy = config.policy;
        this._policyStatus = config.policyStatus;
        this._publicAccessBlockConfiguration = config.publicAccessBlockConfiguration;
        this._vpcConfiguration = config.vpcConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // alias - computed: true, optional: false, required: false
    get alias() {
        return this.getStringAttribute('alias');
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // network_origin - computed: true, optional: false, required: false
    get networkOrigin() {
        return this.getStringAttribute('network_origin');
    }
    get policy() {
        return this.interpolationForAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    resetPolicy() {
        this._policy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    get policyStatus() {
        return this.interpolationForAttribute('policy_status');
    }
    set policyStatus(value) {
        this._policyStatus = value;
    }
    resetPolicyStatus() {
        this._policyStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyStatusInput() {
        return this._policyStatus;
    }
    get publicAccessBlockConfiguration() {
        return this.interpolationForAttribute('public_access_block_configuration');
    }
    set publicAccessBlockConfiguration(value) {
        this._publicAccessBlockConfiguration = value;
    }
    resetPublicAccessBlockConfiguration() {
        this._publicAccessBlockConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicAccessBlockConfigurationInput() {
        return this._publicAccessBlockConfiguration;
    }
    get vpcConfiguration() {
        return this.interpolationForAttribute('vpc_configuration');
    }
    set vpcConfiguration(value) {
        this._vpcConfiguration = value;
    }
    resetVpcConfiguration() {
        this._vpcConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigurationInput() {
        return this._vpcConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket: cdktf.stringToTerraform(this._bucket),
            policy: cdktf.hashMapper(cdktf.anyToTerraform)(this._policy),
            policy_status: s3AccessPointPolicyStatusToTerraform(this._policyStatus),
            public_access_block_configuration: s3AccessPointPublicAccessBlockConfigurationToTerraform(this._publicAccessBlockConfiguration),
            vpc_configuration: s3AccessPointVpcConfigurationToTerraform(this._vpcConfiguration),
        };
    }
}
exports.S3AccessPoint = S3AccessPoint;
// =================
// STATIC PROPERTIES
// =================
S3AccessPoint.tfResourceType = "awscc_s3_access_point";
//# sourceMappingURL=data:application/json;base64,