"use strict";
// https://www.terraform.io/docs/providers/awscc/r/imagebuilder_component.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderComponent = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_component.html awscc_imagebuilder_component}
*/
class ImagebuilderComponent extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_component.html awscc_imagebuilder_component} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderComponentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_component',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._changeDescription = config.changeDescription;
        this._data = config.data;
        this._description = config.description;
        this._kmsKeyId = config.kmsKeyId;
        this._name = config.name;
        this._platform = config.platform;
        this._supportedOsVersions = config.supportedOsVersions;
        this._tags = config.tags;
        this._uri = config.uri;
        this._version = config.version;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get changeDescription() {
        return this.getStringAttribute('change_description');
    }
    set changeDescription(value) {
        this._changeDescription = value;
    }
    resetChangeDescription() {
        this._changeDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get changeDescriptionInput() {
        return this._changeDescription;
    }
    get data() {
        return this.getStringAttribute('data');
    }
    set data(value) {
        this._data = value;
    }
    resetData() {
        this._data = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataInput() {
        return this._data;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // encrypted - computed: true, optional: false, required: false
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get platform() {
        return this.getStringAttribute('platform');
    }
    set platform(value) {
        this._platform = value;
    }
    // Temporarily expose input value. Use with caution.
    get platformInput() {
        return this._platform;
    }
    get supportedOsVersions() {
        return this.getListAttribute('supported_os_versions');
    }
    set supportedOsVersions(value) {
        this._supportedOsVersions = value;
    }
    resetSupportedOsVersions() {
        this._supportedOsVersions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get supportedOsVersionsInput() {
        return this._supportedOsVersions;
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            change_description: cdktf.stringToTerraform(this._changeDescription),
            data: cdktf.stringToTerraform(this._data),
            description: cdktf.stringToTerraform(this._description),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            name: cdktf.stringToTerraform(this._name),
            platform: cdktf.stringToTerraform(this._platform),
            supported_os_versions: cdktf.listMapper(cdktf.stringToTerraform)(this._supportedOsVersions),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            uri: cdktf.stringToTerraform(this._uri),
            version: cdktf.stringToTerraform(this._version),
        };
    }
}
exports.ImagebuilderComponent = ImagebuilderComponent;
// =================
// STATIC PROPERTIES
// =================
ImagebuilderComponent.tfResourceType = "awscc_imagebuilder_component";
//# sourceMappingURL=data:application/json;base64,