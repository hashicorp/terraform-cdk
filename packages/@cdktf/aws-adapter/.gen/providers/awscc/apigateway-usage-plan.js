"use strict";
// https://www.terraform.io/docs/providers/awscc/r/apigateway_usage_plan.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApigatewayUsagePlan = exports.apigatewayUsagePlanThrottleToTerraform = exports.apigatewayUsagePlanTagsToTerraform = exports.apigatewayUsagePlanQuotaToTerraform = exports.apigatewayUsagePlanApiStagesToTerraform = exports.apigatewayUsagePlanApiStagesThrottleToTerraform = void 0;
const cdktf = require("cdktf");
function apigatewayUsagePlanApiStagesThrottleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        burst_limit: cdktf.numberToTerraform(struct.burstLimit),
        rate_limit: cdktf.numberToTerraform(struct.rateLimit),
    };
}
exports.apigatewayUsagePlanApiStagesThrottleToTerraform = apigatewayUsagePlanApiStagesThrottleToTerraform;
function apigatewayUsagePlanApiStagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_id: cdktf.stringToTerraform(struct.apiId),
        stage: cdktf.stringToTerraform(struct.stage),
        throttle: cdktf.hashMapper(cdktf.anyToTerraform)(struct.throttle),
    };
}
exports.apigatewayUsagePlanApiStagesToTerraform = apigatewayUsagePlanApiStagesToTerraform;
function apigatewayUsagePlanQuotaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        limit: cdktf.numberToTerraform(struct.limit),
        offset: cdktf.numberToTerraform(struct.offset),
        period: cdktf.stringToTerraform(struct.period),
    };
}
exports.apigatewayUsagePlanQuotaToTerraform = apigatewayUsagePlanQuotaToTerraform;
function apigatewayUsagePlanTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.apigatewayUsagePlanTagsToTerraform = apigatewayUsagePlanTagsToTerraform;
function apigatewayUsagePlanThrottleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        burst_limit: cdktf.numberToTerraform(struct.burstLimit),
        rate_limit: cdktf.numberToTerraform(struct.rateLimit),
    };
}
exports.apigatewayUsagePlanThrottleToTerraform = apigatewayUsagePlanThrottleToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/apigateway_usage_plan.html awscc_apigateway_usage_plan}
*/
class ApigatewayUsagePlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/apigateway_usage_plan.html awscc_apigateway_usage_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApigatewayUsagePlanConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_apigateway_usage_plan',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._apiStages = config.apiStages;
        this._description = config.description;
        this._quota = config.quota;
        this._tags = config.tags;
        this._throttle = config.throttle;
        this._usagePlanName = config.usagePlanName;
    }
    get apiStages() {
        return this.interpolationForAttribute('api_stages');
    }
    set apiStages(value) {
        this._apiStages = value;
    }
    resetApiStages() {
        this._apiStages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiStagesInput() {
        return this._apiStages;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get quota() {
        return this.interpolationForAttribute('quota');
    }
    set quota(value) {
        this._quota = value;
    }
    resetQuota() {
        this._quota = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaInput() {
        return this._quota;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get throttle() {
        return this.interpolationForAttribute('throttle');
    }
    set throttle(value) {
        this._throttle = value;
    }
    resetThrottle() {
        this._throttle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttleInput() {
        return this._throttle;
    }
    get usagePlanName() {
        return this.getStringAttribute('usage_plan_name');
    }
    set usagePlanName(value) {
        this._usagePlanName = value;
    }
    resetUsagePlanName() {
        this._usagePlanName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usagePlanNameInput() {
        return this._usagePlanName;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_stages: cdktf.listMapper(apigatewayUsagePlanApiStagesToTerraform)(this._apiStages),
            description: cdktf.stringToTerraform(this._description),
            quota: apigatewayUsagePlanQuotaToTerraform(this._quota),
            tags: cdktf.listMapper(apigatewayUsagePlanTagsToTerraform)(this._tags),
            throttle: apigatewayUsagePlanThrottleToTerraform(this._throttle),
            usage_plan_name: cdktf.stringToTerraform(this._usagePlanName),
        };
    }
}
exports.ApigatewayUsagePlan = ApigatewayUsagePlan;
// =================
// STATIC PROPERTIES
// =================
ApigatewayUsagePlan.tfResourceType = "awscc_apigateway_usage_plan";
//# sourceMappingURL=data:application/json;base64,