"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotcoredeviceadvisor_suite_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotcoredeviceadvisorSuiteDefinition = exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionTagsToTerraform = exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionTags = exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform = exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfiguration = exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform = exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevices = void 0;
const cdktf = require("cdktf");
class DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevices extends cdktf.ComplexComputedList {
    // certificate_arn - computed: true, optional: false, required: false
    get certificateArn() {
        return this.getStringAttribute('certificate_arn');
    }
    // thing_arn - computed: true, optional: false, required: false
    get thingArn() {
        return this.getStringAttribute('thing_arn');
    }
}
exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevices = DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevices;
function dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        thing_arn: cdktf.stringToTerraform(struct.thingArn),
    };
}
exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform = dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform;
class DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfiguration extends cdktf.ComplexComputedList {
    // device_permission_role_arn - computed: true, optional: false, required: false
    get devicePermissionRoleArn() {
        return this.getStringAttribute('device_permission_role_arn');
    }
    // devices - computed: true, optional: false, required: false
    get devices() {
        return this.interpolationForAttribute('devices');
    }
    // intended_for_qualification - computed: true, optional: false, required: false
    get intendedForQualification() {
        return this.getBooleanAttribute('intended_for_qualification');
    }
    // root_group - computed: true, optional: false, required: false
    get rootGroup() {
        return this.getStringAttribute('root_group');
    }
    // suite_definition_name - computed: true, optional: false, required: false
    get suiteDefinitionName() {
        return this.getStringAttribute('suite_definition_name');
    }
}
exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfiguration = DataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfiguration;
function dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_permission_role_arn: cdktf.stringToTerraform(struct.devicePermissionRoleArn),
        devices: cdktf.listMapper(dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform)(struct.devices),
        intended_for_qualification: cdktf.booleanToTerraform(struct.intendedForQualification),
        root_group: cdktf.stringToTerraform(struct.rootGroup),
        suite_definition_name: cdktf.stringToTerraform(struct.suiteDefinitionName),
    };
}
exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform = dataAwsccIotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform;
class DataAwsccIotcoredeviceadvisorSuiteDefinitionTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotcoredeviceadvisorSuiteDefinitionTags = DataAwsccIotcoredeviceadvisorSuiteDefinitionTags;
function dataAwsccIotcoredeviceadvisorSuiteDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotcoredeviceadvisorSuiteDefinitionTagsToTerraform = dataAwsccIotcoredeviceadvisorSuiteDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotcoredeviceadvisor_suite_definition.html awscc_iotcoredeviceadvisor_suite_definition}
*/
class DataAwsccIotcoredeviceadvisorSuiteDefinition extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotcoredeviceadvisor_suite_definition.html awscc_iotcoredeviceadvisor_suite_definition} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotcoredeviceadvisorSuiteDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotcoredeviceadvisor_suite_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // suite_definition_arn - computed: true, optional: false, required: false
    get suiteDefinitionArn() {
        return this.getStringAttribute('suite_definition_arn');
    }
    // suite_definition_configuration - computed: true, optional: false, required: false
    get suiteDefinitionConfiguration() {
        return this.interpolationForAttribute('suite_definition_configuration');
    }
    // suite_definition_id - computed: true, optional: false, required: false
    get suiteDefinitionId() {
        return this.getStringAttribute('suite_definition_id');
    }
    // suite_definition_version - computed: true, optional: false, required: false
    get suiteDefinitionVersion() {
        return this.getStringAttribute('suite_definition_version');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotcoredeviceadvisorSuiteDefinition = DataAwsccIotcoredeviceadvisorSuiteDefinition;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotcoredeviceadvisorSuiteDefinition.tfResourceType = "awscc_iotcoredeviceadvisor_suite_definition";
//# sourceMappingURL=data:application/json;base64,