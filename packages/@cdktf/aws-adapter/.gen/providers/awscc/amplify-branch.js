"use strict";
// https://www.terraform.io/docs/providers/awscc/r/amplify_branch.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyBranch = exports.amplifyBranchTagsToTerraform = exports.amplifyBranchEnvironmentVariablesToTerraform = exports.amplifyBranchBasicAuthConfigToTerraform = void 0;
const cdktf = require("cdktf");
function amplifyBranchBasicAuthConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_basic_auth: cdktf.booleanToTerraform(struct.enableBasicAuth),
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.amplifyBranchBasicAuthConfigToTerraform = amplifyBranchBasicAuthConfigToTerraform;
function amplifyBranchEnvironmentVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.amplifyBranchEnvironmentVariablesToTerraform = amplifyBranchEnvironmentVariablesToTerraform;
function amplifyBranchTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.amplifyBranchTagsToTerraform = amplifyBranchTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/amplify_branch.html awscc_amplify_branch}
*/
class AmplifyBranch extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/amplify_branch.html awscc_amplify_branch} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AmplifyBranchConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_amplify_branch',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._appId = config.appId;
        this._basicAuthConfig = config.basicAuthConfig;
        this._branchName = config.branchName;
        this._buildSpec = config.buildSpec;
        this._description = config.description;
        this._enableAutoBuild = config.enableAutoBuild;
        this._enablePerformanceMode = config.enablePerformanceMode;
        this._enablePullRequestPreview = config.enablePullRequestPreview;
        this._environmentVariables = config.environmentVariables;
        this._pullRequestEnvironmentName = config.pullRequestEnvironmentName;
        this._stage = config.stage;
        this._tags = config.tags;
    }
    get appId() {
        return this.getStringAttribute('app_id');
    }
    set appId(value) {
        this._appId = value;
    }
    // Temporarily expose input value. Use with caution.
    get appIdInput() {
        return this._appId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get basicAuthConfig() {
        return this.interpolationForAttribute('basic_auth_config');
    }
    set basicAuthConfig(value) {
        this._basicAuthConfig = value;
    }
    resetBasicAuthConfig() {
        this._basicAuthConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicAuthConfigInput() {
        return this._basicAuthConfig;
    }
    get branchName() {
        return this.getStringAttribute('branch_name');
    }
    set branchName(value) {
        this._branchName = value;
    }
    // Temporarily expose input value. Use with caution.
    get branchNameInput() {
        return this._branchName;
    }
    get buildSpec() {
        return this.getStringAttribute('build_spec');
    }
    set buildSpec(value) {
        this._buildSpec = value;
    }
    resetBuildSpec() {
        this._buildSpec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buildSpecInput() {
        return this._buildSpec;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enableAutoBuild() {
        return this.getBooleanAttribute('enable_auto_build');
    }
    set enableAutoBuild(value) {
        this._enableAutoBuild = value;
    }
    resetEnableAutoBuild() {
        this._enableAutoBuild = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAutoBuildInput() {
        return this._enableAutoBuild;
    }
    get enablePerformanceMode() {
        return this.getBooleanAttribute('enable_performance_mode');
    }
    set enablePerformanceMode(value) {
        this._enablePerformanceMode = value;
    }
    resetEnablePerformanceMode() {
        this._enablePerformanceMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePerformanceModeInput() {
        return this._enablePerformanceMode;
    }
    get enablePullRequestPreview() {
        return this.getBooleanAttribute('enable_pull_request_preview');
    }
    set enablePullRequestPreview(value) {
        this._enablePullRequestPreview = value;
    }
    resetEnablePullRequestPreview() {
        this._enablePullRequestPreview = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePullRequestPreviewInput() {
        return this._enablePullRequestPreview;
    }
    get environmentVariables() {
        return this.interpolationForAttribute('environment_variables');
    }
    set environmentVariables(value) {
        this._environmentVariables = value;
    }
    resetEnvironmentVariables() {
        this._environmentVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentVariablesInput() {
        return this._environmentVariables;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get pullRequestEnvironmentName() {
        return this.getStringAttribute('pull_request_environment_name');
    }
    set pullRequestEnvironmentName(value) {
        this._pullRequestEnvironmentName = value;
    }
    resetPullRequestEnvironmentName() {
        this._pullRequestEnvironmentName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestEnvironmentNameInput() {
        return this._pullRequestEnvironmentName;
    }
    get stage() {
        return this.getStringAttribute('stage');
    }
    set stage(value) {
        this._stage = value;
    }
    resetStage() {
        this._stage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stageInput() {
        return this._stage;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_id: cdktf.stringToTerraform(this._appId),
            basic_auth_config: amplifyBranchBasicAuthConfigToTerraform(this._basicAuthConfig),
            branch_name: cdktf.stringToTerraform(this._branchName),
            build_spec: cdktf.stringToTerraform(this._buildSpec),
            description: cdktf.stringToTerraform(this._description),
            enable_auto_build: cdktf.booleanToTerraform(this._enableAutoBuild),
            enable_performance_mode: cdktf.booleanToTerraform(this._enablePerformanceMode),
            enable_pull_request_preview: cdktf.booleanToTerraform(this._enablePullRequestPreview),
            environment_variables: cdktf.listMapper(amplifyBranchEnvironmentVariablesToTerraform)(this._environmentVariables),
            pull_request_environment_name: cdktf.stringToTerraform(this._pullRequestEnvironmentName),
            stage: cdktf.stringToTerraform(this._stage),
            tags: cdktf.listMapper(amplifyBranchTagsToTerraform)(this._tags),
        };
    }
}
exports.AmplifyBranch = AmplifyBranch;
// =================
// STATIC PROPERTIES
// =================
AmplifyBranch.tfResourceType = "awscc_amplify_branch";
//# sourceMappingURL=data:application/json;base64,