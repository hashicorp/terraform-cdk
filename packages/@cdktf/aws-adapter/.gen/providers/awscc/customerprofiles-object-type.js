"use strict";
// https://www.terraform.io/docs/providers/awscc/r/customerprofiles_object_type.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerprofilesObjectType = exports.customerprofilesObjectTypeTagsToTerraform = exports.customerprofilesObjectTypeKeysToTerraform = exports.customerprofilesObjectTypeKeysObjectTypeKeyListToTerraform = exports.customerprofilesObjectTypeFieldsToTerraform = exports.customerprofilesObjectTypeFieldsObjectTypeFieldToTerraform = void 0;
const cdktf = require("cdktf");
function customerprofilesObjectTypeFieldsObjectTypeFieldToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_type: cdktf.stringToTerraform(struct.contentType),
        source: cdktf.stringToTerraform(struct.source),
        target: cdktf.stringToTerraform(struct.target),
    };
}
exports.customerprofilesObjectTypeFieldsObjectTypeFieldToTerraform = customerprofilesObjectTypeFieldsObjectTypeFieldToTerraform;
function customerprofilesObjectTypeFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        object_type_field: customerprofilesObjectTypeFieldsObjectTypeFieldToTerraform(struct.objectTypeField),
    };
}
exports.customerprofilesObjectTypeFieldsToTerraform = customerprofilesObjectTypeFieldsToTerraform;
function customerprofilesObjectTypeKeysObjectTypeKeyListToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        field_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.fieldNames),
        standard_identifiers: cdktf.listMapper(cdktf.stringToTerraform)(struct.standardIdentifiers),
    };
}
exports.customerprofilesObjectTypeKeysObjectTypeKeyListToTerraform = customerprofilesObjectTypeKeysObjectTypeKeyListToTerraform;
function customerprofilesObjectTypeKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        object_type_key_list: cdktf.listMapper(customerprofilesObjectTypeKeysObjectTypeKeyListToTerraform)(struct.objectTypeKeyList),
    };
}
exports.customerprofilesObjectTypeKeysToTerraform = customerprofilesObjectTypeKeysToTerraform;
function customerprofilesObjectTypeTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.customerprofilesObjectTypeTagsToTerraform = customerprofilesObjectTypeTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_object_type.html awscc_customerprofiles_object_type}
*/
class CustomerprofilesObjectType extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_object_type.html awscc_customerprofiles_object_type} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CustomerprofilesObjectTypeConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_customerprofiles_object_type',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._allowProfileCreation = config.allowProfileCreation;
        this._description = config.description;
        this._domainName = config.domainName;
        this._encryptionKey = config.encryptionKey;
        this._expirationDays = config.expirationDays;
        this._fields = config.fields;
        this._keys = config.keys;
        this._objectTypeName = config.objectTypeName;
        this._tags = config.tags;
        this._templateId = config.templateId;
    }
    get allowProfileCreation() {
        return this.getBooleanAttribute('allow_profile_creation');
    }
    set allowProfileCreation(value) {
        this._allowProfileCreation = value;
    }
    resetAllowProfileCreation() {
        this._allowProfileCreation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowProfileCreationInput() {
        return this._allowProfileCreation;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get encryptionKey() {
        return this.getStringAttribute('encryption_key');
    }
    set encryptionKey(value) {
        this._encryptionKey = value;
    }
    resetEncryptionKey() {
        this._encryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyInput() {
        return this._encryptionKey;
    }
    get expirationDays() {
        return this.getNumberAttribute('expiration_days');
    }
    set expirationDays(value) {
        this._expirationDays = value;
    }
    resetExpirationDays() {
        this._expirationDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationDaysInput() {
        return this._expirationDays;
    }
    get fields() {
        return this.interpolationForAttribute('fields');
    }
    set fields(value) {
        this._fields = value;
    }
    resetFields() {
        this._fields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldsInput() {
        return this._fields;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get keys() {
        return this.interpolationForAttribute('keys');
    }
    set keys(value) {
        this._keys = value;
    }
    resetKeys() {
        this._keys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keysInput() {
        return this._keys;
    }
    // last_updated_at - computed: true, optional: false, required: false
    get lastUpdatedAt() {
        return this.getStringAttribute('last_updated_at');
    }
    get objectTypeName() {
        return this.getStringAttribute('object_type_name');
    }
    set objectTypeName(value) {
        this._objectTypeName = value;
    }
    resetObjectTypeName() {
        this._objectTypeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectTypeNameInput() {
        return this._objectTypeName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get templateId() {
        return this.getStringAttribute('template_id');
    }
    set templateId(value) {
        this._templateId = value;
    }
    resetTemplateId() {
        this._templateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateIdInput() {
        return this._templateId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_profile_creation: cdktf.booleanToTerraform(this._allowProfileCreation),
            description: cdktf.stringToTerraform(this._description),
            domain_name: cdktf.stringToTerraform(this._domainName),
            encryption_key: cdktf.stringToTerraform(this._encryptionKey),
            expiration_days: cdktf.numberToTerraform(this._expirationDays),
            fields: cdktf.listMapper(customerprofilesObjectTypeFieldsToTerraform)(this._fields),
            keys: cdktf.listMapper(customerprofilesObjectTypeKeysToTerraform)(this._keys),
            object_type_name: cdktf.stringToTerraform(this._objectTypeName),
            tags: cdktf.listMapper(customerprofilesObjectTypeTagsToTerraform)(this._tags),
            template_id: cdktf.stringToTerraform(this._templateId),
        };
    }
}
exports.CustomerprofilesObjectType = CustomerprofilesObjectType;
// =================
// STATIC PROPERTIES
// =================
CustomerprofilesObjectType.tfResourceType = "awscc_customerprofiles_object_type";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXJwcm9maWxlcy1vYmplY3QtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImN1c3RvbWVycHJvZmlsZXMtb2JqZWN0LXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9GQUFvRjtBQUNwRiwyQ0FBMkM7OztBQUczQywrQkFBK0I7QUF1Ri9CLFNBQWdCLDBEQUEwRCxDQUFDLE1BQXdEO0lBQ2pJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsWUFBWSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsV0FBVyxDQUFDO1FBQzFELE1BQU0sRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLE1BQU0sQ0FBQztRQUMvQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxNQUFNLENBQUM7S0FDaEQsQ0FBQTtBQUNILENBQUM7QUFQRCxnSUFPQztBQWVELFNBQWdCLDJDQUEyQyxDQUFDLE1BQXlDO0lBQ25HLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsSUFBSSxDQUFDO1FBQzNDLGlCQUFpQixFQUFFLDBEQUEwRCxDQUFDLE1BQU8sQ0FBQyxlQUFlLENBQUM7S0FDdkcsQ0FBQTtBQUNILENBQUM7QUFORCxrR0FNQztBQWlCRCxTQUFnQiwwREFBMEQsQ0FBQyxNQUF3RDtJQUNqSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLFdBQVcsRUFBRSxLQUFLLENBQUMs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QUFlO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBRUYsb0JBQW9CO1FBQzVCLE9BQU87WUFDTCxzQkFBc0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1lBQzVFLFdBQVcsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUN2RCxXQUFXLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDdEQsY0FBYyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQzVELGVBQWUsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUM5RCxNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbkYsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMseUNBQXlDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzdFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQy9ELElBQUksRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLHlDQUF5QyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM3RSxXQUFXLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDdkQsQ0FBQztJQUNKLENBQUM7O0FBMU9ILGdFQTJPQztBQXpPQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNHLHlDQUFjLEdBQVcsb0NBQW9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlLmh0bWxcbi8vIGdlbmVyYXRlZCBmcm9tIHRlcnJhZm9ybSByZXNvdXJjZSBzY2hlbWFcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGt0ZiBmcm9tICdjZGt0Zic7XG5cbi8vIENvbmZpZ3VyYXRpb25cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUNvbmZpZyBleHRlbmRzIGNka3RmLlRlcnJhZm9ybU1ldGFBcmd1bWVudHMge1xuICAvKipcbiAgKiBJbmRpY2F0ZXMgd2hldGhlciBhIHByb2ZpbGUgc2hvdWxkIGJlIGNyZWF0ZWQgd2hlbiBkYXRhIGlzIHJlY2VpdmVkLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI2FsbG93X3Byb2ZpbGVfY3JlYXRpb24gQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjYWxsb3dfcHJvZmlsZV9jcmVhdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgYWxsb3dQcm9maWxlQ3JlYXRpb24/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERlc2NyaXB0aW9uIG9mIHRoZSBwcm9maWxlIG9iamVjdCB0eXBlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI2Rlc2NyaXB0aW9uIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlI2Rlc2NyaXB0aW9ufVxuICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICogVGhlIHVuaXF1ZSBuYW1lIG9mIHRoZSBkb21haW4uXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlLmh0bWwjZG9tYWluX25hbWUgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjZG9tYWluX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGRvbWFpbk5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIGRlZmF1bHQgZW5jcnlwdGlvbiBrZXlcbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNlbmNyeXB0aW9uX2tleSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZSNlbmNyeXB0aW9uX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgZW5jcnlwdGlvbktleT86IHN0cmluZztcbiAgLyoqXG4gICogVGhlIGRlZmF1bHQgbnVtYmVyIG9mIGRheXMgdW50aWwgdGhlIGRhdGEgd2l0aGluIHRoZSBkb21haW4gZXhwaXJlcy5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNleHBpcmF0aW9uX2RheXMgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjZXhwaXJhdGlvbl9kYXlzfVxuICAqL1xuICByZWFkb25seSBleHBpcmF0aW9uRGF5cz86IG51bWJlcjtcbiAgLyoqXG4gICogQSBsaXN0IG9mIHRoZSBuYW1lIGFuZCBPYmplY3RUeXBlIGZpZWxkLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI2ZpZWxkcyBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZSNmaWVsZHN9XG4gICovXG4gIHJlYWRvbmx5IGZpZWxkcz86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlRmllbGRzW107XG4gIC8qKlxuICAqIEEgbGlzdCBvZiB1bmlxdWUga2V5cyB0aGF0IGNhbiBiZSB1c2VkIHRvIG1hcCBkYXRhIHRvIHRoZSBwcm9maWxlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI2tleXMgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUja2V5c31cbiAgKi9cbiAgcmVhZG9ubHkga2V5cz86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlS2V5c1tdO1xuICAvKipcbiAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvZmlsZSBvYmplY3QgdHlwZS5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNvYmplY3RfdHlwZV9uYW1lIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlI29iamVjdF90eXBlX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG9iamVjdFR5cGVOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgdGFncyAoa2V5cyBhbmQgdmFsdWVzKSBhc3NvY2lhdGVkIHdpdGggdGhlIGludGVncmF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI3RhZ3MgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjdGFnc31cbiAgKi9cbiAgcmVhZG9ubHkgdGFncz86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlVGFnc1tdO1xuICAvKipcbiAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgb2JqZWN0IHRlbXBsYXRlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI3RlbXBsYXRlX2lkIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlI3RlbXBsYXRlX2lkfVxuICAqL1xuICByZWFkb25seSB0ZW1wbGF0ZUlkPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkc09iamVjdFR5cGVGaWVsZCB7XG4gIC8qKlxuICAqIFRoZSBjb250ZW50IHR5cGUgb2YgdGhlIGZpZWxkLiBVc2VkIGZvciBkZXRlcm1pbmluZyBlcXVhbGl0eSB3aGVuIHNlYXJjaGluZy5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNjb250ZW50X3R5cGUgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjY29udGVudF90eXBlfVxuICAqL1xuICByZWFkb25seSBjb250ZW50VHlwZT86IHN0cmluZztcbiAgLyoqXG4gICogQSBmaWVsZCBvZiBhIFByb2ZpbGVPYmplY3QuIEZvciBleGFtcGxlOiBfc291cmNlLkZpcnN0TmFtZSwgd2hlcmUgXCJfc291cmNlXCIgaXMgYSBQcm9maWxlT2JqZWN0VHlwZSBvZiBhIFplbmRlc2sgdXNlciBhbmQgXCJGaXJzdE5hbWVcIiBpcyBhIGZpZWxkIGluIHRoYXQgT2JqZWN0VHlwZS5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNzb3VyY2UgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjc291cmNlfVxuICAqL1xuICByZWFkb25seSBzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YSBpbiB0aGUgc3RhbmRhcmQgUHJvZmlsZU9iamVjdCBtb2RlbC4gRm9yIGV4YW1wbGU6IF9wcm9maWxlLkFkZHJlc3MuUG9zdGFsQ29kZS5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCN0YXJnZXQgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjdGFyZ2V0fVxuICAqL1xuICByZWFkb25seSB0YXJnZXQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkc09iamVjdFR5cGVGaWVsZFRvVGVycmFmb3JtKHN0cnVjdD86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlRmllbGRzT2JqZWN0VHlwZUZpZWxkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGNvbnRlbnRfdHlwZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jb250ZW50VHlwZSksXG4gICAgc291cmNlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnNvdXJjZSksXG4gICAgdGFyZ2V0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRhcmdldCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkcyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI25hbWUgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogUmVwcmVzZW50cyBhIGZpZWxkIGluIGEgUHJvZmlsZU9iamVjdFR5cGUuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlLmh0bWwjb2JqZWN0X3R5cGVfZmllbGQgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjb2JqZWN0X3R5cGVfZmllbGR9XG4gICovXG4gIHJlYWRvbmx5IG9iamVjdFR5cGVGaWVsZD86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlRmllbGRzT2JqZWN0VHlwZUZpZWxkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGVGaWVsZHNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkcyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgIG9iamVjdF90eXBlX2ZpZWxkOiBjdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkc09iamVjdFR5cGVGaWVsZFRvVGVycmFmb3JtKHN0cnVjdCEub2JqZWN0VHlwZUZpZWxkKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlS2V5c09iamVjdFR5cGVLZXlMaXN0IHtcbiAgLyoqXG4gICogVGhlIHJlZmVyZW5jZSBmb3IgdGhlIGtleSBuYW1lIG9mIHRoZSBmaWVsZHMgbWFwLiBcbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNmaWVsZF9uYW1lcyBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZSNmaWVsZF9uYW1lc31cbiAgKi9cbiAgcmVhZG9ubHkgZmllbGROYW1lcz86IHN0cmluZ1tdO1xuICAvKipcbiAgKiBUaGUgdHlwZXMgb2Yga2V5cyB0aGF0IGEgUHJvZmlsZU9iamVjdCBjYW4gaGF2ZS4gRWFjaCBQcm9maWxlT2JqZWN0IGNhbiBoYXZlIG9ubHkgMSBVTklRVUUga2V5IGJ1dCBtdWx0aXBsZSBQUk9GSUxFIGtleXMuIFBST0ZJTEUgbWVhbnMgdGhhdCB0aGlzIGtleSBjYW4gYmUgdXNlZCB0byB0aWUgYW4gb2JqZWN0IHRvIGEgUFJPRklMRS4gVU5JUVVFIG1lYW5zIHRoYXQgaXQgY2FuIGJlIHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgYW4gb2JqZWN0LiBJZiBhIGtleSBhIGlzIG1hcmtlZCBhcyBTRUNPTkRBUlksIGl0IHdpbGwgYmUgdXNlZCB0byBzZWFyY2ggZm9yIHByb2ZpbGVzIGFmdGVyIGFsbCBvdGhlciBQUk9GSUxFIGtleXMgaGF2ZSBiZWVuIHNlYXJjaGVkLiBBIExPT0tVUF9PTkxZIGtleSBpcyBvbmx5IHVzZWQgdG8gbWF0Y2ggYSBwcm9maWxlIGJ1dCBpcyBub3QgcGVyc2lzdGVkIHRvIGJlIHVzZWQgZm9yIHNlYXJjaGluZyBvZiB0aGUgcHJvZmlsZS4gQSBORVdfT05MWSBrZXkgaXMgb25seSB1c2VkIGlmIHRoZSBwcm9maWxlIGRvZXMgbm90IGFscmVhZHkgZXhpc3QgYmVmb3JlIHRoZSBvYmplY3QgaXMgaW5nZXN0ZWQsIG90aGVyd2lzZSBpdCBpcyBvbmx5IHVzZWQgZm9yIG1hdGNoaW5nIG9iamVjdHMgdG8gcHJvZmlsZXMuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlLmh0bWwjc3RhbmRhcmRfaWRlbnRpZmllcnMgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUjc3RhbmRhcmRfaWRlbnRpZmllcnN9XG4gICovXG4gIHJlYWRvbmx5IHN0YW5kYXJkSWRlbnRpZmllcnM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlS2V5c09iamVjdFR5cGVLZXlMaXN0VG9UZXJyYWZvcm0oc3RydWN0PzogQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGVLZXlzT2JqZWN0VHlwZUtleUxpc3QpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgZmllbGRfbmFtZXM6IGNka3RmLmxpc3RNYXBwZXIoY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0pKHN0cnVjdCEuZmllbGROYW1lcyksXG4gICAgc3RhbmRhcmRfaWRlbnRpZmllcnM6IGNka3RmLmxpc3RNYXBwZXIoY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0pKHN0cnVjdCEuc3RhbmRhcmRJZGVudGlmaWVycyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCNuYW1lIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI29iamVjdF90eXBlX2tleV9saXN0IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlI29iamVjdF90eXBlX2tleV9saXN0fVxuICAqL1xuICByZWFkb25seSBvYmplY3RUeXBlS2V5TGlzdD86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlS2V5c09iamVjdFR5cGVLZXlMaXN0W107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgICBvYmplY3RfdHlwZV9rZXlfbGlzdDogY2RrdGYubGlzdE1hcHBlcihjdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXNPYmplY3RUeXBlS2V5TGlzdFRvVGVycmFmb3JtKShzdHJ1Y3QhLm9iamVjdFR5cGVLZXlMaXN0KSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlVGFncyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZS5odG1sI2tleSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZSNrZXl9XG4gICovXG4gIHJlYWRvbmx5IGtleTogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCN2YWx1ZSBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZSN2YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlVGFnc1RvVGVycmFmb3JtKHN0cnVjdD86IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlVGFncyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEua2V5KSxcbiAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS52YWx1ZSksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlLmh0bWwgYXdzY2NfY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZX1cbiovXG5leHBvcnQgY2xhc3MgQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGUgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlXCI7XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2N1c3RvbWVycHJvZmlsZXNfb2JqZWN0X3R5cGUuaHRtbCBhd3NjY19jdXN0b21lcnByb2ZpbGVzX29iamVjdF90eXBlfSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUNvbmZpZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUNvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgdGVycmFmb3JtUmVzb3VyY2VUeXBlOiAnYXdzY2NfY3VzdG9tZXJwcm9maWxlc19vYmplY3RfdHlwZScsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2FsbG93UHJvZmlsZUNyZWF0aW9uID0gY29uZmlnLmFsbG93UHJvZmlsZUNyZWF0aW9uO1xuICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuX2RvbWFpbk5hbWUgPSBjb25maWcuZG9tYWluTmFtZTtcbiAgICB0aGlzLl9lbmNyeXB0aW9uS2V5ID0gY29uZmlnLmVuY3J5cHRpb25LZXk7XG4gICAgdGhpcy5fZXhwaXJhdGlvbkRheXMgPSBjb25maWcuZXhwaXJhdGlvbkRheXM7XG4gICAgdGhpcy5fZmllbGRzID0gY29uZmlnLmZpZWxkcztcbiAgICB0aGlzLl9rZXlzID0gY29uZmlnLmtleXM7XG4gICAgdGhpcy5fb2JqZWN0VHlwZU5hbWUgPSBjb25maWcub2JqZWN0VHlwZU5hbWU7XG4gICAgdGhpcy5fdGFncyA9IGNvbmZpZy50YWdzO1xuICAgIHRoaXMuX3RlbXBsYXRlSWQgPSBjb25maWcudGVtcGxhdGVJZDtcbiAgfVxuXG4gIC8vID09PT09PT09PT1cbiAgLy8gQVRUUklCVVRFU1xuICAvLyA9PT09PT09PT09XG5cbiAgLy8gYWxsb3dfcHJvZmlsZV9jcmVhdGlvbiAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9hbGxvd1Byb2ZpbGVDcmVhdGlvbj86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgcHVibGljIGdldCBhbGxvd1Byb2ZpbGVDcmVhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCb29sZWFuQXR0cmlidXRlKCdhbGxvd19wcm9maWxlX2NyZWF0aW9uJyk7XG4gIH1cbiAgcHVibGljIHNldCBhbGxvd1Byb2ZpbGVDcmVhdGlvbih2YWx1ZTogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlICkge1xuICAgIHRoaXMuX2FsbG93UHJvZmlsZUNyZWF0aW9uID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0QWxsb3dQcm9maWxlQ3JlYXRpb24oKSB7XG4gICAgdGhpcy5fYWxsb3dQcm9maWxlQ3JlYXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGFsbG93UHJvZmlsZUNyZWF0aW9uSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FsbG93UHJvZmlsZUNyZWF0aW9uXG4gIH1cblxuICAvLyBjcmVhdGVkX2F0IC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgY3JlYXRlZEF0KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY3JlYXRlZF9hdCcpO1xuICB9XG5cbiAgLy8gZGVzY3JpcHRpb24gLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdkZXNjcmlwdGlvbicpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGVzY3JpcHRpb24odmFsdWU6IHN0cmluZyApIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERlc2NyaXB0aW9uKCkge1xuICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkZXNjcmlwdGlvbklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvblxuICB9XG5cbiAgLy8gZG9tYWluX25hbWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfZG9tYWluTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGRvbWFpbk5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdkb21haW5fbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZG9tYWluTmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZG9tYWluTmFtZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkb21haW5OYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbk5hbWVcbiAgfVxuXG4gIC8vIGVuY3J5cHRpb25fa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2VuY3J5cHRpb25LZXk/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgZW5jcnlwdGlvbktleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2VuY3J5cHRpb25fa2V5Jyk7XG4gIH1cbiAgcHVibGljIHNldCBlbmNyeXB0aW9uS2V5KHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fZW5jcnlwdGlvbktleSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEVuY3J5cHRpb25LZXkoKSB7XG4gICAgdGhpcy5fZW5jcnlwdGlvbktleSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZW5jcnlwdGlvbktleUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9lbmNyeXB0aW9uS2V5XG4gIH1cblxuICAvLyBleHBpcmF0aW9uX2RheXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZXhwaXJhdGlvbkRheXM/OiBudW1iZXI7XG4gIHB1YmxpYyBnZXQgZXhwaXJhdGlvbkRheXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdleHBpcmF0aW9uX2RheXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGV4cGlyYXRpb25EYXlzKHZhbHVlOiBudW1iZXIgKSB7XG4gICAgdGhpcy5fZXhwaXJhdGlvbkRheXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRFeHBpcmF0aW9uRGF5cygpIHtcbiAgICB0aGlzLl9leHBpcmF0aW9uRGF5cyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZXhwaXJhdGlvbkRheXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZXhwaXJhdGlvbkRheXNcbiAgfVxuXG4gIC8vIGZpZWxkcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9maWVsZHM/OiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUZpZWxkc1tdO1xuICBwdWJsaWMgZ2V0IGZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdmaWVsZHMnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBmaWVsZHModmFsdWU6IEN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlRmllbGRzW10gKSB7XG4gICAgdGhpcy5fZmllbGRzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RmllbGRzKCkge1xuICAgIHRoaXMuX2ZpZWxkcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZmllbGRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkc1xuICB9XG5cbiAgLy8gaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2lkJyk7XG4gIH1cblxuICAvLyBrZXlzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2tleXM/OiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXNbXTtcbiAgcHVibGljIGdldCBrZXlzKCkge1xuICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoJ2tleXMnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBrZXlzKHZhbHVlOiBDdXN0b21lcnByb2ZpbGVzT2JqZWN0VHlwZUtleXNbXSApIHtcbiAgICB0aGlzLl9rZXlzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0S2V5cygpIHtcbiAgICB0aGlzLl9rZXlzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBrZXlzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2tleXNcbiAgfVxuXG4gIC8vIGxhc3RfdXBkYXRlZF9hdCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGxhc3RVcGRhdGVkQXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdsYXN0X3VwZGF0ZWRfYXQnKTtcbiAgfVxuXG4gIC8vIG9iamVjdF90eXBlX25hbWUgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9vYmplY3RUeXBlTmFtZT86IHN0cmluZztcbiAgcHVibGljIGdldCBvYmplY3RUeXBlTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ29iamVjdF90eXBlX25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG9iamVjdFR5cGVOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9vYmplY3RUeXBlTmFtZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE9iamVjdFR5cGVOYW1lKCkge1xuICAgIHRoaXMuX29iamVjdFR5cGVOYW1lID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBvYmplY3RUeXBlTmFtZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9vYmplY3RUeXBlTmFtZVxuICB9XG5cbiAgLy8gdGFncyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90YWdzPzogQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGVUYWdzW107XG4gIHB1YmxpYyBnZXQgdGFncygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCd0YWdzJykgYXMgYW55O1xuICB9XG4gIHB1YmxpYyBzZXQgdGFncyh2YWx1ZTogQ3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGVUYWdzW10gKSB7XG4gICAgdGhpcy5fdGFncyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRhZ3MoKSB7XG4gICAgdGhpcy5fdGFncyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGFnc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90YWdzXG4gIH1cblxuICAvLyB0ZW1wbGF0ZV9pZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90ZW1wbGF0ZUlkPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IHRlbXBsYXRlSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0ZW1wbGF0ZV9pZCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGVtcGxhdGVJZCh2YWx1ZTogc3RyaW5nICkge1xuICAgIHRoaXMuX3RlbXBsYXRlSWQgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUZW1wbGF0ZUlkKCkge1xuICAgIHRoaXMuX3RlbXBsYXRlSWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRlbXBsYXRlSWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVJZFxuICB9XG5cbiAgLy8gPT09PT09PT09XG4gIC8vIFNZTlRIRVNJU1xuICAvLyA9PT09PT09PT1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB7XG4gICAgICBhbGxvd19wcm9maWxlX2NyZWF0aW9uOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0odGhpcy5fYWxsb3dQcm9maWxlQ3JlYXRpb24pLFxuICAgICAgZGVzY3JpcHRpb246IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX2Rlc2NyaXB0aW9uKSxcbiAgICAgIGRvbWFpbl9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9kb21haW5OYW1lKSxcbiAgICAgIGVuY3J5cHRpb25fa2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9lbmNyeXB0aW9uS2V5KSxcbiAgICAgIGV4cGlyYXRpb25fZGF5czogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0odGhpcy5fZXhwaXJhdGlvbkRheXMpLFxuICAgICAgZmllbGRzOiBjZGt0Zi5saXN0TWFwcGVyKGN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlRmllbGRzVG9UZXJyYWZvcm0pKHRoaXMuX2ZpZWxkcyksXG4gICAgICBrZXlzOiBjZGt0Zi5saXN0TWFwcGVyKGN1c3RvbWVycHJvZmlsZXNPYmplY3RUeXBlS2V5c1RvVGVycmFmb3JtKSh0aGlzLl9rZXlzKSxcbiAgICAgIG9iamVjdF90eXBlX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX29iamVjdFR5cGVOYW1lKSxcbiAgICAgIHRhZ3M6IGNka3RmLmxpc3RNYXBwZXIoY3VzdG9tZXJwcm9maWxlc09iamVjdFR5cGVUYWdzVG9UZXJyYWZvcm0pKHRoaXMuX3RhZ3MpLFxuICAgICAgdGVtcGxhdGVfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX3RlbXBsYXRlSWQpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==