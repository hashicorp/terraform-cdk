"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssm_association.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmAssociation = exports.ssmAssociationTargetsToTerraform = exports.ssmAssociationOutputLocationToTerraform = exports.ssmAssociationOutputLocationS3LocationToTerraform = void 0;
const cdktf = require("cdktf");
function ssmAssociationOutputLocationS3LocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        output_s3_bucket_name: cdktf.stringToTerraform(struct.outputS3BucketName),
        output_s3_key_prefix: cdktf.stringToTerraform(struct.outputS3KeyPrefix),
        output_s3_region: cdktf.stringToTerraform(struct.outputS3Region),
    };
}
exports.ssmAssociationOutputLocationS3LocationToTerraform = ssmAssociationOutputLocationS3LocationToTerraform;
function ssmAssociationOutputLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_location: ssmAssociationOutputLocationS3LocationToTerraform(struct.s3Location),
    };
}
exports.ssmAssociationOutputLocationToTerraform = ssmAssociationOutputLocationToTerraform;
function ssmAssociationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.ssmAssociationTargetsToTerraform = ssmAssociationTargetsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssm_association.html awscc_ssm_association}
*/
class SsmAssociation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssm_association.html awscc_ssm_association} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmAssociationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssm_association',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._applyOnlyAtCronInterval = config.applyOnlyAtCronInterval;
        this._associationName = config.associationName;
        this._automationTargetParameterName = config.automationTargetParameterName;
        this._calendarNames = config.calendarNames;
        this._complianceSeverity = config.complianceSeverity;
        this._documentVersion = config.documentVersion;
        this._instanceId = config.instanceId;
        this._maxConcurrency = config.maxConcurrency;
        this._maxErrors = config.maxErrors;
        this._name = config.name;
        this._outputLocation = config.outputLocation;
        this._parameters = config.parameters;
        this._scheduleExpression = config.scheduleExpression;
        this._syncCompliance = config.syncCompliance;
        this._targets = config.targets;
        this._waitForSuccessTimeoutSeconds = config.waitForSuccessTimeoutSeconds;
    }
    get applyOnlyAtCronInterval() {
        return this.getBooleanAttribute('apply_only_at_cron_interval');
    }
    set applyOnlyAtCronInterval(value) {
        this._applyOnlyAtCronInterval = value;
    }
    resetApplyOnlyAtCronInterval() {
        this._applyOnlyAtCronInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applyOnlyAtCronIntervalInput() {
        return this._applyOnlyAtCronInterval;
    }
    // association_id - computed: true, optional: false, required: false
    get associationId() {
        return this.getStringAttribute('association_id');
    }
    get associationName() {
        return this.getStringAttribute('association_name');
    }
    set associationName(value) {
        this._associationName = value;
    }
    resetAssociationName() {
        this._associationName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associationNameInput() {
        return this._associationName;
    }
    get automationTargetParameterName() {
        return this.getStringAttribute('automation_target_parameter_name');
    }
    set automationTargetParameterName(value) {
        this._automationTargetParameterName = value;
    }
    resetAutomationTargetParameterName() {
        this._automationTargetParameterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automationTargetParameterNameInput() {
        return this._automationTargetParameterName;
    }
    get calendarNames() {
        return this.getListAttribute('calendar_names');
    }
    set calendarNames(value) {
        this._calendarNames = value;
    }
    resetCalendarNames() {
        this._calendarNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get calendarNamesInput() {
        return this._calendarNames;
    }
    get complianceSeverity() {
        return this.getStringAttribute('compliance_severity');
    }
    set complianceSeverity(value) {
        this._complianceSeverity = value;
    }
    resetComplianceSeverity() {
        this._complianceSeverity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get complianceSeverityInput() {
        return this._complianceSeverity;
    }
    get documentVersion() {
        return this.getStringAttribute('document_version');
    }
    set documentVersion(value) {
        this._documentVersion = value;
    }
    resetDocumentVersion() {
        this._documentVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentVersionInput() {
        return this._documentVersion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    resetInstanceId() {
        this._instanceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get maxConcurrency() {
        return this.getStringAttribute('max_concurrency');
    }
    set maxConcurrency(value) {
        this._maxConcurrency = value;
    }
    resetMaxConcurrency() {
        this._maxConcurrency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrencyInput() {
        return this._maxConcurrency;
    }
    get maxErrors() {
        return this.getStringAttribute('max_errors');
    }
    set maxErrors(value) {
        this._maxErrors = value;
    }
    resetMaxErrors() {
        this._maxErrors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxErrorsInput() {
        return this._maxErrors;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get outputLocation() {
        return this.interpolationForAttribute('output_location');
    }
    set outputLocation(value) {
        this._outputLocation = value;
    }
    resetOutputLocation() {
        this._outputLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputLocationInput() {
        return this._outputLocation;
    }
    get parameters() {
        return this.interpolationForAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    set scheduleExpression(value) {
        this._scheduleExpression = value;
    }
    resetScheduleExpression() {
        this._scheduleExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleExpressionInput() {
        return this._scheduleExpression;
    }
    get syncCompliance() {
        return this.getStringAttribute('sync_compliance');
    }
    set syncCompliance(value) {
        this._syncCompliance = value;
    }
    resetSyncCompliance() {
        this._syncCompliance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncComplianceInput() {
        return this._syncCompliance;
    }
    get targets() {
        return this.interpolationForAttribute('targets');
    }
    set targets(value) {
        this._targets = value;
    }
    resetTargets() {
        this._targets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets;
    }
    get waitForSuccessTimeoutSeconds() {
        return this.getNumberAttribute('wait_for_success_timeout_seconds');
    }
    set waitForSuccessTimeoutSeconds(value) {
        this._waitForSuccessTimeoutSeconds = value;
    }
    resetWaitForSuccessTimeoutSeconds() {
        this._waitForSuccessTimeoutSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForSuccessTimeoutSecondsInput() {
        return this._waitForSuccessTimeoutSeconds;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            apply_only_at_cron_interval: cdktf.booleanToTerraform(this._applyOnlyAtCronInterval),
            association_name: cdktf.stringToTerraform(this._associationName),
            automation_target_parameter_name: cdktf.stringToTerraform(this._automationTargetParameterName),
            calendar_names: cdktf.listMapper(cdktf.stringToTerraform)(this._calendarNames),
            compliance_severity: cdktf.stringToTerraform(this._complianceSeverity),
            document_version: cdktf.stringToTerraform(this._documentVersion),
            instance_id: cdktf.stringToTerraform(this._instanceId),
            max_concurrency: cdktf.stringToTerraform(this._maxConcurrency),
            max_errors: cdktf.stringToTerraform(this._maxErrors),
            name: cdktf.stringToTerraform(this._name),
            output_location: ssmAssociationOutputLocationToTerraform(this._outputLocation),
            parameters: cdktf.listMapper(cdktf.hashMapper(cdktf.anyToTerraform))(this._parameters),
            schedule_expression: cdktf.stringToTerraform(this._scheduleExpression),
            sync_compliance: cdktf.stringToTerraform(this._syncCompliance),
            targets: cdktf.listMapper(ssmAssociationTargetsToTerraform)(this._targets),
            wait_for_success_timeout_seconds: cdktf.numberToTerraform(this._waitForSuccessTimeoutSeconds),
        };
    }
}
exports.SsmAssociation = SsmAssociation;
// =================
// STATIC PROPERTIES
// =================
SsmAssociation.tfResourceType = "awscc_ssm_association";
//# sourceMappingURL=data:application/json;base64,