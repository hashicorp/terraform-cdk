"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotwireless_device_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotwirelessDeviceProfile = exports.iotwirelessDeviceProfileTagsToTerraform = exports.iotwirelessDeviceProfileLoRaWanToTerraform = void 0;
const cdktf = require("cdktf");
function iotwirelessDeviceProfileLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        class_b_timeout: cdktf.numberToTerraform(struct.classBTimeout),
        class_c_timeout: cdktf.numberToTerraform(struct.classCTimeout),
        mac_version: cdktf.stringToTerraform(struct.macVersion),
        max_duty_cycle: cdktf.numberToTerraform(struct.maxDutyCycle),
        max_eirp: cdktf.numberToTerraform(struct.maxEirp),
        ping_slot_dr: cdktf.numberToTerraform(struct.pingSlotDr),
        ping_slot_freq: cdktf.numberToTerraform(struct.pingSlotFreq),
        ping_slot_period: cdktf.numberToTerraform(struct.pingSlotPeriod),
        reg_params_revision: cdktf.stringToTerraform(struct.regParamsRevision),
        rf_region: cdktf.stringToTerraform(struct.rfRegion),
        supports_32_bit_f_cnt: cdktf.booleanToTerraform(struct.supports32BitFCnt),
        supports_class_b: cdktf.booleanToTerraform(struct.supportsClassB),
        supports_class_c: cdktf.booleanToTerraform(struct.supportsClassC),
        supports_join: cdktf.booleanToTerraform(struct.supportsJoin),
    };
}
exports.iotwirelessDeviceProfileLoRaWanToTerraform = iotwirelessDeviceProfileLoRaWanToTerraform;
function iotwirelessDeviceProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotwirelessDeviceProfileTagsToTerraform = iotwirelessDeviceProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_device_profile.html awscc_iotwireless_device_profile}
*/
class IotwirelessDeviceProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_device_profile.html awscc_iotwireless_device_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotwirelessDeviceProfileConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_device_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._loRaWan = config.loRaWan;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    set loRaWan(value) {
        this._loRaWan = value;
    }
    resetLoRaWan() {
        this._loRaWan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRaWanInput() {
        return this._loRaWan;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            lo_ra_wan: iotwirelessDeviceProfileLoRaWanToTerraform(this._loRaWan),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(iotwirelessDeviceProfileTagsToTerraform)(this._tags),
        };
    }
}
exports.IotwirelessDeviceProfile = IotwirelessDeviceProfile;
// =================
// STATIC PROPERTIES
// =================
IotwirelessDeviceProfile.tfResourceType = "awscc_iotwireless_device_profile";
//# sourceMappingURL=data:application/json;base64,