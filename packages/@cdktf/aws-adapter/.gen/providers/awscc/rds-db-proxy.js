"use strict";
// https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsDbProxy = exports.rdsDbProxyTagsToTerraform = exports.rdsDbProxyAuthToTerraform = void 0;
const cdktf = require("cdktf");
function rdsDbProxyAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_scheme: cdktf.stringToTerraform(struct.authScheme),
        description: cdktf.stringToTerraform(struct.description),
        iam_auth: cdktf.stringToTerraform(struct.iamAuth),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        user_name: cdktf.stringToTerraform(struct.userName),
    };
}
exports.rdsDbProxyAuthToTerraform = rdsDbProxyAuthToTerraform;
function rdsDbProxyTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.rdsDbProxyTagsToTerraform = rdsDbProxyTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy.html awscc_rds_db_proxy}
*/
class RdsDbProxy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy.html awscc_rds_db_proxy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RdsDbProxyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_rds_db_proxy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._auth = config.auth;
        this._dbProxyName = config.dbProxyName;
        this._debugLogging = config.debugLogging;
        this._engineFamily = config.engineFamily;
        this._idleClientTimeout = config.idleClientTimeout;
        this._requireTls = config.requireTls;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._vpcSecurityGroupIds = config.vpcSecurityGroupIds;
        this._vpcSubnetIds = config.vpcSubnetIds;
    }
    get auth() {
        return this.interpolationForAttribute('auth');
    }
    set auth(value) {
        this._auth = value;
    }
    // Temporarily expose input value. Use with caution.
    get authInput() {
        return this._auth;
    }
    // db_proxy_arn - computed: true, optional: false, required: false
    get dbProxyArn() {
        return this.getStringAttribute('db_proxy_arn');
    }
    get dbProxyName() {
        return this.getStringAttribute('db_proxy_name');
    }
    set dbProxyName(value) {
        this._dbProxyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbProxyNameInput() {
        return this._dbProxyName;
    }
    get debugLogging() {
        return this.getBooleanAttribute('debug_logging');
    }
    set debugLogging(value) {
        this._debugLogging = value;
    }
    resetDebugLogging() {
        this._debugLogging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get debugLoggingInput() {
        return this._debugLogging;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get engineFamily() {
        return this.getStringAttribute('engine_family');
    }
    set engineFamily(value) {
        this._engineFamily = value;
    }
    // Temporarily expose input value. Use with caution.
    get engineFamilyInput() {
        return this._engineFamily;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get idleClientTimeout() {
        return this.getNumberAttribute('idle_client_timeout');
    }
    set idleClientTimeout(value) {
        this._idleClientTimeout = value;
    }
    resetIdleClientTimeout() {
        this._idleClientTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleClientTimeoutInput() {
        return this._idleClientTimeout;
    }
    get requireTls() {
        return this.getBooleanAttribute('require_tls');
    }
    set requireTls(value) {
        this._requireTls = value;
    }
    resetRequireTls() {
        this._requireTls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireTlsInput() {
        return this._requireTls;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    get vpcSecurityGroupIds() {
        return this.getListAttribute('vpc_security_group_ids');
    }
    set vpcSecurityGroupIds(value) {
        this._vpcSecurityGroupIds = value;
    }
    resetVpcSecurityGroupIds() {
        this._vpcSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSecurityGroupIdsInput() {
        return this._vpcSecurityGroupIds;
    }
    get vpcSubnetIds() {
        return this.getListAttribute('vpc_subnet_ids');
    }
    set vpcSubnetIds(value) {
        this._vpcSubnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSubnetIdsInput() {
        return this._vpcSubnetIds;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auth: cdktf.listMapper(rdsDbProxyAuthToTerraform)(this._auth),
            db_proxy_name: cdktf.stringToTerraform(this._dbProxyName),
            debug_logging: cdktf.booleanToTerraform(this._debugLogging),
            engine_family: cdktf.stringToTerraform(this._engineFamily),
            idle_client_timeout: cdktf.numberToTerraform(this._idleClientTimeout),
            require_tls: cdktf.booleanToTerraform(this._requireTls),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(rdsDbProxyTagsToTerraform)(this._tags),
            vpc_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._vpcSecurityGroupIds),
            vpc_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._vpcSubnetIds),
        };
    }
}
exports.RdsDbProxy = RdsDbProxy;
// =================
// STATIC PROPERTIES
// =================
RdsDbProxy.tfResourceType = "awscc_rds_db_proxy";
//# sourceMappingURL=data:application/json;base64,