"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2TransitGateway = exports.ec2TransitGatewayTagsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2TransitGatewayTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2TransitGatewayTagsToTerraform = ec2TransitGatewayTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway.html awscc_ec2_transit_gateway}
*/
class Ec2TransitGateway extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway.html awscc_ec2_transit_gateway} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2TransitGatewayConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_transit_gateway',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._amazonSideAsn = config.amazonSideAsn;
        this._associationDefaultRouteTableId = config.associationDefaultRouteTableId;
        this._autoAcceptSharedAttachments = config.autoAcceptSharedAttachments;
        this._defaultRouteTableAssociation = config.defaultRouteTableAssociation;
        this._defaultRouteTablePropagation = config.defaultRouteTablePropagation;
        this._description = config.description;
        this._dnsSupport = config.dnsSupport;
        this._multicastSupport = config.multicastSupport;
        this._propagationDefaultRouteTableId = config.propagationDefaultRouteTableId;
        this._tags = config.tags;
        this._transitGatewayCidrBlocks = config.transitGatewayCidrBlocks;
        this._vpnEcmpSupport = config.vpnEcmpSupport;
    }
    get amazonSideAsn() {
        return this.getNumberAttribute('amazon_side_asn');
    }
    set amazonSideAsn(value) {
        this._amazonSideAsn = value;
    }
    resetAmazonSideAsn() {
        this._amazonSideAsn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonSideAsnInput() {
        return this._amazonSideAsn;
    }
    get associationDefaultRouteTableId() {
        return this.getStringAttribute('association_default_route_table_id');
    }
    set associationDefaultRouteTableId(value) {
        this._associationDefaultRouteTableId = value;
    }
    resetAssociationDefaultRouteTableId() {
        this._associationDefaultRouteTableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associationDefaultRouteTableIdInput() {
        return this._associationDefaultRouteTableId;
    }
    get autoAcceptSharedAttachments() {
        return this.getStringAttribute('auto_accept_shared_attachments');
    }
    set autoAcceptSharedAttachments(value) {
        this._autoAcceptSharedAttachments = value;
    }
    resetAutoAcceptSharedAttachments() {
        this._autoAcceptSharedAttachments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoAcceptSharedAttachmentsInput() {
        return this._autoAcceptSharedAttachments;
    }
    get defaultRouteTableAssociation() {
        return this.getStringAttribute('default_route_table_association');
    }
    set defaultRouteTableAssociation(value) {
        this._defaultRouteTableAssociation = value;
    }
    resetDefaultRouteTableAssociation() {
        this._defaultRouteTableAssociation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteTableAssociationInput() {
        return this._defaultRouteTableAssociation;
    }
    get defaultRouteTablePropagation() {
        return this.getStringAttribute('default_route_table_propagation');
    }
    set defaultRouteTablePropagation(value) {
        this._defaultRouteTablePropagation = value;
    }
    resetDefaultRouteTablePropagation() {
        this._defaultRouteTablePropagation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteTablePropagationInput() {
        return this._defaultRouteTablePropagation;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get dnsSupport() {
        return this.getStringAttribute('dns_support');
    }
    set dnsSupport(value) {
        this._dnsSupport = value;
    }
    resetDnsSupport() {
        this._dnsSupport = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsSupportInput() {
        return this._dnsSupport;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get multicastSupport() {
        return this.getStringAttribute('multicast_support');
    }
    set multicastSupport(value) {
        this._multicastSupport = value;
    }
    resetMulticastSupport() {
        this._multicastSupport = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multicastSupportInput() {
        return this._multicastSupport;
    }
    get propagationDefaultRouteTableId() {
        return this.getStringAttribute('propagation_default_route_table_id');
    }
    set propagationDefaultRouteTableId(value) {
        this._propagationDefaultRouteTableId = value;
    }
    resetPropagationDefaultRouteTableId() {
        this._propagationDefaultRouteTableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propagationDefaultRouteTableIdInput() {
        return this._propagationDefaultRouteTableId;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get transitGatewayCidrBlocks() {
        return this.getListAttribute('transit_gateway_cidr_blocks');
    }
    set transitGatewayCidrBlocks(value) {
        this._transitGatewayCidrBlocks = value;
    }
    resetTransitGatewayCidrBlocks() {
        this._transitGatewayCidrBlocks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitGatewayCidrBlocksInput() {
        return this._transitGatewayCidrBlocks;
    }
    get vpnEcmpSupport() {
        return this.getStringAttribute('vpn_ecmp_support');
    }
    set vpnEcmpSupport(value) {
        this._vpnEcmpSupport = value;
    }
    resetVpnEcmpSupport() {
        this._vpnEcmpSupport = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpnEcmpSupportInput() {
        return this._vpnEcmpSupport;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            amazon_side_asn: cdktf.numberToTerraform(this._amazonSideAsn),
            association_default_route_table_id: cdktf.stringToTerraform(this._associationDefaultRouteTableId),
            auto_accept_shared_attachments: cdktf.stringToTerraform(this._autoAcceptSharedAttachments),
            default_route_table_association: cdktf.stringToTerraform(this._defaultRouteTableAssociation),
            default_route_table_propagation: cdktf.stringToTerraform(this._defaultRouteTablePropagation),
            description: cdktf.stringToTerraform(this._description),
            dns_support: cdktf.stringToTerraform(this._dnsSupport),
            multicast_support: cdktf.stringToTerraform(this._multicastSupport),
            propagation_default_route_table_id: cdktf.stringToTerraform(this._propagationDefaultRouteTableId),
            tags: cdktf.listMapper(ec2TransitGatewayTagsToTerraform)(this._tags),
            transit_gateway_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform)(this._transitGatewayCidrBlocks),
            vpn_ecmp_support: cdktf.stringToTerraform(this._vpnEcmpSupport),
        };
    }
}
exports.Ec2TransitGateway = Ec2TransitGateway;
// =================
// STATIC PROPERTIES
// =================
Ec2TransitGateway.tfResourceType = "awscc_ec2_transit_gateway";
//# sourceMappingURL=data:application/json;base64,