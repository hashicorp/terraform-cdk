"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_source.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaconnectFlowSourceA = exports.mediaconnectFlowSourceDecryptionAToTerraform = void 0;
const cdktf = require("cdktf");
function mediaconnectFlowSourceDecryptionAToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        device_id: cdktf.stringToTerraform(struct.deviceId),
        key_type: cdktf.stringToTerraform(struct.keyType),
        region: cdktf.stringToTerraform(struct.region),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediaconnectFlowSourceDecryptionAToTerraform = mediaconnectFlowSourceDecryptionAToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_source.html awscc_mediaconnect_flow_source}
*/
class MediaconnectFlowSourceA extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_source.html awscc_mediaconnect_flow_source} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediaconnectFlowSourceAConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediaconnect_flow_source',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._decryption = config.decryption;
        this._description = config.description;
        this._entitlementArn = config.entitlementArn;
        this._flowArn = config.flowArn;
        this._ingestPort = config.ingestPort;
        this._maxBitrate = config.maxBitrate;
        this._maxLatency = config.maxLatency;
        this._name = config.name;
        this._protocol = config.protocol;
        this._streamId = config.streamId;
        this._vpcInterfaceName = config.vpcInterfaceName;
        this._whitelistCidr = config.whitelistCidr;
    }
    get decryption() {
        return this.interpolationForAttribute('decryption');
    }
    set decryption(value) {
        this._decryption = value;
    }
    resetDecryption() {
        this._decryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decryptionInput() {
        return this._decryption;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get entitlementArn() {
        return this.getStringAttribute('entitlement_arn');
    }
    set entitlementArn(value) {
        this._entitlementArn = value;
    }
    resetEntitlementArn() {
        this._entitlementArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entitlementArnInput() {
        return this._entitlementArn;
    }
    get flowArn() {
        return this.getStringAttribute('flow_arn');
    }
    set flowArn(value) {
        this._flowArn = value;
    }
    resetFlowArn() {
        this._flowArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flowArnInput() {
        return this._flowArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // ingest_ip - computed: true, optional: false, required: false
    get ingestIp() {
        return this.getStringAttribute('ingest_ip');
    }
    get ingestPort() {
        return this.getNumberAttribute('ingest_port');
    }
    set ingestPort(value) {
        this._ingestPort = value;
    }
    resetIngestPort() {
        this._ingestPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingestPortInput() {
        return this._ingestPort;
    }
    get maxBitrate() {
        return this.getNumberAttribute('max_bitrate');
    }
    set maxBitrate(value) {
        this._maxBitrate = value;
    }
    resetMaxBitrate() {
        this._maxBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBitrateInput() {
        return this._maxBitrate;
    }
    get maxLatency() {
        return this.getNumberAttribute('max_latency');
    }
    set maxLatency(value) {
        this._maxLatency = value;
    }
    resetMaxLatency() {
        this._maxLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxLatencyInput() {
        return this._maxLatency;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    // source_arn - computed: true, optional: false, required: false
    get sourceArn() {
        return this.getStringAttribute('source_arn');
    }
    get streamId() {
        return this.getStringAttribute('stream_id');
    }
    set streamId(value) {
        this._streamId = value;
    }
    resetStreamId() {
        this._streamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamIdInput() {
        return this._streamId;
    }
    get vpcInterfaceName() {
        return this.getStringAttribute('vpc_interface_name');
    }
    set vpcInterfaceName(value) {
        this._vpcInterfaceName = value;
    }
    resetVpcInterfaceName() {
        this._vpcInterfaceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcInterfaceNameInput() {
        return this._vpcInterfaceName;
    }
    get whitelistCidr() {
        return this.getStringAttribute('whitelist_cidr');
    }
    set whitelistCidr(value) {
        this._whitelistCidr = value;
    }
    resetWhitelistCidr() {
        this._whitelistCidr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get whitelistCidrInput() {
        return this._whitelistCidr;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            decryption: mediaconnectFlowSourceDecryptionAToTerraform(this._decryption),
            description: cdktf.stringToTerraform(this._description),
            entitlement_arn: cdktf.stringToTerraform(this._entitlementArn),
            flow_arn: cdktf.stringToTerraform(this._flowArn),
            ingest_port: cdktf.numberToTerraform(this._ingestPort),
            max_bitrate: cdktf.numberToTerraform(this._maxBitrate),
            max_latency: cdktf.numberToTerraform(this._maxLatency),
            name: cdktf.stringToTerraform(this._name),
            protocol: cdktf.stringToTerraform(this._protocol),
            stream_id: cdktf.stringToTerraform(this._streamId),
            vpc_interface_name: cdktf.stringToTerraform(this._vpcInterfaceName),
            whitelist_cidr: cdktf.stringToTerraform(this._whitelistCidr),
        };
    }
}
exports.MediaconnectFlowSourceA = MediaconnectFlowSourceA;
// =================
// STATIC PROPERTIES
// =================
MediaconnectFlowSourceA.tfResourceType = "awscc_mediaconnect_flow_source";
//# sourceMappingURL=data:application/json;base64,