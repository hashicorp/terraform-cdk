"use strict";
// https://www.terraform.io/docs/providers/awscc/r/licensemanager_grant.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicensemanagerGrant = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/licensemanager_grant.html awscc_licensemanager_grant}
*/
class LicensemanagerGrant extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/licensemanager_grant.html awscc_licensemanager_grant} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LicensemanagerGrantConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_licensemanager_grant',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._allowedOperations = config.allowedOperations;
        this._grantName = config.grantName;
        this._homeRegion = config.homeRegion;
        this._licenseArn = config.licenseArn;
        this._principals = config.principals;
        this._status = config.status;
    }
    get allowedOperations() {
        return this.getListAttribute('allowed_operations');
    }
    set allowedOperations(value) {
        this._allowedOperations = value;
    }
    resetAllowedOperations() {
        this._allowedOperations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOperationsInput() {
        return this._allowedOperations;
    }
    // grant_arn - computed: true, optional: false, required: false
    get grantArn() {
        return this.getStringAttribute('grant_arn');
    }
    get grantName() {
        return this.getStringAttribute('grant_name');
    }
    set grantName(value) {
        this._grantName = value;
    }
    resetGrantName() {
        this._grantName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grantNameInput() {
        return this._grantName;
    }
    get homeRegion() {
        return this.getStringAttribute('home_region');
    }
    set homeRegion(value) {
        this._homeRegion = value;
    }
    resetHomeRegion() {
        this._homeRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get homeRegionInput() {
        return this._homeRegion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get licenseArn() {
        return this.getStringAttribute('license_arn');
    }
    set licenseArn(value) {
        this._licenseArn = value;
    }
    resetLicenseArn() {
        this._licenseArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseArnInput() {
        return this._licenseArn;
    }
    get principals() {
        return this.getListAttribute('principals');
    }
    set principals(value) {
        this._principals = value;
    }
    resetPrincipals() {
        this._principals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get principalsInput() {
        return this._principals;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allowed_operations: cdktf.listMapper(cdktf.stringToTerraform)(this._allowedOperations),
            grant_name: cdktf.stringToTerraform(this._grantName),
            home_region: cdktf.stringToTerraform(this._homeRegion),
            license_arn: cdktf.stringToTerraform(this._licenseArn),
            principals: cdktf.listMapper(cdktf.stringToTerraform)(this._principals),
            status: cdktf.stringToTerraform(this._status),
        };
    }
}
exports.LicensemanagerGrant = LicensemanagerGrant;
// =================
// STATIC PROPERTIES
// =================
LicensemanagerGrant.tfResourceType = "awscc_licensemanager_grant";
//# sourceMappingURL=data:application/json;base64,