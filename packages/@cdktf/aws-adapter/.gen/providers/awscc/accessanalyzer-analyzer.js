"use strict";
// https://www.terraform.io/docs/providers/awscc/r/accessanalyzer_analyzer.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessanalyzerAnalyzer = exports.accessanalyzerAnalyzerTagsToTerraform = exports.accessanalyzerAnalyzerArchiveRulesToTerraform = exports.accessanalyzerAnalyzerArchiveRulesFilterToTerraform = void 0;
const cdktf = require("cdktf");
function accessanalyzerAnalyzerArchiveRulesFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contains: cdktf.listMapper(cdktf.stringToTerraform)(struct.contains),
        eq: cdktf.listMapper(cdktf.stringToTerraform)(struct.eq),
        exists: cdktf.booleanToTerraform(struct.exists),
        neq: cdktf.listMapper(cdktf.stringToTerraform)(struct.neq),
        property: cdktf.stringToTerraform(struct.property),
    };
}
exports.accessanalyzerAnalyzerArchiveRulesFilterToTerraform = accessanalyzerAnalyzerArchiveRulesFilterToTerraform;
function accessanalyzerAnalyzerArchiveRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        filter: cdktf.listMapper(accessanalyzerAnalyzerArchiveRulesFilterToTerraform)(struct.filter),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
    };
}
exports.accessanalyzerAnalyzerArchiveRulesToTerraform = accessanalyzerAnalyzerArchiveRulesToTerraform;
function accessanalyzerAnalyzerTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.accessanalyzerAnalyzerTagsToTerraform = accessanalyzerAnalyzerTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/accessanalyzer_analyzer.html awscc_accessanalyzer_analyzer}
*/
class AccessanalyzerAnalyzer extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/accessanalyzer_analyzer.html awscc_accessanalyzer_analyzer} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AccessanalyzerAnalyzerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_accessanalyzer_analyzer',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._analyzerName = config.analyzerName;
        this._archiveRules = config.archiveRules;
        this._tags = config.tags;
        this._type = config.type;
    }
    get analyzerName() {
        return this.getStringAttribute('analyzer_name');
    }
    set analyzerName(value) {
        this._analyzerName = value;
    }
    resetAnalyzerName() {
        this._analyzerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get analyzerNameInput() {
        return this._analyzerName;
    }
    get archiveRules() {
        return this.interpolationForAttribute('archive_rules');
    }
    set archiveRules(value) {
        this._archiveRules = value;
    }
    resetArchiveRules() {
        this._archiveRules = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveRulesInput() {
        return this._archiveRules;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            analyzer_name: cdktf.stringToTerraform(this._analyzerName),
            archive_rules: cdktf.listMapper(accessanalyzerAnalyzerArchiveRulesToTerraform)(this._archiveRules),
            tags: cdktf.listMapper(accessanalyzerAnalyzerTagsToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.AccessanalyzerAnalyzer = AccessanalyzerAnalyzer;
// =================
// STATIC PROPERTIES
// =================
AccessanalyzerAnalyzer.tfResourceType = "awscc_accessanalyzer_analyzer";
//# sourceMappingURL=data:application/json;base64,