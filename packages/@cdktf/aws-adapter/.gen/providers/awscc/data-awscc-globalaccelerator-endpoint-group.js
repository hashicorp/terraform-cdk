"use strict";
// https://www.terraform.io/docs/providers/awscc/d/globalaccelerator_endpoint_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccGlobalacceleratorEndpointGroup = exports.dataAwsccGlobalacceleratorEndpointGroupPortOverridesToTerraform = exports.DataAwsccGlobalacceleratorEndpointGroupPortOverrides = exports.dataAwsccGlobalacceleratorEndpointGroupEndpointConfigurationsToTerraform = exports.DataAwsccGlobalacceleratorEndpointGroupEndpointConfigurations = void 0;
const cdktf = require("cdktf");
class DataAwsccGlobalacceleratorEndpointGroupEndpointConfigurations extends cdktf.ComplexComputedList {
    // client_ip_preservation_enabled - computed: true, optional: false, required: false
    get clientIpPreservationEnabled() {
        return this.getBooleanAttribute('client_ip_preservation_enabled');
    }
    // endpoint_id - computed: true, optional: false, required: false
    get endpointId() {
        return this.getStringAttribute('endpoint_id');
    }
    // weight - computed: true, optional: false, required: false
    get weight() {
        return this.getNumberAttribute('weight');
    }
}
exports.DataAwsccGlobalacceleratorEndpointGroupEndpointConfigurations = DataAwsccGlobalacceleratorEndpointGroupEndpointConfigurations;
function dataAwsccGlobalacceleratorEndpointGroupEndpointConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_ip_preservation_enabled: cdktf.booleanToTerraform(struct.clientIpPreservationEnabled),
        endpoint_id: cdktf.stringToTerraform(struct.endpointId),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.dataAwsccGlobalacceleratorEndpointGroupEndpointConfigurationsToTerraform = dataAwsccGlobalacceleratorEndpointGroupEndpointConfigurationsToTerraform;
class DataAwsccGlobalacceleratorEndpointGroupPortOverrides extends cdktf.ComplexComputedList {
    // endpoint_port - computed: true, optional: false, required: false
    get endpointPort() {
        return this.getNumberAttribute('endpoint_port');
    }
    // listener_port - computed: true, optional: false, required: false
    get listenerPort() {
        return this.getNumberAttribute('listener_port');
    }
}
exports.DataAwsccGlobalacceleratorEndpointGroupPortOverrides = DataAwsccGlobalacceleratorEndpointGroupPortOverrides;
function dataAwsccGlobalacceleratorEndpointGroupPortOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_port: cdktf.numberToTerraform(struct.endpointPort),
        listener_port: cdktf.numberToTerraform(struct.listenerPort),
    };
}
exports.dataAwsccGlobalacceleratorEndpointGroupPortOverridesToTerraform = dataAwsccGlobalacceleratorEndpointGroupPortOverridesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/globalaccelerator_endpoint_group.html awscc_globalaccelerator_endpoint_group}
*/
class DataAwsccGlobalacceleratorEndpointGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/globalaccelerator_endpoint_group.html awscc_globalaccelerator_endpoint_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccGlobalacceleratorEndpointGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_globalaccelerator_endpoint_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // endpoint_configurations - computed: true, optional: false, required: false
    get endpointConfigurations() {
        return this.interpolationForAttribute('endpoint_configurations');
    }
    // endpoint_group_arn - computed: true, optional: false, required: false
    get endpointGroupArn() {
        return this.getStringAttribute('endpoint_group_arn');
    }
    // endpoint_group_region - computed: true, optional: false, required: false
    get endpointGroupRegion() {
        return this.getStringAttribute('endpoint_group_region');
    }
    // health_check_interval_seconds - computed: true, optional: false, required: false
    get healthCheckIntervalSeconds() {
        return this.getNumberAttribute('health_check_interval_seconds');
    }
    // health_check_path - computed: true, optional: false, required: false
    get healthCheckPath() {
        return this.getStringAttribute('health_check_path');
    }
    // health_check_port - computed: true, optional: false, required: false
    get healthCheckPort() {
        return this.getNumberAttribute('health_check_port');
    }
    // health_check_protocol - computed: true, optional: false, required: false
    get healthCheckProtocol() {
        return this.getStringAttribute('health_check_protocol');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // listener_arn - computed: true, optional: false, required: false
    get listenerArn() {
        return this.getStringAttribute('listener_arn');
    }
    // port_overrides - computed: true, optional: false, required: false
    get portOverrides() {
        return this.interpolationForAttribute('port_overrides');
    }
    // threshold_count - computed: true, optional: false, required: false
    get thresholdCount() {
        return this.getNumberAttribute('threshold_count');
    }
    // traffic_dial_percentage - computed: true, optional: false, required: false
    get trafficDialPercentage() {
        return this.getNumberAttribute('traffic_dial_percentage');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccGlobalacceleratorEndpointGroup = DataAwsccGlobalacceleratorEndpointGroup;
// =================
// STATIC PROPERTIES
// =================
DataAwsccGlobalacceleratorEndpointGroup.tfResourceType = "awscc_globalaccelerator_endpoint_group";
//# sourceMappingURL=data:application/json;base64,