"use strict";
// https://www.terraform.io/docs/providers/awscc/d/cloudfront_origin_request_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccCloudfrontOriginRequestPolicy = exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigToTerraform = exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfig = exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigToTerraform = exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig = exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigToTerraform = exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig = exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigToTerraform = exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig = void 0;
const cdktf = require("cdktf");
class DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig extends cdktf.ComplexComputedList {
    // cookie_behavior - computed: true, optional: false, required: false
    get cookieBehavior() {
        return this.getStringAttribute('cookie_behavior');
    }
    // cookies - computed: true, optional: false, required: false
    get cookies() {
        return this.getListAttribute('cookies');
    }
}
exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig = DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig;
function dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cookie_behavior: cdktf.stringToTerraform(struct.cookieBehavior),
        cookies: cdktf.listMapper(cdktf.stringToTerraform)(struct.cookies),
    };
}
exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigToTerraform = dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigToTerraform;
class DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig extends cdktf.ComplexComputedList {
    // header_behavior - computed: true, optional: false, required: false
    get headerBehavior() {
        return this.getStringAttribute('header_behavior');
    }
    // headers - computed: true, optional: false, required: false
    get headers() {
        return this.getListAttribute('headers');
    }
}
exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig = DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig;
function dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        header_behavior: cdktf.stringToTerraform(struct.headerBehavior),
        headers: cdktf.listMapper(cdktf.stringToTerraform)(struct.headers),
    };
}
exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigToTerraform = dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigToTerraform;
class DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig extends cdktf.ComplexComputedList {
    // query_string_behavior - computed: true, optional: false, required: false
    get queryStringBehavior() {
        return this.getStringAttribute('query_string_behavior');
    }
    // query_strings - computed: true, optional: false, required: false
    get queryStrings() {
        return this.getListAttribute('query_strings');
    }
}
exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig = DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig;
function dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        query_string_behavior: cdktf.stringToTerraform(struct.queryStringBehavior),
        query_strings: cdktf.listMapper(cdktf.stringToTerraform)(struct.queryStrings),
    };
}
exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigToTerraform = dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigToTerraform;
class DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfig extends cdktf.ComplexComputedList {
    // comment - computed: true, optional: false, required: false
    get comment() {
        return this.getStringAttribute('comment');
    }
    // cookies_config - computed: true, optional: false, required: false
    get cookiesConfig() {
        return this.interpolationForAttribute('cookies_config');
    }
    // headers_config - computed: true, optional: false, required: false
    get headersConfig() {
        return this.interpolationForAttribute('headers_config');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // query_strings_config - computed: true, optional: false, required: false
    get queryStringsConfig() {
        return this.interpolationForAttribute('query_strings_config');
    }
}
exports.DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfig = DataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfig;
function dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comment: cdktf.stringToTerraform(struct.comment),
        cookies_config: dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigToTerraform(struct.cookiesConfig),
        headers_config: dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigToTerraform(struct.headersConfig),
        name: cdktf.stringToTerraform(struct.name),
        query_strings_config: dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigToTerraform(struct.queryStringsConfig),
    };
}
exports.dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigToTerraform = dataAwsccCloudfrontOriginRequestPolicyOriginRequestPolicyConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/cloudfront_origin_request_policy.html awscc_cloudfront_origin_request_policy}
*/
class DataAwsccCloudfrontOriginRequestPolicy extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/cloudfront_origin_request_policy.html awscc_cloudfront_origin_request_policy} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccCloudfrontOriginRequestPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_origin_request_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_modified_time - computed: true, optional: false, required: false
    get lastModifiedTime() {
        return this.getStringAttribute('last_modified_time');
    }
    // origin_request_policy_config - computed: true, optional: false, required: false
    get originRequestPolicyConfig() {
        return this.interpolationForAttribute('origin_request_policy_config');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccCloudfrontOriginRequestPolicy = DataAwsccCloudfrontOriginRequestPolicy;
// =================
// STATIC PROPERTIES
// =================
DataAwsccCloudfrontOriginRequestPolicy.tfResourceType = "awscc_cloudfront_origin_request_policy";
//# sourceMappingURL=data:application/json;base64,