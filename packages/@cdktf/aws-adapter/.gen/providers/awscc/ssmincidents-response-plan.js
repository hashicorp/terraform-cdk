"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssmincidents_response_plan.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmincidentsResponsePlan = exports.ssmincidentsResponsePlanTagsToTerraform = exports.ssmincidentsResponsePlanIncidentTemplateToTerraform = exports.ssmincidentsResponsePlanIncidentTemplateNotificationTargetsToTerraform = exports.ssmincidentsResponsePlanChatChannelToTerraform = exports.ssmincidentsResponsePlanActionsToTerraform = exports.ssmincidentsResponsePlanActionsSsmAutomationToTerraform = exports.ssmincidentsResponsePlanActionsSsmAutomationParametersToTerraform = void 0;
const cdktf = require("cdktf");
function ssmincidentsResponsePlanActionsSsmAutomationParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.ssmincidentsResponsePlanActionsSsmAutomationParametersToTerraform = ssmincidentsResponsePlanActionsSsmAutomationParametersToTerraform;
function ssmincidentsResponsePlanActionsSsmAutomationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_name: cdktf.stringToTerraform(struct.documentName),
        document_version: cdktf.stringToTerraform(struct.documentVersion),
        parameters: cdktf.listMapper(ssmincidentsResponsePlanActionsSsmAutomationParametersToTerraform)(struct.parameters),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        target_account: cdktf.stringToTerraform(struct.targetAccount),
    };
}
exports.ssmincidentsResponsePlanActionsSsmAutomationToTerraform = ssmincidentsResponsePlanActionsSsmAutomationToTerraform;
function ssmincidentsResponsePlanActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ssm_automation: ssmincidentsResponsePlanActionsSsmAutomationToTerraform(struct.ssmAutomation),
    };
}
exports.ssmincidentsResponsePlanActionsToTerraform = ssmincidentsResponsePlanActionsToTerraform;
function ssmincidentsResponsePlanChatChannelToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        chatbot_sns: cdktf.listMapper(cdktf.stringToTerraform)(struct.chatbotSns),
    };
}
exports.ssmincidentsResponsePlanChatChannelToTerraform = ssmincidentsResponsePlanChatChannelToTerraform;
function ssmincidentsResponsePlanIncidentTemplateNotificationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sns_topic_arn: cdktf.stringToTerraform(struct.snsTopicArn),
    };
}
exports.ssmincidentsResponsePlanIncidentTemplateNotificationTargetsToTerraform = ssmincidentsResponsePlanIncidentTemplateNotificationTargetsToTerraform;
function ssmincidentsResponsePlanIncidentTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dedupe_string: cdktf.stringToTerraform(struct.dedupeString),
        impact: cdktf.numberToTerraform(struct.impact),
        notification_targets: cdktf.listMapper(ssmincidentsResponsePlanIncidentTemplateNotificationTargetsToTerraform)(struct.notificationTargets),
        summary: cdktf.stringToTerraform(struct.summary),
        title: cdktf.stringToTerraform(struct.title),
    };
}
exports.ssmincidentsResponsePlanIncidentTemplateToTerraform = ssmincidentsResponsePlanIncidentTemplateToTerraform;
function ssmincidentsResponsePlanTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ssmincidentsResponsePlanTagsToTerraform = ssmincidentsResponsePlanTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssmincidents_response_plan.html awscc_ssmincidents_response_plan}
*/
class SsmincidentsResponsePlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssmincidents_response_plan.html awscc_ssmincidents_response_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmincidentsResponsePlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssmincidents_response_plan',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._actions = config.actions;
        this._chatChannel = config.chatChannel;
        this._displayName = config.displayName;
        this._engagements = config.engagements;
        this._incidentTemplate = config.incidentTemplate;
        this._name = config.name;
        this._tags = config.tags;
    }
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get chatChannel() {
        return this.interpolationForAttribute('chat_channel');
    }
    set chatChannel(value) {
        this._chatChannel = value;
    }
    resetChatChannel() {
        this._chatChannel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get chatChannelInput() {
        return this._chatChannel;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get engagements() {
        return this.getListAttribute('engagements');
    }
    set engagements(value) {
        this._engagements = value;
    }
    resetEngagements() {
        this._engagements = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engagementsInput() {
        return this._engagements;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get incidentTemplate() {
        return this.interpolationForAttribute('incident_template');
    }
    set incidentTemplate(value) {
        this._incidentTemplate = value;
    }
    // Temporarily expose input value. Use with caution.
    get incidentTemplateInput() {
        return this._incidentTemplate;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            actions: cdktf.listMapper(ssmincidentsResponsePlanActionsToTerraform)(this._actions),
            chat_channel: ssmincidentsResponsePlanChatChannelToTerraform(this._chatChannel),
            display_name: cdktf.stringToTerraform(this._displayName),
            engagements: cdktf.listMapper(cdktf.stringToTerraform)(this._engagements),
            incident_template: ssmincidentsResponsePlanIncidentTemplateToTerraform(this._incidentTemplate),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(ssmincidentsResponsePlanTagsToTerraform)(this._tags),
        };
    }
}
exports.SsmincidentsResponsePlan = SsmincidentsResponsePlan;
// =================
// STATIC PROPERTIES
// =================
SsmincidentsResponsePlan.tfResourceType = "awscc_ssmincidents_response_plan";
//# sourceMappingURL=data:application/json;base64,