"use strict";
// https://www.terraform.io/docs/providers/awscc/r/databrew_dataset.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabrewDataset = exports.databrewDatasetTagsToTerraform = exports.databrewDatasetPathOptionsToTerraform = exports.databrewDatasetPathOptionsParametersToTerraform = exports.databrewDatasetPathOptionsParametersDatasetParameterToTerraform = exports.databrewDatasetPathOptionsParametersDatasetParameterFilterToTerraform = exports.databrewDatasetPathOptionsParametersDatasetParameterFilterValuesMapToTerraform = exports.databrewDatasetPathOptionsParametersDatasetParameterDatetimeOptionsToTerraform = exports.databrewDatasetPathOptionsLastModifiedDateConditionToTerraform = exports.databrewDatasetPathOptionsLastModifiedDateConditionValuesMapToTerraform = exports.databrewDatasetPathOptionsFilesLimitToTerraform = exports.databrewDatasetInputToTerraform = exports.databrewDatasetInputS3InputDefinitionToTerraform = exports.databrewDatasetInputDatabaseInputDefinitionToTerraform = exports.databrewDatasetInputDatabaseInputDefinitionTempDirectoryToTerraform = exports.databrewDatasetInputDataCatalogInputDefinitionToTerraform = exports.databrewDatasetInputDataCatalogInputDefinitionTempDirectoryToTerraform = exports.databrewDatasetFormatOptionsToTerraform = exports.databrewDatasetFormatOptionsJsonToTerraform = exports.databrewDatasetFormatOptionsExcelToTerraform = exports.databrewDatasetFormatOptionsCsvToTerraform = void 0;
const cdktf = require("cdktf");
function databrewDatasetFormatOptionsCsvToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delimiter: cdktf.stringToTerraform(struct.delimiter),
        header_row: cdktf.booleanToTerraform(struct.headerRow),
    };
}
exports.databrewDatasetFormatOptionsCsvToTerraform = databrewDatasetFormatOptionsCsvToTerraform;
function databrewDatasetFormatOptionsExcelToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        header_row: cdktf.booleanToTerraform(struct.headerRow),
        sheet_indexes: cdktf.listMapper(cdktf.numberToTerraform)(struct.sheetIndexes),
        sheet_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.sheetNames),
    };
}
exports.databrewDatasetFormatOptionsExcelToTerraform = databrewDatasetFormatOptionsExcelToTerraform;
function databrewDatasetFormatOptionsJsonToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        multi_line: cdktf.booleanToTerraform(struct.multiLine),
    };
}
exports.databrewDatasetFormatOptionsJsonToTerraform = databrewDatasetFormatOptionsJsonToTerraform;
function databrewDatasetFormatOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        csv: databrewDatasetFormatOptionsCsvToTerraform(struct.csv),
        excel: databrewDatasetFormatOptionsExcelToTerraform(struct.excel),
        json: databrewDatasetFormatOptionsJsonToTerraform(struct.json),
    };
}
exports.databrewDatasetFormatOptionsToTerraform = databrewDatasetFormatOptionsToTerraform;
function databrewDatasetInputDataCatalogInputDefinitionTempDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.databrewDatasetInputDataCatalogInputDefinitionTempDirectoryToTerraform = databrewDatasetInputDataCatalogInputDefinitionTempDirectoryToTerraform;
function databrewDatasetInputDataCatalogInputDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        table_name: cdktf.stringToTerraform(struct.tableName),
        temp_directory: databrewDatasetInputDataCatalogInputDefinitionTempDirectoryToTerraform(struct.tempDirectory),
    };
}
exports.databrewDatasetInputDataCatalogInputDefinitionToTerraform = databrewDatasetInputDataCatalogInputDefinitionToTerraform;
function databrewDatasetInputDatabaseInputDefinitionTempDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.databrewDatasetInputDatabaseInputDefinitionTempDirectoryToTerraform = databrewDatasetInputDatabaseInputDefinitionTempDirectoryToTerraform;
function databrewDatasetInputDatabaseInputDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database_table_name: cdktf.stringToTerraform(struct.databaseTableName),
        glue_connection_name: cdktf.stringToTerraform(struct.glueConnectionName),
        temp_directory: databrewDatasetInputDatabaseInputDefinitionTempDirectoryToTerraform(struct.tempDirectory),
    };
}
exports.databrewDatasetInputDatabaseInputDefinitionToTerraform = databrewDatasetInputDatabaseInputDefinitionToTerraform;
function databrewDatasetInputS3InputDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.databrewDatasetInputS3InputDefinitionToTerraform = databrewDatasetInputS3InputDefinitionToTerraform;
function databrewDatasetInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_catalog_input_definition: databrewDatasetInputDataCatalogInputDefinitionToTerraform(struct.dataCatalogInputDefinition),
        database_input_definition: databrewDatasetInputDatabaseInputDefinitionToTerraform(struct.databaseInputDefinition),
        s3_input_definition: databrewDatasetInputS3InputDefinitionToTerraform(struct.s3InputDefinition),
    };
}
exports.databrewDatasetInputToTerraform = databrewDatasetInputToTerraform;
function databrewDatasetPathOptionsFilesLimitToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_files: cdktf.numberToTerraform(struct.maxFiles),
        order: cdktf.stringToTerraform(struct.order),
        ordered_by: cdktf.stringToTerraform(struct.orderedBy),
    };
}
exports.databrewDatasetPathOptionsFilesLimitToTerraform = databrewDatasetPathOptionsFilesLimitToTerraform;
function databrewDatasetPathOptionsLastModifiedDateConditionValuesMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        value_reference: cdktf.stringToTerraform(struct.valueReference),
    };
}
exports.databrewDatasetPathOptionsLastModifiedDateConditionValuesMapToTerraform = databrewDatasetPathOptionsLastModifiedDateConditionValuesMapToTerraform;
function databrewDatasetPathOptionsLastModifiedDateConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        values_map: cdktf.listMapper(databrewDatasetPathOptionsLastModifiedDateConditionValuesMapToTerraform)(struct.valuesMap),
    };
}
exports.databrewDatasetPathOptionsLastModifiedDateConditionToTerraform = databrewDatasetPathOptionsLastModifiedDateConditionToTerraform;
function databrewDatasetPathOptionsParametersDatasetParameterDatetimeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        format: cdktf.stringToTerraform(struct.format),
        locale_code: cdktf.stringToTerraform(struct.localeCode),
        timezone_offset: cdktf.stringToTerraform(struct.timezoneOffset),
    };
}
exports.databrewDatasetPathOptionsParametersDatasetParameterDatetimeOptionsToTerraform = databrewDatasetPathOptionsParametersDatasetParameterDatetimeOptionsToTerraform;
function databrewDatasetPathOptionsParametersDatasetParameterFilterValuesMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        value_reference: cdktf.stringToTerraform(struct.valueReference),
    };
}
exports.databrewDatasetPathOptionsParametersDatasetParameterFilterValuesMapToTerraform = databrewDatasetPathOptionsParametersDatasetParameterFilterValuesMapToTerraform;
function databrewDatasetPathOptionsParametersDatasetParameterFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        values_map: cdktf.listMapper(databrewDatasetPathOptionsParametersDatasetParameterFilterValuesMapToTerraform)(struct.valuesMap),
    };
}
exports.databrewDatasetPathOptionsParametersDatasetParameterFilterToTerraform = databrewDatasetPathOptionsParametersDatasetParameterFilterToTerraform;
function databrewDatasetPathOptionsParametersDatasetParameterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        create_column: cdktf.booleanToTerraform(struct.createColumn),
        datetime_options: databrewDatasetPathOptionsParametersDatasetParameterDatetimeOptionsToTerraform(struct.datetimeOptions),
        filter: databrewDatasetPathOptionsParametersDatasetParameterFilterToTerraform(struct.filter),
        name: cdktf.stringToTerraform(struct.name),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.databrewDatasetPathOptionsParametersDatasetParameterToTerraform = databrewDatasetPathOptionsParametersDatasetParameterToTerraform;
function databrewDatasetPathOptionsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dataset_parameter: databrewDatasetPathOptionsParametersDatasetParameterToTerraform(struct.datasetParameter),
        path_parameter_name: cdktf.stringToTerraform(struct.pathParameterName),
    };
}
exports.databrewDatasetPathOptionsParametersToTerraform = databrewDatasetPathOptionsParametersToTerraform;
function databrewDatasetPathOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        files_limit: databrewDatasetPathOptionsFilesLimitToTerraform(struct.filesLimit),
        last_modified_date_condition: databrewDatasetPathOptionsLastModifiedDateConditionToTerraform(struct.lastModifiedDateCondition),
        parameters: cdktf.listMapper(databrewDatasetPathOptionsParametersToTerraform)(struct.parameters),
    };
}
exports.databrewDatasetPathOptionsToTerraform = databrewDatasetPathOptionsToTerraform;
function databrewDatasetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.databrewDatasetTagsToTerraform = databrewDatasetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/databrew_dataset.html awscc_databrew_dataset}
*/
class DatabrewDataset extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/databrew_dataset.html awscc_databrew_dataset} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatabrewDatasetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_databrew_dataset',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._format = config.format;
        this._formatOptions = config.formatOptions;
        this._input = config.input;
        this._name = config.name;
        this._pathOptions = config.pathOptions;
        this._tags = config.tags;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    resetFormat() {
        this._format = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get formatOptions() {
        return this.interpolationForAttribute('format_options');
    }
    set formatOptions(value) {
        this._formatOptions = value;
    }
    resetFormatOptions() {
        this._formatOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formatOptionsInput() {
        return this._formatOptions;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get input() {
        return this.interpolationForAttribute('input');
    }
    set input(value) {
        this._input = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputInput() {
        return this._input;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get pathOptions() {
        return this.interpolationForAttribute('path_options');
    }
    set pathOptions(value) {
        this._pathOptions = value;
    }
    resetPathOptions() {
        this._pathOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathOptionsInput() {
        return this._pathOptions;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            format: cdktf.stringToTerraform(this._format),
            format_options: databrewDatasetFormatOptionsToTerraform(this._formatOptions),
            input: databrewDatasetInputToTerraform(this._input),
            name: cdktf.stringToTerraform(this._name),
            path_options: databrewDatasetPathOptionsToTerraform(this._pathOptions),
            tags: cdktf.listMapper(databrewDatasetTagsToTerraform)(this._tags),
        };
    }
}
exports.DatabrewDataset = DatabrewDataset;
// =================
// STATIC PROPERTIES
// =================
DatabrewDataset.tfResourceType = "awscc_databrew_dataset";
//# sourceMappingURL=data:application/json;base64,