"use strict";
// https://www.terraform.io/docs/providers/awscc/r/kinesis_stream.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisStream = exports.kinesisStreamTagsToTerraform = exports.kinesisStreamStreamEncryptionToTerraform = void 0;
const cdktf = require("cdktf");
function kinesisStreamStreamEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        key_id: cdktf.stringToTerraform(struct.keyId),
    };
}
exports.kinesisStreamStreamEncryptionToTerraform = kinesisStreamStreamEncryptionToTerraform;
function kinesisStreamTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kinesisStreamTagsToTerraform = kinesisStreamTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/kinesis_stream.html awscc_kinesis_stream}
*/
class KinesisStream extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/kinesis_stream.html awscc_kinesis_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KinesisStreamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_kinesis_stream',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._retentionPeriodHours = config.retentionPeriodHours;
        this._shardCount = config.shardCount;
        this._streamEncryption = config.streamEncryption;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get retentionPeriodHours() {
        return this.getNumberAttribute('retention_period_hours');
    }
    set retentionPeriodHours(value) {
        this._retentionPeriodHours = value;
    }
    resetRetentionPeriodHours() {
        this._retentionPeriodHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPeriodHoursInput() {
        return this._retentionPeriodHours;
    }
    get shardCount() {
        return this.getNumberAttribute('shard_count');
    }
    set shardCount(value) {
        this._shardCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get shardCountInput() {
        return this._shardCount;
    }
    get streamEncryption() {
        return this.interpolationForAttribute('stream_encryption');
    }
    set streamEncryption(value) {
        this._streamEncryption = value;
    }
    resetStreamEncryption() {
        this._streamEncryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamEncryptionInput() {
        return this._streamEncryption;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            retention_period_hours: cdktf.numberToTerraform(this._retentionPeriodHours),
            shard_count: cdktf.numberToTerraform(this._shardCount),
            stream_encryption: kinesisStreamStreamEncryptionToTerraform(this._streamEncryption),
            tags: cdktf.listMapper(kinesisStreamTagsToTerraform)(this._tags),
        };
    }
}
exports.KinesisStream = KinesisStream;
// =================
// STATIC PROPERTIES
// =================
KinesisStream.tfResourceType = "awscc_kinesis_stream";
//# sourceMappingURL=data:application/json;base64,