"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53resolver_resolver_query_logging_config_association.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53ResolverResolverQueryLoggingConfigAssociation = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53resolver_resolver_query_logging_config_association.html awscc_route53resolver_resolver_query_logging_config_association}
*/
class Route53ResolverResolverQueryLoggingConfigAssociation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53resolver_resolver_query_logging_config_association.html awscc_route53resolver_resolver_query_logging_config_association} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53ResolverResolverQueryLoggingConfigAssociationConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53resolver_resolver_query_logging_config_association',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._resolverQueryLogConfigId = config.resolverQueryLogConfigId;
        this._resourceId = config.resourceId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // error - computed: true, optional: false, required: false
    get error() {
        return this.getStringAttribute('error');
    }
    // error_message - computed: true, optional: false, required: false
    get errorMessage() {
        return this.getStringAttribute('error_message');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get resolverQueryLogConfigId() {
        return this.getStringAttribute('resolver_query_log_config_id');
    }
    set resolverQueryLogConfigId(value) {
        this._resolverQueryLogConfigId = value;
    }
    resetResolverQueryLogConfigId() {
        this._resolverQueryLogConfigId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resolverQueryLogConfigIdInput() {
        return this._resolverQueryLogConfigId;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    resetResourceId() {
        this._resourceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            resolver_query_log_config_id: cdktf.stringToTerraform(this._resolverQueryLogConfigId),
            resource_id: cdktf.stringToTerraform(this._resourceId),
        };
    }
}
exports.Route53ResolverResolverQueryLoggingConfigAssociation = Route53ResolverResolverQueryLoggingConfigAssociation;
// =================
// STATIC PROPERTIES
// =================
Route53ResolverResolverQueryLoggingConfigAssociation.tfResourceType = "awscc_route53resolver_resolver_query_logging_config_association";
//# sourceMappingURL=data:application/json;base64,