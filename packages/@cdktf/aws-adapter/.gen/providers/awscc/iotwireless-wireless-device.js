"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_device.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotwirelessWirelessDevice = exports.iotwirelessWirelessDeviceTagsToTerraform = exports.iotwirelessWirelessDeviceLoRaWanToTerraform = exports.iotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform = exports.iotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform = exports.iotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform = exports.iotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform = exports.iotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform = exports.iotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform = void 0;
const cdktf = require("cdktf");
function iotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_s_key: cdktf.stringToTerraform(struct.appSKey),
        nwk_s_key: cdktf.stringToTerraform(struct.nwkSKey),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform = iotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform;
function iotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dev_addr: cdktf.stringToTerraform(struct.devAddr),
        session_keys: iotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform(struct.sessionKeys),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform = iotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform;
function iotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_s_key: cdktf.stringToTerraform(struct.appSKey),
        f_nwk_s_int_key: cdktf.stringToTerraform(struct.fNwkSIntKey),
        nwk_s_enc_key: cdktf.stringToTerraform(struct.nwkSEncKey),
        s_nwk_s_int_key: cdktf.stringToTerraform(struct.sNwkSIntKey),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform = iotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform;
function iotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dev_addr: cdktf.stringToTerraform(struct.devAddr),
        session_keys: iotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform(struct.sessionKeys),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform = iotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform;
function iotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_eui: cdktf.stringToTerraform(struct.appEui),
        app_key: cdktf.stringToTerraform(struct.appKey),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform = iotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform;
function iotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_key: cdktf.stringToTerraform(struct.appKey),
        join_eui: cdktf.stringToTerraform(struct.joinEui),
        nwk_key: cdktf.stringToTerraform(struct.nwkKey),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform = iotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform;
function iotwirelessWirelessDeviceLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        abp_v10_x: iotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform(struct.abpV10X),
        abp_v11: iotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform(struct.abpV11),
        dev_eui: cdktf.stringToTerraform(struct.devEui),
        device_profile_id: cdktf.stringToTerraform(struct.deviceProfileId),
        otaa_v10_x: iotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform(struct.otaaV10X),
        otaa_v11: iotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform(struct.otaaV11),
        service_profile_id: cdktf.stringToTerraform(struct.serviceProfileId),
    };
}
exports.iotwirelessWirelessDeviceLoRaWanToTerraform = iotwirelessWirelessDeviceLoRaWanToTerraform;
function iotwirelessWirelessDeviceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotwirelessWirelessDeviceTagsToTerraform = iotwirelessWirelessDeviceTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_device.html awscc_iotwireless_wireless_device}
*/
class IotwirelessWirelessDevice extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_device.html awscc_iotwireless_wireless_device} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotwirelessWirelessDeviceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_wireless_device',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._destinationName = config.destinationName;
        this._lastUplinkReceivedAt = config.lastUplinkReceivedAt;
        this._loRaWan = config.loRaWan;
        this._name = config.name;
        this._tags = config.tags;
        this._thingArn = config.thingArn;
        this._type = config.type;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get destinationName() {
        return this.getStringAttribute('destination_name');
    }
    set destinationName(value) {
        this._destinationName = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationNameInput() {
        return this._destinationName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get lastUplinkReceivedAt() {
        return this.getStringAttribute('last_uplink_received_at');
    }
    set lastUplinkReceivedAt(value) {
        this._lastUplinkReceivedAt = value;
    }
    resetLastUplinkReceivedAt() {
        this._lastUplinkReceivedAt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lastUplinkReceivedAtInput() {
        return this._lastUplinkReceivedAt;
    }
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    set loRaWan(value) {
        this._loRaWan = value;
    }
    resetLoRaWan() {
        this._loRaWan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRaWanInput() {
        return this._loRaWan;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get thingArn() {
        return this.getStringAttribute('thing_arn');
    }
    set thingArn(value) {
        this._thingArn = value;
    }
    resetThingArn() {
        this._thingArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thingArnInput() {
        return this._thingArn;
    }
    // thing_name - computed: true, optional: false, required: false
    get thingName() {
        return this.getStringAttribute('thing_name');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            destination_name: cdktf.stringToTerraform(this._destinationName),
            last_uplink_received_at: cdktf.stringToTerraform(this._lastUplinkReceivedAt),
            lo_ra_wan: iotwirelessWirelessDeviceLoRaWanToTerraform(this._loRaWan),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(iotwirelessWirelessDeviceTagsToTerraform)(this._tags),
            thing_arn: cdktf.stringToTerraform(this._thingArn),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.IotwirelessWirelessDevice = IotwirelessWirelessDevice;
// =================
// STATIC PROPERTIES
// =================
IotwirelessWirelessDevice.tfResourceType = "awscc_iotwireless_wireless_device";
//# sourceMappingURL=data:application/json;base64,