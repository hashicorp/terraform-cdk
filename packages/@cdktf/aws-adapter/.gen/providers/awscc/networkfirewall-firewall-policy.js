"use strict";
// https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallFirewallPolicy = exports.networkfirewallFirewallPolicyTagsToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = exports.networkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform = void 0;
const cdktf = require("cdktf");
function networkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimensions: cdktf.listMapper(networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform)(struct.dimensions),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        publish_metric_action: networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform(struct.publishMetricAction),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_definition: networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform(struct.actionDefinition),
        action_name: cdktf.stringToTerraform(struct.actionName),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        priority: cdktf.numberToTerraform(struct.priority),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform = networkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform;
function networkfirewallFirewallPolicyFirewallPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        stateful_rule_group_references: cdktf.listMapper(networkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform)(struct.statefulRuleGroupReferences),
        stateless_custom_actions: cdktf.listMapper(networkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform)(struct.statelessCustomActions),
        stateless_default_actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.statelessDefaultActions),
        stateless_fragment_default_actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.statelessFragmentDefaultActions),
        stateless_rule_group_references: cdktf.listMapper(networkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform)(struct.statelessRuleGroupReferences),
    };
}
exports.networkfirewallFirewallPolicyFirewallPolicyToTerraform = networkfirewallFirewallPolicyFirewallPolicyToTerraform;
function networkfirewallFirewallPolicyTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkfirewallFirewallPolicyTagsToTerraform = networkfirewallFirewallPolicyTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall_policy.html awscc_networkfirewall_firewall_policy}
*/
class NetworkfirewallFirewallPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall_policy.html awscc_networkfirewall_firewall_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkfirewallFirewallPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_firewall_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._firewallPolicy = config.firewallPolicy;
        this._firewallPolicyName = config.firewallPolicyName;
        this._tags = config.tags;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get firewallPolicy() {
        return this.interpolationForAttribute('firewall_policy');
    }
    set firewallPolicy(value) {
        this._firewallPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyInput() {
        return this._firewallPolicy;
    }
    // firewall_policy_arn - computed: true, optional: false, required: false
    get firewallPolicyArn() {
        return this.getStringAttribute('firewall_policy_arn');
    }
    // firewall_policy_id - computed: true, optional: false, required: false
    get firewallPolicyId() {
        return this.getStringAttribute('firewall_policy_id');
    }
    get firewallPolicyName() {
        return this.getStringAttribute('firewall_policy_name');
    }
    set firewallPolicyName(value) {
        this._firewallPolicyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyNameInput() {
        return this._firewallPolicyName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            firewall_policy: networkfirewallFirewallPolicyFirewallPolicyToTerraform(this._firewallPolicy),
            firewall_policy_name: cdktf.stringToTerraform(this._firewallPolicyName),
            tags: cdktf.listMapper(networkfirewallFirewallPolicyTagsToTerraform)(this._tags),
        };
    }
}
exports.NetworkfirewallFirewallPolicy = NetworkfirewallFirewallPolicy;
// =================
// STATIC PROPERTIES
// =================
NetworkfirewallFirewallPolicy.tfResourceType = "awscc_networkfirewall_firewall_policy";
//# sourceMappingURL=data:application/json;base64,