"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_version.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationResourceVersion = exports.cloudformationResourceVersionLoggingConfigToTerraform = void 0;
const cdktf = require("cdktf");
function cloudformationResourceVersionLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_role_arn: cdktf.stringToTerraform(struct.logRoleArn),
    };
}
exports.cloudformationResourceVersionLoggingConfigToTerraform = cloudformationResourceVersionLoggingConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_version.html awscc_cloudformation_resource_version}
*/
class CloudformationResourceVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_resource_version.html awscc_cloudformation_resource_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationResourceVersionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_resource_version',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._executionRoleArn = config.executionRoleArn;
        this._loggingConfig = config.loggingConfig;
        this._schemaHandlerPackage = config.schemaHandlerPackage;
        this._typeName = config.typeName;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    resetExecutionRoleArn() {
        this._executionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // is_default_version - computed: true, optional: false, required: false
    get isDefaultVersion() {
        return this.getBooleanAttribute('is_default_version');
    }
    get loggingConfig() {
        return this.interpolationForAttribute('logging_config');
    }
    set loggingConfig(value) {
        this._loggingConfig = value;
    }
    resetLoggingConfig() {
        this._loggingConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig;
    }
    // provisioning_type - computed: true, optional: false, required: false
    get provisioningType() {
        return this.getStringAttribute('provisioning_type');
    }
    get schemaHandlerPackage() {
        return this.getStringAttribute('schema_handler_package');
    }
    set schemaHandlerPackage(value) {
        this._schemaHandlerPackage = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaHandlerPackageInput() {
        return this._schemaHandlerPackage;
    }
    // type_arn - computed: true, optional: false, required: false
    get typeArn() {
        return this.getStringAttribute('type_arn');
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    // version_id - computed: true, optional: false, required: false
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    // visibility - computed: true, optional: false, required: false
    get visibility() {
        return this.getStringAttribute('visibility');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            logging_config: cloudformationResourceVersionLoggingConfigToTerraform(this._loggingConfig),
            schema_handler_package: cdktf.stringToTerraform(this._schemaHandlerPackage),
            type_name: cdktf.stringToTerraform(this._typeName),
        };
    }
}
exports.CloudformationResourceVersion = CloudformationResourceVersion;
// =================
// STATIC PROPERTIES
// =================
CloudformationResourceVersion.tfResourceType = "awscc_cloudformation_resource_version";
//# sourceMappingURL=data:application/json;base64,