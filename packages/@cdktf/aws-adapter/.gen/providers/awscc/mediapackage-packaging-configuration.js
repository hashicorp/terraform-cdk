"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediapackagePackagingConfiguration = exports.mediapackagePackagingConfigurationTagsToTerraform = exports.mediapackagePackagingConfigurationMssPackageToTerraform = exports.mediapackagePackagingConfigurationMssPackageMssManifestsToTerraform = exports.mediapackagePackagingConfigurationMssPackageMssManifestsStreamSelectionToTerraform = exports.mediapackagePackagingConfigurationMssPackageEncryptionToTerraform = exports.mediapackagePackagingConfigurationMssPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackagePackagingConfigurationHlsPackageToTerraform = exports.mediapackagePackagingConfigurationHlsPackageHlsManifestsToTerraform = exports.mediapackagePackagingConfigurationHlsPackageHlsManifestsStreamSelectionToTerraform = exports.mediapackagePackagingConfigurationHlsPackageEncryptionToTerraform = exports.mediapackagePackagingConfigurationHlsPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackagePackagingConfigurationDashPackageToTerraform = exports.mediapackagePackagingConfigurationDashPackageEncryptionToTerraform = exports.mediapackagePackagingConfigurationDashPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackagePackagingConfigurationDashPackageDashManifestsToTerraform = exports.mediapackagePackagingConfigurationDashPackageDashManifestsStreamSelectionToTerraform = exports.mediapackagePackagingConfigurationCmafPackageToTerraform = exports.mediapackagePackagingConfigurationCmafPackageHlsManifestsToTerraform = exports.mediapackagePackagingConfigurationCmafPackageHlsManifestsStreamSelectionToTerraform = exports.mediapackagePackagingConfigurationCmafPackageEncryptionToTerraform = exports.mediapackagePackagingConfigurationCmafPackageEncryptionSpekeKeyProviderToTerraform = void 0;
const cdktf = require("cdktf");
function mediapackagePackagingConfigurationCmafPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackagePackagingConfigurationCmafPackageEncryptionSpekeKeyProviderToTerraform = mediapackagePackagingConfigurationCmafPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackagePackagingConfigurationCmafPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        speke_key_provider: mediapackagePackagingConfigurationCmafPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackagePackagingConfigurationCmafPackageEncryptionToTerraform = mediapackagePackagingConfigurationCmafPackageEncryptionToTerraform;
function mediapackagePackagingConfigurationCmafPackageHlsManifestsStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackagePackagingConfigurationCmafPackageHlsManifestsStreamSelectionToTerraform = mediapackagePackagingConfigurationCmafPackageHlsManifestsStreamSelectionToTerraform;
function mediapackagePackagingConfigurationCmafPackageHlsManifestsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ad_markers: cdktf.stringToTerraform(struct.adMarkers),
        include_iframe_only_stream: cdktf.booleanToTerraform(struct.includeIframeOnlyStream),
        manifest_name: cdktf.stringToTerraform(struct.manifestName),
        program_date_time_interval_seconds: cdktf.numberToTerraform(struct.programDateTimeIntervalSeconds),
        repeat_ext_x_key: cdktf.booleanToTerraform(struct.repeatExtXKey),
        stream_selection: mediapackagePackagingConfigurationCmafPackageHlsManifestsStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackagePackagingConfigurationCmafPackageHlsManifestsToTerraform = mediapackagePackagingConfigurationCmafPackageHlsManifestsToTerraform;
function mediapackagePackagingConfigurationCmafPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption: mediapackagePackagingConfigurationCmafPackageEncryptionToTerraform(struct.encryption),
        hls_manifests: cdktf.listMapper(mediapackagePackagingConfigurationCmafPackageHlsManifestsToTerraform)(struct.hlsManifests),
        include_encoder_configuration_in_segments: cdktf.booleanToTerraform(struct.includeEncoderConfigurationInSegments),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
    };
}
exports.mediapackagePackagingConfigurationCmafPackageToTerraform = mediapackagePackagingConfigurationCmafPackageToTerraform;
function mediapackagePackagingConfigurationDashPackageDashManifestsStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackagePackagingConfigurationDashPackageDashManifestsStreamSelectionToTerraform = mediapackagePackagingConfigurationDashPackageDashManifestsStreamSelectionToTerraform;
function mediapackagePackagingConfigurationDashPackageDashManifestsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        manifest_layout: cdktf.stringToTerraform(struct.manifestLayout),
        manifest_name: cdktf.stringToTerraform(struct.manifestName),
        min_buffer_time_seconds: cdktf.numberToTerraform(struct.minBufferTimeSeconds),
        profile: cdktf.stringToTerraform(struct.profile),
        stream_selection: mediapackagePackagingConfigurationDashPackageDashManifestsStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackagePackagingConfigurationDashPackageDashManifestsToTerraform = mediapackagePackagingConfigurationDashPackageDashManifestsToTerraform;
function mediapackagePackagingConfigurationDashPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackagePackagingConfigurationDashPackageEncryptionSpekeKeyProviderToTerraform = mediapackagePackagingConfigurationDashPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackagePackagingConfigurationDashPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        speke_key_provider: mediapackagePackagingConfigurationDashPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackagePackagingConfigurationDashPackageEncryptionToTerraform = mediapackagePackagingConfigurationDashPackageEncryptionToTerraform;
function mediapackagePackagingConfigurationDashPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dash_manifests: cdktf.listMapper(mediapackagePackagingConfigurationDashPackageDashManifestsToTerraform)(struct.dashManifests),
        encryption: mediapackagePackagingConfigurationDashPackageEncryptionToTerraform(struct.encryption),
        include_encoder_configuration_in_segments: cdktf.booleanToTerraform(struct.includeEncoderConfigurationInSegments),
        period_triggers: cdktf.listMapper(cdktf.stringToTerraform)(struct.periodTriggers),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        segment_template_format: cdktf.stringToTerraform(struct.segmentTemplateFormat),
    };
}
exports.mediapackagePackagingConfigurationDashPackageToTerraform = mediapackagePackagingConfigurationDashPackageToTerraform;
function mediapackagePackagingConfigurationHlsPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackagePackagingConfigurationHlsPackageEncryptionSpekeKeyProviderToTerraform = mediapackagePackagingConfigurationHlsPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackagePackagingConfigurationHlsPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        encryption_method: cdktf.stringToTerraform(struct.encryptionMethod),
        speke_key_provider: mediapackagePackagingConfigurationHlsPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackagePackagingConfigurationHlsPackageEncryptionToTerraform = mediapackagePackagingConfigurationHlsPackageEncryptionToTerraform;
function mediapackagePackagingConfigurationHlsPackageHlsManifestsStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackagePackagingConfigurationHlsPackageHlsManifestsStreamSelectionToTerraform = mediapackagePackagingConfigurationHlsPackageHlsManifestsStreamSelectionToTerraform;
function mediapackagePackagingConfigurationHlsPackageHlsManifestsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ad_markers: cdktf.stringToTerraform(struct.adMarkers),
        include_iframe_only_stream: cdktf.booleanToTerraform(struct.includeIframeOnlyStream),
        manifest_name: cdktf.stringToTerraform(struct.manifestName),
        program_date_time_interval_seconds: cdktf.numberToTerraform(struct.programDateTimeIntervalSeconds),
        repeat_ext_x_key: cdktf.booleanToTerraform(struct.repeatExtXKey),
        stream_selection: mediapackagePackagingConfigurationHlsPackageHlsManifestsStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackagePackagingConfigurationHlsPackageHlsManifestsToTerraform = mediapackagePackagingConfigurationHlsPackageHlsManifestsToTerraform;
function mediapackagePackagingConfigurationHlsPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption: mediapackagePackagingConfigurationHlsPackageEncryptionToTerraform(struct.encryption),
        hls_manifests: cdktf.listMapper(mediapackagePackagingConfigurationHlsPackageHlsManifestsToTerraform)(struct.hlsManifests),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        use_audio_rendition_group: cdktf.booleanToTerraform(struct.useAudioRenditionGroup),
    };
}
exports.mediapackagePackagingConfigurationHlsPackageToTerraform = mediapackagePackagingConfigurationHlsPackageToTerraform;
function mediapackagePackagingConfigurationMssPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackagePackagingConfigurationMssPackageEncryptionSpekeKeyProviderToTerraform = mediapackagePackagingConfigurationMssPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackagePackagingConfigurationMssPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        speke_key_provider: mediapackagePackagingConfigurationMssPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackagePackagingConfigurationMssPackageEncryptionToTerraform = mediapackagePackagingConfigurationMssPackageEncryptionToTerraform;
function mediapackagePackagingConfigurationMssPackageMssManifestsStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackagePackagingConfigurationMssPackageMssManifestsStreamSelectionToTerraform = mediapackagePackagingConfigurationMssPackageMssManifestsStreamSelectionToTerraform;
function mediapackagePackagingConfigurationMssPackageMssManifestsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        manifest_name: cdktf.stringToTerraform(struct.manifestName),
        stream_selection: mediapackagePackagingConfigurationMssPackageMssManifestsStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackagePackagingConfigurationMssPackageMssManifestsToTerraform = mediapackagePackagingConfigurationMssPackageMssManifestsToTerraform;
function mediapackagePackagingConfigurationMssPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption: mediapackagePackagingConfigurationMssPackageEncryptionToTerraform(struct.encryption),
        mss_manifests: cdktf.listMapper(mediapackagePackagingConfigurationMssPackageMssManifestsToTerraform)(struct.mssManifests),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
    };
}
exports.mediapackagePackagingConfigurationMssPackageToTerraform = mediapackagePackagingConfigurationMssPackageToTerraform;
function mediapackagePackagingConfigurationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.mediapackagePackagingConfigurationTagsToTerraform = mediapackagePackagingConfigurationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_configuration.html awscc_mediapackage_packaging_configuration}
*/
class MediapackagePackagingConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_configuration.html awscc_mediapackage_packaging_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediapackagePackagingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_packaging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cmafPackage = config.cmafPackage;
        this._dashPackage = config.dashPackage;
        this._hlsPackage = config.hlsPackage;
        this._id = config.id;
        this._mssPackage = config.mssPackage;
        this._packagingGroupId = config.packagingGroupId;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get cmafPackage() {
        return this.interpolationForAttribute('cmaf_package');
    }
    set cmafPackage(value) {
        this._cmafPackage = value;
    }
    resetCmafPackage() {
        this._cmafPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cmafPackageInput() {
        return this._cmafPackage;
    }
    get dashPackage() {
        return this.interpolationForAttribute('dash_package');
    }
    set dashPackage(value) {
        this._dashPackage = value;
    }
    resetDashPackage() {
        this._dashPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dashPackageInput() {
        return this._dashPackage;
    }
    get hlsPackage() {
        return this.interpolationForAttribute('hls_package');
    }
    set hlsPackage(value) {
        this._hlsPackage = value;
    }
    resetHlsPackage() {
        this._hlsPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsPackageInput() {
        return this._hlsPackage;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get mssPackage() {
        return this.interpolationForAttribute('mss_package');
    }
    set mssPackage(value) {
        this._mssPackage = value;
    }
    resetMssPackage() {
        this._mssPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mssPackageInput() {
        return this._mssPackage;
    }
    get packagingGroupId() {
        return this.getStringAttribute('packaging_group_id');
    }
    set packagingGroupId(value) {
        this._packagingGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get packagingGroupIdInput() {
        return this._packagingGroupId;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cmaf_package: mediapackagePackagingConfigurationCmafPackageToTerraform(this._cmafPackage),
            dash_package: mediapackagePackagingConfigurationDashPackageToTerraform(this._dashPackage),
            hls_package: mediapackagePackagingConfigurationHlsPackageToTerraform(this._hlsPackage),
            id: cdktf.stringToTerraform(this._id),
            mss_package: mediapackagePackagingConfigurationMssPackageToTerraform(this._mssPackage),
            packaging_group_id: cdktf.stringToTerraform(this._packagingGroupId),
            tags: cdktf.listMapper(mediapackagePackagingConfigurationTagsToTerraform)(this._tags),
        };
    }
}
exports.MediapackagePackagingConfiguration = MediapackagePackagingConfiguration;
// =================
// STATIC PROPERTIES
// =================
MediapackagePackagingConfiguration.tfResourceType = "awscc_mediapackage_packaging_configuration";
//# sourceMappingURL=data:application/json;base64,