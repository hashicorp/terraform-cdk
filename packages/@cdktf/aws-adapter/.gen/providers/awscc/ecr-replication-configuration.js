"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecr_replication_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcrReplicationConfiguration = exports.ecrReplicationConfigurationReplicationConfigurationToTerraform = exports.ecrReplicationConfigurationReplicationConfigurationRulesToTerraform = exports.ecrReplicationConfigurationReplicationConfigurationRulesDestinationsToTerraform = void 0;
const cdktf = require("cdktf");
function ecrReplicationConfigurationReplicationConfigurationRulesDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        region: cdktf.stringToTerraform(struct.region),
        registry_id: cdktf.stringToTerraform(struct.registryId),
    };
}
exports.ecrReplicationConfigurationReplicationConfigurationRulesDestinationsToTerraform = ecrReplicationConfigurationReplicationConfigurationRulesDestinationsToTerraform;
function ecrReplicationConfigurationReplicationConfigurationRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destinations: cdktf.listMapper(ecrReplicationConfigurationReplicationConfigurationRulesDestinationsToTerraform)(struct.destinations),
    };
}
exports.ecrReplicationConfigurationReplicationConfigurationRulesToTerraform = ecrReplicationConfigurationReplicationConfigurationRulesToTerraform;
function ecrReplicationConfigurationReplicationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        rules: cdktf.listMapper(ecrReplicationConfigurationReplicationConfigurationRulesToTerraform)(struct.rules),
    };
}
exports.ecrReplicationConfigurationReplicationConfigurationToTerraform = ecrReplicationConfigurationReplicationConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecr_replication_configuration.html awscc_ecr_replication_configuration}
*/
class EcrReplicationConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecr_replication_configuration.html awscc_ecr_replication_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcrReplicationConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecr_replication_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._replicationConfiguration = config.replicationConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // registry_id - computed: true, optional: false, required: false
    get registryId() {
        return this.getStringAttribute('registry_id');
    }
    get replicationConfiguration() {
        return this.interpolationForAttribute('replication_configuration');
    }
    set replicationConfiguration(value) {
        this._replicationConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationConfigurationInput() {
        return this._replicationConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            replication_configuration: ecrReplicationConfigurationReplicationConfigurationToTerraform(this._replicationConfiguration),
        };
    }
}
exports.EcrReplicationConfiguration = EcrReplicationConfiguration;
// =================
// STATIC PROPERTIES
// =================
EcrReplicationConfiguration.tfResourceType = "awscc_ecr_replication_configuration";
//# sourceMappingURL=data:application/json;base64,