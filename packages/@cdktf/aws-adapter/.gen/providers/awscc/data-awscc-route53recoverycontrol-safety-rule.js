"use strict";
// https://www.terraform.io/docs/providers/awscc/d/route53recoverycontrol_safety_rule.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccRoute53RecoverycontrolSafetyRule = exports.dataAwsccRoute53RecoverycontrolSafetyRuleRuleConfigToTerraform = exports.DataAwsccRoute53RecoverycontrolSafetyRuleRuleConfig = exports.dataAwsccRoute53RecoverycontrolSafetyRuleGatingRuleToTerraform = exports.DataAwsccRoute53RecoverycontrolSafetyRuleGatingRule = exports.dataAwsccRoute53RecoverycontrolSafetyRuleAssertionRuleToTerraform = exports.DataAwsccRoute53RecoverycontrolSafetyRuleAssertionRule = void 0;
const cdktf = require("cdktf");
class DataAwsccRoute53RecoverycontrolSafetyRuleAssertionRule extends cdktf.ComplexComputedList {
    // asserted_controls - computed: true, optional: false, required: false
    get assertedControls() {
        return this.getListAttribute('asserted_controls');
    }
    // wait_period_ms - computed: true, optional: false, required: false
    get waitPeriodMs() {
        return this.getNumberAttribute('wait_period_ms');
    }
}
exports.DataAwsccRoute53RecoverycontrolSafetyRuleAssertionRule = DataAwsccRoute53RecoverycontrolSafetyRuleAssertionRule;
function dataAwsccRoute53RecoverycontrolSafetyRuleAssertionRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asserted_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.assertedControls),
        wait_period_ms: cdktf.numberToTerraform(struct.waitPeriodMs),
    };
}
exports.dataAwsccRoute53RecoverycontrolSafetyRuleAssertionRuleToTerraform = dataAwsccRoute53RecoverycontrolSafetyRuleAssertionRuleToTerraform;
class DataAwsccRoute53RecoverycontrolSafetyRuleGatingRule extends cdktf.ComplexComputedList {
    // gating_controls - computed: true, optional: false, required: false
    get gatingControls() {
        return this.getListAttribute('gating_controls');
    }
    // target_controls - computed: true, optional: false, required: false
    get targetControls() {
        return this.getListAttribute('target_controls');
    }
    // wait_period_ms - computed: true, optional: false, required: false
    get waitPeriodMs() {
        return this.getNumberAttribute('wait_period_ms');
    }
}
exports.DataAwsccRoute53RecoverycontrolSafetyRuleGatingRule = DataAwsccRoute53RecoverycontrolSafetyRuleGatingRule;
function dataAwsccRoute53RecoverycontrolSafetyRuleGatingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        gating_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.gatingControls),
        target_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetControls),
        wait_period_ms: cdktf.numberToTerraform(struct.waitPeriodMs),
    };
}
exports.dataAwsccRoute53RecoverycontrolSafetyRuleGatingRuleToTerraform = dataAwsccRoute53RecoverycontrolSafetyRuleGatingRuleToTerraform;
class DataAwsccRoute53RecoverycontrolSafetyRuleRuleConfig extends cdktf.ComplexComputedList {
    // inverted - computed: true, optional: false, required: false
    get inverted() {
        return this.getBooleanAttribute('inverted');
    }
    // threshold - computed: true, optional: false, required: false
    get threshold() {
        return this.getNumberAttribute('threshold');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccRoute53RecoverycontrolSafetyRuleRuleConfig = DataAwsccRoute53RecoverycontrolSafetyRuleRuleConfig;
function dataAwsccRoute53RecoverycontrolSafetyRuleRuleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        inverted: cdktf.booleanToTerraform(struct.inverted),
        threshold: cdktf.numberToTerraform(struct.threshold),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccRoute53RecoverycontrolSafetyRuleRuleConfigToTerraform = dataAwsccRoute53RecoverycontrolSafetyRuleRuleConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/route53recoverycontrol_safety_rule.html awscc_route53recoverycontrol_safety_rule}
*/
class DataAwsccRoute53RecoverycontrolSafetyRule extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/route53recoverycontrol_safety_rule.html awscc_route53recoverycontrol_safety_rule} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccRoute53RecoverycontrolSafetyRuleConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoverycontrol_safety_rule',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // assertion_rule - computed: true, optional: false, required: false
    get assertionRule() {
        return this.interpolationForAttribute('assertion_rule');
    }
    // control_panel_arn - computed: true, optional: false, required: false
    get controlPanelArn() {
        return this.getStringAttribute('control_panel_arn');
    }
    // gating_rule - computed: true, optional: false, required: false
    get gatingRule() {
        return this.interpolationForAttribute('gating_rule');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // rule_config - computed: true, optional: false, required: false
    get ruleConfig() {
        return this.interpolationForAttribute('rule_config');
    }
    // safety_rule_arn - computed: true, optional: false, required: false
    get safetyRuleArn() {
        return this.getStringAttribute('safety_rule_arn');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccRoute53RecoverycontrolSafetyRule = DataAwsccRoute53RecoverycontrolSafetyRule;
// =================
// STATIC PROPERTIES
// =================
DataAwsccRoute53RecoverycontrolSafetyRule.tfResourceType = "awscc_route53recoverycontrol_safety_rule";
//# sourceMappingURL=data:application/json;base64,