"use strict";
// https://www.terraform.io/docs/providers/awscc/r/frauddetector_event_type.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrauddetectorEventType = exports.frauddetectorEventTypeTagsToTerraform = exports.frauddetectorEventTypeLabelsToTerraform = exports.frauddetectorEventTypeLabelsTagsToTerraform = exports.frauddetectorEventTypeEventVariablesToTerraform = exports.frauddetectorEventTypeEventVariablesTagsToTerraform = exports.frauddetectorEventTypeEntityTypesToTerraform = exports.frauddetectorEventTypeEntityTypesTagsToTerraform = void 0;
const cdktf = require("cdktf");
function frauddetectorEventTypeEntityTypesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorEventTypeEntityTypesTagsToTerraform = frauddetectorEventTypeEntityTypesTagsToTerraform;
function frauddetectorEventTypeEntityTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorEventTypeEntityTypesTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorEventTypeEntityTypesToTerraform = frauddetectorEventTypeEntityTypesToTerraform;
function frauddetectorEventTypeEventVariablesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorEventTypeEventVariablesTagsToTerraform = frauddetectorEventTypeEventVariablesTagsToTerraform;
function frauddetectorEventTypeEventVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        data_source: cdktf.stringToTerraform(struct.dataSource),
        data_type: cdktf.stringToTerraform(struct.dataType),
        default_value: cdktf.stringToTerraform(struct.defaultValue),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorEventTypeEventVariablesTagsToTerraform)(struct.tags),
        variable_type: cdktf.stringToTerraform(struct.variableType),
    };
}
exports.frauddetectorEventTypeEventVariablesToTerraform = frauddetectorEventTypeEventVariablesToTerraform;
function frauddetectorEventTypeLabelsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorEventTypeLabelsTagsToTerraform = frauddetectorEventTypeLabelsTagsToTerraform;
function frauddetectorEventTypeLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorEventTypeLabelsTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorEventTypeLabelsToTerraform = frauddetectorEventTypeLabelsToTerraform;
function frauddetectorEventTypeTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorEventTypeTagsToTerraform = frauddetectorEventTypeTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/frauddetector_event_type.html awscc_frauddetector_event_type}
*/
class FrauddetectorEventType extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/frauddetector_event_type.html awscc_frauddetector_event_type} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FrauddetectorEventTypeConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_frauddetector_event_type',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._entityTypes = config.entityTypes;
        this._eventVariables = config.eventVariables;
        this._labels = config.labels;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_time - computed: true, optional: false, required: false
    get createdTime() {
        return this.getStringAttribute('created_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get entityTypes() {
        return this.interpolationForAttribute('entity_types');
    }
    set entityTypes(value) {
        this._entityTypes = value;
    }
    // Temporarily expose input value. Use with caution.
    get entityTypesInput() {
        return this._entityTypes;
    }
    get eventVariables() {
        return this.interpolationForAttribute('event_variables');
    }
    set eventVariables(value) {
        this._eventVariables = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventVariablesInput() {
        return this._eventVariables;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get labels() {
        return this.interpolationForAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    // last_updated_time - computed: true, optional: false, required: false
    get lastUpdatedTime() {
        return this.getStringAttribute('last_updated_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            entity_types: cdktf.listMapper(frauddetectorEventTypeEntityTypesToTerraform)(this._entityTypes),
            event_variables: cdktf.listMapper(frauddetectorEventTypeEventVariablesToTerraform)(this._eventVariables),
            labels: cdktf.listMapper(frauddetectorEventTypeLabelsToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(frauddetectorEventTypeTagsToTerraform)(this._tags),
        };
    }
}
exports.FrauddetectorEventType = FrauddetectorEventType;
// =================
// STATIC PROPERTIES
// =================
FrauddetectorEventType.tfResourceType = "awscc_frauddetector_event_type";
//# sourceMappingURL=data:application/json;base64,