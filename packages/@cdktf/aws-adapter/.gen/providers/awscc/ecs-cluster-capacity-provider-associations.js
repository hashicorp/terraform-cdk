"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecs_cluster_capacity_provider_associations.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsClusterCapacityProviderAssociations = exports.ecsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform = void 0;
const cdktf = require("cdktf");
function ecsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        base: cdktf.numberToTerraform(struct.base),
        capacity_provider: cdktf.stringToTerraform(struct.capacityProvider),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.ecsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform = ecsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecs_cluster_capacity_provider_associations.html awscc_ecs_cluster_capacity_provider_associations}
*/
class EcsClusterCapacityProviderAssociations extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecs_cluster_capacity_provider_associations.html awscc_ecs_cluster_capacity_provider_associations} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsClusterCapacityProviderAssociationsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_cluster_capacity_provider_associations',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._capacityProviders = config.capacityProviders;
        this._cluster = config.cluster;
        this._defaultCapacityProviderStrategy = config.defaultCapacityProviderStrategy;
    }
    get capacityProviders() {
        return this.getListAttribute('capacity_providers');
    }
    set capacityProviders(value) {
        this._capacityProviders = value;
    }
    // Temporarily expose input value. Use with caution.
    get capacityProvidersInput() {
        return this._capacityProviders;
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    get defaultCapacityProviderStrategy() {
        return this.interpolationForAttribute('default_capacity_provider_strategy');
    }
    set defaultCapacityProviderStrategy(value) {
        this._defaultCapacityProviderStrategy = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultCapacityProviderStrategyInput() {
        return this._defaultCapacityProviderStrategy;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            capacity_providers: cdktf.listMapper(cdktf.stringToTerraform)(this._capacityProviders),
            cluster: cdktf.stringToTerraform(this._cluster),
            default_capacity_provider_strategy: cdktf.listMapper(ecsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform)(this._defaultCapacityProviderStrategy),
        };
    }
}
exports.EcsClusterCapacityProviderAssociations = EcsClusterCapacityProviderAssociations;
// =================
// STATIC PROPERTIES
// =================
EcsClusterCapacityProviderAssociations.tfResourceType = "awscc_ecs_cluster_capacity_provider_associations";
//# sourceMappingURL=data:application/json;base64,