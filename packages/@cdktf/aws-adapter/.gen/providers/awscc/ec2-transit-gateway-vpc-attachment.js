"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_vpc_attachment.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2TransitGatewayVpcAttachment = exports.ec2TransitGatewayVpcAttachmentTagsToTerraform = exports.ec2TransitGatewayVpcAttachmentOptionsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2TransitGatewayVpcAttachmentOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        appliance_mode_support: cdktf.stringToTerraform(struct.applianceModeSupport),
        dns_support: cdktf.stringToTerraform(struct.dnsSupport),
        ipv_6_support: cdktf.stringToTerraform(struct.ipv6Support),
    };
}
exports.ec2TransitGatewayVpcAttachmentOptionsToTerraform = ec2TransitGatewayVpcAttachmentOptionsToTerraform;
function ec2TransitGatewayVpcAttachmentTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2TransitGatewayVpcAttachmentTagsToTerraform = ec2TransitGatewayVpcAttachmentTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_vpc_attachment.html awscc_ec2_transit_gateway_vpc_attachment}
*/
class Ec2TransitGatewayVpcAttachment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_vpc_attachment.html awscc_ec2_transit_gateway_vpc_attachment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2TransitGatewayVpcAttachmentConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_transit_gateway_vpc_attachment',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._addSubnetIds = config.addSubnetIds;
        this._options = config.options;
        this._removeSubnetIds = config.removeSubnetIds;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._transitGatewayId = config.transitGatewayId;
        this._vpcId = config.vpcId;
    }
    get addSubnetIds() {
        return this.getListAttribute('add_subnet_ids');
    }
    set addSubnetIds(value) {
        this._addSubnetIds = value;
    }
    resetAddSubnetIds() {
        this._addSubnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addSubnetIdsInput() {
        return this._addSubnetIds;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get options() {
        return this.interpolationForAttribute('options');
    }
    set options(value) {
        this._options = value;
    }
    resetOptions() {
        this._options = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionsInput() {
        return this._options;
    }
    get removeSubnetIds() {
        return this.getListAttribute('remove_subnet_ids');
    }
    set removeSubnetIds(value) {
        this._removeSubnetIds = value;
    }
    resetRemoveSubnetIds() {
        this._removeSubnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get removeSubnetIdsInput() {
        return this._removeSubnetIds;
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    resetSubnetIds() {
        this._subnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get transitGatewayId() {
        return this.getStringAttribute('transit_gateway_id');
    }
    set transitGatewayId(value) {
        this._transitGatewayId = value;
    }
    resetTransitGatewayId() {
        this._transitGatewayId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitGatewayIdInput() {
        return this._transitGatewayId;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    resetVpcId() {
        this._vpcId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            add_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._addSubnetIds),
            options: ec2TransitGatewayVpcAttachmentOptionsToTerraform(this._options),
            remove_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._removeSubnetIds),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._subnetIds),
            tags: cdktf.listMapper(ec2TransitGatewayVpcAttachmentTagsToTerraform)(this._tags),
            transit_gateway_id: cdktf.stringToTerraform(this._transitGatewayId),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
        };
    }
}
exports.Ec2TransitGatewayVpcAttachment = Ec2TransitGatewayVpcAttachment;
// =================
// STATIC PROPERTIES
// =================
Ec2TransitGatewayVpcAttachment.tfResourceType = "awscc_ec2_transit_gateway_vpc_attachment";
//# sourceMappingURL=data:application/json;base64,