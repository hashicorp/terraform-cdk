"use strict";
// https://www.terraform.io/docs/providers/awscc/r/budgets_budgets_action.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.BudgetsBudgetsAction = exports.budgetsBudgetsActionSubscribersToTerraform = exports.budgetsBudgetsActionDefinitionToTerraform = exports.budgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform = exports.budgetsBudgetsActionDefinitionScpActionDefinitionToTerraform = exports.budgetsBudgetsActionDefinitionIamActionDefinitionToTerraform = exports.budgetsBudgetsActionActionThresholdToTerraform = void 0;
const cdktf = require("cdktf");
function budgetsBudgetsActionActionThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.budgetsBudgetsActionActionThresholdToTerraform = budgetsBudgetsActionActionThresholdToTerraform;
function budgetsBudgetsActionDefinitionIamActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.groups),
        policy_arn: cdktf.stringToTerraform(struct.policyArn),
        roles: cdktf.listMapper(cdktf.stringToTerraform)(struct.roles),
        users: cdktf.listMapper(cdktf.stringToTerraform)(struct.users),
    };
}
exports.budgetsBudgetsActionDefinitionIamActionDefinitionToTerraform = budgetsBudgetsActionDefinitionIamActionDefinitionToTerraform;
function budgetsBudgetsActionDefinitionScpActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        policy_id: cdktf.stringToTerraform(struct.policyId),
        target_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetIds),
    };
}
exports.budgetsBudgetsActionDefinitionScpActionDefinitionToTerraform = budgetsBudgetsActionDefinitionScpActionDefinitionToTerraform;
function budgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.instanceIds),
        region: cdktf.stringToTerraform(struct.region),
        subtype: cdktf.stringToTerraform(struct.subtype),
    };
}
exports.budgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform = budgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform;
function budgetsBudgetsActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        iam_action_definition: budgetsBudgetsActionDefinitionIamActionDefinitionToTerraform(struct.iamActionDefinition),
        scp_action_definition: budgetsBudgetsActionDefinitionScpActionDefinitionToTerraform(struct.scpActionDefinition),
        ssm_action_definition: budgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform(struct.ssmActionDefinition),
    };
}
exports.budgetsBudgetsActionDefinitionToTerraform = budgetsBudgetsActionDefinitionToTerraform;
function budgetsBudgetsActionSubscribersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: cdktf.stringToTerraform(struct.address),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.budgetsBudgetsActionSubscribersToTerraform = budgetsBudgetsActionSubscribersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/budgets_budgets_action.html awscc_budgets_budgets_action}
*/
class BudgetsBudgetsAction extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/budgets_budgets_action.html awscc_budgets_budgets_action} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BudgetsBudgetsActionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_budgets_budgets_action',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._actionThreshold = config.actionThreshold;
        this._actionType = config.actionType;
        this._approvalModel = config.approvalModel;
        this._budgetName = config.budgetName;
        this._definition = config.definition;
        this._executionRoleArn = config.executionRoleArn;
        this._notificationType = config.notificationType;
        this._subscribers = config.subscribers;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // action_id - computed: true, optional: false, required: false
    get actionId() {
        return this.getStringAttribute('action_id');
    }
    get actionThreshold() {
        return this.interpolationForAttribute('action_threshold');
    }
    set actionThreshold(value) {
        this._actionThreshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionThresholdInput() {
        return this._actionThreshold;
    }
    get actionType() {
        return this.getStringAttribute('action_type');
    }
    set actionType(value) {
        this._actionType = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionTypeInput() {
        return this._actionType;
    }
    get approvalModel() {
        return this.getStringAttribute('approval_model');
    }
    set approvalModel(value) {
        this._approvalModel = value;
    }
    resetApprovalModel() {
        this._approvalModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalModelInput() {
        return this._approvalModel;
    }
    get budgetName() {
        return this.getStringAttribute('budget_name');
    }
    set budgetName(value) {
        this._budgetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get budgetNameInput() {
        return this._budgetName;
    }
    get definition() {
        return this.interpolationForAttribute('definition');
    }
    set definition(value) {
        this._definition = value;
    }
    // Temporarily expose input value. Use with caution.
    get definitionInput() {
        return this._definition;
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get notificationType() {
        return this.getStringAttribute('notification_type');
    }
    set notificationType(value) {
        this._notificationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get notificationTypeInput() {
        return this._notificationType;
    }
    get subscribers() {
        return this.interpolationForAttribute('subscribers');
    }
    set subscribers(value) {
        this._subscribers = value;
    }
    resetSubscribers() {
        this._subscribers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subscribersInput() {
        return this._subscribers;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            action_threshold: budgetsBudgetsActionActionThresholdToTerraform(this._actionThreshold),
            action_type: cdktf.stringToTerraform(this._actionType),
            approval_model: cdktf.stringToTerraform(this._approvalModel),
            budget_name: cdktf.stringToTerraform(this._budgetName),
            definition: budgetsBudgetsActionDefinitionToTerraform(this._definition),
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            notification_type: cdktf.stringToTerraform(this._notificationType),
            subscribers: cdktf.listMapper(budgetsBudgetsActionSubscribersToTerraform)(this._subscribers),
        };
    }
}
exports.BudgetsBudgetsAction = BudgetsBudgetsAction;
// =================
// STATIC PROPERTIES
// =================
BudgetsBudgetsAction.tfResourceType = "awscc_budgets_budgets_action";
//# sourceMappingURL=data:application/json;base64,