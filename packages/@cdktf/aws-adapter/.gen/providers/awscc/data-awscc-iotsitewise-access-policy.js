"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotsitewise_access_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotsitewiseAccessPolicy = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResource = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProject = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortal = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentity = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUser = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUser = exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform = exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRole = void 0;
const cdktf = require("cdktf");
class DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRole extends cdktf.ComplexComputedList {
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRole = DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRole;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUser extends cdktf.ComplexComputedList {
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUser = DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUser;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUser extends cdktf.ComplexComputedList {
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUser = DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUser;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentity extends cdktf.ComplexComputedList {
    // iam_role - computed: true, optional: false, required: false
    get iamRole() {
        return this.interpolationForAttribute('iam_role');
    }
    // iam_user - computed: true, optional: false, required: false
    get iamUser() {
        return this.interpolationForAttribute('iam_user');
    }
    // user - computed: true, optional: false, required: false
    get user() {
        return this.interpolationForAttribute('user');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentity = DataAwsccIotsitewiseAccessPolicyAccessPolicyIdentity;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        iam_role: dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform(struct.iamRole),
        iam_user: dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform(struct.iamUser),
        user: dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform(struct.user),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyIdentityToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortal extends cdktf.ComplexComputedList {
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortal = DataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortal;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProject extends cdktf.ComplexComputedList {
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProject = DataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProject;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform;
class DataAwsccIotsitewiseAccessPolicyAccessPolicyResource extends cdktf.ComplexComputedList {
    // portal - computed: true, optional: false, required: false
    get portal() {
        return this.interpolationForAttribute('portal');
    }
    // project - computed: true, optional: false, required: false
    get project() {
        return this.interpolationForAttribute('project');
    }
}
exports.DataAwsccIotsitewiseAccessPolicyAccessPolicyResource = DataAwsccIotsitewiseAccessPolicyAccessPolicyResource;
function dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        portal: dataAwsccIotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform(struct.portal),
        project: dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform(struct.project),
    };
}
exports.dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceToTerraform = dataAwsccIotsitewiseAccessPolicyAccessPolicyResourceToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotsitewise_access_policy.html awscc_iotsitewise_access_policy}
*/
class DataAwsccIotsitewiseAccessPolicy extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotsitewise_access_policy.html awscc_iotsitewise_access_policy} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotsitewiseAccessPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_access_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // access_policy_arn - computed: true, optional: false, required: false
    get accessPolicyArn() {
        return this.getStringAttribute('access_policy_arn');
    }
    // access_policy_id - computed: true, optional: false, required: false
    get accessPolicyId() {
        return this.getStringAttribute('access_policy_id');
    }
    // access_policy_identity - computed: true, optional: false, required: false
    get accessPolicyIdentity() {
        return this.interpolationForAttribute('access_policy_identity');
    }
    // access_policy_permission - computed: true, optional: false, required: false
    get accessPolicyPermission() {
        return this.getStringAttribute('access_policy_permission');
    }
    // access_policy_resource - computed: true, optional: false, required: false
    get accessPolicyResource() {
        return this.interpolationForAttribute('access_policy_resource');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotsitewiseAccessPolicy = DataAwsccIotsitewiseAccessPolicy;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotsitewiseAccessPolicy.tfResourceType = "awscc_iotsitewise_access_policy";
//# sourceMappingURL=data:application/json;base64,