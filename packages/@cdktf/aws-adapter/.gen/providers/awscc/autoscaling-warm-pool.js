"use strict";
// https://www.terraform.io/docs/providers/awscc/r/autoscaling_warm_pool.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalingWarmPool = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/autoscaling_warm_pool.html awscc_autoscaling_warm_pool}
*/
class AutoscalingWarmPool extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/autoscaling_warm_pool.html awscc_autoscaling_warm_pool} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AutoscalingWarmPoolConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_autoscaling_warm_pool',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoScalingGroupName = config.autoScalingGroupName;
        this._maxGroupPreparedCapacity = config.maxGroupPreparedCapacity;
        this._minSize = config.minSize;
        this._poolState = config.poolState;
    }
    get autoScalingGroupName() {
        return this.getStringAttribute('auto_scaling_group_name');
    }
    set autoScalingGroupName(value) {
        this._autoScalingGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingGroupNameInput() {
        return this._autoScalingGroupName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get maxGroupPreparedCapacity() {
        return this.getNumberAttribute('max_group_prepared_capacity');
    }
    set maxGroupPreparedCapacity(value) {
        this._maxGroupPreparedCapacity = value;
    }
    resetMaxGroupPreparedCapacity() {
        this._maxGroupPreparedCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxGroupPreparedCapacityInput() {
        return this._maxGroupPreparedCapacity;
    }
    get minSize() {
        return this.getNumberAttribute('min_size');
    }
    set minSize(value) {
        this._minSize = value;
    }
    resetMinSize() {
        this._minSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minSizeInput() {
        return this._minSize;
    }
    get poolState() {
        return this.getStringAttribute('pool_state');
    }
    set poolState(value) {
        this._poolState = value;
    }
    resetPoolState() {
        this._poolState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get poolStateInput() {
        return this._poolState;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_scaling_group_name: cdktf.stringToTerraform(this._autoScalingGroupName),
            max_group_prepared_capacity: cdktf.numberToTerraform(this._maxGroupPreparedCapacity),
            min_size: cdktf.numberToTerraform(this._minSize),
            pool_state: cdktf.stringToTerraform(this._poolState),
        };
    }
}
exports.AutoscalingWarmPool = AutoscalingWarmPool;
// =================
// STATIC PROPERTIES
// =================
AutoscalingWarmPool.tfResourceType = "awscc_autoscaling_warm_pool";
//# sourceMappingURL=data:application/json;base64,