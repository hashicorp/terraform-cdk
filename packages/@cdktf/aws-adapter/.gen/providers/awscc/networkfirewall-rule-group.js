"use strict";
// https://www.terraform.io/docs/providers/awscc/r/networkfirewall_rule_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallRuleGroup = exports.networkfirewallRuleGroupTagsToTerraform = exports.networkfirewallRuleGroupRuleGroupToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesTcpFlagsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcesToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcePortsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationPortsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesRuleOptionsToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesHeaderToTerraform = exports.networkfirewallRuleGroupRuleGroupRulesSourceRulesSourceListToTerraform = exports.networkfirewallRuleGroupRuleGroupRuleVariablesToTerraform = exports.networkfirewallRuleGroupRuleGroupRuleVariablesPortSetsToTerraform = exports.networkfirewallRuleGroupRuleGroupRuleVariablesIpSetsToTerraform = void 0;
const cdktf = require("cdktf");
function networkfirewallRuleGroupRuleGroupRuleVariablesIpSetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        definition: cdktf.listMapper(cdktf.stringToTerraform)(struct.definition),
    };
}
exports.networkfirewallRuleGroupRuleGroupRuleVariablesIpSetsToTerraform = networkfirewallRuleGroupRuleGroupRuleVariablesIpSetsToTerraform;
function networkfirewallRuleGroupRuleGroupRuleVariablesPortSetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        definition: cdktf.listMapper(cdktf.stringToTerraform)(struct.definition),
    };
}
exports.networkfirewallRuleGroupRuleGroupRuleVariablesPortSetsToTerraform = networkfirewallRuleGroupRuleGroupRuleVariablesPortSetsToTerraform;
function networkfirewallRuleGroupRuleGroupRuleVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ip_sets: cdktf.hashMapper(cdktf.anyToTerraform)(struct.ipSets),
        port_sets: cdktf.hashMapper(cdktf.anyToTerraform)(struct.portSets),
    };
}
exports.networkfirewallRuleGroupRuleGroupRuleVariablesToTerraform = networkfirewallRuleGroupRuleGroupRuleVariablesToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceRulesSourceListToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        generated_rules_type: cdktf.stringToTerraform(struct.generatedRulesType),
        target_types: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetTypes),
        targets: cdktf.listMapper(cdktf.stringToTerraform)(struct.targets),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceRulesSourceListToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceRulesSourceListToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
        destination_port: cdktf.stringToTerraform(struct.destinationPort),
        direction: cdktf.stringToTerraform(struct.direction),
        protocol: cdktf.stringToTerraform(struct.protocol),
        source: cdktf.stringToTerraform(struct.source),
        source_port: cdktf.stringToTerraform(struct.sourcePort),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesHeaderToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesHeaderToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesRuleOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        keyword: cdktf.stringToTerraform(struct.keyword),
        settings: cdktf.listMapper(cdktf.stringToTerraform)(struct.settings),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesRuleOptionsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesRuleOptionsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        header: networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesHeaderToTerraform(struct.header),
        rule_options: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesRuleOptionsToTerraform)(struct.ruleOptions),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimensions: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform)(struct.dimensions),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        publish_metric_action: networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionPublishMetricActionToTerraform(struct.publishMetricAction),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_definition: networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsActionDefinitionToTerraform(struct.actionDefinition),
        action_name: cdktf.stringToTerraform(struct.actionName),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationPortsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationPortsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationPortsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address_definition: cdktf.stringToTerraform(struct.addressDefinition),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcePortsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcePortsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcePortsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address_definition: cdktf.stringToTerraform(struct.addressDefinition),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcesToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcesToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesTcpFlagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        flags: cdktf.listMapper(cdktf.stringToTerraform)(struct.flags),
        masks: cdktf.listMapper(cdktf.stringToTerraform)(struct.masks),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesTcpFlagsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesTcpFlagsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination_ports: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationPortsToTerraform)(struct.destinationPorts),
        destinations: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesDestinationsToTerraform)(struct.destinations),
        protocols: cdktf.listMapper(cdktf.numberToTerraform)(struct.protocols),
        source_ports: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcePortsToTerraform)(struct.sourcePorts),
        sources: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesSourcesToTerraform)(struct.sources),
        tcp_flags: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesTcpFlagsToTerraform)(struct.tcpFlags),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        match_attributes: networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionMatchAttributesToTerraform(struct.matchAttributes),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        priority: cdktf.numberToTerraform(struct.priority),
        rule_definition: networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesRuleDefinitionToTerraform(struct.ruleDefinition),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_actions: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionsToTerraform)(struct.customActions),
        stateless_rules: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRulesToTerraform)(struct.statelessRules),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsToTerraform;
function networkfirewallRuleGroupRuleGroupRulesSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        rules_source_list: networkfirewallRuleGroupRuleGroupRulesSourceRulesSourceListToTerraform(struct.rulesSourceList),
        rules_string: cdktf.stringToTerraform(struct.rulesString),
        stateful_rules: cdktf.listMapper(networkfirewallRuleGroupRuleGroupRulesSourceStatefulRulesToTerraform)(struct.statefulRules),
        stateless_rules_and_custom_actions: networkfirewallRuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsToTerraform(struct.statelessRulesAndCustomActions),
    };
}
exports.networkfirewallRuleGroupRuleGroupRulesSourceToTerraform = networkfirewallRuleGroupRuleGroupRulesSourceToTerraform;
function networkfirewallRuleGroupRuleGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        rule_variables: networkfirewallRuleGroupRuleGroupRuleVariablesToTerraform(struct.ruleVariables),
        rules_source: networkfirewallRuleGroupRuleGroupRulesSourceToTerraform(struct.rulesSource),
    };
}
exports.networkfirewallRuleGroupRuleGroupToTerraform = networkfirewallRuleGroupRuleGroupToTerraform;
function networkfirewallRuleGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkfirewallRuleGroupTagsToTerraform = networkfirewallRuleGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_rule_group.html awscc_networkfirewall_rule_group}
*/
class NetworkfirewallRuleGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_rule_group.html awscc_networkfirewall_rule_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkfirewallRuleGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_rule_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._capacity = config.capacity;
        this._description = config.description;
        this._ruleGroup = config.ruleGroup;
        this._ruleGroupName = config.ruleGroupName;
        this._tags = config.tags;
        this._type = config.type;
    }
    get capacity() {
        return this.getNumberAttribute('capacity');
    }
    set capacity(value) {
        this._capacity = value;
    }
    // Temporarily expose input value. Use with caution.
    get capacityInput() {
        return this._capacity;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get ruleGroup() {
        return this.interpolationForAttribute('rule_group');
    }
    set ruleGroup(value) {
        this._ruleGroup = value;
    }
    resetRuleGroup() {
        this._ruleGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleGroupInput() {
        return this._ruleGroup;
    }
    // rule_group_arn - computed: true, optional: false, required: false
    get ruleGroupArn() {
        return this.getStringAttribute('rule_group_arn');
    }
    // rule_group_id - computed: true, optional: false, required: false
    get ruleGroupId() {
        return this.getStringAttribute('rule_group_id');
    }
    get ruleGroupName() {
        return this.getStringAttribute('rule_group_name');
    }
    set ruleGroupName(value) {
        this._ruleGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleGroupNameInput() {
        return this._ruleGroupName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            capacity: cdktf.numberToTerraform(this._capacity),
            description: cdktf.stringToTerraform(this._description),
            rule_group: networkfirewallRuleGroupRuleGroupToTerraform(this._ruleGroup),
            rule_group_name: cdktf.stringToTerraform(this._ruleGroupName),
            tags: cdktf.listMapper(networkfirewallRuleGroupTagsToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.NetworkfirewallRuleGroup = NetworkfirewallRuleGroup;
// =================
// STATIC PROPERTIES
// =================
NetworkfirewallRuleGroup.tfResourceType = "awscc_networkfirewall_rule_group";
//# sourceMappingURL=data:application/json;base64,