"use strict";
// https://www.terraform.io/docs/providers/awscc/r/nimblestudio_launch_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NimblestudioLaunchProfile = exports.nimblestudioLaunchProfileStreamConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function nimblestudioLaunchProfileStreamConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clipboard_mode: cdktf.stringToTerraform(struct.clipboardMode),
        ec_2_instance_types: cdktf.listMapper(cdktf.stringToTerraform)(struct.ec2InstanceTypes),
        max_session_length_in_minutes: cdktf.numberToTerraform(struct.maxSessionLengthInMinutes),
        streaming_image_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.streamingImageIds),
    };
}
exports.nimblestudioLaunchProfileStreamConfigurationToTerraform = nimblestudioLaunchProfileStreamConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_launch_profile.html awscc_nimblestudio_launch_profile}
*/
class NimblestudioLaunchProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_launch_profile.html awscc_nimblestudio_launch_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NimblestudioLaunchProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_nimblestudio_launch_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._ec2SubnetIds = config.ec2SubnetIds;
        this._launchProfileProtocolVersions = config.launchProfileProtocolVersions;
        this._name = config.name;
        this._streamConfiguration = config.streamConfiguration;
        this._studioComponentIds = config.studioComponentIds;
        this._studioId = config.studioId;
        this._tags = config.tags;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get ec2SubnetIds() {
        return this.getListAttribute('ec_2_subnet_ids');
    }
    set ec2SubnetIds(value) {
        this._ec2SubnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get ec2SubnetIdsInput() {
        return this._ec2SubnetIds;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // launch_profile_id - computed: true, optional: false, required: false
    get launchProfileId() {
        return this.getStringAttribute('launch_profile_id');
    }
    get launchProfileProtocolVersions() {
        return this.getListAttribute('launch_profile_protocol_versions');
    }
    set launchProfileProtocolVersions(value) {
        this._launchProfileProtocolVersions = value;
    }
    // Temporarily expose input value. Use with caution.
    get launchProfileProtocolVersionsInput() {
        return this._launchProfileProtocolVersions;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get streamConfiguration() {
        return this.interpolationForAttribute('stream_configuration');
    }
    set streamConfiguration(value) {
        this._streamConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get streamConfigurationInput() {
        return this._streamConfiguration;
    }
    get studioComponentIds() {
        return this.getListAttribute('studio_component_ids');
    }
    set studioComponentIds(value) {
        this._studioComponentIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get studioComponentIdsInput() {
        return this._studioComponentIds;
    }
    get studioId() {
        return this.getStringAttribute('studio_id');
    }
    set studioId(value) {
        this._studioId = value;
    }
    // Temporarily expose input value. Use with caution.
    get studioIdInput() {
        return this._studioId;
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            ec_2_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._ec2SubnetIds),
            launch_profile_protocol_versions: cdktf.listMapper(cdktf.stringToTerraform)(this._launchProfileProtocolVersions),
            name: cdktf.stringToTerraform(this._name),
            stream_configuration: nimblestudioLaunchProfileStreamConfigurationToTerraform(this._streamConfiguration),
            studio_component_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._studioComponentIds),
            studio_id: cdktf.stringToTerraform(this._studioId),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.NimblestudioLaunchProfile = NimblestudioLaunchProfile;
// =================
// STATIC PROPERTIES
// =================
NimblestudioLaunchProfile.tfResourceType = "awscc_nimblestudio_launch_profile";
//# sourceMappingURL=data:application/json;base64,