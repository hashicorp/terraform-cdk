"use strict";
// https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3MultiRegionAccessPoint = exports.s3MultiRegionAccessPointRegionsToTerraform = exports.s3MultiRegionAccessPointPublicAccessBlockConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function s3MultiRegionAccessPointPublicAccessBlockConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_public_acls: cdktf.booleanToTerraform(struct.blockPublicAcls),
        block_public_policy: cdktf.booleanToTerraform(struct.blockPublicPolicy),
        ignore_public_acls: cdktf.booleanToTerraform(struct.ignorePublicAcls),
        restrict_public_buckets: cdktf.booleanToTerraform(struct.restrictPublicBuckets),
    };
}
exports.s3MultiRegionAccessPointPublicAccessBlockConfigurationToTerraform = s3MultiRegionAccessPointPublicAccessBlockConfigurationToTerraform;
function s3MultiRegionAccessPointRegionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
    };
}
exports.s3MultiRegionAccessPointRegionsToTerraform = s3MultiRegionAccessPointRegionsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point.html awscc_s3_multi_region_access_point}
*/
class S3MultiRegionAccessPoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/s3_multi_region_access_point.html awscc_s3_multi_region_access_point} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3MultiRegionAccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3_multi_region_access_point',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._publicAccessBlockConfiguration = config.publicAccessBlockConfiguration;
        this._regions = config.regions;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // alias - computed: true, optional: false, required: false
    get alias() {
        return this.getStringAttribute('alias');
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get publicAccessBlockConfiguration() {
        return this.interpolationForAttribute('public_access_block_configuration');
    }
    set publicAccessBlockConfiguration(value) {
        this._publicAccessBlockConfiguration = value;
    }
    resetPublicAccessBlockConfiguration() {
        this._publicAccessBlockConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicAccessBlockConfigurationInput() {
        return this._publicAccessBlockConfiguration;
    }
    get regions() {
        return this.interpolationForAttribute('regions');
    }
    set regions(value) {
        this._regions = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            public_access_block_configuration: s3MultiRegionAccessPointPublicAccessBlockConfigurationToTerraform(this._publicAccessBlockConfiguration),
            regions: cdktf.listMapper(s3MultiRegionAccessPointRegionsToTerraform)(this._regions),
        };
    }
}
exports.S3MultiRegionAccessPoint = S3MultiRegionAccessPoint;
// =================
// STATIC PROPERTIES
// =================
S3MultiRegionAccessPoint.tfResourceType = "awscc_s3_multi_region_access_point";
//# sourceMappingURL=data:application/json;base64,