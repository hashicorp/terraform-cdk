"use strict";
// https://www.terraform.io/docs/providers/awscc/d/networkfirewall_firewall_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccNetworkfirewallFirewallPolicy = exports.dataAwsccNetworkfirewallFirewallPolicyTagsToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyTags = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicy = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferences = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActions = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinition = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricAction = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensions = exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform = exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferences = void 0;
const cdktf = require("cdktf");
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferences extends cdktf.ComplexComputedList {
    // resource_arn - computed: true, optional: false, required: false
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferences = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferences;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensions extends cdktf.ComplexComputedList {
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensions = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensions;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricAction extends cdktf.ComplexComputedList {
    // dimensions - computed: true, optional: false, required: false
    get dimensions() {
        return this.interpolationForAttribute('dimensions');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricAction = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricAction;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimensions: cdktf.listMapper(dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionDimensionsToTerraform)(struct.dimensions),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinition extends cdktf.ComplexComputedList {
    // publish_metric_action - computed: true, optional: false, required: false
    get publishMetricAction() {
        return this.interpolationForAttribute('publish_metric_action');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinition = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinition;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        publish_metric_action: dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionPublishMetricActionToTerraform(struct.publishMetricAction),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActions extends cdktf.ComplexComputedList {
    // action_definition - computed: true, optional: false, required: false
    get actionDefinition() {
        return this.interpolationForAttribute('action_definition');
    }
    // action_name - computed: true, optional: false, required: false
    get actionName() {
        return this.getStringAttribute('action_name');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActions = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActions;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_definition: dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsActionDefinitionToTerraform(struct.actionDefinition),
        action_name: cdktf.stringToTerraform(struct.actionName),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferences extends cdktf.ComplexComputedList {
    // priority - computed: true, optional: false, required: false
    get priority() {
        return this.getNumberAttribute('priority');
    }
    // resource_arn - computed: true, optional: false, required: false
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferences = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferences;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        priority: cdktf.numberToTerraform(struct.priority),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyFirewallPolicy extends cdktf.ComplexComputedList {
    // stateful_rule_group_references - computed: true, optional: false, required: false
    get statefulRuleGroupReferences() {
        return this.interpolationForAttribute('stateful_rule_group_references');
    }
    // stateless_custom_actions - computed: true, optional: false, required: false
    get statelessCustomActions() {
        return this.interpolationForAttribute('stateless_custom_actions');
    }
    // stateless_default_actions - computed: true, optional: false, required: false
    get statelessDefaultActions() {
        return this.getListAttribute('stateless_default_actions');
    }
    // stateless_fragment_default_actions - computed: true, optional: false, required: false
    get statelessFragmentDefaultActions() {
        return this.getListAttribute('stateless_fragment_default_actions');
    }
    // stateless_rule_group_references - computed: true, optional: false, required: false
    get statelessRuleGroupReferences() {
        return this.interpolationForAttribute('stateless_rule_group_references');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyFirewallPolicy = DataAwsccNetworkfirewallFirewallPolicyFirewallPolicy;
function dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        stateful_rule_group_references: cdktf.listMapper(dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatefulRuleGroupReferencesToTerraform)(struct.statefulRuleGroupReferences),
        stateless_custom_actions: cdktf.listMapper(dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessCustomActionsToTerraform)(struct.statelessCustomActions),
        stateless_default_actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.statelessDefaultActions),
        stateless_fragment_default_actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.statelessFragmentDefaultActions),
        stateless_rule_group_references: cdktf.listMapper(dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyStatelessRuleGroupReferencesToTerraform)(struct.statelessRuleGroupReferences),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyToTerraform = dataAwsccNetworkfirewallFirewallPolicyFirewallPolicyToTerraform;
class DataAwsccNetworkfirewallFirewallPolicyTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicyTags = DataAwsccNetworkfirewallFirewallPolicyTags;
function dataAwsccNetworkfirewallFirewallPolicyTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccNetworkfirewallFirewallPolicyTagsToTerraform = dataAwsccNetworkfirewallFirewallPolicyTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/networkfirewall_firewall_policy.html awscc_networkfirewall_firewall_policy}
*/
class DataAwsccNetworkfirewallFirewallPolicy extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/networkfirewall_firewall_policy.html awscc_networkfirewall_firewall_policy} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccNetworkfirewallFirewallPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_firewall_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // firewall_policy - computed: true, optional: false, required: false
    get firewallPolicy() {
        return this.interpolationForAttribute('firewall_policy');
    }
    // firewall_policy_arn - computed: true, optional: false, required: false
    get firewallPolicyArn() {
        return this.getStringAttribute('firewall_policy_arn');
    }
    // firewall_policy_id - computed: true, optional: false, required: false
    get firewallPolicyId() {
        return this.getStringAttribute('firewall_policy_id');
    }
    // firewall_policy_name - computed: true, optional: false, required: false
    get firewallPolicyName() {
        return this.getStringAttribute('firewall_policy_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccNetworkfirewallFirewallPolicy = DataAwsccNetworkfirewallFirewallPolicy;
// =================
// STATIC PROPERTIES
// =================
DataAwsccNetworkfirewallFirewallPolicy.tfResourceType = "awscc_networkfirewall_firewall_policy";
//# sourceMappingURL=data:application/json;base64,