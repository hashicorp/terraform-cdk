"use strict";
// https://www.terraform.io/docs/providers/awscc/r/connect_quick_connect.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectQuickConnect = exports.connectQuickConnectTagsToTerraform = exports.connectQuickConnectQuickConnectConfigToTerraform = exports.connectQuickConnectQuickConnectConfigUserConfigToTerraform = exports.connectQuickConnectQuickConnectConfigQueueConfigToTerraform = exports.connectQuickConnectQuickConnectConfigPhoneConfigToTerraform = void 0;
const cdktf = require("cdktf");
function connectQuickConnectQuickConnectConfigPhoneConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.connectQuickConnectQuickConnectConfigPhoneConfigToTerraform = connectQuickConnectQuickConnectConfigPhoneConfigToTerraform;
function connectQuickConnectQuickConnectConfigQueueConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_flow_arn: cdktf.stringToTerraform(struct.contactFlowArn),
        queue_arn: cdktf.stringToTerraform(struct.queueArn),
    };
}
exports.connectQuickConnectQuickConnectConfigQueueConfigToTerraform = connectQuickConnectQuickConnectConfigQueueConfigToTerraform;
function connectQuickConnectQuickConnectConfigUserConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_flow_arn: cdktf.stringToTerraform(struct.contactFlowArn),
        user_arn: cdktf.stringToTerraform(struct.userArn),
    };
}
exports.connectQuickConnectQuickConnectConfigUserConfigToTerraform = connectQuickConnectQuickConnectConfigUserConfigToTerraform;
function connectQuickConnectQuickConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        phone_config: connectQuickConnectQuickConnectConfigPhoneConfigToTerraform(struct.phoneConfig),
        queue_config: connectQuickConnectQuickConnectConfigQueueConfigToTerraform(struct.queueConfig),
        quick_connect_type: cdktf.stringToTerraform(struct.quickConnectType),
        user_config: connectQuickConnectQuickConnectConfigUserConfigToTerraform(struct.userConfig),
    };
}
exports.connectQuickConnectQuickConnectConfigToTerraform = connectQuickConnectQuickConnectConfigToTerraform;
function connectQuickConnectTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.connectQuickConnectTagsToTerraform = connectQuickConnectTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/connect_quick_connect.html awscc_connect_quick_connect}
*/
class ConnectQuickConnect extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/connect_quick_connect.html awscc_connect_quick_connect} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConnectQuickConnectConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_connect_quick_connect',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._instanceArn = config.instanceArn;
        this._name = config.name;
        this._quickConnectConfig = config.quickConnectConfig;
        this._tags = config.tags;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceArn() {
        return this.getStringAttribute('instance_arn');
    }
    set instanceArn(value) {
        this._instanceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceArnInput() {
        return this._instanceArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // quick_connect_arn - computed: true, optional: false, required: false
    get quickConnectArn() {
        return this.getStringAttribute('quick_connect_arn');
    }
    get quickConnectConfig() {
        return this.interpolationForAttribute('quick_connect_config');
    }
    set quickConnectConfig(value) {
        this._quickConnectConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get quickConnectConfigInput() {
        return this._quickConnectConfig;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            instance_arn: cdktf.stringToTerraform(this._instanceArn),
            name: cdktf.stringToTerraform(this._name),
            quick_connect_config: connectQuickConnectQuickConnectConfigToTerraform(this._quickConnectConfig),
            tags: cdktf.listMapper(connectQuickConnectTagsToTerraform)(this._tags),
        };
    }
}
exports.ConnectQuickConnect = ConnectQuickConnect;
// =================
// STATIC PROPERTIES
// =================
ConnectQuickConnect.tfResourceType = "awscc_connect_quick_connect";
//# sourceMappingURL=data:application/json;base64,