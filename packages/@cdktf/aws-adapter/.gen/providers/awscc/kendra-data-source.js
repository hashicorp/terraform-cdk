"use strict";
// https://www.terraform.io/docs/providers/awscc/r/kendra_data_source.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraDataSource = exports.kendraDataSourceTagsToTerraform = exports.kendraDataSourceDataSourceConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationVpcConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationS3ConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersToTerraform = exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersOneDriveUserS3PathToTerraform = exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationVpcConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationSqlConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationConnectionConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationAclConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationVpcConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationSpaceFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationPageFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationBlogFieldMappingsToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationToTerraform = exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationAttachmentFieldMappingsToTerraform = void 0;
const cdktf = require("cdktf");
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationAttachmentFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationAttachmentFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationAttachmentFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attachment_field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationAttachmentFieldMappingsToTerraform)(struct.attachmentFieldMappings),
        crawl_attachments: cdktf.booleanToTerraform(struct.crawlAttachments),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationBlogFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationBlogFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationBlogFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        blog_field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationBlogFieldMappingsToTerraform)(struct.blogFieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationPageFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationPageFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationPageFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        page_field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationPageFieldMappingsToTerraform)(struct.pageFieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationSpaceFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationSpaceFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationSpaceFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        crawl_archived_spaces: cdktf.booleanToTerraform(struct.crawlArchivedSpaces),
        crawl_personal_spaces: cdktf.booleanToTerraform(struct.crawlPersonalSpaces),
        exclude_spaces: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeSpaces),
        include_spaces: cdktf.listMapper(cdktf.stringToTerraform)(struct.includeSpaces),
        space_field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationSpaceFieldMappingsToTerraform)(struct.spaceFieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationVpcConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationVpcConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationConfluenceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attachment_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationAttachmentConfigurationToTerraform(struct.attachmentConfiguration),
        blog_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationBlogConfigurationToTerraform(struct.blogConfiguration),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.exclusionPatterns),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPatterns),
        page_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationPageConfigurationToTerraform(struct.pageConfiguration),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        server_url: cdktf.stringToTerraform(struct.serverUrl),
        space_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationSpaceConfigurationToTerraform(struct.spaceConfiguration),
        version: cdktf.stringToTerraform(struct.version),
        vpc_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.kendraDataSourceDataSourceConfigurationConfluenceConfigurationToTerraform = kendraDataSourceDataSourceConfigurationConfluenceConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationAclConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allowed_groups_column_name: cdktf.stringToTerraform(struct.allowedGroupsColumnName),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationAclConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationAclConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        change_detecting_columns: cdktf.listMapper(cdktf.stringToTerraform)(struct.changeDetectingColumns),
        document_data_column_name: cdktf.stringToTerraform(struct.documentDataColumnName),
        document_id_column_name: cdktf.stringToTerraform(struct.documentIdColumnName),
        document_title_column_name: cdktf.stringToTerraform(struct.documentTitleColumnName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationConnectionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        database_host: cdktf.stringToTerraform(struct.databaseHost),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        database_port: cdktf.numberToTerraform(struct.databasePort),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationConnectionConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationConnectionConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationSqlConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        query_identifiers_enclosing_option: cdktf.stringToTerraform(struct.queryIdentifiersEnclosingOption),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationSqlConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationSqlConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationVpcConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationVpcConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationDatabaseConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        acl_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationAclConfigurationToTerraform(struct.aclConfiguration),
        column_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationColumnConfigurationToTerraform(struct.columnConfiguration),
        connection_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationConnectionConfigurationToTerraform(struct.connectionConfiguration),
        database_engine_type: cdktf.stringToTerraform(struct.databaseEngineType),
        sql_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationSqlConfigurationToTerraform(struct.sqlConfiguration),
        vpc_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.kendraDataSourceDataSourceConfigurationDatabaseConfigurationToTerraform = kendraDataSourceDataSourceConfigurationDatabaseConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        exclude_mime_types: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeMimeTypes),
        exclude_shared_drives: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeSharedDrives),
        exclude_user_accounts: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeUserAccounts),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.exclusionPatterns),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPatterns),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
    };
}
exports.kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationToTerraform = kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationOneDriveConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationOneDriveConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersOneDriveUserS3PathToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersOneDriveUserS3PathToTerraform = kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersOneDriveUserS3PathToTerraform;
function kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        one_drive_user_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.oneDriveUserList),
        one_drive_user_s3_path: kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersOneDriveUserS3PathToTerraform(struct.oneDriveUserS3Path),
    };
}
exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersToTerraform = kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersToTerraform;
function kendraDataSourceDataSourceConfigurationOneDriveConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_local_groups: cdktf.booleanToTerraform(struct.disableLocalGroups),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.exclusionPatterns),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationOneDriveConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPatterns),
        one_drive_users: kendraDataSourceDataSourceConfigurationOneDriveConfigurationOneDriveUsersToTerraform(struct.oneDriveUsers),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        tenant_domain: cdktf.stringToTerraform(struct.tenantDomain),
    };
}
exports.kendraDataSourceDataSourceConfigurationOneDriveConfigurationToTerraform = kendraDataSourceDataSourceConfigurationOneDriveConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key_path: cdktf.stringToTerraform(struct.keyPath),
    };
}
exports.kendraDataSourceDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform = kendraDataSourceDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_prefix: cdktf.stringToTerraform(struct.s3Prefix),
    };
}
exports.kendraDataSourceDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform = kendraDataSourceDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_control_list_configuration: kendraDataSourceDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform(struct.accessControlListConfiguration),
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        documents_metadata_configuration: kendraDataSourceDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform(struct.documentsMetadataConfiguration),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.exclusionPatterns),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPatterns),
        inclusion_prefixes: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPrefixes),
    };
}
exports.kendraDataSourceDataSourceConfigurationS3ConfigurationToTerraform = kendraDataSourceDataSourceConfigurationS3ConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        include_filter_types: cdktf.listMapper(cdktf.stringToTerraform)(struct.includeFilterTypes),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsFieldMappingsToTerraform)(struct.fieldMappings),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_knowledge_article_type_configurations: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationCustomKnowledgeArticleTypeConfigurationsToTerraform)(struct.customKnowledgeArticleTypeConfigurations),
        included_states: cdktf.listMapper(cdktf.stringToTerraform)(struct.includedStates),
        standard_knowledge_article_type_configuration: kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationStandardKnowledgeArticleTypeConfigurationToTerraform(struct.standardKnowledgeArticleTypeConfiguration),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsFieldMappingsToTerraform)(struct.fieldMappings),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsToTerraform;
function kendraDataSourceDataSourceConfigurationSalesforceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        chatter_feed_configuration: kendraDataSourceDataSourceConfigurationSalesforceConfigurationChatterFeedConfigurationToTerraform(struct.chatterFeedConfiguration),
        crawl_attachments: cdktf.booleanToTerraform(struct.crawlAttachments),
        exclude_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeAttachmentFilePatterns),
        include_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.includeAttachmentFilePatterns),
        knowledge_article_configuration: kendraDataSourceDataSourceConfigurationSalesforceConfigurationKnowledgeArticleConfigurationToTerraform(struct.knowledgeArticleConfiguration),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        server_url: cdktf.stringToTerraform(struct.serverUrl),
        standard_object_attachment_configuration: kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectAttachmentConfigurationToTerraform(struct.standardObjectAttachmentConfiguration),
        standard_object_configurations: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSalesforceConfigurationStandardObjectConfigurationsToTerraform)(struct.standardObjectConfigurations),
    };
}
exports.kendraDataSourceDataSourceConfigurationSalesforceConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSalesforceConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        crawl_attachments: cdktf.booleanToTerraform(struct.crawlAttachments),
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        exclude_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeAttachmentFilePatterns),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        include_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.includeAttachmentFilePatterns),
    };
}
exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationToTerraform = kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        crawl_attachments: cdktf.booleanToTerraform(struct.crawlAttachments),
        document_data_field_name: cdktf.stringToTerraform(struct.documentDataFieldName),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        exclude_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeAttachmentFilePatterns),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        include_attachment_file_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.includeAttachmentFilePatterns),
    };
}
exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationToTerraform = kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationServiceNowConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host_url: cdktf.stringToTerraform(struct.hostUrl),
        knowledge_article_configuration: kendraDataSourceDataSourceConfigurationServiceNowConfigurationKnowledgeArticleConfigurationToTerraform(struct.knowledgeArticleConfiguration),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        service_catalog_configuration: kendraDataSourceDataSourceConfigurationServiceNowConfigurationServiceCatalogConfigurationToTerraform(struct.serviceCatalogConfiguration),
        service_now_build_version: cdktf.stringToTerraform(struct.serviceNowBuildVersion),
    };
}
exports.kendraDataSourceDataSourceConfigurationServiceNowConfigurationToTerraform = kendraDataSourceDataSourceConfigurationServiceNowConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSharePointConfigurationFieldMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_source_field_name: cdktf.stringToTerraform(struct.dataSourceFieldName),
        date_field_format: cdktf.stringToTerraform(struct.dateFieldFormat),
        index_field_name: cdktf.stringToTerraform(struct.indexFieldName),
    };
}
exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationFieldMappingsToTerraform = kendraDataSourceDataSourceConfigurationSharePointConfigurationFieldMappingsToTerraform;
function kendraDataSourceDataSourceConfigurationSharePointConfigurationVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationVpcConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSharePointConfigurationVpcConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationSharePointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        crawl_attachments: cdktf.booleanToTerraform(struct.crawlAttachments),
        disable_local_groups: cdktf.booleanToTerraform(struct.disableLocalGroups),
        document_title_field_name: cdktf.stringToTerraform(struct.documentTitleFieldName),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.exclusionPatterns),
        field_mappings: cdktf.listMapper(kendraDataSourceDataSourceConfigurationSharePointConfigurationFieldMappingsToTerraform)(struct.fieldMappings),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform)(struct.inclusionPatterns),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        share_point_version: cdktf.stringToTerraform(struct.sharePointVersion),
        urls: cdktf.listMapper(cdktf.stringToTerraform)(struct.urls),
        use_change_log: cdktf.booleanToTerraform(struct.useChangeLog),
        vpc_configuration: kendraDataSourceDataSourceConfigurationSharePointConfigurationVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.kendraDataSourceDataSourceConfigurationSharePointConfigurationToTerraform = kendraDataSourceDataSourceConfigurationSharePointConfigurationToTerraform;
function kendraDataSourceDataSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        confluence_configuration: kendraDataSourceDataSourceConfigurationConfluenceConfigurationToTerraform(struct.confluenceConfiguration),
        database_configuration: kendraDataSourceDataSourceConfigurationDatabaseConfigurationToTerraform(struct.databaseConfiguration),
        google_drive_configuration: kendraDataSourceDataSourceConfigurationGoogleDriveConfigurationToTerraform(struct.googleDriveConfiguration),
        one_drive_configuration: kendraDataSourceDataSourceConfigurationOneDriveConfigurationToTerraform(struct.oneDriveConfiguration),
        s3_configuration: kendraDataSourceDataSourceConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        salesforce_configuration: kendraDataSourceDataSourceConfigurationSalesforceConfigurationToTerraform(struct.salesforceConfiguration),
        service_now_configuration: kendraDataSourceDataSourceConfigurationServiceNowConfigurationToTerraform(struct.serviceNowConfiguration),
        share_point_configuration: kendraDataSourceDataSourceConfigurationSharePointConfigurationToTerraform(struct.sharePointConfiguration),
    };
}
exports.kendraDataSourceDataSourceConfigurationToTerraform = kendraDataSourceDataSourceConfigurationToTerraform;
function kendraDataSourceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kendraDataSourceTagsToTerraform = kendraDataSourceTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/kendra_data_source.html awscc_kendra_data_source}
*/
class KendraDataSource extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/kendra_data_source.html awscc_kendra_data_source} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KendraDataSourceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_kendra_data_source',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._dataSourceConfiguration = config.dataSourceConfiguration;
        this._description = config.description;
        this._indexId = config.indexId;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._schedule = config.schedule;
        this._tags = config.tags;
        this._type = config.type;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get dataSourceConfiguration() {
        return this.interpolationForAttribute('data_source_configuration');
    }
    set dataSourceConfiguration(value) {
        this._dataSourceConfiguration = value;
    }
    resetDataSourceConfiguration() {
        this._dataSourceConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceConfigurationInput() {
        return this._dataSourceConfiguration;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get indexId() {
        return this.getStringAttribute('index_id');
    }
    set indexId(value) {
        this._indexId = value;
    }
    // Temporarily expose input value. Use with caution.
    get indexIdInput() {
        return this._indexId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get schedule() {
        return this.getStringAttribute('schedule');
    }
    set schedule(value) {
        this._schedule = value;
    }
    resetSchedule() {
        this._schedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            data_source_configuration: kendraDataSourceDataSourceConfigurationToTerraform(this._dataSourceConfiguration),
            description: cdktf.stringToTerraform(this._description),
            index_id: cdktf.stringToTerraform(this._indexId),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            schedule: cdktf.stringToTerraform(this._schedule),
            tags: cdktf.listMapper(kendraDataSourceTagsToTerraform)(this._tags),
            type: cdktf.stringToTerraform(this._type),
        };
    }
}
exports.KendraDataSource = KendraDataSource;
// =================
// STATIC PROPERTIES
// =================
KendraDataSource.tfResourceType = "awscc_kendra_data_source";
//# sourceMappingURL=data:application/json;base64,