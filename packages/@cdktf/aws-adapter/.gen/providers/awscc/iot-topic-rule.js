"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotEventsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotAnalyticsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionHttpToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionHttpHeadersToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionHttpAuthToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionHttpAuthSigv4ToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionFirehoseToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionElasticsearchToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDbToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2ToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2PutItemToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchMetricToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchLogsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchAlarmToTerraform = exports.iotTopicRuleTopicRulePayloadActionsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsTimestreamToTerraform = exports.iotTopicRuleTopicRulePayloadActionsTimestreamTimestampToTerraform = exports.iotTopicRuleTopicRulePayloadActionsTimestreamDimensionsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsStepFunctionsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsSqsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsSnsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsS3ToTerraform = exports.iotTopicRuleTopicRulePayloadActionsRepublishToTerraform = exports.iotTopicRuleTopicRulePayloadActionsLambdaToTerraform = exports.iotTopicRuleTopicRulePayloadActionsKinesisToTerraform = exports.iotTopicRuleTopicRulePayloadActionsKafkaToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotSiteWiseToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotEventsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsIotAnalyticsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsHttpToTerraform = exports.iotTopicRuleTopicRulePayloadActionsHttpHeadersToTerraform = exports.iotTopicRuleTopicRulePayloadActionsHttpAuthToTerraform = exports.iotTopicRuleTopicRulePayloadActionsHttpAuthSigv4ToTerraform = exports.iotTopicRuleTopicRulePayloadActionsFirehoseToTerraform = exports.iotTopicRuleTopicRulePayloadActionsElasticsearchToTerraform = exports.iotTopicRuleTopicRulePayloadActionsDynamoDbToTerraform = exports.iotTopicRuleTopicRulePayloadActionsDynamoDBv2ToTerraform = exports.iotTopicRuleTopicRulePayloadActionsDynamoDBv2PutItemToTerraform = exports.iotTopicRuleTopicRulePayloadActionsCloudwatchMetricToTerraform = exports.iotTopicRuleTopicRulePayloadActionsCloudwatchLogsToTerraform = exports.iotTopicRuleTopicRulePayloadActionsCloudwatchAlarmToTerraform = exports.iotTopicRuleTagsToTerraform = void 0;
exports.IotTopicRule = exports.iotTopicRuleTopicRulePayloadToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamTimestampToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamDimensionsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionStepFunctionsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionSqsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionSnsToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionS3ToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionRepublishToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionLambdaToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionKinesisToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionKafkaToTerraform = exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWiseToTerraform = void 0;
const cdktf = require("cdktf");
function iotTopicRuleTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTagsToTerraform = iotTopicRuleTagsToTerraform;
function iotTopicRuleTopicRulePayloadActionsCloudwatchAlarmToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_name: cdktf.stringToTerraform(struct.alarmName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        state_reason: cdktf.stringToTerraform(struct.stateReason),
        state_value: cdktf.stringToTerraform(struct.stateValue),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsCloudwatchAlarmToTerraform = iotTopicRuleTopicRulePayloadActionsCloudwatchAlarmToTerraform;
function iotTopicRuleTopicRulePayloadActionsCloudwatchLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsCloudwatchLogsToTerraform = iotTopicRuleTopicRulePayloadActionsCloudwatchLogsToTerraform;
function iotTopicRuleTopicRulePayloadActionsCloudwatchMetricToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        metric_name: cdktf.stringToTerraform(struct.metricName),
        metric_namespace: cdktf.stringToTerraform(struct.metricNamespace),
        metric_timestamp: cdktf.stringToTerraform(struct.metricTimestamp),
        metric_unit: cdktf.stringToTerraform(struct.metricUnit),
        metric_value: cdktf.stringToTerraform(struct.metricValue),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsCloudwatchMetricToTerraform = iotTopicRuleTopicRulePayloadActionsCloudwatchMetricToTerraform;
function iotTopicRuleTopicRulePayloadActionsDynamoDBv2PutItemToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsDynamoDBv2PutItemToTerraform = iotTopicRuleTopicRulePayloadActionsDynamoDBv2PutItemToTerraform;
function iotTopicRuleTopicRulePayloadActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        put_item: iotTopicRuleTopicRulePayloadActionsDynamoDBv2PutItemToTerraform(struct.putItem),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsDynamoDBv2ToTerraform = iotTopicRuleTopicRulePayloadActionsDynamoDBv2ToTerraform;
function iotTopicRuleTopicRulePayloadActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsDynamoDbToTerraform = iotTopicRuleTopicRulePayloadActionsDynamoDbToTerraform;
function iotTopicRuleTopicRulePayloadActionsElasticsearchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
        id: cdktf.stringToTerraform(struct.id),
        index: cdktf.stringToTerraform(struct.index),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsElasticsearchToTerraform = iotTopicRuleTopicRulePayloadActionsElasticsearchToTerraform;
function iotTopicRuleTopicRulePayloadActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsFirehoseToTerraform = iotTopicRuleTopicRulePayloadActionsFirehoseToTerraform;
function iotTopicRuleTopicRulePayloadActionsHttpAuthSigv4ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        signing_region: cdktf.stringToTerraform(struct.signingRegion),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsHttpAuthSigv4ToTerraform = iotTopicRuleTopicRulePayloadActionsHttpAuthSigv4ToTerraform;
function iotTopicRuleTopicRulePayloadActionsHttpAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sigv_4: iotTopicRuleTopicRulePayloadActionsHttpAuthSigv4ToTerraform(struct.sigv4),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsHttpAuthToTerraform = iotTopicRuleTopicRulePayloadActionsHttpAuthToTerraform;
function iotTopicRuleTopicRulePayloadActionsHttpHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsHttpHeadersToTerraform = iotTopicRuleTopicRulePayloadActionsHttpHeadersToTerraform;
function iotTopicRuleTopicRulePayloadActionsHttpToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth: iotTopicRuleTopicRulePayloadActionsHttpAuthToTerraform(struct.auth),
        confirmation_url: cdktf.stringToTerraform(struct.confirmationUrl),
        headers: cdktf.listMapper(iotTopicRuleTopicRulePayloadActionsHttpHeadersToTerraform)(struct.headers),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsHttpToTerraform = iotTopicRuleTopicRulePayloadActionsHttpToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        channel_name: cdktf.stringToTerraform(struct.channelName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotAnalyticsToTerraform = iotTopicRuleTopicRulePayloadActionsIotAnalyticsToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        input_name: cdktf.stringToTerraform(struct.inputName),
        message_id: cdktf.stringToTerraform(struct.messageId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotEventsToTerraform = iotTopicRuleTopicRulePayloadActionsIotEventsToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform = iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform = iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform(struct.timestamp),
        value: iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform = iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_values: cdktf.listMapper(iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform)(struct.propertyValues),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesToTerraform = iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesToTerraform;
function iotTopicRuleTopicRulePayloadActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        put_asset_property_value_entries: cdktf.listMapper(iotTopicRuleTopicRulePayloadActionsIotSiteWisePutAssetPropertyValueEntriesToTerraform)(struct.putAssetPropertyValueEntries),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsIotSiteWiseToTerraform = iotTopicRuleTopicRulePayloadActionsIotSiteWiseToTerraform;
function iotTopicRuleTopicRulePayloadActionsKafkaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_properties: cdktf.hashMapper(cdktf.anyToTerraform)(struct.clientProperties),
        destination_arn: cdktf.stringToTerraform(struct.destinationArn),
        key: cdktf.stringToTerraform(struct.key),
        partition: cdktf.stringToTerraform(struct.partition),
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsKafkaToTerraform = iotTopicRuleTopicRulePayloadActionsKafkaToTerraform;
function iotTopicRuleTopicRulePayloadActionsKinesisToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        partition_key: cdktf.stringToTerraform(struct.partitionKey),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        stream_name: cdktf.stringToTerraform(struct.streamName),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsKinesisToTerraform = iotTopicRuleTopicRulePayloadActionsKinesisToTerraform;
function iotTopicRuleTopicRulePayloadActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsLambdaToTerraform = iotTopicRuleTopicRulePayloadActionsLambdaToTerraform;
function iotTopicRuleTopicRulePayloadActionsRepublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        qos: cdktf.numberToTerraform(struct.qos),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsRepublishToTerraform = iotTopicRuleTopicRulePayloadActionsRepublishToTerraform;
function iotTopicRuleTopicRulePayloadActionsS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
        key: cdktf.stringToTerraform(struct.key),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsS3ToTerraform = iotTopicRuleTopicRulePayloadActionsS3ToTerraform;
function iotTopicRuleTopicRulePayloadActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        message_format: cdktf.stringToTerraform(struct.messageFormat),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsSnsToTerraform = iotTopicRuleTopicRulePayloadActionsSnsToTerraform;
function iotTopicRuleTopicRulePayloadActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsSqsToTerraform = iotTopicRuleTopicRulePayloadActionsSqsToTerraform;
function iotTopicRuleTopicRulePayloadActionsStepFunctionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_name_prefix: cdktf.stringToTerraform(struct.executionNamePrefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        state_machine_name: cdktf.stringToTerraform(struct.stateMachineName),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsStepFunctionsToTerraform = iotTopicRuleTopicRulePayloadActionsStepFunctionsToTerraform;
function iotTopicRuleTopicRulePayloadActionsTimestreamDimensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsTimestreamDimensionsToTerraform = iotTopicRuleTopicRulePayloadActionsTimestreamDimensionsToTerraform;
function iotTopicRuleTopicRulePayloadActionsTimestreamTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsTimestreamTimestampToTerraform = iotTopicRuleTopicRulePayloadActionsTimestreamTimestampToTerraform;
function iotTopicRuleTopicRulePayloadActionsTimestreamToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        dimensions: cdktf.listMapper(iotTopicRuleTopicRulePayloadActionsTimestreamDimensionsToTerraform)(struct.dimensions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        timestamp: iotTopicRuleTopicRulePayloadActionsTimestreamTimestampToTerraform(struct.timestamp),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsTimestreamToTerraform = iotTopicRuleTopicRulePayloadActionsTimestreamToTerraform;
function iotTopicRuleTopicRulePayloadActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_alarm: iotTopicRuleTopicRulePayloadActionsCloudwatchAlarmToTerraform(struct.cloudwatchAlarm),
        cloudwatch_logs: iotTopicRuleTopicRulePayloadActionsCloudwatchLogsToTerraform(struct.cloudwatchLogs),
        cloudwatch_metric: iotTopicRuleTopicRulePayloadActionsCloudwatchMetricToTerraform(struct.cloudwatchMetric),
        dynamo_d_bv_2: iotTopicRuleTopicRulePayloadActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: iotTopicRuleTopicRulePayloadActionsDynamoDbToTerraform(struct.dynamoDb),
        elasticsearch: iotTopicRuleTopicRulePayloadActionsElasticsearchToTerraform(struct.elasticsearch),
        firehose: iotTopicRuleTopicRulePayloadActionsFirehoseToTerraform(struct.firehose),
        http: iotTopicRuleTopicRulePayloadActionsHttpToTerraform(struct.http),
        iot_analytics: iotTopicRuleTopicRulePayloadActionsIotAnalyticsToTerraform(struct.iotAnalytics),
        iot_events: iotTopicRuleTopicRulePayloadActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: iotTopicRuleTopicRulePayloadActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        kafka: iotTopicRuleTopicRulePayloadActionsKafkaToTerraform(struct.kafka),
        kinesis: iotTopicRuleTopicRulePayloadActionsKinesisToTerraform(struct.kinesis),
        lambda: iotTopicRuleTopicRulePayloadActionsLambdaToTerraform(struct.lambda),
        republish: iotTopicRuleTopicRulePayloadActionsRepublishToTerraform(struct.republish),
        s3: iotTopicRuleTopicRulePayloadActionsS3ToTerraform(struct.s3),
        sns: iotTopicRuleTopicRulePayloadActionsSnsToTerraform(struct.sns),
        sqs: iotTopicRuleTopicRulePayloadActionsSqsToTerraform(struct.sqs),
        step_functions: iotTopicRuleTopicRulePayloadActionsStepFunctionsToTerraform(struct.stepFunctions),
        timestream: iotTopicRuleTopicRulePayloadActionsTimestreamToTerraform(struct.timestream),
    };
}
exports.iotTopicRuleTopicRulePayloadActionsToTerraform = iotTopicRuleTopicRulePayloadActionsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionCloudwatchAlarmToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_name: cdktf.stringToTerraform(struct.alarmName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        state_reason: cdktf.stringToTerraform(struct.stateReason),
        state_value: cdktf.stringToTerraform(struct.stateValue),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchAlarmToTerraform = iotTopicRuleTopicRulePayloadErrorActionCloudwatchAlarmToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionCloudwatchLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchLogsToTerraform = iotTopicRuleTopicRulePayloadErrorActionCloudwatchLogsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionCloudwatchMetricToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        metric_name: cdktf.stringToTerraform(struct.metricName),
        metric_namespace: cdktf.stringToTerraform(struct.metricNamespace),
        metric_timestamp: cdktf.stringToTerraform(struct.metricTimestamp),
        metric_unit: cdktf.stringToTerraform(struct.metricUnit),
        metric_value: cdktf.stringToTerraform(struct.metricValue),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionCloudwatchMetricToTerraform = iotTopicRuleTopicRulePayloadErrorActionCloudwatchMetricToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2PutItemToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2PutItemToTerraform = iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2PutItemToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        put_item: iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2PutItemToTerraform(struct.putItem),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2ToTerraform = iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2ToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionDynamoDbToTerraform = iotTopicRuleTopicRulePayloadErrorActionDynamoDbToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionElasticsearchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
        id: cdktf.stringToTerraform(struct.id),
        index: cdktf.stringToTerraform(struct.index),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionElasticsearchToTerraform = iotTopicRuleTopicRulePayloadErrorActionElasticsearchToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionFirehoseToTerraform = iotTopicRuleTopicRulePayloadErrorActionFirehoseToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionHttpAuthSigv4ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        signing_region: cdktf.stringToTerraform(struct.signingRegion),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionHttpAuthSigv4ToTerraform = iotTopicRuleTopicRulePayloadErrorActionHttpAuthSigv4ToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionHttpAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sigv_4: iotTopicRuleTopicRulePayloadErrorActionHttpAuthSigv4ToTerraform(struct.sigv4),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionHttpAuthToTerraform = iotTopicRuleTopicRulePayloadErrorActionHttpAuthToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionHttpHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionHttpHeadersToTerraform = iotTopicRuleTopicRulePayloadErrorActionHttpHeadersToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionHttpToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth: iotTopicRuleTopicRulePayloadErrorActionHttpAuthToTerraform(struct.auth),
        confirmation_url: cdktf.stringToTerraform(struct.confirmationUrl),
        headers: cdktf.listMapper(iotTopicRuleTopicRulePayloadErrorActionHttpHeadersToTerraform)(struct.headers),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionHttpToTerraform = iotTopicRuleTopicRulePayloadErrorActionHttpToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        channel_name: cdktf.stringToTerraform(struct.channelName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotAnalyticsToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotAnalyticsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        input_name: cdktf.stringToTerraform(struct.inputName),
        message_id: cdktf.stringToTerraform(struct.messageId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotEventsToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotEventsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesTimestampToTerraform(struct.timestamp),
        value: iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesValueToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_values: cdktf.listMapper(iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesPropertyValuesToTerraform)(struct.propertyValues),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        put_asset_property_value_entries: cdktf.listMapper(iotTopicRuleTopicRulePayloadErrorActionIotSiteWisePutAssetPropertyValueEntriesToTerraform)(struct.putAssetPropertyValueEntries),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionIotSiteWiseToTerraform = iotTopicRuleTopicRulePayloadErrorActionIotSiteWiseToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionKafkaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_properties: cdktf.hashMapper(cdktf.anyToTerraform)(struct.clientProperties),
        destination_arn: cdktf.stringToTerraform(struct.destinationArn),
        key: cdktf.stringToTerraform(struct.key),
        partition: cdktf.stringToTerraform(struct.partition),
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionKafkaToTerraform = iotTopicRuleTopicRulePayloadErrorActionKafkaToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionKinesisToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        partition_key: cdktf.stringToTerraform(struct.partitionKey),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        stream_name: cdktf.stringToTerraform(struct.streamName),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionKinesisToTerraform = iotTopicRuleTopicRulePayloadErrorActionKinesisToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionLambdaToTerraform = iotTopicRuleTopicRulePayloadErrorActionLambdaToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionRepublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        qos: cdktf.numberToTerraform(struct.qos),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionRepublishToTerraform = iotTopicRuleTopicRulePayloadErrorActionRepublishToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
        key: cdktf.stringToTerraform(struct.key),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionS3ToTerraform = iotTopicRuleTopicRulePayloadErrorActionS3ToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        message_format: cdktf.stringToTerraform(struct.messageFormat),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionSnsToTerraform = iotTopicRuleTopicRulePayloadErrorActionSnsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionSqsToTerraform = iotTopicRuleTopicRulePayloadErrorActionSqsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionStepFunctionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_name_prefix: cdktf.stringToTerraform(struct.executionNamePrefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        state_machine_name: cdktf.stringToTerraform(struct.stateMachineName),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionStepFunctionsToTerraform = iotTopicRuleTopicRulePayloadErrorActionStepFunctionsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionTimestreamDimensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamDimensionsToTerraform = iotTopicRuleTopicRulePayloadErrorActionTimestreamDimensionsToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionTimestreamTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamTimestampToTerraform = iotTopicRuleTopicRulePayloadErrorActionTimestreamTimestampToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionTimestreamToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        batch_mode: cdktf.booleanToTerraform(struct.batchMode),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        dimensions: cdktf.listMapper(iotTopicRuleTopicRulePayloadErrorActionTimestreamDimensionsToTerraform)(struct.dimensions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        timestamp: iotTopicRuleTopicRulePayloadErrorActionTimestreamTimestampToTerraform(struct.timestamp),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionTimestreamToTerraform = iotTopicRuleTopicRulePayloadErrorActionTimestreamToTerraform;
function iotTopicRuleTopicRulePayloadErrorActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_alarm: iotTopicRuleTopicRulePayloadErrorActionCloudwatchAlarmToTerraform(struct.cloudwatchAlarm),
        cloudwatch_logs: iotTopicRuleTopicRulePayloadErrorActionCloudwatchLogsToTerraform(struct.cloudwatchLogs),
        cloudwatch_metric: iotTopicRuleTopicRulePayloadErrorActionCloudwatchMetricToTerraform(struct.cloudwatchMetric),
        dynamo_d_bv_2: iotTopicRuleTopicRulePayloadErrorActionDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: iotTopicRuleTopicRulePayloadErrorActionDynamoDbToTerraform(struct.dynamoDb),
        elasticsearch: iotTopicRuleTopicRulePayloadErrorActionElasticsearchToTerraform(struct.elasticsearch),
        firehose: iotTopicRuleTopicRulePayloadErrorActionFirehoseToTerraform(struct.firehose),
        http: iotTopicRuleTopicRulePayloadErrorActionHttpToTerraform(struct.http),
        iot_analytics: iotTopicRuleTopicRulePayloadErrorActionIotAnalyticsToTerraform(struct.iotAnalytics),
        iot_events: iotTopicRuleTopicRulePayloadErrorActionIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: iotTopicRuleTopicRulePayloadErrorActionIotSiteWiseToTerraform(struct.iotSiteWise),
        kafka: iotTopicRuleTopicRulePayloadErrorActionKafkaToTerraform(struct.kafka),
        kinesis: iotTopicRuleTopicRulePayloadErrorActionKinesisToTerraform(struct.kinesis),
        lambda: iotTopicRuleTopicRulePayloadErrorActionLambdaToTerraform(struct.lambda),
        republish: iotTopicRuleTopicRulePayloadErrorActionRepublishToTerraform(struct.republish),
        s3: iotTopicRuleTopicRulePayloadErrorActionS3ToTerraform(struct.s3),
        sns: iotTopicRuleTopicRulePayloadErrorActionSnsToTerraform(struct.sns),
        sqs: iotTopicRuleTopicRulePayloadErrorActionSqsToTerraform(struct.sqs),
        step_functions: iotTopicRuleTopicRulePayloadErrorActionStepFunctionsToTerraform(struct.stepFunctions),
        timestream: iotTopicRuleTopicRulePayloadErrorActionTimestreamToTerraform(struct.timestream),
    };
}
exports.iotTopicRuleTopicRulePayloadErrorActionToTerraform = iotTopicRuleTopicRulePayloadErrorActionToTerraform;
function iotTopicRuleTopicRulePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(iotTopicRuleTopicRulePayloadActionsToTerraform)(struct.actions),
        aws_iot_sql_version: cdktf.stringToTerraform(struct.awsIotSqlVersion),
        description: cdktf.stringToTerraform(struct.description),
        error_action: iotTopicRuleTopicRulePayloadErrorActionToTerraform(struct.errorAction),
        rule_disabled: cdktf.booleanToTerraform(struct.ruleDisabled),
        sql: cdktf.stringToTerraform(struct.sql),
    };
}
exports.iotTopicRuleTopicRulePayloadToTerraform = iotTopicRuleTopicRulePayloadToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule.html awscc_iot_topic_rule}
*/
class IotTopicRule extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule.html awscc_iot_topic_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotTopicRuleConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_topic_rule',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._ruleName = config.ruleName;
        this._tags = config.tags;
        this._topicRulePayload = config.topicRulePayload;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    set ruleName(value) {
        this._ruleName = value;
    }
    resetRuleName() {
        this._ruleName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNameInput() {
        return this._ruleName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get topicRulePayload() {
        return this.interpolationForAttribute('topic_rule_payload');
    }
    set topicRulePayload(value) {
        this._topicRulePayload = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicRulePayloadInput() {
        return this._topicRulePayload;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            rule_name: cdktf.stringToTerraform(this._ruleName),
            tags: cdktf.listMapper(iotTopicRuleTagsToTerraform)(this._tags),
            topic_rule_payload: iotTopicRuleTopicRulePayloadToTerraform(this._topicRulePayload),
        };
    }
}
exports.IotTopicRule = IotTopicRule;
// =================
// STATIC PROPERTIES
// =================
IotTopicRule.tfResourceType = "awscc_iot_topic_rule";
//# sourceMappingURL=data:application/json;base64,