"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_monitoring_schedule.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerMonitoringSchedule = exports.sagemakerMonitoringScheduleTagsToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigScheduleConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionStoppingConditionToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigVpcConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesClusterConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsS3OutputToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsEndpointInputToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringAppSpecificationToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigStatisticsResourceToTerraform = exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigConstraintsResourceToTerraform = exports.sagemakerMonitoringScheduleLastMonitoringExecutionSummaryToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerMonitoringScheduleLastMonitoringExecutionSummaryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        creation_time: cdktf.stringToTerraform(struct.creationTime),
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        failure_reason: cdktf.stringToTerraform(struct.failureReason),
        last_modified_time: cdktf.stringToTerraform(struct.lastModifiedTime),
        monitoring_execution_status: cdktf.stringToTerraform(struct.monitoringExecutionStatus),
        monitoring_schedule_name: cdktf.stringToTerraform(struct.monitoringScheduleName),
        processing_job_arn: cdktf.stringToTerraform(struct.processingJobArn),
        scheduled_time: cdktf.stringToTerraform(struct.scheduledTime),
    };
}
exports.sagemakerMonitoringScheduleLastMonitoringExecutionSummaryToTerraform = sagemakerMonitoringScheduleLastMonitoringExecutionSummaryToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigConstraintsResourceToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigConstraintsResourceToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigStatisticsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigStatisticsResourceToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigStatisticsResourceToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        constraints_resource: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
        statistics_resource: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigStatisticsResourceToTerraform(struct.statisticsResource),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_arguments: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerArguments),
        container_entrypoint: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerEntrypoint),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        post_analytics_processor_source_uri: cdktf.stringToTerraform(struct.postAnalyticsProcessorSourceUri),
        record_preprocessor_source_uri: cdktf.stringToTerraform(struct.recordPreprocessorSourceUri),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringAppSpecificationToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringAppSpecificationToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsEndpointInputToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsEndpointInputToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_input: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsEndpointInputToTerraform(struct.endpointInput),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_output: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: cdktf.listMapper(sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigMonitoringOutputsToTerraform)(struct.monitoringOutputs),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesClusterConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesClusterConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_config: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionStoppingConditionToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionStoppingConditionToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        baseline_config: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionBaselineConfigToTerraform(struct.baselineConfig),
        environment: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environment),
        monitoring_app_specification: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringAppSpecificationToTerraform(struct.monitoringAppSpecification),
        monitoring_inputs: cdktf.listMapper(sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringInputsToTerraform)(struct.monitoringInputs),
        monitoring_output_config: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringOutputConfigToTerraform(struct.monitoringOutputConfig),
        monitoring_resources: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionMonitoringResourcesToTerraform(struct.monitoringResources),
        network_config: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionNetworkConfigToTerraform(struct.networkConfig),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        stopping_condition: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionStoppingConditionToTerraform(struct.stoppingCondition),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigScheduleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigScheduleConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigScheduleConfigToTerraform;
function sagemakerMonitoringScheduleMonitoringScheduleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        monitoring_job_definition: sagemakerMonitoringScheduleMonitoringScheduleConfigMonitoringJobDefinitionToTerraform(struct.monitoringJobDefinition),
        monitoring_job_definition_name: cdktf.stringToTerraform(struct.monitoringJobDefinitionName),
        monitoring_type: cdktf.stringToTerraform(struct.monitoringType),
        schedule_config: sagemakerMonitoringScheduleMonitoringScheduleConfigScheduleConfigToTerraform(struct.scheduleConfig),
    };
}
exports.sagemakerMonitoringScheduleMonitoringScheduleConfigToTerraform = sagemakerMonitoringScheduleMonitoringScheduleConfigToTerraform;
function sagemakerMonitoringScheduleTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerMonitoringScheduleTagsToTerraform = sagemakerMonitoringScheduleTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_monitoring_schedule.html awscc_sagemaker_monitoring_schedule}
*/
class SagemakerMonitoringSchedule extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_monitoring_schedule.html awscc_sagemaker_monitoring_schedule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerMonitoringScheduleConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_monitoring_schedule',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._endpointName = config.endpointName;
        this._failureReason = config.failureReason;
        this._lastMonitoringExecutionSummary = config.lastMonitoringExecutionSummary;
        this._monitoringScheduleConfig = config.monitoringScheduleConfig;
        this._monitoringScheduleName = config.monitoringScheduleName;
        this._monitoringScheduleStatus = config.monitoringScheduleStatus;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    get endpointName() {
        return this.getStringAttribute('endpoint_name');
    }
    set endpointName(value) {
        this._endpointName = value;
    }
    resetEndpointName() {
        this._endpointName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointNameInput() {
        return this._endpointName;
    }
    get failureReason() {
        return this.getStringAttribute('failure_reason');
    }
    set failureReason(value) {
        this._failureReason = value;
    }
    resetFailureReason() {
        this._failureReason = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureReasonInput() {
        return this._failureReason;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_modified_time - computed: true, optional: false, required: false
    get lastModifiedTime() {
        return this.getStringAttribute('last_modified_time');
    }
    get lastMonitoringExecutionSummary() {
        return this.interpolationForAttribute('last_monitoring_execution_summary');
    }
    set lastMonitoringExecutionSummary(value) {
        this._lastMonitoringExecutionSummary = value;
    }
    resetLastMonitoringExecutionSummary() {
        this._lastMonitoringExecutionSummary = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lastMonitoringExecutionSummaryInput() {
        return this._lastMonitoringExecutionSummary;
    }
    // monitoring_schedule_arn - computed: true, optional: false, required: false
    get monitoringScheduleArn() {
        return this.getStringAttribute('monitoring_schedule_arn');
    }
    get monitoringScheduleConfig() {
        return this.interpolationForAttribute('monitoring_schedule_config');
    }
    set monitoringScheduleConfig(value) {
        this._monitoringScheduleConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringScheduleConfigInput() {
        return this._monitoringScheduleConfig;
    }
    get monitoringScheduleName() {
        return this.getStringAttribute('monitoring_schedule_name');
    }
    set monitoringScheduleName(value) {
        this._monitoringScheduleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringScheduleNameInput() {
        return this._monitoringScheduleName;
    }
    get monitoringScheduleStatus() {
        return this.getStringAttribute('monitoring_schedule_status');
    }
    set monitoringScheduleStatus(value) {
        this._monitoringScheduleStatus = value;
    }
    resetMonitoringScheduleStatus() {
        this._monitoringScheduleStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringScheduleStatusInput() {
        return this._monitoringScheduleStatus;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            endpoint_name: cdktf.stringToTerraform(this._endpointName),
            failure_reason: cdktf.stringToTerraform(this._failureReason),
            last_monitoring_execution_summary: sagemakerMonitoringScheduleLastMonitoringExecutionSummaryToTerraform(this._lastMonitoringExecutionSummary),
            monitoring_schedule_config: sagemakerMonitoringScheduleMonitoringScheduleConfigToTerraform(this._monitoringScheduleConfig),
            monitoring_schedule_name: cdktf.stringToTerraform(this._monitoringScheduleName),
            monitoring_schedule_status: cdktf.stringToTerraform(this._monitoringScheduleStatus),
            tags: cdktf.listMapper(sagemakerMonitoringScheduleTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerMonitoringSchedule = SagemakerMonitoringSchedule;
// =================
// STATIC PROPERTIES
// =================
SagemakerMonitoringSchedule.tfResourceType = "awscc_sagemaker_monitoring_schedule";
//# sourceMappingURL=data:application/json;base64,