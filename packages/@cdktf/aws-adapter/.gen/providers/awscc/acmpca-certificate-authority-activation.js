"use strict";
// https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate_authority_activation.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcmpcaCertificateAuthorityActivation = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate_authority_activation.html awscc_acmpca_certificate_authority_activation}
*/
class AcmpcaCertificateAuthorityActivation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate_authority_activation.html awscc_acmpca_certificate_authority_activation} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AcmpcaCertificateAuthorityActivationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_acmpca_certificate_authority_activation',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._certificate = config.certificate;
        this._certificateAuthorityArn = config.certificateAuthorityArn;
        this._certificateChain = config.certificateChain;
        this._status = config.status;
    }
    get certificate() {
        return this.getStringAttribute('certificate');
    }
    set certificate(value) {
        this._certificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate;
    }
    get certificateAuthorityArn() {
        return this.getStringAttribute('certificate_authority_arn');
    }
    set certificateAuthorityArn(value) {
        this._certificateAuthorityArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityArnInput() {
        return this._certificateAuthorityArn;
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    resetCertificateChain() {
        this._certificateChain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
    // complete_certificate_chain - computed: true, optional: false, required: false
    get completeCertificateChain() {
        return this.getStringAttribute('complete_certificate_chain');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate: cdktf.stringToTerraform(this._certificate),
            certificate_authority_arn: cdktf.stringToTerraform(this._certificateAuthorityArn),
            certificate_chain: cdktf.stringToTerraform(this._certificateChain),
            status: cdktf.stringToTerraform(this._status),
        };
    }
}
exports.AcmpcaCertificateAuthorityActivation = AcmpcaCertificateAuthorityActivation;
// =================
// STATIC PROPERTIES
// =================
AcmpcaCertificateAuthorityActivation.tfResourceType = "awscc_acmpca_certificate_authority_activation";
//# sourceMappingURL=data:application/json;base64,