"use strict";
// https://www.terraform.io/docs/providers/awscc/d/cloudformation_stack_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccCloudformationStackSet = exports.dataAwsccCloudformationStackSetTagsToTerraform = exports.DataAwsccCloudformationStackSetTags = exports.dataAwsccCloudformationStackSetStackInstancesGroupToTerraform = exports.DataAwsccCloudformationStackSetStackInstancesGroup = exports.dataAwsccCloudformationStackSetStackInstancesGroupParameterOverridesToTerraform = exports.DataAwsccCloudformationStackSetStackInstancesGroupParameterOverrides = exports.dataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform = exports.DataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargets = exports.dataAwsccCloudformationStackSetParametersToTerraform = exports.DataAwsccCloudformationStackSetParameters = exports.dataAwsccCloudformationStackSetOperationPreferencesToTerraform = exports.DataAwsccCloudformationStackSetOperationPreferences = exports.dataAwsccCloudformationStackSetAutoDeploymentToTerraform = exports.DataAwsccCloudformationStackSetAutoDeployment = void 0;
const cdktf = require("cdktf");
class DataAwsccCloudformationStackSetAutoDeployment extends cdktf.ComplexComputedList {
    // enabled - computed: true, optional: false, required: false
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    // retain_stacks_on_account_removal - computed: true, optional: false, required: false
    get retainStacksOnAccountRemoval() {
        return this.getBooleanAttribute('retain_stacks_on_account_removal');
    }
}
exports.DataAwsccCloudformationStackSetAutoDeployment = DataAwsccCloudformationStackSetAutoDeployment;
function dataAwsccCloudformationStackSetAutoDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        retain_stacks_on_account_removal: cdktf.booleanToTerraform(struct.retainStacksOnAccountRemoval),
    };
}
exports.dataAwsccCloudformationStackSetAutoDeploymentToTerraform = dataAwsccCloudformationStackSetAutoDeploymentToTerraform;
class DataAwsccCloudformationStackSetOperationPreferences extends cdktf.ComplexComputedList {
    // failure_tolerance_count - computed: true, optional: false, required: false
    get failureToleranceCount() {
        return this.getNumberAttribute('failure_tolerance_count');
    }
    // failure_tolerance_percentage - computed: true, optional: false, required: false
    get failureTolerancePercentage() {
        return this.getNumberAttribute('failure_tolerance_percentage');
    }
    // max_concurrent_count - computed: true, optional: false, required: false
    get maxConcurrentCount() {
        return this.getNumberAttribute('max_concurrent_count');
    }
    // max_concurrent_percentage - computed: true, optional: false, required: false
    get maxConcurrentPercentage() {
        return this.getNumberAttribute('max_concurrent_percentage');
    }
    // region_concurrency_type - computed: true, optional: false, required: false
    get regionConcurrencyType() {
        return this.getStringAttribute('region_concurrency_type');
    }
    // region_order - computed: true, optional: false, required: false
    get regionOrder() {
        return this.getListAttribute('region_order');
    }
}
exports.DataAwsccCloudformationStackSetOperationPreferences = DataAwsccCloudformationStackSetOperationPreferences;
function dataAwsccCloudformationStackSetOperationPreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        failure_tolerance_count: cdktf.numberToTerraform(struct.failureToleranceCount),
        failure_tolerance_percentage: cdktf.numberToTerraform(struct.failureTolerancePercentage),
        max_concurrent_count: cdktf.numberToTerraform(struct.maxConcurrentCount),
        max_concurrent_percentage: cdktf.numberToTerraform(struct.maxConcurrentPercentage),
        region_concurrency_type: cdktf.stringToTerraform(struct.regionConcurrencyType),
        region_order: cdktf.listMapper(cdktf.stringToTerraform)(struct.regionOrder),
    };
}
exports.dataAwsccCloudformationStackSetOperationPreferencesToTerraform = dataAwsccCloudformationStackSetOperationPreferencesToTerraform;
class DataAwsccCloudformationStackSetParameters extends cdktf.ComplexComputedList {
    // parameter_key - computed: true, optional: false, required: false
    get parameterKey() {
        return this.getStringAttribute('parameter_key');
    }
    // parameter_value - computed: true, optional: false, required: false
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
}
exports.DataAwsccCloudformationStackSetParameters = DataAwsccCloudformationStackSetParameters;
function dataAwsccCloudformationStackSetParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_key: cdktf.stringToTerraform(struct.parameterKey),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.dataAwsccCloudformationStackSetParametersToTerraform = dataAwsccCloudformationStackSetParametersToTerraform;
class DataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargets extends cdktf.ComplexComputedList {
    // accounts - computed: true, optional: false, required: false
    get accounts() {
        return this.getListAttribute('accounts');
    }
    // organizational_unit_ids - computed: true, optional: false, required: false
    get organizationalUnitIds() {
        return this.getListAttribute('organizational_unit_ids');
    }
}
exports.DataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargets = DataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargets;
function dataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        accounts: cdktf.listMapper(cdktf.stringToTerraform)(struct.accounts),
        organizational_unit_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.organizationalUnitIds),
    };
}
exports.dataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform = dataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform;
class DataAwsccCloudformationStackSetStackInstancesGroupParameterOverrides extends cdktf.ComplexComputedList {
    // parameter_key - computed: true, optional: false, required: false
    get parameterKey() {
        return this.getStringAttribute('parameter_key');
    }
    // parameter_value - computed: true, optional: false, required: false
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
}
exports.DataAwsccCloudformationStackSetStackInstancesGroupParameterOverrides = DataAwsccCloudformationStackSetStackInstancesGroupParameterOverrides;
function dataAwsccCloudformationStackSetStackInstancesGroupParameterOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_key: cdktf.stringToTerraform(struct.parameterKey),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.dataAwsccCloudformationStackSetStackInstancesGroupParameterOverridesToTerraform = dataAwsccCloudformationStackSetStackInstancesGroupParameterOverridesToTerraform;
class DataAwsccCloudformationStackSetStackInstancesGroup extends cdktf.ComplexComputedList {
    // deployment_targets - computed: true, optional: false, required: false
    get deploymentTargets() {
        return this.interpolationForAttribute('deployment_targets');
    }
    // parameter_overrides - computed: true, optional: false, required: false
    get parameterOverrides() {
        return this.interpolationForAttribute('parameter_overrides');
    }
    // regions - computed: true, optional: false, required: false
    get regions() {
        return this.getListAttribute('regions');
    }
}
exports.DataAwsccCloudformationStackSetStackInstancesGroup = DataAwsccCloudformationStackSetStackInstancesGroup;
function dataAwsccCloudformationStackSetStackInstancesGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        deployment_targets: dataAwsccCloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform(struct.deploymentTargets),
        parameter_overrides: cdktf.listMapper(dataAwsccCloudformationStackSetStackInstancesGroupParameterOverridesToTerraform)(struct.parameterOverrides),
        regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.regions),
    };
}
exports.dataAwsccCloudformationStackSetStackInstancesGroupToTerraform = dataAwsccCloudformationStackSetStackInstancesGroupToTerraform;
class DataAwsccCloudformationStackSetTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccCloudformationStackSetTags = DataAwsccCloudformationStackSetTags;
function dataAwsccCloudformationStackSetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccCloudformationStackSetTagsToTerraform = dataAwsccCloudformationStackSetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/cloudformation_stack_set.html awscc_cloudformation_stack_set}
*/
class DataAwsccCloudformationStackSet extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/cloudformation_stack_set.html awscc_cloudformation_stack_set} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccCloudformationStackSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_stack_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // administration_role_arn - computed: true, optional: false, required: false
    get administrationRoleArn() {
        return this.getStringAttribute('administration_role_arn');
    }
    // auto_deployment - computed: true, optional: false, required: false
    get autoDeployment() {
        return this.interpolationForAttribute('auto_deployment');
    }
    // call_as - computed: true, optional: false, required: false
    get callAs() {
        return this.getStringAttribute('call_as');
    }
    // capabilities - computed: true, optional: false, required: false
    get capabilities() {
        return this.getListAttribute('capabilities');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // execution_role_name - computed: true, optional: false, required: false
    get executionRoleName() {
        return this.getStringAttribute('execution_role_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // operation_preferences - computed: true, optional: false, required: false
    get operationPreferences() {
        return this.interpolationForAttribute('operation_preferences');
    }
    // parameters - computed: true, optional: false, required: false
    get parameters() {
        return this.interpolationForAttribute('parameters');
    }
    // permission_model - computed: true, optional: false, required: false
    get permissionModel() {
        return this.getStringAttribute('permission_model');
    }
    // stack_instances_group - computed: true, optional: false, required: false
    get stackInstancesGroup() {
        return this.interpolationForAttribute('stack_instances_group');
    }
    // stack_set_id - computed: true, optional: false, required: false
    get stackSetId() {
        return this.getStringAttribute('stack_set_id');
    }
    // stack_set_name - computed: true, optional: false, required: false
    get stackSetName() {
        return this.getStringAttribute('stack_set_name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // template_body - computed: true, optional: false, required: false
    get templateBody() {
        return this.getStringAttribute('template_body');
    }
    // template_url - computed: true, optional: false, required: false
    get templateUrl() {
        return this.getStringAttribute('template_url');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccCloudformationStackSet = DataAwsccCloudformationStackSet;
// =================
// STATIC PROPERTIES
// =================
DataAwsccCloudformationStackSet.tfResourceType = "awscc_cloudformation_stack_set";
//# sourceMappingURL=data:application/json;base64,