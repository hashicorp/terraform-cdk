"use strict";
// https://www.terraform.io/docs/providers/awscc/d/sagemaker_user_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSagemakerUserProfile = exports.dataAwsccSagemakerUserProfileUserSettingsToTerraform = exports.DataAwsccSagemakerUserProfileUserSettings = exports.dataAwsccSagemakerUserProfileUserSettingsSharingSettingsToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsSharingSettings = exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettings = exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec = exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImages = exports.dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettings = exports.dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec = exports.dataAwsccSagemakerUserProfileTagsToTerraform = exports.DataAwsccSagemakerUserProfileTags = void 0;
const cdktf = require("cdktf");
class DataAwsccSagemakerUserProfileTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccSagemakerUserProfileTags = DataAwsccSagemakerUserProfileTags;
function dataAwsccSagemakerUserProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccSagemakerUserProfileTagsToTerraform = dataAwsccSagemakerUserProfileTagsToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec extends cdktf.ComplexComputedList {
    // instance_type - computed: true, optional: false, required: false
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    // sage_maker_image_arn - computed: true, optional: false, required: false
    get sageMakerImageArn() {
        return this.getStringAttribute('sage_maker_image_arn');
    }
    // sage_maker_image_version_arn - computed: true, optional: false, required: false
    get sageMakerImageVersionArn() {
        return this.getStringAttribute('sage_maker_image_version_arn');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec = DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec;
function dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettings extends cdktf.ComplexComputedList {
    // default_resource_spec - computed: true, optional: false, required: false
    get defaultResourceSpec() {
        return this.interpolationForAttribute('default_resource_spec');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettings = DataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettings;
function dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImages extends cdktf.ComplexComputedList {
    // app_image_config_name - computed: true, optional: false, required: false
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    // image_name - computed: true, optional: false, required: false
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    // image_version_number - computed: true, optional: false, required: false
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImages = DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImages;
function dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec extends cdktf.ComplexComputedList {
    // instance_type - computed: true, optional: false, required: false
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    // sage_maker_image_arn - computed: true, optional: false, required: false
    get sageMakerImageArn() {
        return this.getStringAttribute('sage_maker_image_arn');
    }
    // sage_maker_image_version_arn - computed: true, optional: false, required: false
    get sageMakerImageVersionArn() {
        return this.getStringAttribute('sage_maker_image_version_arn');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec = DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec;
function dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettings extends cdktf.ComplexComputedList {
    // custom_images - computed: true, optional: false, required: false
    get customImages() {
        return this.interpolationForAttribute('custom_images');
    }
    // default_resource_spec - computed: true, optional: false, required: false
    get defaultResourceSpec() {
        return this.interpolationForAttribute('default_resource_spec');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettings = DataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettings;
function dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_images: cdktf.listMapper(dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform)(struct.customImages),
        default_resource_spec: dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform;
class DataAwsccSagemakerUserProfileUserSettingsSharingSettings extends cdktf.ComplexComputedList {
    // notebook_output_option - computed: true, optional: false, required: false
    get notebookOutputOption() {
        return this.getStringAttribute('notebook_output_option');
    }
    // s3_kms_key_id - computed: true, optional: false, required: false
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    // s3_output_path - computed: true, optional: false, required: false
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettingsSharingSettings = DataAwsccSagemakerUserProfileUserSettingsSharingSettings;
function dataAwsccSagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsSharingSettingsToTerraform = dataAwsccSagemakerUserProfileUserSettingsSharingSettingsToTerraform;
class DataAwsccSagemakerUserProfileUserSettings extends cdktf.ComplexComputedList {
    // execution_role - computed: true, optional: false, required: false
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    // jupyter_server_app_settings - computed: true, optional: false, required: false
    get jupyterServerAppSettings() {
        return this.interpolationForAttribute('jupyter_server_app_settings');
    }
    // kernel_gateway_app_settings - computed: true, optional: false, required: false
    get kernelGatewayAppSettings() {
        return this.interpolationForAttribute('kernel_gateway_app_settings');
    }
    // security_groups - computed: true, optional: false, required: false
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    // sharing_settings - computed: true, optional: false, required: false
    get sharingSettings() {
        return this.interpolationForAttribute('sharing_settings');
    }
}
exports.DataAwsccSagemakerUserProfileUserSettings = DataAwsccSagemakerUserProfileUserSettings;
function dataAwsccSagemakerUserProfileUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        jupyter_server_app_settings: dataAwsccSagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: dataAwsccSagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        sharing_settings: dataAwsccSagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
    };
}
exports.dataAwsccSagemakerUserProfileUserSettingsToTerraform = dataAwsccSagemakerUserProfileUserSettingsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_user_profile.html awscc_sagemaker_user_profile}
*/
class DataAwsccSagemakerUserProfile extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_user_profile.html awscc_sagemaker_user_profile} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSagemakerUserProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // domain_id - computed: true, optional: false, required: false
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // single_sign_on_user_identifier - computed: true, optional: false, required: false
    get singleSignOnUserIdentifier() {
        return this.getStringAttribute('single_sign_on_user_identifier');
    }
    // single_sign_on_user_value - computed: true, optional: false, required: false
    get singleSignOnUserValue() {
        return this.getStringAttribute('single_sign_on_user_value');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // user_profile_arn - computed: true, optional: false, required: false
    get userProfileArn() {
        return this.getStringAttribute('user_profile_arn');
    }
    // user_profile_name - computed: true, optional: false, required: false
    get userProfileName() {
        return this.getStringAttribute('user_profile_name');
    }
    // user_settings - computed: true, optional: false, required: false
    get userSettings() {
        return this.interpolationForAttribute('user_settings');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSagemakerUserProfile = DataAwsccSagemakerUserProfile;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSagemakerUserProfile.tfResourceType = "awscc_sagemaker_user_profile";
//# sourceMappingURL=data:application/json;base64,