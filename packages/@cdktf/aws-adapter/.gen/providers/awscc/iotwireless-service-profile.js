"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotwireless_service_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotwirelessServiceProfile = exports.iotwirelessServiceProfileTagsToTerraform = exports.iotwirelessServiceProfileLoRaWanToTerraform = void 0;
const cdktf = require("cdktf");
function iotwirelessServiceProfileLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add_gw_metadata: cdktf.booleanToTerraform(struct.addGwMetadata),
        channel_mask: cdktf.stringToTerraform(struct.channelMask),
        dev_status_req_freq: cdktf.numberToTerraform(struct.devStatusReqFreq),
        dl_bucket_size: cdktf.numberToTerraform(struct.dlBucketSize),
        dl_rate: cdktf.numberToTerraform(struct.dlRate),
        dl_rate_policy: cdktf.stringToTerraform(struct.dlRatePolicy),
        dr_max: cdktf.numberToTerraform(struct.drMax),
        dr_min: cdktf.numberToTerraform(struct.drMin),
        hr_allowed: cdktf.booleanToTerraform(struct.hrAllowed),
        min_gw_diversity: cdktf.numberToTerraform(struct.minGwDiversity),
        nwk_geo_loc: cdktf.booleanToTerraform(struct.nwkGeoLoc),
        pr_allowed: cdktf.booleanToTerraform(struct.prAllowed),
        ra_allowed: cdktf.booleanToTerraform(struct.raAllowed),
        report_dev_status_battery: cdktf.booleanToTerraform(struct.reportDevStatusBattery),
        report_dev_status_margin: cdktf.booleanToTerraform(struct.reportDevStatusMargin),
        target_per: cdktf.numberToTerraform(struct.targetPer),
        ul_bucket_size: cdktf.numberToTerraform(struct.ulBucketSize),
        ul_rate: cdktf.numberToTerraform(struct.ulRate),
        ul_rate_policy: cdktf.stringToTerraform(struct.ulRatePolicy),
    };
}
exports.iotwirelessServiceProfileLoRaWanToTerraform = iotwirelessServiceProfileLoRaWanToTerraform;
function iotwirelessServiceProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotwirelessServiceProfileTagsToTerraform = iotwirelessServiceProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_service_profile.html awscc_iotwireless_service_profile}
*/
class IotwirelessServiceProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_service_profile.html awscc_iotwireless_service_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotwirelessServiceProfileConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_service_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._loRaWan = config.loRaWan;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    set loRaWan(value) {
        this._loRaWan = value;
    }
    resetLoRaWan() {
        this._loRaWan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRaWanInput() {
        return this._loRaWan;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            lo_ra_wan: iotwirelessServiceProfileLoRaWanToTerraform(this._loRaWan),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(iotwirelessServiceProfileTagsToTerraform)(this._tags),
        };
    }
}
exports.IotwirelessServiceProfile = IotwirelessServiceProfile;
// =================
// STATIC PROPERTIES
// =================
IotwirelessServiceProfile.tfResourceType = "awscc_iotwireless_service_profile";
//# sourceMappingURL=data:application/json;base64,