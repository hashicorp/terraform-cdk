"use strict";
// https://www.terraform.io/docs/providers/awscc/r/codeguruprofiler_profiling_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeguruprofilerProfilingGroup = exports.codeguruprofilerProfilingGroupTagsToTerraform = exports.codeguruprofilerProfilingGroupAnomalyDetectionNotificationConfigurationToTerraform = exports.codeguruprofilerProfilingGroupAgentPermissionsToTerraform = void 0;
const cdktf = require("cdktf");
function codeguruprofilerProfilingGroupAgentPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        principals: cdktf.listMapper(cdktf.stringToTerraform)(struct.principals),
    };
}
exports.codeguruprofilerProfilingGroupAgentPermissionsToTerraform = codeguruprofilerProfilingGroupAgentPermissionsToTerraform;
function codeguruprofilerProfilingGroupAnomalyDetectionNotificationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        channel_id: cdktf.stringToTerraform(struct.channelId),
        channel_uri: cdktf.stringToTerraform(struct.channelUri),
    };
}
exports.codeguruprofilerProfilingGroupAnomalyDetectionNotificationConfigurationToTerraform = codeguruprofilerProfilingGroupAnomalyDetectionNotificationConfigurationToTerraform;
function codeguruprofilerProfilingGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.codeguruprofilerProfilingGroupTagsToTerraform = codeguruprofilerProfilingGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/codeguruprofiler_profiling_group.html awscc_codeguruprofiler_profiling_group}
*/
class CodeguruprofilerProfilingGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/codeguruprofiler_profiling_group.html awscc_codeguruprofiler_profiling_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CodeguruprofilerProfilingGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_codeguruprofiler_profiling_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._agentPermissions = config.agentPermissions;
        this._anomalyDetectionNotificationConfiguration = config.anomalyDetectionNotificationConfiguration;
        this._computePlatform = config.computePlatform;
        this._profilingGroupName = config.profilingGroupName;
        this._tags = config.tags;
    }
    get agentPermissions() {
        return this.interpolationForAttribute('agent_permissions');
    }
    set agentPermissions(value) {
        this._agentPermissions = value;
    }
    resetAgentPermissions() {
        this._agentPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get agentPermissionsInput() {
        return this._agentPermissions;
    }
    get anomalyDetectionNotificationConfiguration() {
        return this.interpolationForAttribute('anomaly_detection_notification_configuration');
    }
    set anomalyDetectionNotificationConfiguration(value) {
        this._anomalyDetectionNotificationConfiguration = value;
    }
    resetAnomalyDetectionNotificationConfiguration() {
        this._anomalyDetectionNotificationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectionNotificationConfigurationInput() {
        return this._anomalyDetectionNotificationConfiguration;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get computePlatform() {
        return this.getStringAttribute('compute_platform');
    }
    set computePlatform(value) {
        this._computePlatform = value;
    }
    resetComputePlatform() {
        this._computePlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get computePlatformInput() {
        return this._computePlatform;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get profilingGroupName() {
        return this.getStringAttribute('profiling_group_name');
    }
    set profilingGroupName(value) {
        this._profilingGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get profilingGroupNameInput() {
        return this._profilingGroupName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            agent_permissions: codeguruprofilerProfilingGroupAgentPermissionsToTerraform(this._agentPermissions),
            anomaly_detection_notification_configuration: cdktf.listMapper(codeguruprofilerProfilingGroupAnomalyDetectionNotificationConfigurationToTerraform)(this._anomalyDetectionNotificationConfiguration),
            compute_platform: cdktf.stringToTerraform(this._computePlatform),
            profiling_group_name: cdktf.stringToTerraform(this._profilingGroupName),
            tags: cdktf.listMapper(codeguruprofilerProfilingGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.CodeguruprofilerProfilingGroup = CodeguruprofilerProfilingGroup;
// =================
// STATIC PROPERTIES
// =================
CodeguruprofilerProfilingGroup.tfResourceType = "awscc_codeguruprofiler_profiling_group";
//# sourceMappingURL=data:application/json;base64,