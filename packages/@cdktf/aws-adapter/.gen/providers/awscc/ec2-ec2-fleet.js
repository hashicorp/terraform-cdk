"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_ec2_fleet.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2Ec2Fleet = exports.ec2Ec2FleetTargetCapacitySpecificationToTerraform = exports.ec2Ec2FleetTagSpecificationsToTerraform = exports.ec2Ec2FleetTagSpecificationsTagsToTerraform = exports.ec2Ec2FleetSpotOptionsToTerraform = exports.ec2Ec2FleetOnDemandOptionsToTerraform = exports.ec2Ec2FleetOnDemandOptionsCapacityReservationOptionsToTerraform = exports.ec2Ec2FleetLaunchTemplateConfigsToTerraform = exports.ec2Ec2FleetLaunchTemplateConfigsOverridesToTerraform = exports.ec2Ec2FleetLaunchTemplateConfigsOverridesPlacementToTerraform = exports.ec2Ec2FleetLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform = void 0;
const cdktf = require("cdktf");
function ec2Ec2FleetLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        launch_template_name: cdktf.stringToTerraform(struct.launchTemplateName),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.ec2Ec2FleetLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform = ec2Ec2FleetLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform;
function ec2Ec2FleetLaunchTemplateConfigsOverridesPlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        affinity: cdktf.stringToTerraform(struct.affinity),
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        group_name: cdktf.stringToTerraform(struct.groupName),
        host_id: cdktf.stringToTerraform(struct.hostId),
        host_resource_group_arn: cdktf.stringToTerraform(struct.hostResourceGroupArn),
        partition_number: cdktf.numberToTerraform(struct.partitionNumber),
        spread_domain: cdktf.stringToTerraform(struct.spreadDomain),
        tenancy: cdktf.stringToTerraform(struct.tenancy),
    };
}
exports.ec2Ec2FleetLaunchTemplateConfigsOverridesPlacementToTerraform = ec2Ec2FleetLaunchTemplateConfigsOverridesPlacementToTerraform;
function ec2Ec2FleetLaunchTemplateConfigsOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        max_price: cdktf.stringToTerraform(struct.maxPrice),
        placement: ec2Ec2FleetLaunchTemplateConfigsOverridesPlacementToTerraform(struct.placement),
        priority: cdktf.numberToTerraform(struct.priority),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        weighted_capacity: cdktf.numberToTerraform(struct.weightedCapacity),
    };
}
exports.ec2Ec2FleetLaunchTemplateConfigsOverridesToTerraform = ec2Ec2FleetLaunchTemplateConfigsOverridesToTerraform;
function ec2Ec2FleetLaunchTemplateConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_template_specification: ec2Ec2FleetLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform(struct.launchTemplateSpecification),
        overrides: cdktf.listMapper(ec2Ec2FleetLaunchTemplateConfigsOverridesToTerraform)(struct.overrides),
    };
}
exports.ec2Ec2FleetLaunchTemplateConfigsToTerraform = ec2Ec2FleetLaunchTemplateConfigsToTerraform;
function ec2Ec2FleetOnDemandOptionsCapacityReservationOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        usage_strategy: cdktf.stringToTerraform(struct.usageStrategy),
    };
}
exports.ec2Ec2FleetOnDemandOptionsCapacityReservationOptionsToTerraform = ec2Ec2FleetOnDemandOptionsCapacityReservationOptionsToTerraform;
function ec2Ec2FleetOnDemandOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        capacity_reservation_options: ec2Ec2FleetOnDemandOptionsCapacityReservationOptionsToTerraform(struct.capacityReservationOptions),
        max_total_price: cdktf.stringToTerraform(struct.maxTotalPrice),
        min_target_capacity: cdktf.numberToTerraform(struct.minTargetCapacity),
        single_availability_zone: cdktf.booleanToTerraform(struct.singleAvailabilityZone),
        single_instance_type: cdktf.booleanToTerraform(struct.singleInstanceType),
    };
}
exports.ec2Ec2FleetOnDemandOptionsToTerraform = ec2Ec2FleetOnDemandOptionsToTerraform;
function ec2Ec2FleetSpotOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        instance_interruption_behavior: cdktf.stringToTerraform(struct.instanceInterruptionBehavior),
        instance_pools_to_use_count: cdktf.numberToTerraform(struct.instancePoolsToUseCount),
        max_total_price: cdktf.stringToTerraform(struct.maxTotalPrice),
        min_target_capacity: cdktf.numberToTerraform(struct.minTargetCapacity),
        single_availability_zone: cdktf.booleanToTerraform(struct.singleAvailabilityZone),
        single_instance_type: cdktf.booleanToTerraform(struct.singleInstanceType),
    };
}
exports.ec2Ec2FleetSpotOptionsToTerraform = ec2Ec2FleetSpotOptionsToTerraform;
function ec2Ec2FleetTagSpecificationsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2Ec2FleetTagSpecificationsTagsToTerraform = ec2Ec2FleetTagSpecificationsTagsToTerraform;
function ec2Ec2FleetTagSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        resource_type: cdktf.stringToTerraform(struct.resourceType),
        tags: cdktf.listMapper(ec2Ec2FleetTagSpecificationsTagsToTerraform)(struct.tags),
    };
}
exports.ec2Ec2FleetTagSpecificationsToTerraform = ec2Ec2FleetTagSpecificationsToTerraform;
function ec2Ec2FleetTargetCapacitySpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_target_capacity_type: cdktf.stringToTerraform(struct.defaultTargetCapacityType),
        on_demand_target_capacity: cdktf.numberToTerraform(struct.onDemandTargetCapacity),
        spot_target_capacity: cdktf.numberToTerraform(struct.spotTargetCapacity),
        total_target_capacity: cdktf.numberToTerraform(struct.totalTargetCapacity),
    };
}
exports.ec2Ec2FleetTargetCapacitySpecificationToTerraform = ec2Ec2FleetTargetCapacitySpecificationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_ec2_fleet.html awscc_ec2_ec2_fleet}
*/
class Ec2Ec2Fleet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_ec2_fleet.html awscc_ec2_ec2_fleet} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2Ec2FleetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_ec2_fleet',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._context = config.context;
        this._excessCapacityTerminationPolicy = config.excessCapacityTerminationPolicy;
        this._launchTemplateConfigs = config.launchTemplateConfigs;
        this._onDemandOptions = config.onDemandOptions;
        this._replaceUnhealthyInstances = config.replaceUnhealthyInstances;
        this._spotOptions = config.spotOptions;
        this._tagSpecifications = config.tagSpecifications;
        this._targetCapacitySpecification = config.targetCapacitySpecification;
        this._terminateInstancesWithExpiration = config.terminateInstancesWithExpiration;
        this._type = config.type;
        this._validFrom = config.validFrom;
        this._validUntil = config.validUntil;
    }
    get context() {
        return this.getStringAttribute('context');
    }
    set context(value) {
        this._context = value;
    }
    resetContext() {
        this._context = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context;
    }
    get excessCapacityTerminationPolicy() {
        return this.getStringAttribute('excess_capacity_termination_policy');
    }
    set excessCapacityTerminationPolicy(value) {
        this._excessCapacityTerminationPolicy = value;
    }
    resetExcessCapacityTerminationPolicy() {
        this._excessCapacityTerminationPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excessCapacityTerminationPolicyInput() {
        return this._excessCapacityTerminationPolicy;
    }
    // fleet_id - computed: true, optional: false, required: false
    get fleetId() {
        return this.getStringAttribute('fleet_id');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get launchTemplateConfigs() {
        return this.interpolationForAttribute('launch_template_configs');
    }
    set launchTemplateConfigs(value) {
        this._launchTemplateConfigs = value;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateConfigsInput() {
        return this._launchTemplateConfigs;
    }
    get onDemandOptions() {
        return this.interpolationForAttribute('on_demand_options');
    }
    set onDemandOptions(value) {
        this._onDemandOptions = value;
    }
    resetOnDemandOptions() {
        this._onDemandOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandOptionsInput() {
        return this._onDemandOptions;
    }
    get replaceUnhealthyInstances() {
        return this.getBooleanAttribute('replace_unhealthy_instances');
    }
    set replaceUnhealthyInstances(value) {
        this._replaceUnhealthyInstances = value;
    }
    resetReplaceUnhealthyInstances() {
        this._replaceUnhealthyInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceUnhealthyInstancesInput() {
        return this._replaceUnhealthyInstances;
    }
    get spotOptions() {
        return this.interpolationForAttribute('spot_options');
    }
    set spotOptions(value) {
        this._spotOptions = value;
    }
    resetSpotOptions() {
        this._spotOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotOptionsInput() {
        return this._spotOptions;
    }
    get tagSpecifications() {
        return this.interpolationForAttribute('tag_specifications');
    }
    set tagSpecifications(value) {
        this._tagSpecifications = value;
    }
    resetTagSpecifications() {
        this._tagSpecifications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagSpecificationsInput() {
        return this._tagSpecifications;
    }
    get targetCapacitySpecification() {
        return this.interpolationForAttribute('target_capacity_specification');
    }
    set targetCapacitySpecification(value) {
        this._targetCapacitySpecification = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetCapacitySpecificationInput() {
        return this._targetCapacitySpecification;
    }
    get terminateInstancesWithExpiration() {
        return this.getBooleanAttribute('terminate_instances_with_expiration');
    }
    set terminateInstancesWithExpiration(value) {
        this._terminateInstancesWithExpiration = value;
    }
    resetTerminateInstancesWithExpiration() {
        this._terminateInstancesWithExpiration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get terminateInstancesWithExpirationInput() {
        return this._terminateInstancesWithExpiration;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get validFrom() {
        return this.getStringAttribute('valid_from');
    }
    set validFrom(value) {
        this._validFrom = value;
    }
    resetValidFrom() {
        this._validFrom = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validFromInput() {
        return this._validFrom;
    }
    get validUntil() {
        return this.getStringAttribute('valid_until');
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    resetValidUntil() {
        this._validUntil = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validUntilInput() {
        return this._validUntil;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            context: cdktf.stringToTerraform(this._context),
            excess_capacity_termination_policy: cdktf.stringToTerraform(this._excessCapacityTerminationPolicy),
            launch_template_configs: cdktf.listMapper(ec2Ec2FleetLaunchTemplateConfigsToTerraform)(this._launchTemplateConfigs),
            on_demand_options: ec2Ec2FleetOnDemandOptionsToTerraform(this._onDemandOptions),
            replace_unhealthy_instances: cdktf.booleanToTerraform(this._replaceUnhealthyInstances),
            spot_options: ec2Ec2FleetSpotOptionsToTerraform(this._spotOptions),
            tag_specifications: cdktf.listMapper(ec2Ec2FleetTagSpecificationsToTerraform)(this._tagSpecifications),
            target_capacity_specification: ec2Ec2FleetTargetCapacitySpecificationToTerraform(this._targetCapacitySpecification),
            terminate_instances_with_expiration: cdktf.booleanToTerraform(this._terminateInstancesWithExpiration),
            type: cdktf.stringToTerraform(this._type),
            valid_from: cdktf.stringToTerraform(this._validFrom),
            valid_until: cdktf.stringToTerraform(this._validUntil),
        };
    }
}
exports.Ec2Ec2Fleet = Ec2Ec2Fleet;
// =================
// STATIC PROPERTIES
// =================
Ec2Ec2Fleet.tfResourceType = "awscc_ec2_ec2_fleet";
//# sourceMappingURL=data:application/json;base64,