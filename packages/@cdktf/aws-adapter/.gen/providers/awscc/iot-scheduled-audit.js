"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_scheduled_audit.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotScheduledAudit = exports.iotScheduledAuditTagsToTerraform = void 0;
const cdktf = require("cdktf");
function iotScheduledAuditTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotScheduledAuditTagsToTerraform = iotScheduledAuditTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_scheduled_audit.html awscc_iot_scheduled_audit}
*/
class IotScheduledAudit extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_scheduled_audit.html awscc_iot_scheduled_audit} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotScheduledAuditConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_scheduled_audit',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._dayOfMonth = config.dayOfMonth;
        this._dayOfWeek = config.dayOfWeek;
        this._frequency = config.frequency;
        this._scheduledAuditName = config.scheduledAuditName;
        this._tags = config.tags;
        this._targetCheckNames = config.targetCheckNames;
    }
    get dayOfMonth() {
        return this.getStringAttribute('day_of_month');
    }
    set dayOfMonth(value) {
        this._dayOfMonth = value;
    }
    resetDayOfMonth() {
        this._dayOfMonth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfMonthInput() {
        return this._dayOfMonth;
    }
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    set dayOfWeek(value) {
        this._dayOfWeek = value;
    }
    resetDayOfWeek() {
        this._dayOfWeek = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekInput() {
        return this._dayOfWeek;
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // scheduled_audit_arn - computed: true, optional: false, required: false
    get scheduledAuditArn() {
        return this.getStringAttribute('scheduled_audit_arn');
    }
    get scheduledAuditName() {
        return this.getStringAttribute('scheduled_audit_name');
    }
    set scheduledAuditName(value) {
        this._scheduledAuditName = value;
    }
    resetScheduledAuditName() {
        this._scheduledAuditName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduledAuditNameInput() {
        return this._scheduledAuditName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targetCheckNames() {
        return this.getListAttribute('target_check_names');
    }
    set targetCheckNames(value) {
        this._targetCheckNames = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetCheckNamesInput() {
        return this._targetCheckNames;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            day_of_month: cdktf.stringToTerraform(this._dayOfMonth),
            day_of_week: cdktf.stringToTerraform(this._dayOfWeek),
            frequency: cdktf.stringToTerraform(this._frequency),
            scheduled_audit_name: cdktf.stringToTerraform(this._scheduledAuditName),
            tags: cdktf.listMapper(iotScheduledAuditTagsToTerraform)(this._tags),
            target_check_names: cdktf.listMapper(cdktf.stringToTerraform)(this._targetCheckNames),
        };
    }
}
exports.IotScheduledAudit = IotScheduledAudit;
// =================
// STATIC PROPERTIES
// =================
IotScheduledAudit.tfResourceType = "awscc_iot_scheduled_audit";
//# sourceMappingURL=data:application/json;base64,