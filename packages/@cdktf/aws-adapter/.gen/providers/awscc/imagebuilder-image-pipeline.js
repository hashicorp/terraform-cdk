"use strict";
// https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image_pipeline.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderImagePipeline = exports.imagebuilderImagePipelineScheduleToTerraform = exports.imagebuilderImagePipelineImageTestsConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function imagebuilderImagePipelineImageTestsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        image_tests_enabled: cdktf.booleanToTerraform(struct.imageTestsEnabled),
        timeout_minutes: cdktf.numberToTerraform(struct.timeoutMinutes),
    };
}
exports.imagebuilderImagePipelineImageTestsConfigurationToTerraform = imagebuilderImagePipelineImageTestsConfigurationToTerraform;
function imagebuilderImagePipelineScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        pipeline_execution_start_condition: cdktf.stringToTerraform(struct.pipelineExecutionStartCondition),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
    };
}
exports.imagebuilderImagePipelineScheduleToTerraform = imagebuilderImagePipelineScheduleToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image_pipeline.html awscc_imagebuilder_image_pipeline}
*/
class ImagebuilderImagePipeline extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image_pipeline.html awscc_imagebuilder_image_pipeline} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderImagePipelineConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_image_pipeline',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._containerRecipeArn = config.containerRecipeArn;
        this._description = config.description;
        this._distributionConfigurationArn = config.distributionConfigurationArn;
        this._enhancedImageMetadataEnabled = config.enhancedImageMetadataEnabled;
        this._imageRecipeArn = config.imageRecipeArn;
        this._imageTestsConfiguration = config.imageTestsConfiguration;
        this._infrastructureConfigurationArn = config.infrastructureConfigurationArn;
        this._name = config.name;
        this._schedule = config.schedule;
        this._status = config.status;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get containerRecipeArn() {
        return this.getStringAttribute('container_recipe_arn');
    }
    set containerRecipeArn(value) {
        this._containerRecipeArn = value;
    }
    resetContainerRecipeArn() {
        this._containerRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRecipeArnInput() {
        return this._containerRecipeArn;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get distributionConfigurationArn() {
        return this.getStringAttribute('distribution_configuration_arn');
    }
    set distributionConfigurationArn(value) {
        this._distributionConfigurationArn = value;
    }
    resetDistributionConfigurationArn() {
        this._distributionConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionConfigurationArnInput() {
        return this._distributionConfigurationArn;
    }
    get enhancedImageMetadataEnabled() {
        return this.getBooleanAttribute('enhanced_image_metadata_enabled');
    }
    set enhancedImageMetadataEnabled(value) {
        this._enhancedImageMetadataEnabled = value;
    }
    resetEnhancedImageMetadataEnabled() {
        this._enhancedImageMetadataEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enhancedImageMetadataEnabledInput() {
        return this._enhancedImageMetadataEnabled;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get imageRecipeArn() {
        return this.getStringAttribute('image_recipe_arn');
    }
    set imageRecipeArn(value) {
        this._imageRecipeArn = value;
    }
    resetImageRecipeArn() {
        this._imageRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageRecipeArnInput() {
        return this._imageRecipeArn;
    }
    get imageTestsConfiguration() {
        return this.interpolationForAttribute('image_tests_configuration');
    }
    set imageTestsConfiguration(value) {
        this._imageTestsConfiguration = value;
    }
    resetImageTestsConfiguration() {
        this._imageTestsConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTestsConfigurationInput() {
        return this._imageTestsConfiguration;
    }
    get infrastructureConfigurationArn() {
        return this.getStringAttribute('infrastructure_configuration_arn');
    }
    set infrastructureConfigurationArn(value) {
        this._infrastructureConfigurationArn = value;
    }
    resetInfrastructureConfigurationArn() {
        this._infrastructureConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infrastructureConfigurationArnInput() {
        return this._infrastructureConfigurationArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get schedule() {
        return this.interpolationForAttribute('schedule');
    }
    set schedule(value) {
        this._schedule = value;
    }
    resetSchedule() {
        this._schedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_recipe_arn: cdktf.stringToTerraform(this._containerRecipeArn),
            description: cdktf.stringToTerraform(this._description),
            distribution_configuration_arn: cdktf.stringToTerraform(this._distributionConfigurationArn),
            enhanced_image_metadata_enabled: cdktf.booleanToTerraform(this._enhancedImageMetadataEnabled),
            image_recipe_arn: cdktf.stringToTerraform(this._imageRecipeArn),
            image_tests_configuration: imagebuilderImagePipelineImageTestsConfigurationToTerraform(this._imageTestsConfiguration),
            infrastructure_configuration_arn: cdktf.stringToTerraform(this._infrastructureConfigurationArn),
            name: cdktf.stringToTerraform(this._name),
            schedule: imagebuilderImagePipelineScheduleToTerraform(this._schedule),
            status: cdktf.stringToTerraform(this._status),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.ImagebuilderImagePipeline = ImagebuilderImagePipeline;
// =================
// STATIC PROPERTIES
// =================
ImagebuilderImagePipeline.tfResourceType = "awscc_imagebuilder_image_pipeline";
//# sourceMappingURL=data:application/json;base64,