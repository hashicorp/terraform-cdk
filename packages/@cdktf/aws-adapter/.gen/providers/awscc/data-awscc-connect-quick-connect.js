"use strict";
// https://www.terraform.io/docs/providers/awscc/d/connect_quick_connect.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccConnectQuickConnect = exports.dataAwsccConnectQuickConnectTagsToTerraform = exports.DataAwsccConnectQuickConnectTags = exports.dataAwsccConnectQuickConnectQuickConnectConfigToTerraform = exports.DataAwsccConnectQuickConnectQuickConnectConfig = exports.dataAwsccConnectQuickConnectQuickConnectConfigUserConfigToTerraform = exports.DataAwsccConnectQuickConnectQuickConnectConfigUserConfig = exports.dataAwsccConnectQuickConnectQuickConnectConfigQueueConfigToTerraform = exports.DataAwsccConnectQuickConnectQuickConnectConfigQueueConfig = exports.dataAwsccConnectQuickConnectQuickConnectConfigPhoneConfigToTerraform = exports.DataAwsccConnectQuickConnectQuickConnectConfigPhoneConfig = void 0;
const cdktf = require("cdktf");
class DataAwsccConnectQuickConnectQuickConnectConfigPhoneConfig extends cdktf.ComplexComputedList {
    // phone_number - computed: true, optional: false, required: false
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
}
exports.DataAwsccConnectQuickConnectQuickConnectConfigPhoneConfig = DataAwsccConnectQuickConnectQuickConnectConfigPhoneConfig;
function dataAwsccConnectQuickConnectQuickConnectConfigPhoneConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dataAwsccConnectQuickConnectQuickConnectConfigPhoneConfigToTerraform = dataAwsccConnectQuickConnectQuickConnectConfigPhoneConfigToTerraform;
class DataAwsccConnectQuickConnectQuickConnectConfigQueueConfig extends cdktf.ComplexComputedList {
    // contact_flow_arn - computed: true, optional: false, required: false
    get contactFlowArn() {
        return this.getStringAttribute('contact_flow_arn');
    }
    // queue_arn - computed: true, optional: false, required: false
    get queueArn() {
        return this.getStringAttribute('queue_arn');
    }
}
exports.DataAwsccConnectQuickConnectQuickConnectConfigQueueConfig = DataAwsccConnectQuickConnectQuickConnectConfigQueueConfig;
function dataAwsccConnectQuickConnectQuickConnectConfigQueueConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_flow_arn: cdktf.stringToTerraform(struct.contactFlowArn),
        queue_arn: cdktf.stringToTerraform(struct.queueArn),
    };
}
exports.dataAwsccConnectQuickConnectQuickConnectConfigQueueConfigToTerraform = dataAwsccConnectQuickConnectQuickConnectConfigQueueConfigToTerraform;
class DataAwsccConnectQuickConnectQuickConnectConfigUserConfig extends cdktf.ComplexComputedList {
    // contact_flow_arn - computed: true, optional: false, required: false
    get contactFlowArn() {
        return this.getStringAttribute('contact_flow_arn');
    }
    // user_arn - computed: true, optional: false, required: false
    get userArn() {
        return this.getStringAttribute('user_arn');
    }
}
exports.DataAwsccConnectQuickConnectQuickConnectConfigUserConfig = DataAwsccConnectQuickConnectQuickConnectConfigUserConfig;
function dataAwsccConnectQuickConnectQuickConnectConfigUserConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_flow_arn: cdktf.stringToTerraform(struct.contactFlowArn),
        user_arn: cdktf.stringToTerraform(struct.userArn),
    };
}
exports.dataAwsccConnectQuickConnectQuickConnectConfigUserConfigToTerraform = dataAwsccConnectQuickConnectQuickConnectConfigUserConfigToTerraform;
class DataAwsccConnectQuickConnectQuickConnectConfig extends cdktf.ComplexComputedList {
    // phone_config - computed: true, optional: false, required: false
    get phoneConfig() {
        return this.interpolationForAttribute('phone_config');
    }
    // queue_config - computed: true, optional: false, required: false
    get queueConfig() {
        return this.interpolationForAttribute('queue_config');
    }
    // quick_connect_type - computed: true, optional: false, required: false
    get quickConnectType() {
        return this.getStringAttribute('quick_connect_type');
    }
    // user_config - computed: true, optional: false, required: false
    get userConfig() {
        return this.interpolationForAttribute('user_config');
    }
}
exports.DataAwsccConnectQuickConnectQuickConnectConfig = DataAwsccConnectQuickConnectQuickConnectConfig;
function dataAwsccConnectQuickConnectQuickConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        phone_config: dataAwsccConnectQuickConnectQuickConnectConfigPhoneConfigToTerraform(struct.phoneConfig),
        queue_config: dataAwsccConnectQuickConnectQuickConnectConfigQueueConfigToTerraform(struct.queueConfig),
        quick_connect_type: cdktf.stringToTerraform(struct.quickConnectType),
        user_config: dataAwsccConnectQuickConnectQuickConnectConfigUserConfigToTerraform(struct.userConfig),
    };
}
exports.dataAwsccConnectQuickConnectQuickConnectConfigToTerraform = dataAwsccConnectQuickConnectQuickConnectConfigToTerraform;
class DataAwsccConnectQuickConnectTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccConnectQuickConnectTags = DataAwsccConnectQuickConnectTags;
function dataAwsccConnectQuickConnectTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccConnectQuickConnectTagsToTerraform = dataAwsccConnectQuickConnectTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/connect_quick_connect.html awscc_connect_quick_connect}
*/
class DataAwsccConnectQuickConnect extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/connect_quick_connect.html awscc_connect_quick_connect} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccConnectQuickConnectConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_connect_quick_connect',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_arn - computed: true, optional: false, required: false
    get instanceArn() {
        return this.getStringAttribute('instance_arn');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // quick_connect_arn - computed: true, optional: false, required: false
    get quickConnectArn() {
        return this.getStringAttribute('quick_connect_arn');
    }
    // quick_connect_config - computed: true, optional: false, required: false
    get quickConnectConfig() {
        return this.interpolationForAttribute('quick_connect_config');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccConnectQuickConnect = DataAwsccConnectQuickConnect;
// =================
// STATIC PROPERTIES
// =================
DataAwsccConnectQuickConnect.tfResourceType = "awscc_connect_quick_connect";
//# sourceMappingURL=data:application/json;base64,