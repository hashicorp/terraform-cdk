"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_stack_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationStackSet = exports.cloudformationStackSetTagsToTerraform = exports.cloudformationStackSetStackInstancesGroupToTerraform = exports.cloudformationStackSetStackInstancesGroupParameterOverridesToTerraform = exports.cloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform = exports.cloudformationStackSetParametersToTerraform = exports.cloudformationStackSetOperationPreferencesToTerraform = exports.cloudformationStackSetAutoDeploymentToTerraform = void 0;
const cdktf = require("cdktf");
function cloudformationStackSetAutoDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        retain_stacks_on_account_removal: cdktf.booleanToTerraform(struct.retainStacksOnAccountRemoval),
    };
}
exports.cloudformationStackSetAutoDeploymentToTerraform = cloudformationStackSetAutoDeploymentToTerraform;
function cloudformationStackSetOperationPreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        failure_tolerance_count: cdktf.numberToTerraform(struct.failureToleranceCount),
        failure_tolerance_percentage: cdktf.numberToTerraform(struct.failureTolerancePercentage),
        max_concurrent_count: cdktf.numberToTerraform(struct.maxConcurrentCount),
        max_concurrent_percentage: cdktf.numberToTerraform(struct.maxConcurrentPercentage),
        region_concurrency_type: cdktf.stringToTerraform(struct.regionConcurrencyType),
        region_order: cdktf.listMapper(cdktf.stringToTerraform)(struct.regionOrder),
    };
}
exports.cloudformationStackSetOperationPreferencesToTerraform = cloudformationStackSetOperationPreferencesToTerraform;
function cloudformationStackSetParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_key: cdktf.stringToTerraform(struct.parameterKey),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.cloudformationStackSetParametersToTerraform = cloudformationStackSetParametersToTerraform;
function cloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        accounts: cdktf.listMapper(cdktf.stringToTerraform)(struct.accounts),
        organizational_unit_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.organizationalUnitIds),
    };
}
exports.cloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform = cloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform;
function cloudformationStackSetStackInstancesGroupParameterOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_key: cdktf.stringToTerraform(struct.parameterKey),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.cloudformationStackSetStackInstancesGroupParameterOverridesToTerraform = cloudformationStackSetStackInstancesGroupParameterOverridesToTerraform;
function cloudformationStackSetStackInstancesGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        deployment_targets: cloudformationStackSetStackInstancesGroupDeploymentTargetsToTerraform(struct.deploymentTargets),
        parameter_overrides: cdktf.listMapper(cloudformationStackSetStackInstancesGroupParameterOverridesToTerraform)(struct.parameterOverrides),
        regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.regions),
    };
}
exports.cloudformationStackSetStackInstancesGroupToTerraform = cloudformationStackSetStackInstancesGroupToTerraform;
function cloudformationStackSetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudformationStackSetTagsToTerraform = cloudformationStackSetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_stack_set.html awscc_cloudformation_stack_set}
*/
class CloudformationStackSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_stack_set.html awscc_cloudformation_stack_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationStackSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_stack_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._administrationRoleArn = config.administrationRoleArn;
        this._autoDeployment = config.autoDeployment;
        this._callAs = config.callAs;
        this._capabilities = config.capabilities;
        this._description = config.description;
        this._executionRoleName = config.executionRoleName;
        this._operationPreferences = config.operationPreferences;
        this._parameters = config.parameters;
        this._permissionModel = config.permissionModel;
        this._stackInstancesGroup = config.stackInstancesGroup;
        this._stackSetName = config.stackSetName;
        this._tags = config.tags;
        this._templateBody = config.templateBody;
        this._templateUrl = config.templateUrl;
    }
    get administrationRoleArn() {
        return this.getStringAttribute('administration_role_arn');
    }
    set administrationRoleArn(value) {
        this._administrationRoleArn = value;
    }
    resetAdministrationRoleArn() {
        this._administrationRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get administrationRoleArnInput() {
        return this._administrationRoleArn;
    }
    get autoDeployment() {
        return this.interpolationForAttribute('auto_deployment');
    }
    set autoDeployment(value) {
        this._autoDeployment = value;
    }
    resetAutoDeployment() {
        this._autoDeployment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeploymentInput() {
        return this._autoDeployment;
    }
    get callAs() {
        return this.getStringAttribute('call_as');
    }
    set callAs(value) {
        this._callAs = value;
    }
    resetCallAs() {
        this._callAs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get callAsInput() {
        return this._callAs;
    }
    get capabilities() {
        return this.getListAttribute('capabilities');
    }
    set capabilities(value) {
        this._capabilities = value;
    }
    resetCapabilities() {
        this._capabilities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capabilitiesInput() {
        return this._capabilities;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get executionRoleName() {
        return this.getStringAttribute('execution_role_name');
    }
    set executionRoleName(value) {
        this._executionRoleName = value;
    }
    resetExecutionRoleName() {
        this._executionRoleName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleNameInput() {
        return this._executionRoleName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get operationPreferences() {
        return this.interpolationForAttribute('operation_preferences');
    }
    set operationPreferences(value) {
        this._operationPreferences = value;
    }
    resetOperationPreferences() {
        this._operationPreferences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationPreferencesInput() {
        return this._operationPreferences;
    }
    get parameters() {
        return this.interpolationForAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get permissionModel() {
        return this.getStringAttribute('permission_model');
    }
    set permissionModel(value) {
        this._permissionModel = value;
    }
    // Temporarily expose input value. Use with caution.
    get permissionModelInput() {
        return this._permissionModel;
    }
    get stackInstancesGroup() {
        return this.interpolationForAttribute('stack_instances_group');
    }
    set stackInstancesGroup(value) {
        this._stackInstancesGroup = value;
    }
    resetStackInstancesGroup() {
        this._stackInstancesGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stackInstancesGroupInput() {
        return this._stackInstancesGroup;
    }
    // stack_set_id - computed: true, optional: false, required: false
    get stackSetId() {
        return this.getStringAttribute('stack_set_id');
    }
    get stackSetName() {
        return this.getStringAttribute('stack_set_name');
    }
    set stackSetName(value) {
        this._stackSetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get stackSetNameInput() {
        return this._stackSetName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get templateBody() {
        return this.getStringAttribute('template_body');
    }
    set templateBody(value) {
        this._templateBody = value;
    }
    resetTemplateBody() {
        this._templateBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateBodyInput() {
        return this._templateBody;
    }
    get templateUrl() {
        return this.getStringAttribute('template_url');
    }
    set templateUrl(value) {
        this._templateUrl = value;
    }
    resetTemplateUrl() {
        this._templateUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateUrlInput() {
        return this._templateUrl;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            administration_role_arn: cdktf.stringToTerraform(this._administrationRoleArn),
            auto_deployment: cloudformationStackSetAutoDeploymentToTerraform(this._autoDeployment),
            call_as: cdktf.stringToTerraform(this._callAs),
            capabilities: cdktf.listMapper(cdktf.stringToTerraform)(this._capabilities),
            description: cdktf.stringToTerraform(this._description),
            execution_role_name: cdktf.stringToTerraform(this._executionRoleName),
            operation_preferences: cloudformationStackSetOperationPreferencesToTerraform(this._operationPreferences),
            parameters: cdktf.listMapper(cloudformationStackSetParametersToTerraform)(this._parameters),
            permission_model: cdktf.stringToTerraform(this._permissionModel),
            stack_instances_group: cdktf.listMapper(cloudformationStackSetStackInstancesGroupToTerraform)(this._stackInstancesGroup),
            stack_set_name: cdktf.stringToTerraform(this._stackSetName),
            tags: cdktf.listMapper(cloudformationStackSetTagsToTerraform)(this._tags),
            template_body: cdktf.stringToTerraform(this._templateBody),
            template_url: cdktf.stringToTerraform(this._templateUrl),
        };
    }
}
exports.CloudformationStackSet = CloudformationStackSet;
// =================
// STATIC PROPERTIES
// =================
CloudformationStackSet.tfResourceType = "awscc_cloudformation_stack_set";
//# sourceMappingURL=data:application/json;base64,