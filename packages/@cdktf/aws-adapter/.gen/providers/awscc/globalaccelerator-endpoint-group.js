"use strict";
// https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_endpoint_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalacceleratorEndpointGroup = exports.globalacceleratorEndpointGroupPortOverridesToTerraform = exports.globalacceleratorEndpointGroupEndpointConfigurationsToTerraform = void 0;
const cdktf = require("cdktf");
function globalacceleratorEndpointGroupEndpointConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_ip_preservation_enabled: cdktf.booleanToTerraform(struct.clientIpPreservationEnabled),
        endpoint_id: cdktf.stringToTerraform(struct.endpointId),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.globalacceleratorEndpointGroupEndpointConfigurationsToTerraform = globalacceleratorEndpointGroupEndpointConfigurationsToTerraform;
function globalacceleratorEndpointGroupPortOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_port: cdktf.numberToTerraform(struct.endpointPort),
        listener_port: cdktf.numberToTerraform(struct.listenerPort),
    };
}
exports.globalacceleratorEndpointGroupPortOverridesToTerraform = globalacceleratorEndpointGroupPortOverridesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_endpoint_group.html awscc_globalaccelerator_endpoint_group}
*/
class GlobalacceleratorEndpointGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_endpoint_group.html awscc_globalaccelerator_endpoint_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlobalacceleratorEndpointGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_globalaccelerator_endpoint_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._endpointConfigurations = config.endpointConfigurations;
        this._endpointGroupRegion = config.endpointGroupRegion;
        this._healthCheckIntervalSeconds = config.healthCheckIntervalSeconds;
        this._healthCheckPath = config.healthCheckPath;
        this._healthCheckPort = config.healthCheckPort;
        this._healthCheckProtocol = config.healthCheckProtocol;
        this._listenerArn = config.listenerArn;
        this._portOverrides = config.portOverrides;
        this._thresholdCount = config.thresholdCount;
        this._trafficDialPercentage = config.trafficDialPercentage;
    }
    get endpointConfigurations() {
        return this.interpolationForAttribute('endpoint_configurations');
    }
    set endpointConfigurations(value) {
        this._endpointConfigurations = value;
    }
    resetEndpointConfigurations() {
        this._endpointConfigurations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigurationsInput() {
        return this._endpointConfigurations;
    }
    // endpoint_group_arn - computed: true, optional: false, required: false
    get endpointGroupArn() {
        return this.getStringAttribute('endpoint_group_arn');
    }
    get endpointGroupRegion() {
        return this.getStringAttribute('endpoint_group_region');
    }
    set endpointGroupRegion(value) {
        this._endpointGroupRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointGroupRegionInput() {
        return this._endpointGroupRegion;
    }
    get healthCheckIntervalSeconds() {
        return this.getNumberAttribute('health_check_interval_seconds');
    }
    set healthCheckIntervalSeconds(value) {
        this._healthCheckIntervalSeconds = value;
    }
    resetHealthCheckIntervalSeconds() {
        this._healthCheckIntervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckIntervalSecondsInput() {
        return this._healthCheckIntervalSeconds;
    }
    get healthCheckPath() {
        return this.getStringAttribute('health_check_path');
    }
    set healthCheckPath(value) {
        this._healthCheckPath = value;
    }
    resetHealthCheckPath() {
        this._healthCheckPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckPathInput() {
        return this._healthCheckPath;
    }
    get healthCheckPort() {
        return this.getNumberAttribute('health_check_port');
    }
    set healthCheckPort(value) {
        this._healthCheckPort = value;
    }
    resetHealthCheckPort() {
        this._healthCheckPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckPortInput() {
        return this._healthCheckPort;
    }
    get healthCheckProtocol() {
        return this.getStringAttribute('health_check_protocol');
    }
    set healthCheckProtocol(value) {
        this._healthCheckProtocol = value;
    }
    resetHealthCheckProtocol() {
        this._healthCheckProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckProtocolInput() {
        return this._healthCheckProtocol;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get listenerArn() {
        return this.getStringAttribute('listener_arn');
    }
    set listenerArn(value) {
        this._listenerArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get listenerArnInput() {
        return this._listenerArn;
    }
    get portOverrides() {
        return this.interpolationForAttribute('port_overrides');
    }
    set portOverrides(value) {
        this._portOverrides = value;
    }
    resetPortOverrides() {
        this._portOverrides = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portOverridesInput() {
        return this._portOverrides;
    }
    get thresholdCount() {
        return this.getNumberAttribute('threshold_count');
    }
    set thresholdCount(value) {
        this._thresholdCount = value;
    }
    resetThresholdCount() {
        this._thresholdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdCountInput() {
        return this._thresholdCount;
    }
    get trafficDialPercentage() {
        return this.getNumberAttribute('traffic_dial_percentage');
    }
    set trafficDialPercentage(value) {
        this._trafficDialPercentage = value;
    }
    resetTrafficDialPercentage() {
        this._trafficDialPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trafficDialPercentageInput() {
        return this._trafficDialPercentage;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            endpoint_configurations: cdktf.listMapper(globalacceleratorEndpointGroupEndpointConfigurationsToTerraform)(this._endpointConfigurations),
            endpoint_group_region: cdktf.stringToTerraform(this._endpointGroupRegion),
            health_check_interval_seconds: cdktf.numberToTerraform(this._healthCheckIntervalSeconds),
            health_check_path: cdktf.stringToTerraform(this._healthCheckPath),
            health_check_port: cdktf.numberToTerraform(this._healthCheckPort),
            health_check_protocol: cdktf.stringToTerraform(this._healthCheckProtocol),
            listener_arn: cdktf.stringToTerraform(this._listenerArn),
            port_overrides: cdktf.listMapper(globalacceleratorEndpointGroupPortOverridesToTerraform)(this._portOverrides),
            threshold_count: cdktf.numberToTerraform(this._thresholdCount),
            traffic_dial_percentage: cdktf.numberToTerraform(this._trafficDialPercentage),
        };
    }
}
exports.GlobalacceleratorEndpointGroup = GlobalacceleratorEndpointGroup;
// =================
// STATIC PROPERTIES
// =================
GlobalacceleratorEndpointGroup.tfResourceType = "awscc_globalaccelerator_endpoint_group";
//# sourceMappingURL=data:application/json;base64,