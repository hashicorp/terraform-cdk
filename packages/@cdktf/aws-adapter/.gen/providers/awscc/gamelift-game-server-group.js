"use strict";
// https://www.terraform.io/docs/providers/awscc/r/gamelift_game_server_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameliftGameServerGroup = exports.gameliftGameServerGroupTagsToTerraform = exports.gameliftGameServerGroupLaunchTemplateToTerraform = exports.gameliftGameServerGroupInstanceDefinitionsToTerraform = exports.gameliftGameServerGroupAutoScalingPolicyToTerraform = exports.gameliftGameServerGroupAutoScalingPolicyTargetTrackingConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function gameliftGameServerGroupAutoScalingPolicyTargetTrackingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target_value: cdktf.numberToTerraform(struct.targetValue),
    };
}
exports.gameliftGameServerGroupAutoScalingPolicyTargetTrackingConfigurationToTerraform = gameliftGameServerGroupAutoScalingPolicyTargetTrackingConfigurationToTerraform;
function gameliftGameServerGroupAutoScalingPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        estimated_instance_warmup: cdktf.numberToTerraform(struct.estimatedInstanceWarmup),
        target_tracking_configuration: gameliftGameServerGroupAutoScalingPolicyTargetTrackingConfigurationToTerraform(struct.targetTrackingConfiguration),
    };
}
exports.gameliftGameServerGroupAutoScalingPolicyToTerraform = gameliftGameServerGroupAutoScalingPolicyToTerraform;
function gameliftGameServerGroupInstanceDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        weighted_capacity: cdktf.stringToTerraform(struct.weightedCapacity),
    };
}
exports.gameliftGameServerGroupInstanceDefinitionsToTerraform = gameliftGameServerGroupInstanceDefinitionsToTerraform;
function gameliftGameServerGroupLaunchTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        launch_template_name: cdktf.stringToTerraform(struct.launchTemplateName),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.gameliftGameServerGroupLaunchTemplateToTerraform = gameliftGameServerGroupLaunchTemplateToTerraform;
function gameliftGameServerGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gameliftGameServerGroupTagsToTerraform = gameliftGameServerGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/gamelift_game_server_group.html awscc_gamelift_game_server_group}
*/
class GameliftGameServerGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/gamelift_game_server_group.html awscc_gamelift_game_server_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GameliftGameServerGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_gamelift_game_server_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoScalingPolicy = config.autoScalingPolicy;
        this._balancingStrategy = config.balancingStrategy;
        this._deleteOption = config.deleteOption;
        this._gameServerGroupName = config.gameServerGroupName;
        this._gameServerProtectionPolicy = config.gameServerProtectionPolicy;
        this._instanceDefinitions = config.instanceDefinitions;
        this._launchTemplate = config.launchTemplate;
        this._maxSize = config.maxSize;
        this._minSize = config.minSize;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._vpcSubnets = config.vpcSubnets;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // auto_scaling_group_arn - computed: true, optional: false, required: false
    get autoScalingGroupArn() {
        return this.getStringAttribute('auto_scaling_group_arn');
    }
    get autoScalingPolicy() {
        return this.interpolationForAttribute('auto_scaling_policy');
    }
    set autoScalingPolicy(value) {
        this._autoScalingPolicy = value;
    }
    resetAutoScalingPolicy() {
        this._autoScalingPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingPolicyInput() {
        return this._autoScalingPolicy;
    }
    get balancingStrategy() {
        return this.getStringAttribute('balancing_strategy');
    }
    set balancingStrategy(value) {
        this._balancingStrategy = value;
    }
    resetBalancingStrategy() {
        this._balancingStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get balancingStrategyInput() {
        return this._balancingStrategy;
    }
    get deleteOption() {
        return this.getStringAttribute('delete_option');
    }
    set deleteOption(value) {
        this._deleteOption = value;
    }
    resetDeleteOption() {
        this._deleteOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOptionInput() {
        return this._deleteOption;
    }
    // game_server_group_arn - computed: true, optional: false, required: false
    get gameServerGroupArn() {
        return this.getStringAttribute('game_server_group_arn');
    }
    get gameServerGroupName() {
        return this.getStringAttribute('game_server_group_name');
    }
    set gameServerGroupName(value) {
        this._gameServerGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get gameServerGroupNameInput() {
        return this._gameServerGroupName;
    }
    get gameServerProtectionPolicy() {
        return this.getStringAttribute('game_server_protection_policy');
    }
    set gameServerProtectionPolicy(value) {
        this._gameServerProtectionPolicy = value;
    }
    resetGameServerProtectionPolicy() {
        this._gameServerProtectionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gameServerProtectionPolicyInput() {
        return this._gameServerProtectionPolicy;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceDefinitions() {
        return this.interpolationForAttribute('instance_definitions');
    }
    set instanceDefinitions(value) {
        this._instanceDefinitions = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceDefinitionsInput() {
        return this._instanceDefinitions;
    }
    get launchTemplate() {
        return this.interpolationForAttribute('launch_template');
    }
    set launchTemplate(value) {
        this._launchTemplate = value;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateInput() {
        return this._launchTemplate;
    }
    get maxSize() {
        return this.getNumberAttribute('max_size');
    }
    set maxSize(value) {
        this._maxSize = value;
    }
    resetMaxSize() {
        this._maxSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSizeInput() {
        return this._maxSize;
    }
    get minSize() {
        return this.getNumberAttribute('min_size');
    }
    set minSize(value) {
        this._minSize = value;
    }
    resetMinSize() {
        this._minSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minSizeInput() {
        return this._minSize;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get vpcSubnets() {
        return this.getListAttribute('vpc_subnets');
    }
    set vpcSubnets(value) {
        this._vpcSubnets = value;
    }
    resetVpcSubnets() {
        this._vpcSubnets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSubnetsInput() {
        return this._vpcSubnets;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_scaling_policy: gameliftGameServerGroupAutoScalingPolicyToTerraform(this._autoScalingPolicy),
            balancing_strategy: cdktf.stringToTerraform(this._balancingStrategy),
            delete_option: cdktf.stringToTerraform(this._deleteOption),
            game_server_group_name: cdktf.stringToTerraform(this._gameServerGroupName),
            game_server_protection_policy: cdktf.stringToTerraform(this._gameServerProtectionPolicy),
            instance_definitions: cdktf.listMapper(gameliftGameServerGroupInstanceDefinitionsToTerraform)(this._instanceDefinitions),
            launch_template: gameliftGameServerGroupLaunchTemplateToTerraform(this._launchTemplate),
            max_size: cdktf.numberToTerraform(this._maxSize),
            min_size: cdktf.numberToTerraform(this._minSize),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(gameliftGameServerGroupTagsToTerraform)(this._tags),
            vpc_subnets: cdktf.listMapper(cdktf.stringToTerraform)(this._vpcSubnets),
        };
    }
}
exports.GameliftGameServerGroup = GameliftGameServerGroup;
// =================
// STATIC PROPERTIES
// =================
GameliftGameServerGroup.tfResourceType = "awscc_gamelift_game_server_group";
//# sourceMappingURL=data:application/json;base64,