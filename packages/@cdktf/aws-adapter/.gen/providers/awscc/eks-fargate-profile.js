"use strict";
// https://www.terraform.io/docs/providers/awscc/r/eks_fargate_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EksFargateProfile = exports.eksFargateProfileTagsToTerraform = exports.eksFargateProfileSelectorsToTerraform = exports.eksFargateProfileSelectorsLabelsToTerraform = void 0;
const cdktf = require("cdktf");
function eksFargateProfileSelectorsLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.eksFargateProfileSelectorsLabelsToTerraform = eksFargateProfileSelectorsLabelsToTerraform;
function eksFargateProfileSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        labels: cdktf.listMapper(eksFargateProfileSelectorsLabelsToTerraform)(struct.labels),
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.eksFargateProfileSelectorsToTerraform = eksFargateProfileSelectorsToTerraform;
function eksFargateProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.eksFargateProfileTagsToTerraform = eksFargateProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/eks_fargate_profile.html awscc_eks_fargate_profile}
*/
class EksFargateProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/eks_fargate_profile.html awscc_eks_fargate_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EksFargateProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_eks_fargate_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._clusterName = config.clusterName;
        this._fargateProfileName = config.fargateProfileName;
        this._podExecutionRoleArn = config.podExecutionRoleArn;
        this._selectors = config.selectors;
        this._subnets = config.subnets;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    get fargateProfileName() {
        return this.getStringAttribute('fargate_profile_name');
    }
    set fargateProfileName(value) {
        this._fargateProfileName = value;
    }
    resetFargateProfileName() {
        this._fargateProfileName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fargateProfileNameInput() {
        return this._fargateProfileName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get podExecutionRoleArn() {
        return this.getStringAttribute('pod_execution_role_arn');
    }
    set podExecutionRoleArn(value) {
        this._podExecutionRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get podExecutionRoleArnInput() {
        return this._podExecutionRoleArn;
    }
    get selectors() {
        return this.interpolationForAttribute('selectors');
    }
    set selectors(value) {
        this._selectors = value;
    }
    // Temporarily expose input value. Use with caution.
    get selectorsInput() {
        return this._selectors;
    }
    get subnets() {
        return this.getListAttribute('subnets');
    }
    set subnets(value) {
        this._subnets = value;
    }
    resetSubnets() {
        this._subnets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetsInput() {
        return this._subnets;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_name: cdktf.stringToTerraform(this._clusterName),
            fargate_profile_name: cdktf.stringToTerraform(this._fargateProfileName),
            pod_execution_role_arn: cdktf.stringToTerraform(this._podExecutionRoleArn),
            selectors: cdktf.listMapper(eksFargateProfileSelectorsToTerraform)(this._selectors),
            subnets: cdktf.listMapper(cdktf.stringToTerraform)(this._subnets),
            tags: cdktf.listMapper(eksFargateProfileTagsToTerraform)(this._tags),
        };
    }
}
exports.EksFargateProfile = EksFargateProfile;
// =================
// STATIC PROPERTIES
// =================
EksFargateProfile.tfResourceType = "awscc_eks_fargate_profile";
//# sourceMappingURL=data:application/json;base64,