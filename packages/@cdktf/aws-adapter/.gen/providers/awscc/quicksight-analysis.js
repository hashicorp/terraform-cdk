"use strict";
// https://www.terraform.io/docs/providers/awscc/r/quicksight_analysis.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuicksightAnalysis = exports.quicksightAnalysisTagsToTerraform = exports.quicksightAnalysisSourceEntityToTerraform = exports.quicksightAnalysisSourceEntitySourceTemplateToTerraform = exports.quicksightAnalysisSourceEntitySourceTemplateDataSetReferencesToTerraform = exports.quicksightAnalysisSheetsToTerraform = exports.QuicksightAnalysisSheets = exports.quicksightAnalysisPermissionsToTerraform = exports.quicksightAnalysisParametersToTerraform = exports.quicksightAnalysisParametersStringParametersToTerraform = exports.quicksightAnalysisParametersIntegerParametersToTerraform = exports.quicksightAnalysisParametersDecimalParametersToTerraform = exports.quicksightAnalysisParametersDateTimeParametersToTerraform = exports.quicksightAnalysisErrorsToTerraform = void 0;
const cdktf = require("cdktf");
function quicksightAnalysisErrorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        message: cdktf.stringToTerraform(struct.message),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.quicksightAnalysisErrorsToTerraform = quicksightAnalysisErrorsToTerraform;
function quicksightAnalysisParametersDateTimeParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.quicksightAnalysisParametersDateTimeParametersToTerraform = quicksightAnalysisParametersDateTimeParametersToTerraform;
function quicksightAnalysisParametersDecimalParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.numberToTerraform)(struct.values),
    };
}
exports.quicksightAnalysisParametersDecimalParametersToTerraform = quicksightAnalysisParametersDecimalParametersToTerraform;
function quicksightAnalysisParametersIntegerParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.numberToTerraform)(struct.values),
    };
}
exports.quicksightAnalysisParametersIntegerParametersToTerraform = quicksightAnalysisParametersIntegerParametersToTerraform;
function quicksightAnalysisParametersStringParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.quicksightAnalysisParametersStringParametersToTerraform = quicksightAnalysisParametersStringParametersToTerraform;
function quicksightAnalysisParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        date_time_parameters: cdktf.listMapper(quicksightAnalysisParametersDateTimeParametersToTerraform)(struct.dateTimeParameters),
        decimal_parameters: cdktf.listMapper(quicksightAnalysisParametersDecimalParametersToTerraform)(struct.decimalParameters),
        integer_parameters: cdktf.listMapper(quicksightAnalysisParametersIntegerParametersToTerraform)(struct.integerParameters),
        string_parameters: cdktf.listMapper(quicksightAnalysisParametersStringParametersToTerraform)(struct.stringParameters),
    };
}
exports.quicksightAnalysisParametersToTerraform = quicksightAnalysisParametersToTerraform;
function quicksightAnalysisPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.quicksightAnalysisPermissionsToTerraform = quicksightAnalysisPermissionsToTerraform;
class QuicksightAnalysisSheets extends cdktf.ComplexComputedList {
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sheetId() {
        return this.getStringAttribute('sheet_id');
    }
    set sheetId(value) {
        this._sheetId = value;
    }
    resetSheetId() {
        this._sheetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sheetIdInput() {
        return this._sheetId;
    }
}
exports.QuicksightAnalysisSheets = QuicksightAnalysisSheets;
function quicksightAnalysisSheetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        sheet_id: cdktf.stringToTerraform(struct.sheetId),
    };
}
exports.quicksightAnalysisSheetsToTerraform = quicksightAnalysisSheetsToTerraform;
function quicksightAnalysisSourceEntitySourceTemplateDataSetReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_set_arn: cdktf.stringToTerraform(struct.dataSetArn),
        data_set_placeholder: cdktf.stringToTerraform(struct.dataSetPlaceholder),
    };
}
exports.quicksightAnalysisSourceEntitySourceTemplateDataSetReferencesToTerraform = quicksightAnalysisSourceEntitySourceTemplateDataSetReferencesToTerraform;
function quicksightAnalysisSourceEntitySourceTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        data_set_references: cdktf.listMapper(quicksightAnalysisSourceEntitySourceTemplateDataSetReferencesToTerraform)(struct.dataSetReferences),
    };
}
exports.quicksightAnalysisSourceEntitySourceTemplateToTerraform = quicksightAnalysisSourceEntitySourceTemplateToTerraform;
function quicksightAnalysisSourceEntityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source_template: quicksightAnalysisSourceEntitySourceTemplateToTerraform(struct.sourceTemplate),
    };
}
exports.quicksightAnalysisSourceEntityToTerraform = quicksightAnalysisSourceEntityToTerraform;
function quicksightAnalysisTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.quicksightAnalysisTagsToTerraform = quicksightAnalysisTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/quicksight_analysis.html awscc_quicksight_analysis}
*/
class QuicksightAnalysis extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/quicksight_analysis.html awscc_quicksight_analysis} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options QuicksightAnalysisConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_quicksight_analysis',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._analysisId = config.analysisId;
        this._awsAccountId = config.awsAccountId;
        this._errors = config.errors;
        this._name = config.name;
        this._parameters = config.parameters;
        this._permissions = config.permissions;
        this._sourceEntity = config.sourceEntity;
        this._tags = config.tags;
        this._themeArn = config.themeArn;
    }
    get analysisId() {
        return this.getStringAttribute('analysis_id');
    }
    set analysisId(value) {
        this._analysisId = value;
    }
    // Temporarily expose input value. Use with caution.
    get analysisIdInput() {
        return this._analysisId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get awsAccountId() {
        return this.getStringAttribute('aws_account_id');
    }
    set awsAccountId(value) {
        this._awsAccountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsAccountIdInput() {
        return this._awsAccountId;
    }
    // created_time - computed: true, optional: false, required: false
    get createdTime() {
        return this.getStringAttribute('created_time');
    }
    // data_set_arns - computed: true, optional: false, required: false
    get dataSetArns() {
        return this.getListAttribute('data_set_arns');
    }
    get errors() {
        return this.interpolationForAttribute('errors');
    }
    set errors(value) {
        this._errors = value;
    }
    resetErrors() {
        this._errors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorsInput() {
        return this._errors;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_time - computed: true, optional: false, required: false
    get lastUpdatedTime() {
        return this.getStringAttribute('last_updated_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parameters() {
        return this.interpolationForAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get permissions() {
        return this.interpolationForAttribute('permissions');
    }
    set permissions(value) {
        this._permissions = value;
    }
    resetPermissions() {
        this._permissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    // sheets - computed: true, optional: false, required: false
    get sheets() {
        return this.interpolationForAttribute('sheets');
    }
    get sourceEntity() {
        return this.interpolationForAttribute('source_entity');
    }
    set sourceEntity(value) {
        this._sourceEntity = value;
    }
    resetSourceEntity() {
        this._sourceEntity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEntityInput() {
        return this._sourceEntity;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get themeArn() {
        return this.getStringAttribute('theme_arn');
    }
    set themeArn(value) {
        this._themeArn = value;
    }
    resetThemeArn() {
        this._themeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get themeArnInput() {
        return this._themeArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            analysis_id: cdktf.stringToTerraform(this._analysisId),
            aws_account_id: cdktf.stringToTerraform(this._awsAccountId),
            errors: cdktf.listMapper(quicksightAnalysisErrorsToTerraform)(this._errors),
            name: cdktf.stringToTerraform(this._name),
            parameters: quicksightAnalysisParametersToTerraform(this._parameters),
            permissions: cdktf.listMapper(quicksightAnalysisPermissionsToTerraform)(this._permissions),
            source_entity: quicksightAnalysisSourceEntityToTerraform(this._sourceEntity),
            tags: cdktf.listMapper(quicksightAnalysisTagsToTerraform)(this._tags),
            theme_arn: cdktf.stringToTerraform(this._themeArn),
        };
    }
}
exports.QuicksightAnalysis = QuicksightAnalysis;
// =================
// STATIC PROPERTIES
// =================
QuicksightAnalysis.tfResourceType = "awscc_quicksight_analysis";
//# sourceMappingURL=data:application/json;base64,