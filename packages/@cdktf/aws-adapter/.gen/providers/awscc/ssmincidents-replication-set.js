"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssmincidents_replication_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmincidentsReplicationSet = exports.ssmincidentsReplicationSetRegionsToTerraform = exports.ssmincidentsReplicationSetRegionsRegionConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function ssmincidentsReplicationSetRegionsRegionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sse_kms_key_id: cdktf.stringToTerraform(struct.sseKmsKeyId),
    };
}
exports.ssmincidentsReplicationSetRegionsRegionConfigurationToTerraform = ssmincidentsReplicationSetRegionsRegionConfigurationToTerraform;
function ssmincidentsReplicationSetRegionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        region_configuration: ssmincidentsReplicationSetRegionsRegionConfigurationToTerraform(struct.regionConfiguration),
        region_name: cdktf.stringToTerraform(struct.regionName),
    };
}
exports.ssmincidentsReplicationSetRegionsToTerraform = ssmincidentsReplicationSetRegionsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssmincidents_replication_set.html awscc_ssmincidents_replication_set}
*/
class SsmincidentsReplicationSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssmincidents_replication_set.html awscc_ssmincidents_replication_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmincidentsReplicationSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssmincidents_replication_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deletionProtected = config.deletionProtected;
        this._regions = config.regions;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deletionProtected() {
        return this.getBooleanAttribute('deletion_protected');
    }
    set deletionProtected(value) {
        this._deletionProtected = value;
    }
    resetDeletionProtected() {
        this._deletionProtected = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectedInput() {
        return this._deletionProtected;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get regions() {
        return this.interpolationForAttribute('regions');
    }
    set regions(value) {
        this._regions = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            deletion_protected: cdktf.booleanToTerraform(this._deletionProtected),
            regions: cdktf.listMapper(ssmincidentsReplicationSetRegionsToTerraform)(this._regions),
        };
    }
}
exports.SsmincidentsReplicationSet = SsmincidentsReplicationSet;
// =================
// STATIC PROPERTIES
// =================
SsmincidentsReplicationSet.tfResourceType = "awscc_ssmincidents_replication_set";
//# sourceMappingURL=data:application/json;base64,