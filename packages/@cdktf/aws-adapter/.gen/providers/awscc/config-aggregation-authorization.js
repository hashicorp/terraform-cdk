"use strict";
// https://www.terraform.io/docs/providers/awscc/r/config_aggregation_authorization.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigAggregationAuthorization = exports.configAggregationAuthorizationTagsToTerraform = void 0;
const cdktf = require("cdktf");
function configAggregationAuthorizationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.configAggregationAuthorizationTagsToTerraform = configAggregationAuthorizationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/config_aggregation_authorization.html awscc_config_aggregation_authorization}
*/
class ConfigAggregationAuthorization extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/config_aggregation_authorization.html awscc_config_aggregation_authorization} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigAggregationAuthorizationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_config_aggregation_authorization',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authorizedAccountId = config.authorizedAccountId;
        this._authorizedAwsRegion = config.authorizedAwsRegion;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // aggregation_authorization_arn - computed: true, optional: false, required: false
    get aggregationAuthorizationArn() {
        return this.getStringAttribute('aggregation_authorization_arn');
    }
    get authorizedAccountId() {
        return this.getStringAttribute('authorized_account_id');
    }
    set authorizedAccountId(value) {
        this._authorizedAccountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizedAccountIdInput() {
        return this._authorizedAccountId;
    }
    get authorizedAwsRegion() {
        return this.getStringAttribute('authorized_aws_region');
    }
    set authorizedAwsRegion(value) {
        this._authorizedAwsRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizedAwsRegionInput() {
        return this._authorizedAwsRegion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorized_account_id: cdktf.stringToTerraform(this._authorizedAccountId),
            authorized_aws_region: cdktf.stringToTerraform(this._authorizedAwsRegion),
            tags: cdktf.listMapper(configAggregationAuthorizationTagsToTerraform)(this._tags),
        };
    }
}
exports.ConfigAggregationAuthorization = ConfigAggregationAuthorization;
// =================
// STATIC PROPERTIES
// =================
ConfigAggregationAuthorization.tfResourceType = "awscc_config_aggregation_authorization";
//# sourceMappingURL=data:application/json;base64,