"use strict";
// https://www.terraform.io/docs/providers/awscc/r/finspace_environment.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinspaceEnvironment = exports.finspaceEnvironmentFederationParametersToTerraform = void 0;
const cdktf = require("cdktf");
function finspaceEnvironmentFederationParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        application_call_back_url: cdktf.stringToTerraform(struct.applicationCallBackUrl),
        attribute_map: cdktf.hashMapper(cdktf.anyToTerraform)(struct.attributeMap),
        federation_provider_name: cdktf.stringToTerraform(struct.federationProviderName),
        federation_urn: cdktf.stringToTerraform(struct.federationUrn),
        saml_metadata_document: cdktf.stringToTerraform(struct.samlMetadataDocument),
        saml_metadata_url: cdktf.stringToTerraform(struct.samlMetadataUrl),
    };
}
exports.finspaceEnvironmentFederationParametersToTerraform = finspaceEnvironmentFederationParametersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/finspace_environment.html awscc_finspace_environment}
*/
class FinspaceEnvironment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/finspace_environment.html awscc_finspace_environment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FinspaceEnvironmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_finspace_environment',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._federationMode = config.federationMode;
        this._federationParameters = config.federationParameters;
        this._kmsKeyId = config.kmsKeyId;
        this._name = config.name;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // aws_account_id - computed: true, optional: false, required: false
    get awsAccountId() {
        return this.getStringAttribute('aws_account_id');
    }
    // dedicated_service_account_id - computed: true, optional: false, required: false
    get dedicatedServiceAccountId() {
        return this.getStringAttribute('dedicated_service_account_id');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // environment_arn - computed: true, optional: false, required: false
    get environmentArn() {
        return this.getStringAttribute('environment_arn');
    }
    // environment_id - computed: true, optional: false, required: false
    get environmentId() {
        return this.getStringAttribute('environment_id');
    }
    // environment_url - computed: true, optional: false, required: false
    get environmentUrl() {
        return this.getStringAttribute('environment_url');
    }
    get federationMode() {
        return this.getStringAttribute('federation_mode');
    }
    set federationMode(value) {
        this._federationMode = value;
    }
    resetFederationMode() {
        this._federationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get federationModeInput() {
        return this._federationMode;
    }
    get federationParameters() {
        return this.interpolationForAttribute('federation_parameters');
    }
    set federationParameters(value) {
        this._federationParameters = value;
    }
    resetFederationParameters() {
        this._federationParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get federationParametersInput() {
        return this._federationParameters;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // sage_maker_studio_domain_url - computed: true, optional: false, required: false
    get sageMakerStudioDomainUrl() {
        return this.getStringAttribute('sage_maker_studio_domain_url');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            federation_mode: cdktf.stringToTerraform(this._federationMode),
            federation_parameters: finspaceEnvironmentFederationParametersToTerraform(this._federationParameters),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            name: cdktf.stringToTerraform(this._name),
        };
    }
}
exports.FinspaceEnvironment = FinspaceEnvironment;
// =================
// STATIC PROPERTIES
// =================
FinspaceEnvironment.tfResourceType = "awscc_finspace_environment";
//# sourceMappingURL=data:application/json;base64,