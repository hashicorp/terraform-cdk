"use strict";
// https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_pipeline.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccImagebuilderImagePipeline = exports.dataAwsccImagebuilderImagePipelineScheduleToTerraform = exports.DataAwsccImagebuilderImagePipelineSchedule = exports.dataAwsccImagebuilderImagePipelineImageTestsConfigurationToTerraform = exports.DataAwsccImagebuilderImagePipelineImageTestsConfiguration = void 0;
const cdktf = require("cdktf");
class DataAwsccImagebuilderImagePipelineImageTestsConfiguration extends cdktf.ComplexComputedList {
    // image_tests_enabled - computed: true, optional: false, required: false
    get imageTestsEnabled() {
        return this.getBooleanAttribute('image_tests_enabled');
    }
    // timeout_minutes - computed: true, optional: false, required: false
    get timeoutMinutes() {
        return this.getNumberAttribute('timeout_minutes');
    }
}
exports.DataAwsccImagebuilderImagePipelineImageTestsConfiguration = DataAwsccImagebuilderImagePipelineImageTestsConfiguration;
function dataAwsccImagebuilderImagePipelineImageTestsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        image_tests_enabled: cdktf.booleanToTerraform(struct.imageTestsEnabled),
        timeout_minutes: cdktf.numberToTerraform(struct.timeoutMinutes),
    };
}
exports.dataAwsccImagebuilderImagePipelineImageTestsConfigurationToTerraform = dataAwsccImagebuilderImagePipelineImageTestsConfigurationToTerraform;
class DataAwsccImagebuilderImagePipelineSchedule extends cdktf.ComplexComputedList {
    // pipeline_execution_start_condition - computed: true, optional: false, required: false
    get pipelineExecutionStartCondition() {
        return this.getStringAttribute('pipeline_execution_start_condition');
    }
    // schedule_expression - computed: true, optional: false, required: false
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
}
exports.DataAwsccImagebuilderImagePipelineSchedule = DataAwsccImagebuilderImagePipelineSchedule;
function dataAwsccImagebuilderImagePipelineScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        pipeline_execution_start_condition: cdktf.stringToTerraform(struct.pipelineExecutionStartCondition),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
    };
}
exports.dataAwsccImagebuilderImagePipelineScheduleToTerraform = dataAwsccImagebuilderImagePipelineScheduleToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_pipeline.html awscc_imagebuilder_image_pipeline}
*/
class DataAwsccImagebuilderImagePipeline extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_pipeline.html awscc_imagebuilder_image_pipeline} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccImagebuilderImagePipelineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_image_pipeline',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // container_recipe_arn - computed: true, optional: false, required: false
    get containerRecipeArn() {
        return this.getStringAttribute('container_recipe_arn');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // distribution_configuration_arn - computed: true, optional: false, required: false
    get distributionConfigurationArn() {
        return this.getStringAttribute('distribution_configuration_arn');
    }
    // enhanced_image_metadata_enabled - computed: true, optional: false, required: false
    get enhancedImageMetadataEnabled() {
        return this.getBooleanAttribute('enhanced_image_metadata_enabled');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // image_recipe_arn - computed: true, optional: false, required: false
    get imageRecipeArn() {
        return this.getStringAttribute('image_recipe_arn');
    }
    // image_tests_configuration - computed: true, optional: false, required: false
    get imageTestsConfiguration() {
        return this.interpolationForAttribute('image_tests_configuration');
    }
    // infrastructure_configuration_arn - computed: true, optional: false, required: false
    get infrastructureConfigurationArn() {
        return this.getStringAttribute('infrastructure_configuration_arn');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // schedule - computed: true, optional: false, required: false
    get schedule() {
        return this.interpolationForAttribute('schedule');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // tags - computed: true, optional: false, required: false
    tags(key) {
        return new cdktf.StringMap(this, 'tags').lookup(key);
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccImagebuilderImagePipeline = DataAwsccImagebuilderImagePipeline;
// =================
// STATIC PROPERTIES
// =================
DataAwsccImagebuilderImagePipeline.tfResourceType = "awscc_imagebuilder_image_pipeline";
//# sourceMappingURL=data:application/json;base64,