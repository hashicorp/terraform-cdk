"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_domain_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotDomainConfiguration = exports.iotDomainConfigurationTagsToTerraform = exports.iotDomainConfigurationServerCertificatesToTerraform = exports.IotDomainConfigurationServerCertificates = exports.iotDomainConfigurationAuthorizerConfigToTerraform = void 0;
const cdktf = require("cdktf");
function iotDomainConfigurationAuthorizerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_authorizer_override: cdktf.booleanToTerraform(struct.allowAuthorizerOverride),
        default_authorizer_name: cdktf.stringToTerraform(struct.defaultAuthorizerName),
    };
}
exports.iotDomainConfigurationAuthorizerConfigToTerraform = iotDomainConfigurationAuthorizerConfigToTerraform;
class IotDomainConfigurationServerCertificates extends cdktf.ComplexComputedList {
    get serverCertificateArn() {
        return this.getStringAttribute('server_certificate_arn');
    }
    set serverCertificateArn(value) {
        this._serverCertificateArn = value;
    }
    resetServerCertificateArn() {
        this._serverCertificateArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateArnInput() {
        return this._serverCertificateArn;
    }
    get serverCertificateStatus() {
        return this.getStringAttribute('server_certificate_status');
    }
    set serverCertificateStatus(value) {
        this._serverCertificateStatus = value;
    }
    resetServerCertificateStatus() {
        this._serverCertificateStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateStatusInput() {
        return this._serverCertificateStatus;
    }
    get serverCertificateStatusDetail() {
        return this.getStringAttribute('server_certificate_status_detail');
    }
    set serverCertificateStatusDetail(value) {
        this._serverCertificateStatusDetail = value;
    }
    resetServerCertificateStatusDetail() {
        this._serverCertificateStatusDetail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateStatusDetailInput() {
        return this._serverCertificateStatusDetail;
    }
}
exports.IotDomainConfigurationServerCertificates = IotDomainConfigurationServerCertificates;
function iotDomainConfigurationServerCertificatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        server_certificate_arn: cdktf.stringToTerraform(struct.serverCertificateArn),
        server_certificate_status: cdktf.stringToTerraform(struct.serverCertificateStatus),
        server_certificate_status_detail: cdktf.stringToTerraform(struct.serverCertificateStatusDetail),
    };
}
exports.iotDomainConfigurationServerCertificatesToTerraform = iotDomainConfigurationServerCertificatesToTerraform;
function iotDomainConfigurationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotDomainConfigurationTagsToTerraform = iotDomainConfigurationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_domain_configuration.html awscc_iot_domain_configuration}
*/
class IotDomainConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_domain_configuration.html awscc_iot_domain_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotDomainConfigurationConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_domain_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authorizerConfig = config.authorizerConfig;
        this._domainConfigurationName = config.domainConfigurationName;
        this._domainConfigurationStatus = config.domainConfigurationStatus;
        this._domainName = config.domainName;
        this._serverCertificateArns = config.serverCertificateArns;
        this._serviceType = config.serviceType;
        this._tags = config.tags;
        this._validationCertificateArn = config.validationCertificateArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authorizerConfig() {
        return this.interpolationForAttribute('authorizer_config');
    }
    set authorizerConfig(value) {
        this._authorizerConfig = value;
    }
    resetAuthorizerConfig() {
        this._authorizerConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerConfigInput() {
        return this._authorizerConfig;
    }
    get domainConfigurationName() {
        return this.getStringAttribute('domain_configuration_name');
    }
    set domainConfigurationName(value) {
        this._domainConfigurationName = value;
    }
    resetDomainConfigurationName() {
        this._domainConfigurationName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainConfigurationNameInput() {
        return this._domainConfigurationName;
    }
    get domainConfigurationStatus() {
        return this.getStringAttribute('domain_configuration_status');
    }
    set domainConfigurationStatus(value) {
        this._domainConfigurationStatus = value;
    }
    resetDomainConfigurationStatus() {
        this._domainConfigurationStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainConfigurationStatusInput() {
        return this._domainConfigurationStatus;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    resetDomainName() {
        this._domainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    // domain_type - computed: true, optional: false, required: false
    get domainType() {
        return this.getStringAttribute('domain_type');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get serverCertificateArns() {
        return this.getListAttribute('server_certificate_arns');
    }
    set serverCertificateArns(value) {
        this._serverCertificateArns = value;
    }
    resetServerCertificateArns() {
        this._serverCertificateArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateArnsInput() {
        return this._serverCertificateArns;
    }
    // server_certificates - computed: true, optional: false, required: false
    get serverCertificates() {
        return this.interpolationForAttribute('server_certificates');
    }
    get serviceType() {
        return this.getStringAttribute('service_type');
    }
    set serviceType(value) {
        this._serviceType = value;
    }
    resetServiceType() {
        this._serviceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceTypeInput() {
        return this._serviceType;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get validationCertificateArn() {
        return this.getStringAttribute('validation_certificate_arn');
    }
    set validationCertificateArn(value) {
        this._validationCertificateArn = value;
    }
    resetValidationCertificateArn() {
        this._validationCertificateArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationCertificateArnInput() {
        return this._validationCertificateArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorizer_config: iotDomainConfigurationAuthorizerConfigToTerraform(this._authorizerConfig),
            domain_configuration_name: cdktf.stringToTerraform(this._domainConfigurationName),
            domain_configuration_status: cdktf.stringToTerraform(this._domainConfigurationStatus),
            domain_name: cdktf.stringToTerraform(this._domainName),
            server_certificate_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._serverCertificateArns),
            service_type: cdktf.stringToTerraform(this._serviceType),
            tags: cdktf.listMapper(iotDomainConfigurationTagsToTerraform)(this._tags),
            validation_certificate_arn: cdktf.stringToTerraform(this._validationCertificateArn),
        };
    }
}
exports.IotDomainConfiguration = IotDomainConfiguration;
// =================
// STATIC PROPERTIES
// =================
IotDomainConfiguration.tfResourceType = "awscc_iot_domain_configuration";
//# sourceMappingURL=data:application/json;base64,