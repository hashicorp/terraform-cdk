"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_routing_control.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53RecoverycontrolRoutingControl = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_routing_control.html awscc_route53recoverycontrol_routing_control}
*/
class Route53RecoverycontrolRoutingControl extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_routing_control.html awscc_route53recoverycontrol_routing_control} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53RecoverycontrolRoutingControlConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoverycontrol_routing_control',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._clusterArn = config.clusterArn;
        this._controlPanelArn = config.controlPanelArn;
        this._name = config.name;
    }
    get clusterArn() {
        return this.getStringAttribute('cluster_arn');
    }
    set clusterArn(value) {
        this._clusterArn = value;
    }
    resetClusterArn() {
        this._clusterArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterArnInput() {
        return this._clusterArn;
    }
    get controlPanelArn() {
        return this.getStringAttribute('control_panel_arn');
    }
    set controlPanelArn(value) {
        this._controlPanelArn = value;
    }
    resetControlPanelArn() {
        this._controlPanelArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlPanelArnInput() {
        return this._controlPanelArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // routing_control_arn - computed: true, optional: false, required: false
    get routingControlArn() {
        return this.getStringAttribute('routing_control_arn');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_arn: cdktf.stringToTerraform(this._clusterArn),
            control_panel_arn: cdktf.stringToTerraform(this._controlPanelArn),
            name: cdktf.stringToTerraform(this._name),
        };
    }
}
exports.Route53RecoverycontrolRoutingControl = Route53RecoverycontrolRoutingControl;
// =================
// STATIC PROPERTIES
// =================
Route53RecoverycontrolRoutingControl.tfResourceType = "awscc_route53recoverycontrol_routing_control";
//# sourceMappingURL=data:application/json;base64,