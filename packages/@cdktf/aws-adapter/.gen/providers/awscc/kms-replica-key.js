"use strict";
// https://www.terraform.io/docs/providers/awscc/r/kms_replica_key.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.KmsReplicaKey = exports.kmsReplicaKeyTagsToTerraform = void 0;
const cdktf = require("cdktf");
function kmsReplicaKeyTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kmsReplicaKeyTagsToTerraform = kmsReplicaKeyTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/kms_replica_key.html awscc_kms_replica_key}
*/
class KmsReplicaKey extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/kms_replica_key.html awscc_kms_replica_key} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KmsReplicaKeyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_kms_replica_key',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._enabled = config.enabled;
        this._keyPolicy = config.keyPolicy;
        this._pendingWindowInDays = config.pendingWindowInDays;
        this._primaryKeyArn = config.primaryKeyArn;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // key_id - computed: true, optional: false, required: false
    get keyId() {
        return this.getStringAttribute('key_id');
    }
    get keyPolicy() {
        return this.getStringAttribute('key_policy');
    }
    set keyPolicy(value) {
        this._keyPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyPolicyInput() {
        return this._keyPolicy;
    }
    get pendingWindowInDays() {
        return this.getNumberAttribute('pending_window_in_days');
    }
    set pendingWindowInDays(value) {
        this._pendingWindowInDays = value;
    }
    resetPendingWindowInDays() {
        this._pendingWindowInDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pendingWindowInDaysInput() {
        return this._pendingWindowInDays;
    }
    get primaryKeyArn() {
        return this.getStringAttribute('primary_key_arn');
    }
    set primaryKeyArn(value) {
        this._primaryKeyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyArnInput() {
        return this._primaryKeyArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            enabled: cdktf.booleanToTerraform(this._enabled),
            key_policy: cdktf.stringToTerraform(this._keyPolicy),
            pending_window_in_days: cdktf.numberToTerraform(this._pendingWindowInDays),
            primary_key_arn: cdktf.stringToTerraform(this._primaryKeyArn),
            tags: cdktf.listMapper(kmsReplicaKeyTagsToTerraform)(this._tags),
        };
    }
}
exports.KmsReplicaKey = KmsReplicaKey;
// =================
// STATIC PROPERTIES
// =================
KmsReplicaKey.tfResourceType = "awscc_kms_replica_key";
//# sourceMappingURL=data:application/json;base64,