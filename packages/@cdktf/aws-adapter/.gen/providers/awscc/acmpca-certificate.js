"use strict";
// https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcmpcaCertificate = exports.acmpcaCertificateValidityNotBeforeToTerraform = exports.acmpcaCertificateValidityToTerraform = exports.acmpcaCertificateApiPassthroughToTerraform = exports.acmpcaCertificateApiPassthroughSubjectToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesOtherNameToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesEdiPartyNameToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesDirectoryNameToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsKeyUsageToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsExtendedKeyUsageToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersToTerraform = exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifierToTerraform = exports.AcmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifier = void 0;
const cdktf = require("cdktf");
class AcmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifier extends cdktf.ComplexComputedList {
    // cps_uri - computed: true, optional: false, required: true
    get cpsUri() {
        return this.getStringAttribute('cps_uri');
    }
}
exports.AcmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifier = AcmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifier;
function acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cps_uri: cdktf.stringToTerraform(struct.cpsUri),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifierToTerraform = acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifierToTerraform;
function acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        policy_qualifier_id: cdktf.stringToTerraform(struct.policyQualifierId),
        qualifier: acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersQualifierToTerraform(struct.qualifier),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersToTerraform = acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersToTerraform;
function acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cert_policy_id: cdktf.stringToTerraform(struct.certPolicyId),
        policy_qualifiers: cdktf.listMapper(acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesPolicyQualifiersToTerraform)(struct.policyQualifiers),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesToTerraform = acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesToTerraform;
function acmpcaCertificateApiPassthroughExtensionsExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        extended_key_usage_object_identifier: cdktf.stringToTerraform(struct.extendedKeyUsageObjectIdentifier),
        extended_key_usage_type: cdktf.stringToTerraform(struct.extendedKeyUsageType),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsExtendedKeyUsageToTerraform = acmpcaCertificateApiPassthroughExtensionsExtendedKeyUsageToTerraform;
function acmpcaCertificateApiPassthroughExtensionsKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        crl_sign: cdktf.booleanToTerraform(struct.crlSign),
        data_encipherment: cdktf.booleanToTerraform(struct.dataEncipherment),
        decipher_only: cdktf.booleanToTerraform(struct.decipherOnly),
        digital_signature: cdktf.booleanToTerraform(struct.digitalSignature),
        encipher_only: cdktf.booleanToTerraform(struct.encipherOnly),
        key_agreement: cdktf.booleanToTerraform(struct.keyAgreement),
        key_cert_sign: cdktf.booleanToTerraform(struct.keyCertSign),
        key_encipherment: cdktf.booleanToTerraform(struct.keyEncipherment),
        non_repudiation: cdktf.booleanToTerraform(struct.nonRepudiation),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsKeyUsageToTerraform = acmpcaCertificateApiPassthroughExtensionsKeyUsageToTerraform;
function acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesDirectoryNameToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        common_name: cdktf.stringToTerraform(struct.commonName),
        country: cdktf.stringToTerraform(struct.country),
        distinguished_name_qualifier: cdktf.stringToTerraform(struct.distinguishedNameQualifier),
        generation_qualifier: cdktf.stringToTerraform(struct.generationQualifier),
        given_name: cdktf.stringToTerraform(struct.givenName),
        initials: cdktf.stringToTerraform(struct.initials),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        organizational_unit: cdktf.stringToTerraform(struct.organizationalUnit),
        pseudonym: cdktf.stringToTerraform(struct.pseudonym),
        serial_number: cdktf.stringToTerraform(struct.serialNumber),
        state: cdktf.stringToTerraform(struct.state),
        surname: cdktf.stringToTerraform(struct.surname),
        title: cdktf.stringToTerraform(struct.title),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesDirectoryNameToTerraform = acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesDirectoryNameToTerraform;
function acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesEdiPartyNameToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name_assigner: cdktf.stringToTerraform(struct.nameAssigner),
        party_name: cdktf.stringToTerraform(struct.partyName),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesEdiPartyNameToTerraform = acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesEdiPartyNameToTerraform;
function acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesOtherNameToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type_id: cdktf.stringToTerraform(struct.typeId),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesOtherNameToTerraform = acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesOtherNameToTerraform;
function acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        directory_name: acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesDirectoryNameToTerraform(struct.directoryName),
        dns_name: cdktf.stringToTerraform(struct.dnsName),
        edi_party_name: acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesEdiPartyNameToTerraform(struct.ediPartyName),
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        other_name: acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesOtherNameToTerraform(struct.otherName),
        registered_id: cdktf.stringToTerraform(struct.registeredId),
        rfc_822_name: cdktf.stringToTerraform(struct.rfc822Name),
        uniform_resource_identifier: cdktf.stringToTerraform(struct.uniformResourceIdentifier),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesToTerraform = acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesToTerraform;
function acmpcaCertificateApiPassthroughExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_policies: cdktf.listMapper(acmpcaCertificateApiPassthroughExtensionsCertificatePoliciesToTerraform)(struct.certificatePolicies),
        extended_key_usage: cdktf.listMapper(acmpcaCertificateApiPassthroughExtensionsExtendedKeyUsageToTerraform)(struct.extendedKeyUsage),
        key_usage: acmpcaCertificateApiPassthroughExtensionsKeyUsageToTerraform(struct.keyUsage),
        subject_alternative_names: cdktf.listMapper(acmpcaCertificateApiPassthroughExtensionsSubjectAlternativeNamesToTerraform)(struct.subjectAlternativeNames),
    };
}
exports.acmpcaCertificateApiPassthroughExtensionsToTerraform = acmpcaCertificateApiPassthroughExtensionsToTerraform;
function acmpcaCertificateApiPassthroughSubjectToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        common_name: cdktf.stringToTerraform(struct.commonName),
        country: cdktf.stringToTerraform(struct.country),
        distinguished_name_qualifier: cdktf.stringToTerraform(struct.distinguishedNameQualifier),
        generation_qualifier: cdktf.stringToTerraform(struct.generationQualifier),
        given_name: cdktf.stringToTerraform(struct.givenName),
        initials: cdktf.stringToTerraform(struct.initials),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        organizational_unit: cdktf.stringToTerraform(struct.organizationalUnit),
        pseudonym: cdktf.stringToTerraform(struct.pseudonym),
        serial_number: cdktf.stringToTerraform(struct.serialNumber),
        state: cdktf.stringToTerraform(struct.state),
        surname: cdktf.stringToTerraform(struct.surname),
        title: cdktf.stringToTerraform(struct.title),
    };
}
exports.acmpcaCertificateApiPassthroughSubjectToTerraform = acmpcaCertificateApiPassthroughSubjectToTerraform;
function acmpcaCertificateApiPassthroughToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        extensions: acmpcaCertificateApiPassthroughExtensionsToTerraform(struct.extensions),
        subject: acmpcaCertificateApiPassthroughSubjectToTerraform(struct.subject),
    };
}
exports.acmpcaCertificateApiPassthroughToTerraform = acmpcaCertificateApiPassthroughToTerraform;
function acmpcaCertificateValidityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.acmpcaCertificateValidityToTerraform = acmpcaCertificateValidityToTerraform;
function acmpcaCertificateValidityNotBeforeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.acmpcaCertificateValidityNotBeforeToTerraform = acmpcaCertificateValidityNotBeforeToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate.html awscc_acmpca_certificate}
*/
class AcmpcaCertificate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/acmpca_certificate.html awscc_acmpca_certificate} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AcmpcaCertificateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_acmpca_certificate',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._apiPassthrough = config.apiPassthrough;
        this._certificateAuthorityArn = config.certificateAuthorityArn;
        this._certificateSigningRequest = config.certificateSigningRequest;
        this._signingAlgorithm = config.signingAlgorithm;
        this._templateArn = config.templateArn;
        this._validity = config.validity;
        this._validityNotBefore = config.validityNotBefore;
    }
    get apiPassthrough() {
        return this.interpolationForAttribute('api_passthrough');
    }
    set apiPassthrough(value) {
        this._apiPassthrough = value;
    }
    resetApiPassthrough() {
        this._apiPassthrough = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiPassthroughInput() {
        return this._apiPassthrough;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // certificate - computed: true, optional: false, required: false
    get certificate() {
        return this.getStringAttribute('certificate');
    }
    get certificateAuthorityArn() {
        return this.getStringAttribute('certificate_authority_arn');
    }
    set certificateAuthorityArn(value) {
        this._certificateAuthorityArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityArnInput() {
        return this._certificateAuthorityArn;
    }
    get certificateSigningRequest() {
        return this.getStringAttribute('certificate_signing_request');
    }
    set certificateSigningRequest(value) {
        this._certificateSigningRequest = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateSigningRequestInput() {
        return this._certificateSigningRequest;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get signingAlgorithm() {
        return this.getStringAttribute('signing_algorithm');
    }
    set signingAlgorithm(value) {
        this._signingAlgorithm = value;
    }
    // Temporarily expose input value. Use with caution.
    get signingAlgorithmInput() {
        return this._signingAlgorithm;
    }
    get templateArn() {
        return this.getStringAttribute('template_arn');
    }
    set templateArn(value) {
        this._templateArn = value;
    }
    resetTemplateArn() {
        this._templateArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateArnInput() {
        return this._templateArn;
    }
    get validity() {
        return this.interpolationForAttribute('validity');
    }
    set validity(value) {
        this._validity = value;
    }
    // Temporarily expose input value. Use with caution.
    get validityInput() {
        return this._validity;
    }
    get validityNotBefore() {
        return this.interpolationForAttribute('validity_not_before');
    }
    set validityNotBefore(value) {
        this._validityNotBefore = value;
    }
    resetValidityNotBefore() {
        this._validityNotBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validityNotBeforeInput() {
        return this._validityNotBefore;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_passthrough: acmpcaCertificateApiPassthroughToTerraform(this._apiPassthrough),
            certificate_authority_arn: cdktf.stringToTerraform(this._certificateAuthorityArn),
            certificate_signing_request: cdktf.stringToTerraform(this._certificateSigningRequest),
            signing_algorithm: cdktf.stringToTerraform(this._signingAlgorithm),
            template_arn: cdktf.stringToTerraform(this._templateArn),
            validity: acmpcaCertificateValidityToTerraform(this._validity),
            validity_not_before: acmpcaCertificateValidityNotBeforeToTerraform(this._validityNotBefore),
        };
    }
}
exports.AcmpcaCertificate = AcmpcaCertificate;
// =================
// STATIC PROPERTIES
// =================
AcmpcaCertificate.tfResourceType = "awscc_acmpca_certificate";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNtcGNhLWNlcnRpZmljYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNtcGNhLWNlcnRpZmljYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwRUFBMEU7QUFDMUUsMkNBQTJDOzs7QUFHM0MsK0JBQStCO0FBNEMvQixNQUFhLHFGQUFzRixTQUFRLEtBQUssQ0FBQyxtQkFBbUI7SUFFbEksNERBQTREO0lBQzVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDRjtBQU5ELHNMQU1DO0FBRUQsU0FBZ0IsZ0dBQWdHLENBQUMsTUFBOEY7SUFDN00sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxNQUFNLENBQUM7S0FDakQsQ0FBQTtBQUNILENBQUM7QUFMRCw0TUFLQztBQWVELFNBQWdCLHVGQUF1RixDQUFDLE1BQXFGO0lBQzNMLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUN2RSxTQUFTLEVBQUUsZ0dBQWdHLENBQUMsTUFBTyxDQUFDLFNBQVMsQ0FBQztLQUMvSCxDQUFBO0FBQ0gsQ0FBQztBQU5ELDBMQU1DO0FBZUQsU0FBZ0IsdUVBQXVFLENBQUMsTUFBcUU7SUFDM0osSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxjQUFjLEVBQUUsS0FB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SUFDWixZQUFZO0lBQ1osWUFBWTtJQUVGLG9CQUFvQjtRQUM1QixPQUFPO1lBQ0wsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDakYseUJBQXlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztZQUNqRiwyQkFBMkIsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDO1lBQ3JGLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDbEUsWUFBWSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3hELFFBQVEsRUFBRSxvQ0FBb0MsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzlELG1CQUFtQixFQUFFLDZDQUE2QyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztTQUM1RixDQUFDO0lBQ0osQ0FBQzs7QUEzS0gsOENBNEtDO0FBMUtDLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ0csZ0NBQWMsR0FBVywwQkFBMEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sXG4vLyBnZW5lcmF0ZWQgZnJvbSB0ZXJyYWZvcm0gcmVzb3VyY2Ugc2NoZW1hXG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY2RrdGYgZnJvbSAnY2RrdGYnO1xuXG4vLyBDb25maWd1cmF0aW9uXG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogU3RydWN0dXJlIHRoYXQgc3BlY2lmaWVzIGZpZWxkcyB0byBiZSBvdmVycmlkZGVuIGluIGEgY2VydGlmaWNhdGUgYXQgdGhlIHRpbWUgb2YgaXNzdWFuY2UuIFRoZXNlIHJlcXVpcmVzIGFuIEFQSSBQYXNzdGhyb3VnaCB0ZW1wbGF0ZSBiZSB1c2VkIG9yIHRoZXkgd2lsbCBiZSBpZ25vcmVkLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjYXBpX3Bhc3N0aHJvdWdoIEFjbXBjYUNlcnRpZmljYXRlI2FwaV9wYXNzdGhyb3VnaH1cbiAgKi9cbiAgcmVhZG9ubHkgYXBpUGFzc3Rocm91Z2g/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2NlcnRpZmljYXRlX2F1dGhvcml0eV9hcm4gQWNtcGNhQ2VydGlmaWNhdGUjY2VydGlmaWNhdGVfYXV0aG9yaXR5X2Fybn1cbiAgKi9cbiAgcmVhZG9ubHkgY2VydGlmaWNhdGVBdXRob3JpdHlBcm46IHN0cmluZztcbiAgLyoqXG4gICogVGhlIGNlcnRpZmljYXRlIHNpZ25pbmcgcmVxdWVzdCAoQ1NSKSBmb3IgdGhlIENlcnRpZmljYXRlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjY2VydGlmaWNhdGVfc2lnbmluZ19yZXF1ZXN0IEFjbXBjYUNlcnRpZmljYXRlI2NlcnRpZmljYXRlX3NpZ25pbmdfcmVxdWVzdH1cbiAgKi9cbiAgcmVhZG9ubHkgY2VydGlmaWNhdGVTaWduaW5nUmVxdWVzdDogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgbmFtZSBvZiB0aGUgYWxnb3JpdGhtIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNpZ24gdGhlIENlcnRpZmljYXRlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjc2lnbmluZ19hbGdvcml0aG0gQWNtcGNhQ2VydGlmaWNhdGUjc2lnbmluZ19hbGdvcml0aG19XG4gICovXG4gIHJlYWRvbmx5IHNpZ25pbmdBbGdvcml0aG06IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCN0ZW1wbGF0ZV9hcm4gQWNtcGNhQ2VydGlmaWNhdGUjdGVtcGxhdGVfYXJufVxuICAqL1xuICByZWFkb25seSB0ZW1wbGF0ZUFybj86IHN0cmluZztcbiAgLyoqXG4gICogVmFsaWRpdHkgZm9yIGEgY2VydGlmaWNhdGUuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCN2YWxpZGl0eSBBY21wY2FDZXJ0aWZpY2F0ZSN2YWxpZGl0eX1cbiAgKi9cbiAgcmVhZG9ubHkgdmFsaWRpdHk6IEFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHk7XG4gIC8qKlxuICAqIFZhbGlkaXR5IGZvciBhIGNlcnRpZmljYXRlLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjdmFsaWRpdHlfbm90X2JlZm9yZSBBY21wY2FDZXJ0aWZpY2F0ZSN2YWxpZGl0eV9ub3RfYmVmb3JlfVxuICAqL1xuICByZWFkb25seSB2YWxpZGl0eU5vdEJlZm9yZT86IEFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHlOb3RCZWZvcmU7XG59XG5leHBvcnQgY2xhc3MgQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVyc1F1YWxpZmllciBleHRlbmRzIGNka3RmLkNvbXBsZXhDb21wdXRlZExpc3Qge1xuXG4gIC8vIGNwc191cmkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwdWJsaWMgZ2V0IGNwc1VyaSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2Nwc191cmknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVyc1F1YWxpZmllclRvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zQ2VydGlmaWNhdGVQb2xpY2llc1BvbGljeVF1YWxpZmllcnNRdWFsaWZpZXIpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgY3BzX3VyaTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jcHNVcmkpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVycyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjcG9saWN5X3F1YWxpZmllcl9pZCBBY21wY2FDZXJ0aWZpY2F0ZSNwb2xpY3lfcXVhbGlmaWVyX2lkfVxuICAqL1xuICByZWFkb25seSBwb2xpY3lRdWFsaWZpZXJJZDogc3RyaW5nO1xuICAvKipcbiAgKiBTdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhIFguNTA5IHBvbGljeSBxdWFsaWZpZXIuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNxdWFsaWZpZXIgQWNtcGNhQ2VydGlmaWNhdGUjcXVhbGlmaWVyfVxuICAqL1xuICByZWFkb25seSBxdWFsaWZpZXI6IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zQ2VydGlmaWNhdGVQb2xpY2llc1BvbGljeVF1YWxpZmllcnNRdWFsaWZpZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0NlcnRpZmljYXRlUG9saWNpZXNQb2xpY3lRdWFsaWZpZXJzVG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVycyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBwb2xpY3lfcXVhbGlmaWVyX2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBvbGljeVF1YWxpZmllcklkKSxcbiAgICBxdWFsaWZpZXI6IGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zQ2VydGlmaWNhdGVQb2xpY2llc1BvbGljeVF1YWxpZmllcnNRdWFsaWZpZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnF1YWxpZmllciksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0NlcnRpZmljYXRlUG9saWNpZXMge1xuICAvKipcbiAgKiBTdHJpbmcgdGhhdCBjb250YWlucyBYLjUwOSBPYmplY3RJZGVudGlmaWVyIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjY2VydF9wb2xpY3lfaWQgQWNtcGNhQ2VydGlmaWNhdGUjY2VydF9wb2xpY3lfaWR9XG4gICovXG4gIHJlYWRvbmx5IGNlcnRQb2xpY3lJZDogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3BvbGljeV9xdWFsaWZpZXJzIEFjbXBjYUNlcnRpZmljYXRlI3BvbGljeV9xdWFsaWZpZXJzfVxuICAqL1xuICByZWFkb25seSBwb2xpY3lRdWFsaWZpZXJzPzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVyc1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzVG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGNlcnRfcG9saWN5X2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNlcnRQb2xpY3lJZCksXG4gICAgcG9saWN5X3F1YWxpZmllcnM6IGNka3RmLmxpc3RNYXBwZXIoYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNDZXJ0aWZpY2F0ZVBvbGljaWVzUG9saWN5UXVhbGlmaWVyc1RvVGVycmFmb3JtKShzdHJ1Y3QhLnBvbGljeVF1YWxpZmllcnMpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNFeHRlbmRlZEtleVVzYWdlIHtcbiAgLyoqXG4gICogU3RyaW5nIHRoYXQgY29udGFpbnMgWC41MDkgT2JqZWN0SWRlbnRpZmllciBpbmZvcm1hdGlvbi5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2V4dGVuZGVkX2tleV91c2FnZV9vYmplY3RfaWRlbnRpZmllciBBY21wY2FDZXJ0aWZpY2F0ZSNleHRlbmRlZF9rZXlfdXNhZ2Vfb2JqZWN0X2lkZW50aWZpZXJ9XG4gICovXG4gIHJlYWRvbmx5IGV4dGVuZGVkS2V5VXNhZ2VPYmplY3RJZGVudGlmaWVyPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2V4dGVuZGVkX2tleV91c2FnZV90eXBlIEFjbXBjYUNlcnRpZmljYXRlI2V4dGVuZGVkX2tleV91c2FnZV90eXBlfVxuICAqL1xuICByZWFkb25seSBleHRlbmRlZEtleVVzYWdlVHlwZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zRXh0ZW5kZWRLZXlVc2FnZVRvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zRXh0ZW5kZWRLZXlVc2FnZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBleHRlbmRlZF9rZXlfdXNhZ2Vfb2JqZWN0X2lkZW50aWZpZXI6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZXh0ZW5kZWRLZXlVc2FnZU9iamVjdElkZW50aWZpZXIpLFxuICAgIGV4dGVuZGVkX2tleV91c2FnZV90eXBlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmV4dGVuZGVkS2V5VXNhZ2VUeXBlKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zS2V5VXNhZ2Uge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2NybF9zaWduIEFjbXBjYUNlcnRpZmljYXRlI2NybF9zaWdufVxuICAqL1xuICByZWFkb25seSBjcmxTaWduPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2RhdGFfZW5jaXBoZXJtZW50IEFjbXBjYUNlcnRpZmljYXRlI2RhdGFfZW5jaXBoZXJtZW50fVxuICAqL1xuICByZWFkb25seSBkYXRhRW5jaXBoZXJtZW50PzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2RlY2lwaGVyX29ubHkgQWNtcGNhQ2VydGlmaWNhdGUjZGVjaXBoZXJfb25seX1cbiAgKi9cbiAgcmVhZG9ubHkgZGVjaXBoZXJPbmx5PzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2RpZ2l0YWxfc2lnbmF0dXJlIEFjbXBjYUNlcnRpZmljYXRlI2RpZ2l0YWxfc2lnbmF0dXJlfVxuICAqL1xuICByZWFkb25seSBkaWdpdGFsU2lnbmF0dXJlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2VuY2lwaGVyX29ubHkgQWNtcGNhQ2VydGlmaWNhdGUjZW5jaXBoZXJfb25seX1cbiAgKi9cbiAgcmVhZG9ubHkgZW5jaXBoZXJPbmx5PzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2tleV9hZ3JlZW1lbnQgQWNtcGNhQ2VydGlmaWNhdGUja2V5X2FncmVlbWVudH1cbiAgKi9cbiAgcmVhZG9ubHkga2V5QWdyZWVtZW50PzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2tleV9jZXJ0X3NpZ24gQWNtcGNhQ2VydGlmaWNhdGUja2V5X2NlcnRfc2lnbn1cbiAgKi9cbiAgcmVhZG9ubHkga2V5Q2VydFNpZ24/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwja2V5X2VuY2lwaGVybWVudCBBY21wY2FDZXJ0aWZpY2F0ZSNrZXlfZW5jaXBoZXJtZW50fVxuICAqL1xuICByZWFkb25seSBrZXlFbmNpcGhlcm1lbnQ/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjbm9uX3JlcHVkaWF0aW9uIEFjbXBjYUNlcnRpZmljYXRlI25vbl9yZXB1ZGlhdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgbm9uUmVwdWRpYXRpb24/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0tleVVzYWdlVG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNLZXlVc2FnZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBjcmxfc2lnbjogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuY3JsU2lnbiksXG4gICAgZGF0YV9lbmNpcGhlcm1lbnQ6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmRhdGFFbmNpcGhlcm1lbnQpLFxuICAgIGRlY2lwaGVyX29ubHk6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmRlY2lwaGVyT25seSksXG4gICAgZGlnaXRhbF9zaWduYXR1cmU6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmRpZ2l0YWxTaWduYXR1cmUpLFxuICAgIGVuY2lwaGVyX29ubHk6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmVuY2lwaGVyT25seSksXG4gICAga2V5X2FncmVlbWVudDogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEua2V5QWdyZWVtZW50KSxcbiAgICBrZXlfY2VydF9zaWduOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5rZXlDZXJ0U2lnbiksXG4gICAga2V5X2VuY2lwaGVybWVudDogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEua2V5RW5jaXBoZXJtZW50KSxcbiAgICBub25fcmVwdWRpYXRpb246IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLm5vblJlcHVkaWF0aW9uKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNEaXJlY3RvcnlOYW1lIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNjb21tb25fbmFtZSBBY21wY2FDZXJ0aWZpY2F0ZSNjb21tb25fbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgY29tbW9uTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNjb3VudHJ5IEFjbXBjYUNlcnRpZmljYXRlI2NvdW50cnl9XG4gICovXG4gIHJlYWRvbmx5IGNvdW50cnk/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjZGlzdGluZ3Vpc2hlZF9uYW1lX3F1YWxpZmllciBBY21wY2FDZXJ0aWZpY2F0ZSNkaXN0aW5ndWlzaGVkX25hbWVfcXVhbGlmaWVyfVxuICAqL1xuICByZWFkb25seSBkaXN0aW5ndWlzaGVkTmFtZVF1YWxpZmllcj86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNnZW5lcmF0aW9uX3F1YWxpZmllciBBY21wY2FDZXJ0aWZpY2F0ZSNnZW5lcmF0aW9uX3F1YWxpZmllcn1cbiAgKi9cbiAgcmVhZG9ubHkgZ2VuZXJhdGlvblF1YWxpZmllcj86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNnaXZlbl9uYW1lIEFjbXBjYUNlcnRpZmljYXRlI2dpdmVuX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGdpdmVuTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNpbml0aWFscyBBY21wY2FDZXJ0aWZpY2F0ZSNpbml0aWFsc31cbiAgKi9cbiAgcmVhZG9ubHkgaW5pdGlhbHM/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjbG9jYWxpdHkgQWNtcGNhQ2VydGlmaWNhdGUjbG9jYWxpdHl9XG4gICovXG4gIHJlYWRvbmx5IGxvY2FsaXR5Pzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI29yZ2FuaXphdGlvbiBBY21wY2FDZXJ0aWZpY2F0ZSNvcmdhbml6YXRpb259XG4gICovXG4gIHJlYWRvbmx5IG9yZ2FuaXphdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNvcmdhbml6YXRpb25hbF91bml0IEFjbXBjYUNlcnRpZmljYXRlI29yZ2FuaXphdGlvbmFsX3VuaXR9XG4gICovXG4gIHJlYWRvbmx5IG9yZ2FuaXphdGlvbmFsVW5pdD86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNwc2V1ZG9ueW0gQWNtcGNhQ2VydGlmaWNhdGUjcHNldWRvbnltfVxuICAqL1xuICByZWFkb25seSBwc2V1ZG9ueW0/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjc2VyaWFsX251bWJlciBBY21wY2FDZXJ0aWZpY2F0ZSNzZXJpYWxfbnVtYmVyfVxuICAqL1xuICByZWFkb25seSBzZXJpYWxOdW1iZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjc3RhdGUgQWNtcGNhQ2VydGlmaWNhdGUjc3RhdGV9XG4gICovXG4gIHJlYWRvbmx5IHN0YXRlPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3N1cm5hbWUgQWNtcGNhQ2VydGlmaWNhdGUjc3VybmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgc3VybmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCN0aXRsZSBBY21wY2FDZXJ0aWZpY2F0ZSN0aXRsZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGl0bGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzRGlyZWN0b3J5TmFtZVRvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNEaXJlY3RvcnlOYW1lKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGNvbW1vbl9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNvbW1vbk5hbWUpLFxuICAgIGNvdW50cnk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY291bnRyeSksXG4gICAgZGlzdGluZ3Vpc2hlZF9uYW1lX3F1YWxpZmllcjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kaXN0aW5ndWlzaGVkTmFtZVF1YWxpZmllciksXG4gICAgZ2VuZXJhdGlvbl9xdWFsaWZpZXI6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZ2VuZXJhdGlvblF1YWxpZmllciksXG4gICAgZ2l2ZW5fbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5naXZlbk5hbWUpLFxuICAgIGluaXRpYWxzOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmluaXRpYWxzKSxcbiAgICBsb2NhbGl0eTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5sb2NhbGl0eSksXG4gICAgb3JnYW5pemF0aW9uOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm9yZ2FuaXphdGlvbiksXG4gICAgb3JnYW5pemF0aW9uYWxfdW5pdDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5vcmdhbml6YXRpb25hbFVuaXQpLFxuICAgIHBzZXVkb255bTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5wc2V1ZG9ueW0pLFxuICAgIHNlcmlhbF9udW1iZXI6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc2VyaWFsTnVtYmVyKSxcbiAgICBzdGF0ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdGF0ZSksXG4gICAgc3VybmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdXJuYW1lKSxcbiAgICB0aXRsZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS50aXRsZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzRWRpUGFydHlOYW1lIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNuYW1lX2Fzc2lnbmVyIEFjbXBjYUNlcnRpZmljYXRlI25hbWVfYXNzaWduZXJ9XG4gICovXG4gIHJlYWRvbmx5IG5hbWVBc3NpZ25lcjogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3BhcnR5X25hbWUgQWNtcGNhQ2VydGlmaWNhdGUjcGFydHlfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgcGFydHlOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzRWRpUGFydHlOYW1lVG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNTdWJqZWN0QWx0ZXJuYXRpdmVOYW1lc0VkaVBhcnR5TmFtZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lX2Fzc2lnbmVyOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm5hbWVBc3NpZ25lciksXG4gICAgcGFydHlfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5wYXJ0eU5hbWUpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNTdWJqZWN0QWx0ZXJuYXRpdmVOYW1lc090aGVyTmFtZSB7XG4gIC8qKlxuICAqIFN0cmluZyB0aGF0IGNvbnRhaW5zIFguNTA5IE9iamVjdElkZW50aWZpZXIgaW5mb3JtYXRpb24uXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCN0eXBlX2lkIEFjbXBjYUNlcnRpZmljYXRlI3R5cGVfaWR9XG4gICovXG4gIHJlYWRvbmx5IHR5cGVJZDogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3ZhbHVlIEFjbXBjYUNlcnRpZmljYXRlI3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNTdWJqZWN0QWx0ZXJuYXRpdmVOYW1lc090aGVyTmFtZVRvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNPdGhlck5hbWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgdHlwZV9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS50eXBlSWQpLFxuICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnZhbHVlKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXMge1xuICAvKipcbiAgKiBTdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBYLjUwMCBkaXN0aW5ndWlzaGVkIG5hbWUgaW5mb3JtYXRpb24uXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNkaXJlY3RvcnlfbmFtZSBBY21wY2FDZXJ0aWZpY2F0ZSNkaXJlY3RvcnlfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGlyZWN0b3J5TmFtZT86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNEaXJlY3RvcnlOYW1lO1xuICAvKipcbiAgKiBTdHJpbmcgdGhhdCBjb250YWlucyBYLjUwOSBEbnNOYW1lIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjZG5zX25hbWUgQWNtcGNhQ2VydGlmaWNhdGUjZG5zX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGRuc05hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIFguNTA5IEVkaVBhcnR5TmFtZSBpbmZvcm1hdGlvbi5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2VkaV9wYXJ0eV9uYW1lIEFjbXBjYUNlcnRpZmljYXRlI2VkaV9wYXJ0eV9uYW1lfVxuICAqL1xuICByZWFkb25seSBlZGlQYXJ0eU5hbWU/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzRWRpUGFydHlOYW1lO1xuICAvKipcbiAgKiBTdHJpbmcgdGhhdCBjb250YWlucyBYLjUwOSBJcEFkZHJlc3MgaW5mb3JtYXRpb24uXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNpcF9hZGRyZXNzIEFjbXBjYUNlcnRpZmljYXRlI2lwX2FkZHJlc3N9XG4gICovXG4gIHJlYWRvbmx5IGlwQWRkcmVzcz86IHN0cmluZztcbiAgLyoqXG4gICogU3RydWN0dXJlIHRoYXQgY29udGFpbnMgWC41MDkgT3RoZXJOYW1lIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjb3RoZXJfbmFtZSBBY21wY2FDZXJ0aWZpY2F0ZSNvdGhlcl9uYW1lfVxuICAqL1xuICByZWFkb25seSBvdGhlck5hbWU/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzT3RoZXJOYW1lO1xuICAvKipcbiAgKiBTdHJpbmcgdGhhdCBjb250YWlucyBYLjUwOSBPYmplY3RJZGVudGlmaWVyIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjcmVnaXN0ZXJlZF9pZCBBY21wY2FDZXJ0aWZpY2F0ZSNyZWdpc3RlcmVkX2lkfVxuICAqL1xuICByZWFkb25seSByZWdpc3RlcmVkSWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFN0cmluZyB0aGF0IGNvbnRhaW5zIFguNTA5IFJmYzgyMk5hbWUgaW5mb3JtYXRpb24uXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNyZmNfODIyX25hbWUgQWNtcGNhQ2VydGlmaWNhdGUjcmZjXzgyMl9uYW1lfVxuICAqL1xuICByZWFkb25seSByZmM4MjJOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBTdHJpbmcgdGhhdCBjb250YWlucyBYLjUwOSBVbmlmb3JtUmVzb3VyY2VJZGVudGlmaWVyIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjdW5pZm9ybV9yZXNvdXJjZV9pZGVudGlmaWVyIEFjbXBjYUNlcnRpZmljYXRlI3VuaWZvcm1fcmVzb3VyY2VfaWRlbnRpZmllcn1cbiAgKi9cbiAgcmVhZG9ubHkgdW5pZm9ybVJlc291cmNlSWRlbnRpZmllcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGRpcmVjdG9yeV9uYW1lOiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzRGlyZWN0b3J5TmFtZVRvVGVycmFmb3JtKHN0cnVjdCEuZGlyZWN0b3J5TmFtZSksXG4gICAgZG5zX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZG5zTmFtZSksXG4gICAgZWRpX3BhcnR5X25hbWU6IGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNFZGlQYXJ0eU5hbWVUb1RlcnJhZm9ybShzdHJ1Y3QhLmVkaVBhcnR5TmFtZSksXG4gICAgaXBfYWRkcmVzczogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pcEFkZHJlc3MpLFxuICAgIG90aGVyX25hbWU6IGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNPdGhlck5hbWVUb1RlcnJhZm9ybShzdHJ1Y3QhLm90aGVyTmFtZSksXG4gICAgcmVnaXN0ZXJlZF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZWdpc3RlcmVkSWQpLFxuICAgIHJmY184MjJfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZmM4MjJOYW1lKSxcbiAgICB1bmlmb3JtX3Jlc291cmNlX2lkZW50aWZpZXI6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudW5pZm9ybVJlc291cmNlSWRlbnRpZmllciksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9ucyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjY2VydGlmaWNhdGVfcG9saWNpZXMgQWNtcGNhQ2VydGlmaWNhdGUjY2VydGlmaWNhdGVfcG9saWNpZXN9XG4gICovXG4gIHJlYWRvbmx5IGNlcnRpZmljYXRlUG9saWNpZXM/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0NlcnRpZmljYXRlUG9saWNpZXNbXTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNleHRlbmRlZF9rZXlfdXNhZ2UgQWNtcGNhQ2VydGlmaWNhdGUjZXh0ZW5kZWRfa2V5X3VzYWdlfVxuICAqL1xuICByZWFkb25seSBleHRlbmRlZEtleVVzYWdlPzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaEV4dGVuc2lvbnNFeHRlbmRlZEtleVVzYWdlW107XG4gIC8qKlxuICAqIFN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIFguNTA5IEtleVVzYWdlIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwja2V5X3VzYWdlIEFjbXBjYUNlcnRpZmljYXRlI2tleV91c2FnZX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5VXNhZ2U/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0tleVVzYWdlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3N1YmplY3RfYWx0ZXJuYXRpdmVfbmFtZXMgQWNtcGNhQ2VydGlmaWNhdGUjc3ViamVjdF9hbHRlcm5hdGl2ZV9uYW1lc31cbiAgKi9cbiAgcmVhZG9ubHkgc3ViamVjdEFsdGVybmF0aXZlTmFtZXM/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1N1YmplY3RBbHRlcm5hdGl2ZU5hbWVzW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGNlcnRpZmljYXRlX3BvbGljaWVzOiBjZGt0Zi5saXN0TWFwcGVyKGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zQ2VydGlmaWNhdGVQb2xpY2llc1RvVGVycmFmb3JtKShzdHJ1Y3QhLmNlcnRpZmljYXRlUG9saWNpZXMpLFxuICAgIGV4dGVuZGVkX2tleV91c2FnZTogY2RrdGYubGlzdE1hcHBlcihhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc0V4dGVuZGVkS2V5VXNhZ2VUb1RlcnJhZm9ybSkoc3RydWN0IS5leHRlbmRlZEtleVVzYWdlKSxcbiAgICBrZXlfdXNhZ2U6IGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zS2V5VXNhZ2VUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleVVzYWdlKSxcbiAgICBzdWJqZWN0X2FsdGVybmF0aXZlX25hbWVzOiBjZGt0Zi5saXN0TWFwcGVyKGFjbXBjYUNlcnRpZmljYXRlQXBpUGFzc3Rocm91Z2hFeHRlbnNpb25zU3ViamVjdEFsdGVybmF0aXZlTmFtZXNUb1RlcnJhZm9ybSkoc3RydWN0IS5zdWJqZWN0QWx0ZXJuYXRpdmVOYW1lcyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoU3ViamVjdCB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjY29tbW9uX25hbWUgQWNtcGNhQ2VydGlmaWNhdGUjY29tbW9uX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNvbW1vbk5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjY291bnRyeSBBY21wY2FDZXJ0aWZpY2F0ZSNjb3VudHJ5fVxuICAqL1xuICByZWFkb25seSBjb3VudHJ5Pzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2Rpc3Rpbmd1aXNoZWRfbmFtZV9xdWFsaWZpZXIgQWNtcGNhQ2VydGlmaWNhdGUjZGlzdGluZ3Vpc2hlZF9uYW1lX3F1YWxpZmllcn1cbiAgKi9cbiAgcmVhZG9ubHkgZGlzdGluZ3Vpc2hlZE5hbWVRdWFsaWZpZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjZ2VuZXJhdGlvbl9xdWFsaWZpZXIgQWNtcGNhQ2VydGlmaWNhdGUjZ2VuZXJhdGlvbl9xdWFsaWZpZXJ9XG4gICovXG4gIHJlYWRvbmx5IGdlbmVyYXRpb25RdWFsaWZpZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjZ2l2ZW5fbmFtZSBBY21wY2FDZXJ0aWZpY2F0ZSNnaXZlbl9uYW1lfVxuICAqL1xuICByZWFkb25seSBnaXZlbk5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjaW5pdGlhbHMgQWNtcGNhQ2VydGlmaWNhdGUjaW5pdGlhbHN9XG4gICovXG4gIHJlYWRvbmx5IGluaXRpYWxzPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI2xvY2FsaXR5IEFjbXBjYUNlcnRpZmljYXRlI2xvY2FsaXR5fVxuICAqL1xuICByZWFkb25seSBsb2NhbGl0eT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNvcmdhbml6YXRpb24gQWNtcGNhQ2VydGlmaWNhdGUjb3JnYW5pemF0aW9ufVxuICAqL1xuICByZWFkb25seSBvcmdhbml6YXRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjb3JnYW5pemF0aW9uYWxfdW5pdCBBY21wY2FDZXJ0aWZpY2F0ZSNvcmdhbml6YXRpb25hbF91bml0fVxuICAqL1xuICByZWFkb25seSBvcmdhbml6YXRpb25hbFVuaXQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjcHNldWRvbnltIEFjbXBjYUNlcnRpZmljYXRlI3BzZXVkb255bX1cbiAgKi9cbiAgcmVhZG9ubHkgcHNldWRvbnltPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3NlcmlhbF9udW1iZXIgQWNtcGNhQ2VydGlmaWNhdGUjc2VyaWFsX251bWJlcn1cbiAgKi9cbiAgcmVhZG9ubHkgc2VyaWFsTnVtYmVyPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3N0YXRlIEFjbXBjYUNlcnRpZmljYXRlI3N0YXRlfVxuICAqL1xuICByZWFkb25seSBzdGF0ZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNzdXJuYW1lIEFjbXBjYUNlcnRpZmljYXRlI3N1cm5hbWV9XG4gICovXG4gIHJlYWRvbmx5IHN1cm5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjdGl0bGUgQWNtcGNhQ2VydGlmaWNhdGUjdGl0bGV9XG4gICovXG4gIHJlYWRvbmx5IHRpdGxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaFN1YmplY3RUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoU3ViamVjdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBjb21tb25fbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jb21tb25OYW1lKSxcbiAgICBjb3VudHJ5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNvdW50cnkpLFxuICAgIGRpc3Rpbmd1aXNoZWRfbmFtZV9xdWFsaWZpZXI6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGlzdGluZ3Vpc2hlZE5hbWVRdWFsaWZpZXIpLFxuICAgIGdlbmVyYXRpb25fcXVhbGlmaWVyOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmdlbmVyYXRpb25RdWFsaWZpZXIpLFxuICAgIGdpdmVuX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZ2l2ZW5OYW1lKSxcbiAgICBpbml0aWFsczogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbml0aWFscyksXG4gICAgbG9jYWxpdHk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubG9jYWxpdHkpLFxuICAgIG9yZ2FuaXphdGlvbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5vcmdhbml6YXRpb24pLFxuICAgIG9yZ2FuaXphdGlvbmFsX3VuaXQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEub3JnYW5pemF0aW9uYWxVbml0KSxcbiAgICBwc2V1ZG9ueW06IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucHNldWRvbnltKSxcbiAgICBzZXJpYWxfbnVtYmVyOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlcmlhbE51bWJlciksXG4gICAgc3RhdGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3RhdGUpLFxuICAgIHN1cm5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3VybmFtZSksXG4gICAgdGl0bGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudGl0bGUpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaCB7XG4gIC8qKlxuICAqIFN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIFguNTAwIGV4dGVuc2lvbnMgZm9yIGEgQ2VydGlmaWNhdGUuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCNleHRlbnNpb25zIEFjbXBjYUNlcnRpZmljYXRlI2V4dGVuc2lvbnN9XG4gICovXG4gIHJlYWRvbmx5IGV4dGVuc2lvbnM/OiBBY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9ucztcbiAgLyoqXG4gICogU3RydWN0dXJlIHRoYXQgY29udGFpbnMgWC41MDAgZGlzdGluZ3Vpc2hlZCBuYW1lIGluZm9ybWF0aW9uLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjc3ViamVjdCBBY21wY2FDZXJ0aWZpY2F0ZSNzdWJqZWN0fVxuICAqL1xuICByZWFkb25seSBzdWJqZWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaFN1YmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoVG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBleHRlbnNpb25zOiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoRXh0ZW5zaW9uc1RvVGVycmFmb3JtKHN0cnVjdCEuZXh0ZW5zaW9ucyksXG4gICAgc3ViamVjdDogYWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaFN1YmplY3RUb1RlcnJhZm9ybShzdHJ1Y3QhLnN1YmplY3QpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNtcGNhQ2VydGlmaWNhdGVWYWxpZGl0eSB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjdHlwZSBBY21wY2FDZXJ0aWZpY2F0ZSN0eXBlfVxuICAqL1xuICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYWNtcGNhX2NlcnRpZmljYXRlLmh0bWwjdmFsdWUgQWNtcGNhQ2VydGlmaWNhdGUjdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHZhbHVlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY21wY2FDZXJ0aWZpY2F0ZVZhbGlkaXR5VG9UZXJyYWZvcm0oc3RydWN0PzogQWNtcGNhQ2VydGlmaWNhdGVWYWxpZGl0eSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnR5cGUpLFxuICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnZhbHVlKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHlOb3RCZWZvcmUge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3R5cGUgQWNtcGNhQ2VydGlmaWNhdGUjdHlwZX1cbiAgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sI3ZhbHVlIEFjbXBjYUNlcnRpZmljYXRlI3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNtcGNhQ2VydGlmaWNhdGVWYWxpZGl0eU5vdEJlZm9yZVRvVGVycmFmb3JtKHN0cnVjdD86IEFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHlOb3RCZWZvcmUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS50eXBlKSxcbiAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS52YWx1ZSksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hY21wY2FfY2VydGlmaWNhdGUuaHRtbCBhd3NjY19hY21wY2FfY2VydGlmaWNhdGV9XG4qL1xuZXhwb3J0IGNsYXNzIEFjbXBjYUNlcnRpZmljYXRlIGV4dGVuZHMgY2RrdGYuVGVycmFmb3JtUmVzb3VyY2Uge1xuXG4gIC8vID09PT09PT09PT09PT09PT09XG4gIC8vIFNUQVRJQyBQUk9QRVJUSUVTXG4gIC8vID09PT09PT09PT09PT09PT09XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdGZSZXNvdXJjZVR5cGU6IHN0cmluZyA9IFwiYXdzY2NfYWNtcGNhX2NlcnRpZmljYXRlXCI7XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FjbXBjYV9jZXJ0aWZpY2F0ZS5odG1sIGF3c2NjX2FjbXBjYV9jZXJ0aWZpY2F0ZX0gUmVzb3VyY2VcbiAgKlxuICAqIEBwYXJhbSBzY29wZSBUaGUgc2NvcGUgaW4gd2hpY2ggdG8gZGVmaW5lIHRoaXMgY29uc3RydWN0XG4gICogQHBhcmFtIGlkIFRoZSBzY29wZWQgY29uc3RydWN0IElELiBNdXN0IGJlIHVuaXF1ZSBhbW9uZ3N0IHNpYmxpbmdzIGluIHRoZSBzYW1lIHNjb3BlXG4gICogQHBhcmFtIG9wdGlvbnMgQWNtcGNhQ2VydGlmaWNhdGVDb25maWdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogQWNtcGNhQ2VydGlmaWNhdGVDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHRlcnJhZm9ybVJlc291cmNlVHlwZTogJ2F3c2NjX2FjbXBjYV9jZXJ0aWZpY2F0ZScsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2FwaVBhc3N0aHJvdWdoID0gY29uZmlnLmFwaVBhc3N0aHJvdWdoO1xuICAgIHRoaXMuX2NlcnRpZmljYXRlQXV0aG9yaXR5QXJuID0gY29uZmlnLmNlcnRpZmljYXRlQXV0aG9yaXR5QXJuO1xuICAgIHRoaXMuX2NlcnRpZmljYXRlU2lnbmluZ1JlcXVlc3QgPSBjb25maWcuY2VydGlmaWNhdGVTaWduaW5nUmVxdWVzdDtcbiAgICB0aGlzLl9zaWduaW5nQWxnb3JpdGhtID0gY29uZmlnLnNpZ25pbmdBbGdvcml0aG07XG4gICAgdGhpcy5fdGVtcGxhdGVBcm4gPSBjb25maWcudGVtcGxhdGVBcm47XG4gICAgdGhpcy5fdmFsaWRpdHkgPSBjb25maWcudmFsaWRpdHk7XG4gICAgdGhpcy5fdmFsaWRpdHlOb3RCZWZvcmUgPSBjb25maWcudmFsaWRpdHlOb3RCZWZvcmU7XG4gIH1cblxuICAvLyA9PT09PT09PT09XG4gIC8vIEFUVFJJQlVURVNcbiAgLy8gPT09PT09PT09PVxuXG4gIC8vIGFwaV9wYXNzdGhyb3VnaCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2FwaVBhc3N0aHJvdWdoPzogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaDtcbiAgcHVibGljIGdldCBhcGlQYXNzdGhyb3VnaCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdhcGlfcGFzc3Rocm91Z2gnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBhcGlQYXNzdGhyb3VnaCh2YWx1ZTogQWNtcGNhQ2VydGlmaWNhdGVBcGlQYXNzdGhyb3VnaCkge1xuICAgIHRoaXMuX2FwaVBhc3N0aHJvdWdoID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0QXBpUGFzc3Rocm91Z2goKSB7XG4gICAgdGhpcy5fYXBpUGFzc3Rocm91Z2ggPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGFwaVBhc3N0aHJvdWdoSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwaVBhc3N0aHJvdWdoXG4gIH1cblxuICAvLyBhcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBhcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdhcm4nKTtcbiAgfVxuXG4gIC8vIGNlcnRpZmljYXRlIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgY2VydGlmaWNhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjZXJ0aWZpY2F0ZScpO1xuICB9XG5cbiAgLy8gY2VydGlmaWNhdGVfYXV0aG9yaXR5X2FybiAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jZXJ0aWZpY2F0ZUF1dGhvcml0eUFybjogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGNlcnRpZmljYXRlQXV0aG9yaXR5QXJuKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY2VydGlmaWNhdGVfYXV0aG9yaXR5X2FybicpO1xuICB9XG4gIHB1YmxpYyBzZXQgY2VydGlmaWNhdGVBdXRob3JpdHlBcm4odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NlcnRpZmljYXRlQXV0aG9yaXR5QXJuID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNlcnRpZmljYXRlQXV0aG9yaXR5QXJuSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NlcnRpZmljYXRlQXV0aG9yaXR5QXJuXG4gIH1cblxuICAvLyBjZXJ0aWZpY2F0ZV9zaWduaW5nX3JlcXVlc3QgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfY2VydGlmaWNhdGVTaWduaW5nUmVxdWVzdDogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGNlcnRpZmljYXRlU2lnbmluZ1JlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjZXJ0aWZpY2F0ZV9zaWduaW5nX3JlcXVlc3QnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNlcnRpZmljYXRlU2lnbmluZ1JlcXVlc3QodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NlcnRpZmljYXRlU2lnbmluZ1JlcXVlc3QgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY2VydGlmaWNhdGVTaWduaW5nUmVxdWVzdElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jZXJ0aWZpY2F0ZVNpZ25pbmdSZXF1ZXN0XG4gIH1cblxuICAvLyBpZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaWQnKTtcbiAgfVxuXG4gIC8vIHNpZ25pbmdfYWxnb3JpdGhtIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3NpZ25pbmdBbGdvcml0aG06IHN0cmluZztcbiAgcHVibGljIGdldCBzaWduaW5nQWxnb3JpdGhtKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnc2lnbmluZ19hbGdvcml0aG0nKTtcbiAgfVxuICBwdWJsaWMgc2V0IHNpZ25pbmdBbGdvcml0aG0odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpZ25pbmdBbGdvcml0aG0gPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgc2lnbmluZ0FsZ29yaXRobUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zaWduaW5nQWxnb3JpdGhtXG4gIH1cblxuICAvLyB0ZW1wbGF0ZV9hcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90ZW1wbGF0ZUFybj86IHN0cmluZztcbiAgcHVibGljIGdldCB0ZW1wbGF0ZUFybigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3RlbXBsYXRlX2FybicpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGVtcGxhdGVBcm4odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RlbXBsYXRlQXJuID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VGVtcGxhdGVBcm4oKSB7XG4gICAgdGhpcy5fdGVtcGxhdGVBcm4gPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRlbXBsYXRlQXJuSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlQXJuXG4gIH1cblxuICAvLyB2YWxpZGl0eSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF92YWxpZGl0eTogQWNtcGNhQ2VydGlmaWNhdGVWYWxpZGl0eTtcbiAgcHVibGljIGdldCB2YWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCd2YWxpZGl0eScpIGFzIGFueTtcbiAgfVxuICBwdWJsaWMgc2V0IHZhbGlkaXR5KHZhbHVlOiBBY21wY2FDZXJ0aWZpY2F0ZVZhbGlkaXR5KSB7XG4gICAgdGhpcy5fdmFsaWRpdHkgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdmFsaWRpdHlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWRpdHlcbiAgfVxuXG4gIC8vIHZhbGlkaXR5X25vdF9iZWZvcmUgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF92YWxpZGl0eU5vdEJlZm9yZT86IEFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHlOb3RCZWZvcmU7XG4gIHB1YmxpYyBnZXQgdmFsaWRpdHlOb3RCZWZvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgndmFsaWRpdHlfbm90X2JlZm9yZScpIGFzIGFueTtcbiAgfVxuICBwdWJsaWMgc2V0IHZhbGlkaXR5Tm90QmVmb3JlKHZhbHVlOiBBY21wY2FDZXJ0aWZpY2F0ZVZhbGlkaXR5Tm90QmVmb3JlKSB7XG4gICAgdGhpcy5fdmFsaWRpdHlOb3RCZWZvcmUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRWYWxpZGl0eU5vdEJlZm9yZSgpIHtcbiAgICB0aGlzLl92YWxpZGl0eU5vdEJlZm9yZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdmFsaWRpdHlOb3RCZWZvcmVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWRpdHlOb3RCZWZvcmVcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXBpX3Bhc3N0aHJvdWdoOiBhY21wY2FDZXJ0aWZpY2F0ZUFwaVBhc3N0aHJvdWdoVG9UZXJyYWZvcm0odGhpcy5fYXBpUGFzc3Rocm91Z2gpLFxuICAgICAgY2VydGlmaWNhdGVfYXV0aG9yaXR5X2FybjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fY2VydGlmaWNhdGVBdXRob3JpdHlBcm4pLFxuICAgICAgY2VydGlmaWNhdGVfc2lnbmluZ19yZXF1ZXN0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9jZXJ0aWZpY2F0ZVNpZ25pbmdSZXF1ZXN0KSxcbiAgICAgIHNpZ25pbmdfYWxnb3JpdGhtOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9zaWduaW5nQWxnb3JpdGhtKSxcbiAgICAgIHRlbXBsYXRlX2FybjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fdGVtcGxhdGVBcm4pLFxuICAgICAgdmFsaWRpdHk6IGFjbXBjYUNlcnRpZmljYXRlVmFsaWRpdHlUb1RlcnJhZm9ybSh0aGlzLl92YWxpZGl0eSksXG4gICAgICB2YWxpZGl0eV9ub3RfYmVmb3JlOiBhY21wY2FDZXJ0aWZpY2F0ZVZhbGlkaXR5Tm90QmVmb3JlVG9UZXJyYWZvcm0odGhpcy5fdmFsaWRpdHlOb3RCZWZvcmUpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==