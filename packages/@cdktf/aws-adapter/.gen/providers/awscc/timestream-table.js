"use strict";
// https://www.terraform.io/docs/providers/awscc/r/timestream_table.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestreamTable = exports.timestreamTableTagsToTerraform = exports.timestreamTableRetentionPropertiesToTerraform = void 0;
const cdktf = require("cdktf");
function timestreamTableRetentionPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        magnetic_store_retention_period_in_days: cdktf.stringToTerraform(struct.magneticStoreRetentionPeriodInDays),
        memory_store_retention_period_in_hours: cdktf.stringToTerraform(struct.memoryStoreRetentionPeriodInHours),
    };
}
exports.timestreamTableRetentionPropertiesToTerraform = timestreamTableRetentionPropertiesToTerraform;
function timestreamTableTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.timestreamTableTagsToTerraform = timestreamTableTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/timestream_table.html awscc_timestream_table}
*/
class TimestreamTable extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/timestream_table.html awscc_timestream_table} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options TimestreamTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_timestream_table',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._databaseName = config.databaseName;
        this._retentionProperties = config.retentionProperties;
        this._tableName = config.tableName;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get retentionProperties() {
        return this.interpolationForAttribute('retention_properties');
    }
    set retentionProperties(value) {
        this._retentionProperties = value;
    }
    resetRetentionProperties() {
        this._retentionProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPropertiesInput() {
        return this._retentionProperties;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    resetTableName() {
        this._tableName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            database_name: cdktf.stringToTerraform(this._databaseName),
            retention_properties: timestreamTableRetentionPropertiesToTerraform(this._retentionProperties),
            table_name: cdktf.stringToTerraform(this._tableName),
            tags: cdktf.listMapper(timestreamTableTagsToTerraform)(this._tags),
        };
    }
}
exports.TimestreamTable = TimestreamTable;
// =================
// STATIC PROPERTIES
// =================
TimestreamTable.tfResourceType = "awscc_timestream_table";
//# sourceMappingURL=data:application/json;base64,