"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule_destination.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotTopicRuleDestination = exports.iotTopicRuleDestinationVpcPropertiesToTerraform = exports.iotTopicRuleDestinationHttpUrlPropertiesToTerraform = void 0;
const cdktf = require("cdktf");
function iotTopicRuleDestinationHttpUrlPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        confirmation_url: cdktf.stringToTerraform(struct.confirmationUrl),
    };
}
exports.iotTopicRuleDestinationHttpUrlPropertiesToTerraform = iotTopicRuleDestinationHttpUrlPropertiesToTerraform;
function iotTopicRuleDestinationVpcPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.iotTopicRuleDestinationVpcPropertiesToTerraform = iotTopicRuleDestinationVpcPropertiesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule_destination.html awscc_iot_topic_rule_destination}
*/
class IotTopicRuleDestination extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_topic_rule_destination.html awscc_iot_topic_rule_destination} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotTopicRuleDestinationConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_topic_rule_destination',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._httpUrlProperties = config.httpUrlProperties;
        this._status = config.status;
        this._vpcProperties = config.vpcProperties;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get httpUrlProperties() {
        return this.interpolationForAttribute('http_url_properties');
    }
    set httpUrlProperties(value) {
        this._httpUrlProperties = value;
    }
    resetHttpUrlProperties() {
        this._httpUrlProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpUrlPropertiesInput() {
        return this._httpUrlProperties;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    // status_reason - computed: true, optional: false, required: false
    get statusReason() {
        return this.getStringAttribute('status_reason');
    }
    get vpcProperties() {
        return this.interpolationForAttribute('vpc_properties');
    }
    set vpcProperties(value) {
        this._vpcProperties = value;
    }
    resetVpcProperties() {
        this._vpcProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcPropertiesInput() {
        return this._vpcProperties;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            http_url_properties: iotTopicRuleDestinationHttpUrlPropertiesToTerraform(this._httpUrlProperties),
            status: cdktf.stringToTerraform(this._status),
            vpc_properties: iotTopicRuleDestinationVpcPropertiesToTerraform(this._vpcProperties),
        };
    }
}
exports.IotTopicRuleDestination = IotTopicRuleDestination;
// =================
// STATIC PROPERTIES
// =================
IotTopicRuleDestination.tfResourceType = "awscc_iot_topic_rule_destination";
//# sourceMappingURL=data:application/json;base64,