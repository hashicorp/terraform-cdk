"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecr_repository.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcrRepository = exports.ecrRepositoryTagsToTerraform = exports.ecrRepositoryLifecyclePolicyToTerraform = exports.ecrRepositoryImageScanningConfigurationToTerraform = exports.ecrRepositoryEncryptionConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function ecrRepositoryEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.ecrRepositoryEncryptionConfigurationToTerraform = ecrRepositoryEncryptionConfigurationToTerraform;
function ecrRepositoryImageScanningConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        scan_on_push: cdktf.booleanToTerraform(struct.scanOnPush),
    };
}
exports.ecrRepositoryImageScanningConfigurationToTerraform = ecrRepositoryImageScanningConfigurationToTerraform;
function ecrRepositoryLifecyclePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        lifecycle_policy_text: cdktf.stringToTerraform(struct.lifecyclePolicyText),
        registry_id: cdktf.stringToTerraform(struct.registryId),
    };
}
exports.ecrRepositoryLifecyclePolicyToTerraform = ecrRepositoryLifecyclePolicyToTerraform;
function ecrRepositoryTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecrRepositoryTagsToTerraform = ecrRepositoryTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecr_repository.html awscc_ecr_repository}
*/
class EcrRepository extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecr_repository.html awscc_ecr_repository} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcrRepositoryConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecr_repository',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._encryptionConfiguration = config.encryptionConfiguration;
        this._imageScanningConfiguration = config.imageScanningConfiguration;
        this._imageTagMutability = config.imageTagMutability;
        this._lifecyclePolicy = config.lifecyclePolicy;
        this._repositoryName = config.repositoryName;
        this._repositoryPolicyText = config.repositoryPolicyText;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get encryptionConfiguration() {
        return this.interpolationForAttribute('encryption_configuration');
    }
    set encryptionConfiguration(value) {
        this._encryptionConfiguration = value;
    }
    resetEncryptionConfiguration() {
        this._encryptionConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get imageScanningConfiguration() {
        return this.interpolationForAttribute('image_scanning_configuration');
    }
    set imageScanningConfiguration(value) {
        this._imageScanningConfiguration = value;
    }
    resetImageScanningConfiguration() {
        this._imageScanningConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageScanningConfigurationInput() {
        return this._imageScanningConfiguration;
    }
    get imageTagMutability() {
        return this.getStringAttribute('image_tag_mutability');
    }
    set imageTagMutability(value) {
        this._imageTagMutability = value;
    }
    resetImageTagMutability() {
        this._imageTagMutability = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTagMutabilityInput() {
        return this._imageTagMutability;
    }
    get lifecyclePolicy() {
        return this.interpolationForAttribute('lifecycle_policy');
    }
    set lifecyclePolicy(value) {
        this._lifecyclePolicy = value;
    }
    resetLifecyclePolicy() {
        this._lifecyclePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecyclePolicyInput() {
        return this._lifecyclePolicy;
    }
    get repositoryName() {
        return this.getStringAttribute('repository_name');
    }
    set repositoryName(value) {
        this._repositoryName = value;
    }
    resetRepositoryName() {
        this._repositoryName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryNameInput() {
        return this._repositoryName;
    }
    get repositoryPolicyText() {
        return this.getStringAttribute('repository_policy_text');
    }
    set repositoryPolicyText(value) {
        this._repositoryPolicyText = value;
    }
    resetRepositoryPolicyText() {
        this._repositoryPolicyText = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryPolicyTextInput() {
        return this._repositoryPolicyText;
    }
    // repository_uri - computed: true, optional: false, required: false
    get repositoryUri() {
        return this.getStringAttribute('repository_uri');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            encryption_configuration: ecrRepositoryEncryptionConfigurationToTerraform(this._encryptionConfiguration),
            image_scanning_configuration: ecrRepositoryImageScanningConfigurationToTerraform(this._imageScanningConfiguration),
            image_tag_mutability: cdktf.stringToTerraform(this._imageTagMutability),
            lifecycle_policy: ecrRepositoryLifecyclePolicyToTerraform(this._lifecyclePolicy),
            repository_name: cdktf.stringToTerraform(this._repositoryName),
            repository_policy_text: cdktf.stringToTerraform(this._repositoryPolicyText),
            tags: cdktf.listMapper(ecrRepositoryTagsToTerraform)(this._tags),
        };
    }
}
exports.EcrRepository = EcrRepository;
// =================
// STATIC PROPERTIES
// =================
EcrRepository.tfResourceType = "awscc_ecr_repository";
//# sourceMappingURL=data:application/json;base64,