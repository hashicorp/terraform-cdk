"use strict";
// https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_target_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsDbProxyTargetGroup = exports.rdsDbProxyTargetGroupConnectionPoolConfigurationInfoToTerraform = void 0;
const cdktf = require("cdktf");
function rdsDbProxyTargetGroupConnectionPoolConfigurationInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connection_borrow_timeout: cdktf.numberToTerraform(struct.connectionBorrowTimeout),
        init_query: cdktf.stringToTerraform(struct.initQuery),
        max_connections_percent: cdktf.numberToTerraform(struct.maxConnectionsPercent),
        max_idle_connections_percent: cdktf.numberToTerraform(struct.maxIdleConnectionsPercent),
        session_pinning_filters: cdktf.listMapper(cdktf.stringToTerraform)(struct.sessionPinningFilters),
    };
}
exports.rdsDbProxyTargetGroupConnectionPoolConfigurationInfoToTerraform = rdsDbProxyTargetGroupConnectionPoolConfigurationInfoToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_target_group.html awscc_rds_db_proxy_target_group}
*/
class RdsDbProxyTargetGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_target_group.html awscc_rds_db_proxy_target_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RdsDbProxyTargetGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_rds_db_proxy_target_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._connectionPoolConfigurationInfo = config.connectionPoolConfigurationInfo;
        this._dbClusterIdentifiers = config.dbClusterIdentifiers;
        this._dbInstanceIdentifiers = config.dbInstanceIdentifiers;
        this._dbProxyName = config.dbProxyName;
        this._targetGroupName = config.targetGroupName;
    }
    get connectionPoolConfigurationInfo() {
        return this.interpolationForAttribute('connection_pool_configuration_info');
    }
    set connectionPoolConfigurationInfo(value) {
        this._connectionPoolConfigurationInfo = value;
    }
    resetConnectionPoolConfigurationInfo() {
        this._connectionPoolConfigurationInfo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionPoolConfigurationInfoInput() {
        return this._connectionPoolConfigurationInfo;
    }
    get dbClusterIdentifiers() {
        return this.getListAttribute('db_cluster_identifiers');
    }
    set dbClusterIdentifiers(value) {
        this._dbClusterIdentifiers = value;
    }
    resetDbClusterIdentifiers() {
        this._dbClusterIdentifiers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbClusterIdentifiersInput() {
        return this._dbClusterIdentifiers;
    }
    get dbInstanceIdentifiers() {
        return this.getListAttribute('db_instance_identifiers');
    }
    set dbInstanceIdentifiers(value) {
        this._dbInstanceIdentifiers = value;
    }
    resetDbInstanceIdentifiers() {
        this._dbInstanceIdentifiers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbInstanceIdentifiersInput() {
        return this._dbInstanceIdentifiers;
    }
    get dbProxyName() {
        return this.getStringAttribute('db_proxy_name');
    }
    set dbProxyName(value) {
        this._dbProxyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbProxyNameInput() {
        return this._dbProxyName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // target_group_arn - computed: true, optional: false, required: false
    get targetGroupArn() {
        return this.getStringAttribute('target_group_arn');
    }
    get targetGroupName() {
        return this.getStringAttribute('target_group_name');
    }
    set targetGroupName(value) {
        this._targetGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetGroupNameInput() {
        return this._targetGroupName;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_pool_configuration_info: rdsDbProxyTargetGroupConnectionPoolConfigurationInfoToTerraform(this._connectionPoolConfigurationInfo),
            db_cluster_identifiers: cdktf.listMapper(cdktf.stringToTerraform)(this._dbClusterIdentifiers),
            db_instance_identifiers: cdktf.listMapper(cdktf.stringToTerraform)(this._dbInstanceIdentifiers),
            db_proxy_name: cdktf.stringToTerraform(this._dbProxyName),
            target_group_name: cdktf.stringToTerraform(this._targetGroupName),
        };
    }
}
exports.RdsDbProxyTargetGroup = RdsDbProxyTargetGroup;
// =================
// STATIC PROPERTIES
// =================
RdsDbProxyTargetGroup.tfResourceType = "awscc_rds_db_proxy_target_group";
//# sourceMappingURL=data:application/json;base64,