"use strict";
// https://www.terraform.io/docs/providers/awscc/d/groundstation_dataflow_endpoint_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccGroundstationDataflowEndpointGroup = exports.dataAwsccGroundstationDataflowEndpointGroupTagsToTerraform = exports.DataAwsccGroundstationDataflowEndpointGroupTags = exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsToTerraform = exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetails = exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform = exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetails = exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform = exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpoint = exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform = exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddress = void 0;
const cdktf = require("cdktf");
class DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddress extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddress = DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddress;
function dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform = dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform;
class DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpoint extends cdktf.ComplexComputedList {
    // address - computed: true, optional: false, required: false
    get address() {
        return this.interpolationForAttribute('address');
    }
    // mtu - computed: true, optional: false, required: false
    get mtu() {
        return this.getNumberAttribute('mtu');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpoint = DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpoint;
function dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointAddressToTerraform(struct.address),
        mtu: cdktf.numberToTerraform(struct.mtu),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform = dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform;
class DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetails extends cdktf.ComplexComputedList {
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // security_group_ids - computed: true, optional: false, required: false
    get securityGroupIds() {
        return this.getListAttribute('security_group_ids');
    }
    // subnet_ids - computed: true, optional: false, required: false
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetails = DataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetails;
function dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform = dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform;
class DataAwsccGroundstationDataflowEndpointGroupEndpointDetails extends cdktf.ComplexComputedList {
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.interpolationForAttribute('endpoint');
    }
    // security_details - computed: true, optional: false, required: false
    get securityDetails() {
        return this.interpolationForAttribute('security_details');
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroupEndpointDetails = DataAwsccGroundstationDataflowEndpointGroupEndpointDetails;
function dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint: dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsEndpointToTerraform(struct.endpoint),
        security_details: dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsSecurityDetailsToTerraform(struct.securityDetails),
    };
}
exports.dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsToTerraform = dataAwsccGroundstationDataflowEndpointGroupEndpointDetailsToTerraform;
class DataAwsccGroundstationDataflowEndpointGroupTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroupTags = DataAwsccGroundstationDataflowEndpointGroupTags;
function dataAwsccGroundstationDataflowEndpointGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccGroundstationDataflowEndpointGroupTagsToTerraform = dataAwsccGroundstationDataflowEndpointGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/groundstation_dataflow_endpoint_group.html awscc_groundstation_dataflow_endpoint_group}
*/
class DataAwsccGroundstationDataflowEndpointGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/groundstation_dataflow_endpoint_group.html awscc_groundstation_dataflow_endpoint_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccGroundstationDataflowEndpointGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_groundstation_dataflow_endpoint_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // endpoint_details - computed: true, optional: false, required: false
    get endpointDetails() {
        return this.interpolationForAttribute('endpoint_details');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccGroundstationDataflowEndpointGroup = DataAwsccGroundstationDataflowEndpointGroup;
// =================
// STATIC PROPERTIES
// =================
DataAwsccGroundstationDataflowEndpointGroup.tfResourceType = "awscc_groundstation_dataflow_endpoint_group";
//# sourceMappingURL=data:application/json;base64,