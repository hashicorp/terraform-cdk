"use strict";
// https://www.terraform.io/docs/providers/awscc/r/athena_work_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AthenaWorkGroup = exports.athenaWorkGroupWorkGroupConfigurationUpdatesToTerraform = exports.athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform = exports.athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform = exports.athenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform = exports.athenaWorkGroupWorkGroupConfigurationToTerraform = exports.athenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform = exports.athenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = exports.athenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform = exports.athenaWorkGroupTagsToTerraform = void 0;
const cdktf = require("cdktf");
function athenaWorkGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.athenaWorkGroupTagsToTerraform = athenaWorkGroupTagsToTerraform;
function athenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        effective_engine_version: cdktf.stringToTerraform(struct.effectiveEngineVersion),
        selected_engine_version: cdktf.stringToTerraform(struct.selectedEngineVersion),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform = athenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform;
function athenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = athenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform;
function athenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_configuration: athenaWorkGroupWorkGroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform = athenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform;
function athenaWorkGroupWorkGroupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bytes_scanned_cutoff_per_query: cdktf.numberToTerraform(struct.bytesScannedCutoffPerQuery),
        enforce_work_group_configuration: cdktf.booleanToTerraform(struct.enforceWorkGroupConfiguration),
        engine_version: athenaWorkGroupWorkGroupConfigurationEngineVersionToTerraform(struct.engineVersion),
        publish_cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.publishCloudwatchMetricsEnabled),
        requester_pays_enabled: cdktf.booleanToTerraform(struct.requesterPaysEnabled),
        result_configuration: athenaWorkGroupWorkGroupConfigurationResultConfigurationToTerraform(struct.resultConfiguration),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationToTerraform = athenaWorkGroupWorkGroupConfigurationToTerraform;
function athenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        effective_engine_version: cdktf.stringToTerraform(struct.effectiveEngineVersion),
        selected_engine_version: cdktf.stringToTerraform(struct.selectedEngineVersion),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform = athenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform;
function athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform = athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform;
function athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_configuration: athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
        remove_encryption_configuration: cdktf.booleanToTerraform(struct.removeEncryptionConfiguration),
        remove_output_location: cdktf.booleanToTerraform(struct.removeOutputLocation),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform = athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform;
function athenaWorkGroupWorkGroupConfigurationUpdatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bytes_scanned_cutoff_per_query: cdktf.numberToTerraform(struct.bytesScannedCutoffPerQuery),
        enforce_work_group_configuration: cdktf.booleanToTerraform(struct.enforceWorkGroupConfiguration),
        engine_version: athenaWorkGroupWorkGroupConfigurationUpdatesEngineVersionToTerraform(struct.engineVersion),
        publish_cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.publishCloudwatchMetricsEnabled),
        remove_bytes_scanned_cutoff_per_query: cdktf.booleanToTerraform(struct.removeBytesScannedCutoffPerQuery),
        requester_pays_enabled: cdktf.booleanToTerraform(struct.requesterPaysEnabled),
        result_configuration_updates: athenaWorkGroupWorkGroupConfigurationUpdatesResultConfigurationUpdatesToTerraform(struct.resultConfigurationUpdates),
    };
}
exports.athenaWorkGroupWorkGroupConfigurationUpdatesToTerraform = athenaWorkGroupWorkGroupConfigurationUpdatesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/athena_work_group.html awscc_athena_work_group}
*/
class AthenaWorkGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/athena_work_group.html awscc_athena_work_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AthenaWorkGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_athena_work_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._name = config.name;
        this._recursiveDeleteOption = config.recursiveDeleteOption;
        this._state = config.state;
        this._tags = config.tags;
        this._workGroupConfiguration = config.workGroupConfiguration;
        this._workGroupConfigurationUpdates = config.workGroupConfigurationUpdates;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get recursiveDeleteOption() {
        return this.getBooleanAttribute('recursive_delete_option');
    }
    set recursiveDeleteOption(value) {
        this._recursiveDeleteOption = value;
    }
    resetRecursiveDeleteOption() {
        this._recursiveDeleteOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recursiveDeleteOptionInput() {
        return this._recursiveDeleteOption;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get workGroupConfiguration() {
        return this.interpolationForAttribute('work_group_configuration');
    }
    set workGroupConfiguration(value) {
        this._workGroupConfiguration = value;
    }
    resetWorkGroupConfiguration() {
        this._workGroupConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workGroupConfigurationInput() {
        return this._workGroupConfiguration;
    }
    get workGroupConfigurationUpdates() {
        return this.interpolationForAttribute('work_group_configuration_updates');
    }
    set workGroupConfigurationUpdates(value) {
        this._workGroupConfigurationUpdates = value;
    }
    resetWorkGroupConfigurationUpdates() {
        this._workGroupConfigurationUpdates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workGroupConfigurationUpdatesInput() {
        return this._workGroupConfigurationUpdates;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            name: cdktf.stringToTerraform(this._name),
            recursive_delete_option: cdktf.booleanToTerraform(this._recursiveDeleteOption),
            state: cdktf.stringToTerraform(this._state),
            tags: cdktf.listMapper(athenaWorkGroupTagsToTerraform)(this._tags),
            work_group_configuration: athenaWorkGroupWorkGroupConfigurationToTerraform(this._workGroupConfiguration),
            work_group_configuration_updates: athenaWorkGroupWorkGroupConfigurationUpdatesToTerraform(this._workGroupConfigurationUpdates),
        };
    }
}
exports.AthenaWorkGroup = AthenaWorkGroup;
// =================
// STATIC PROPERTIES
// =================
AthenaWorkGroup.tfResourceType = "awscc_athena_work_group";
//# sourceMappingURL=data:application/json;base64,