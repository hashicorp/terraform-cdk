"use strict";
// https://www.terraform.io/docs/providers/awscc/d/imagebuilder_distribution_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccImagebuilderDistributionConfiguration = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributions = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurations = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfiguration = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepository = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfiguration = exports.dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform = exports.DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfiguration = void 0;
const cdktf = require("cdktf");
class DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfiguration extends cdktf.ComplexComputedList {
    // user_groups - computed: true, optional: false, required: false
    get userGroups() {
        return this.getListAttribute('user_groups');
    }
    // user_ids - computed: true, optional: false, required: false
    get userIds() {
        return this.getListAttribute('user_ids');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfiguration = DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfiguration;
function dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        user_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.userGroups),
        user_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.userIds),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform;
class DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfiguration extends cdktf.ComplexComputedList {
    // ami_tags - computed: true, optional: false, required: false
    get amiTags() {
        return this.interpolationForAttribute('ami_tags');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // kms_key_id - computed: true, optional: false, required: false
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    // launch_permission_configuration - computed: true, optional: false, required: false
    get launchPermissionConfiguration() {
        return this.interpolationForAttribute('launch_permission_configuration');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // target_account_ids - computed: true, optional: false, required: false
    get targetAccountIds() {
        return this.getListAttribute('target_account_ids');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfiguration = DataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfiguration;
function dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ami_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.amiTags),
        description: cdktf.stringToTerraform(struct.description),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        launch_permission_configuration: dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform(struct.launchPermissionConfiguration),
        name: cdktf.stringToTerraform(struct.name),
        target_account_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetAccountIds),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform;
class DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepository extends cdktf.ComplexComputedList {
    // repository_name - computed: true, optional: false, required: false
    get repositoryName() {
        return this.getStringAttribute('repository_name');
    }
    // service - computed: true, optional: false, required: false
    get service() {
        return this.getStringAttribute('service');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepository = DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepository;
function dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        repository_name: cdktf.stringToTerraform(struct.repositoryName),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform;
class DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfiguration extends cdktf.ComplexComputedList {
    // container_tags - computed: true, optional: false, required: false
    get containerTags() {
        return this.getListAttribute('container_tags');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // target_repository - computed: true, optional: false, required: false
    get targetRepository() {
        return this.interpolationForAttribute('target_repository');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfiguration = DataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfiguration;
function dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_tags: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerTags),
        description: cdktf.stringToTerraform(struct.description),
        target_repository: dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform(struct.targetRepository),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform;
class DataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurations extends cdktf.ComplexComputedList {
    // account_id - computed: true, optional: false, required: false
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    // launch_template_id - computed: true, optional: false, required: false
    get launchTemplateId() {
        return this.getStringAttribute('launch_template_id');
    }
    // set_default_version - computed: true, optional: false, required: false
    get setDefaultVersion() {
        return this.getBooleanAttribute('set_default_version');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurations = DataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurations;
function dataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        set_default_version: cdktf.booleanToTerraform(struct.setDefaultVersion),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform;
class DataAwsccImagebuilderDistributionConfigurationDistributions extends cdktf.ComplexComputedList {
    // ami_distribution_configuration - computed: true, optional: false, required: false
    get amiDistributionConfiguration() {
        return this.interpolationForAttribute('ami_distribution_configuration');
    }
    // container_distribution_configuration - computed: true, optional: false, required: false
    get containerDistributionConfiguration() {
        return this.interpolationForAttribute('container_distribution_configuration');
    }
    // launch_template_configurations - computed: true, optional: false, required: false
    get launchTemplateConfigurations() {
        return this.interpolationForAttribute('launch_template_configurations');
    }
    // license_configuration_arns - computed: true, optional: false, required: false
    get licenseConfigurationArns() {
        return this.getListAttribute('license_configuration_arns');
    }
    // region - computed: true, optional: false, required: false
    get region() {
        return this.getStringAttribute('region');
    }
}
exports.DataAwsccImagebuilderDistributionConfigurationDistributions = DataAwsccImagebuilderDistributionConfigurationDistributions;
function dataAwsccImagebuilderDistributionConfigurationDistributionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ami_distribution_configuration: dataAwsccImagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform(struct.amiDistributionConfiguration),
        container_distribution_configuration: dataAwsccImagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform(struct.containerDistributionConfiguration),
        launch_template_configurations: cdktf.listMapper(dataAwsccImagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform)(struct.launchTemplateConfigurations),
        license_configuration_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.licenseConfigurationArns),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.dataAwsccImagebuilderDistributionConfigurationDistributionsToTerraform = dataAwsccImagebuilderDistributionConfigurationDistributionsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_distribution_configuration.html awscc_imagebuilder_distribution_configuration}
*/
class DataAwsccImagebuilderDistributionConfiguration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_distribution_configuration.html awscc_imagebuilder_distribution_configuration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccImagebuilderDistributionConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_distribution_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // distributions - computed: true, optional: false, required: false
    get distributions() {
        return this.interpolationForAttribute('distributions');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // tags - computed: true, optional: false, required: false
    tags(key) {
        return new cdktf.StringMap(this, 'tags').lookup(key);
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccImagebuilderDistributionConfiguration = DataAwsccImagebuilderDistributionConfiguration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccImagebuilderDistributionConfiguration.tfResourceType = "awscc_imagebuilder_distribution_configuration";
//# sourceMappingURL=data:application/json;base64,