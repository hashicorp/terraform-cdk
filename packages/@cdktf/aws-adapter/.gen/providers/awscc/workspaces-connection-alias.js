"use strict";
// https://www.terraform.io/docs/providers/awscc/r/workspaces_connection_alias.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspacesConnectionAlias = exports.workspacesConnectionAliasTagsToTerraform = exports.workspacesConnectionAliasAssociationsToTerraform = exports.WorkspacesConnectionAliasAssociations = void 0;
const cdktf = require("cdktf");
class WorkspacesConnectionAliasAssociations extends cdktf.ComplexComputedList {
    get associatedAccountId() {
        return this.getStringAttribute('associated_account_id');
    }
    set associatedAccountId(value) {
        this._associatedAccountId = value;
    }
    resetAssociatedAccountId() {
        this._associatedAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associatedAccountIdInput() {
        return this._associatedAccountId;
    }
    get associationStatus() {
        return this.getStringAttribute('association_status');
    }
    set associationStatus(value) {
        this._associationStatus = value;
    }
    resetAssociationStatus() {
        this._associationStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associationStatusInput() {
        return this._associationStatus;
    }
    get connectionIdentifier() {
        return this.getStringAttribute('connection_identifier');
    }
    set connectionIdentifier(value) {
        this._connectionIdentifier = value;
    }
    resetConnectionIdentifier() {
        this._connectionIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionIdentifierInput() {
        return this._connectionIdentifier;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    resetResourceId() {
        this._resourceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
}
exports.WorkspacesConnectionAliasAssociations = WorkspacesConnectionAliasAssociations;
function workspacesConnectionAliasAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        associated_account_id: cdktf.stringToTerraform(struct.associatedAccountId),
        association_status: cdktf.stringToTerraform(struct.associationStatus),
        connection_identifier: cdktf.stringToTerraform(struct.connectionIdentifier),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
    };
}
exports.workspacesConnectionAliasAssociationsToTerraform = workspacesConnectionAliasAssociationsToTerraform;
function workspacesConnectionAliasTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.workspacesConnectionAliasTagsToTerraform = workspacesConnectionAliasTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/workspaces_connection_alias.html awscc_workspaces_connection_alias}
*/
class WorkspacesConnectionAlias extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/workspaces_connection_alias.html awscc_workspaces_connection_alias} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options WorkspacesConnectionAliasConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_workspaces_connection_alias',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._connectionString = config.connectionString;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // alias_id - computed: true, optional: false, required: false
    get aliasId() {
        return this.getStringAttribute('alias_id');
    }
    // associations - computed: true, optional: false, required: false
    get associations() {
        return this.interpolationForAttribute('associations');
    }
    // connection_alias_state - computed: true, optional: false, required: false
    get connectionAliasState() {
        return this.getStringAttribute('connection_alias_state');
    }
    get connectionString() {
        return this.getStringAttribute('connection_string');
    }
    set connectionString(value) {
        this._connectionString = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionStringInput() {
        return this._connectionString;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_string: cdktf.stringToTerraform(this._connectionString),
            tags: cdktf.listMapper(workspacesConnectionAliasTagsToTerraform)(this._tags),
        };
    }
}
exports.WorkspacesConnectionAlias = WorkspacesConnectionAlias;
// =================
// STATIC PROPERTIES
// =================
WorkspacesConnectionAlias.tfResourceType = "awscc_workspaces_connection_alias";
//# sourceMappingURL=data:application/json;base64,