"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iam_server_certificate.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IamServerCertificate = exports.iamServerCertificateTagsToTerraform = void 0;
const cdktf = require("cdktf");
function iamServerCertificateTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iamServerCertificateTagsToTerraform = iamServerCertificateTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iam_server_certificate.html awscc_iam_server_certificate}
*/
class IamServerCertificate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iam_server_certificate.html awscc_iam_server_certificate} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IamServerCertificateConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iam_server_certificate',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._certificateBody = config.certificateBody;
        this._certificateChain = config.certificateChain;
        this._path = config.path;
        this._privateKey = config.privateKey;
        this._serverCertificateName = config.serverCertificateName;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get certificateBody() {
        return this.getStringAttribute('certificate_body');
    }
    set certificateBody(value) {
        this._certificateBody = value;
    }
    resetCertificateBody() {
        this._certificateBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateBodyInput() {
        return this._certificateBody;
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    resetCertificateChain() {
        this._certificateChain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get privateKey() {
        return this.getStringAttribute('private_key');
    }
    set privateKey(value) {
        this._privateKey = value;
    }
    resetPrivateKey() {
        this._privateKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeyInput() {
        return this._privateKey;
    }
    get serverCertificateName() {
        return this.getStringAttribute('server_certificate_name');
    }
    set serverCertificateName(value) {
        this._serverCertificateName = value;
    }
    resetServerCertificateName() {
        this._serverCertificateName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateNameInput() {
        return this._serverCertificateName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate_body: cdktf.stringToTerraform(this._certificateBody),
            certificate_chain: cdktf.stringToTerraform(this._certificateChain),
            path: cdktf.stringToTerraform(this._path),
            private_key: cdktf.stringToTerraform(this._privateKey),
            server_certificate_name: cdktf.stringToTerraform(this._serverCertificateName),
            tags: cdktf.listMapper(iamServerCertificateTagsToTerraform)(this._tags),
        };
    }
}
exports.IamServerCertificate = IamServerCertificate;
// =================
// STATIC PROPERTIES
// =================
IamServerCertificate.tfResourceType = "awscc_iam_server_certificate";
//# sourceMappingURL=data:application/json;base64,