"use strict";
// https://www.terraform.io/docs/providers/awscc/d/wafv2_logging_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccWafv2LoggingConfiguration = exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsToTerraform = exports.DataAwsccWafv2LoggingConfigurationRedactedFields = exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform = exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeader = exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform = exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBody = exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform = exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPattern = exports.dataAwsccWafv2LoggingConfigurationLoggingFilterToTerraform = exports.DataAwsccWafv2LoggingConfigurationLoggingFilter = exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersToTerraform = exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFilters = exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform = exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditions = exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform = exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameCondition = exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform = exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionCondition = void 0;
const cdktf = require("cdktf");
class DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionCondition extends cdktf.ComplexComputedList {
    // action - computed: true, optional: false, required: false
    get action() {
        return this.getStringAttribute('action');
    }
}
exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionCondition = DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionCondition;
function dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform = dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform;
class DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameCondition extends cdktf.ComplexComputedList {
    // label_name - computed: true, optional: false, required: false
    get labelName() {
        return this.getStringAttribute('label_name');
    }
}
exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameCondition = DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameCondition;
function dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label_name: cdktf.stringToTerraform(struct.labelName),
    };
}
exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform = dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform;
class DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditions extends cdktf.ComplexComputedList {
    // action_condition - computed: true, optional: false, required: false
    get actionCondition() {
        return this.interpolationForAttribute('action_condition');
    }
    // label_name_condition - computed: true, optional: false, required: false
    get labelNameCondition() {
        return this.interpolationForAttribute('label_name_condition');
    }
}
exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditions = DataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditions;
function dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_condition: dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform(struct.actionCondition),
        label_name_condition: dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform(struct.labelNameCondition),
    };
}
exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform = dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform;
class DataAwsccWafv2LoggingConfigurationLoggingFilterFilters extends cdktf.ComplexComputedList {
    // behavior - computed: true, optional: false, required: false
    get behavior() {
        return this.getStringAttribute('behavior');
    }
    // conditions - computed: true, optional: false, required: false
    get conditions() {
        return this.interpolationForAttribute('conditions');
    }
    // requirement - computed: true, optional: false, required: false
    get requirement() {
        return this.getStringAttribute('requirement');
    }
}
exports.DataAwsccWafv2LoggingConfigurationLoggingFilterFilters = DataAwsccWafv2LoggingConfigurationLoggingFilterFilters;
function dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        behavior: cdktf.stringToTerraform(struct.behavior),
        conditions: cdktf.listMapper(dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform)(struct.conditions),
        requirement: cdktf.stringToTerraform(struct.requirement),
    };
}
exports.dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersToTerraform = dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersToTerraform;
class DataAwsccWafv2LoggingConfigurationLoggingFilter extends cdktf.ComplexComputedList {
    // default_behavior - computed: true, optional: false, required: false
    get defaultBehavior() {
        return this.getStringAttribute('default_behavior');
    }
    // filters - computed: true, optional: false, required: false
    get filters() {
        return this.interpolationForAttribute('filters');
    }
}
exports.DataAwsccWafv2LoggingConfigurationLoggingFilter = DataAwsccWafv2LoggingConfigurationLoggingFilter;
function dataAwsccWafv2LoggingConfigurationLoggingFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_behavior: cdktf.stringToTerraform(struct.defaultBehavior),
        filters: cdktf.listMapper(dataAwsccWafv2LoggingConfigurationLoggingFilterFiltersToTerraform)(struct.filters),
    };
}
exports.dataAwsccWafv2LoggingConfigurationLoggingFilterToTerraform = dataAwsccWafv2LoggingConfigurationLoggingFilterToTerraform;
class DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPattern extends cdktf.ComplexComputedList {
    // all - computed: true, optional: false, required: false
    get all() {
        return this.interpolationForAttribute('all');
    }
    // included_paths - computed: true, optional: false, required: false
    get includedPaths() {
        return this.getListAttribute('included_paths');
    }
}
exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPattern = DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPattern;
function dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        all: cdktf.hashMapper(cdktf.stringToTerraform)(struct.all),
        included_paths: cdktf.listMapper(cdktf.stringToTerraform)(struct.includedPaths),
    };
}
exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform = dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform;
class DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBody extends cdktf.ComplexComputedList {
    // invalid_fallback_behavior - computed: true, optional: false, required: false
    get invalidFallbackBehavior() {
        return this.getStringAttribute('invalid_fallback_behavior');
    }
    // match_pattern - computed: true, optional: false, required: false
    get matchPattern() {
        return this.interpolationForAttribute('match_pattern');
    }
    // match_scope - computed: true, optional: false, required: false
    get matchScope() {
        return this.getStringAttribute('match_scope');
    }
}
exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBody = DataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBody;
function dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        invalid_fallback_behavior: cdktf.stringToTerraform(struct.invalidFallbackBehavior),
        match_pattern: dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform(struct.matchPattern),
        match_scope: cdktf.stringToTerraform(struct.matchScope),
    };
}
exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform = dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform;
class DataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeader extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeader = DataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeader;
function dataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform = dataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform;
class DataAwsccWafv2LoggingConfigurationRedactedFields extends cdktf.ComplexComputedList {
    // json_body - computed: true, optional: false, required: false
    get jsonBody() {
        return this.interpolationForAttribute('json_body');
    }
    // method - computed: true, optional: false, required: false
    get method() {
        return this.interpolationForAttribute('method');
    }
    // query_string - computed: true, optional: false, required: false
    get queryString() {
        return this.interpolationForAttribute('query_string');
    }
    // single_header - computed: true, optional: false, required: false
    get singleHeader() {
        return this.interpolationForAttribute('single_header');
    }
    // uri_path - computed: true, optional: false, required: false
    get uriPath() {
        return this.interpolationForAttribute('uri_path');
    }
}
exports.DataAwsccWafv2LoggingConfigurationRedactedFields = DataAwsccWafv2LoggingConfigurationRedactedFields;
function dataAwsccWafv2LoggingConfigurationRedactedFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        json_body: dataAwsccWafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform(struct.jsonBody),
        method: cdktf.hashMapper(cdktf.stringToTerraform)(struct.method),
        query_string: cdktf.hashMapper(cdktf.stringToTerraform)(struct.queryString),
        single_header: dataAwsccWafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform(struct.singleHeader),
        uri_path: cdktf.hashMapper(cdktf.stringToTerraform)(struct.uriPath),
    };
}
exports.dataAwsccWafv2LoggingConfigurationRedactedFieldsToTerraform = dataAwsccWafv2LoggingConfigurationRedactedFieldsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/wafv2_logging_configuration.html awscc_wafv2_logging_configuration}
*/
class DataAwsccWafv2LoggingConfiguration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/wafv2_logging_configuration.html awscc_wafv2_logging_configuration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccWafv2LoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_wafv2_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // log_destination_configs - computed: true, optional: false, required: false
    get logDestinationConfigs() {
        return this.getListAttribute('log_destination_configs');
    }
    // logging_filter - computed: true, optional: false, required: false
    get loggingFilter() {
        return this.interpolationForAttribute('logging_filter');
    }
    // managed_by_firewall_manager - computed: true, optional: false, required: false
    get managedByFirewallManager() {
        return this.getBooleanAttribute('managed_by_firewall_manager');
    }
    // redacted_fields - computed: true, optional: false, required: false
    get redactedFields() {
        return this.interpolationForAttribute('redacted_fields');
    }
    // resource_arn - computed: true, optional: false, required: false
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccWafv2LoggingConfiguration = DataAwsccWafv2LoggingConfiguration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccWafv2LoggingConfiguration.tfResourceType = "awscc_wafv2_logging_configuration";
//# sourceMappingURL=data:application/json;base64,