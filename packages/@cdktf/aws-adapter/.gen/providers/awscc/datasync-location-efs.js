"use strict";
// https://www.terraform.io/docs/providers/awscc/r/datasync_location_efs.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasyncLocationEfs = exports.datasyncLocationEfsTagsToTerraform = exports.datasyncLocationEfsEc2ConfigToTerraform = void 0;
const cdktf = require("cdktf");
function datasyncLocationEfsEc2ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupArns),
        subnet_arn: cdktf.stringToTerraform(struct.subnetArn),
    };
}
exports.datasyncLocationEfsEc2ConfigToTerraform = datasyncLocationEfsEc2ConfigToTerraform;
function datasyncLocationEfsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.datasyncLocationEfsTagsToTerraform = datasyncLocationEfsTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_efs.html awscc_datasync_location_efs}
*/
class DatasyncLocationEfs extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_efs.html awscc_datasync_location_efs} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatasyncLocationEfsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_datasync_location_efs',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._ec2Config = config.ec2Config;
        this._efsFilesystemArn = config.efsFilesystemArn;
        this._subdirectory = config.subdirectory;
        this._tags = config.tags;
    }
    get ec2Config() {
        return this.interpolationForAttribute('ec_2_config');
    }
    set ec2Config(value) {
        this._ec2Config = value;
    }
    // Temporarily expose input value. Use with caution.
    get ec2ConfigInput() {
        return this._ec2Config;
    }
    get efsFilesystemArn() {
        return this.getStringAttribute('efs_filesystem_arn');
    }
    set efsFilesystemArn(value) {
        this._efsFilesystemArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get efsFilesystemArnInput() {
        return this._efsFilesystemArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // location_arn - computed: true, optional: false, required: false
    get locationArn() {
        return this.getStringAttribute('location_arn');
    }
    // location_uri - computed: true, optional: false, required: false
    get locationUri() {
        return this.getStringAttribute('location_uri');
    }
    get subdirectory() {
        return this.getStringAttribute('subdirectory');
    }
    set subdirectory(value) {
        this._subdirectory = value;
    }
    resetSubdirectory() {
        this._subdirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subdirectoryInput() {
        return this._subdirectory;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            ec_2_config: datasyncLocationEfsEc2ConfigToTerraform(this._ec2Config),
            efs_filesystem_arn: cdktf.stringToTerraform(this._efsFilesystemArn),
            subdirectory: cdktf.stringToTerraform(this._subdirectory),
            tags: cdktf.listMapper(datasyncLocationEfsTagsToTerraform)(this._tags),
        };
    }
}
exports.DatasyncLocationEfs = DatasyncLocationEfs;
// =================
// STATIC PROPERTIES
// =================
DatasyncLocationEfs.tfResourceType = "awscc_datasync_location_efs";
//# sourceMappingURL=data:application/json;base64,