"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssm_document.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmDocument = exports.ssmDocumentTagsToTerraform = exports.ssmDocumentRequiresToTerraform = exports.ssmDocumentAttachmentsToTerraform = void 0;
const cdktf = require("cdktf");
function ssmDocumentAttachmentsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.ssmDocumentAttachmentsToTerraform = ssmDocumentAttachmentsToTerraform;
function ssmDocumentRequiresToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.ssmDocumentRequiresToTerraform = ssmDocumentRequiresToTerraform;
function ssmDocumentTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ssmDocumentTagsToTerraform = ssmDocumentTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssm_document.html awscc_ssm_document}
*/
class SsmDocument extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssm_document.html awscc_ssm_document} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmDocumentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssm_document',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._attachments = config.attachments;
        this._content = config.content;
        this._documentFormat = config.documentFormat;
        this._documentType = config.documentType;
        this._name = config.name;
        this._requires = config.requires;
        this._tags = config.tags;
        this._targetType = config.targetType;
        this._versionName = config.versionName;
    }
    get attachments() {
        return this.interpolationForAttribute('attachments');
    }
    set attachments(value) {
        this._attachments = value;
    }
    resetAttachments() {
        this._attachments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attachmentsInput() {
        return this._attachments;
    }
    get content() {
        return this.getStringAttribute('content');
    }
    set content(value) {
        this._content = value;
    }
    // Temporarily expose input value. Use with caution.
    get contentInput() {
        return this._content;
    }
    get documentFormat() {
        return this.getStringAttribute('document_format');
    }
    set documentFormat(value) {
        this._documentFormat = value;
    }
    resetDocumentFormat() {
        this._documentFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentFormatInput() {
        return this._documentFormat;
    }
    get documentType() {
        return this.getStringAttribute('document_type');
    }
    set documentType(value) {
        this._documentType = value;
    }
    resetDocumentType() {
        this._documentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentTypeInput() {
        return this._documentType;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get requires() {
        return this.interpolationForAttribute('requires');
    }
    set requires(value) {
        this._requires = value;
    }
    resetRequires() {
        this._requires = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiresInput() {
        return this._requires;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targetType() {
        return this.getStringAttribute('target_type');
    }
    set targetType(value) {
        this._targetType = value;
    }
    resetTargetType() {
        this._targetType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetTypeInput() {
        return this._targetType;
    }
    get versionName() {
        return this.getStringAttribute('version_name');
    }
    set versionName(value) {
        this._versionName = value;
    }
    resetVersionName() {
        this._versionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionNameInput() {
        return this._versionName;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            attachments: cdktf.listMapper(ssmDocumentAttachmentsToTerraform)(this._attachments),
            content: cdktf.stringToTerraform(this._content),
            document_format: cdktf.stringToTerraform(this._documentFormat),
            document_type: cdktf.stringToTerraform(this._documentType),
            name: cdktf.stringToTerraform(this._name),
            requires: cdktf.listMapper(ssmDocumentRequiresToTerraform)(this._requires),
            tags: cdktf.listMapper(ssmDocumentTagsToTerraform)(this._tags),
            target_type: cdktf.stringToTerraform(this._targetType),
            version_name: cdktf.stringToTerraform(this._versionName),
        };
    }
}
exports.SsmDocument = SsmDocument;
// =================
// STATIC PROPERTIES
// =================
SsmDocument.tfResourceType = "awscc_ssm_document";
//# sourceMappingURL=data:application/json;base64,