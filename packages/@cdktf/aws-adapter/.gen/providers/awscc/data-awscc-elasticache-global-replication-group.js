"use strict";
// https://www.terraform.io/docs/providers/awscc/d/elasticache_global_replication_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccElasticacheGlobalReplicationGroup = exports.dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform = exports.DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurations = exports.dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform = exports.DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurations = exports.dataAwsccElasticacheGlobalReplicationGroupMembersToTerraform = exports.DataAwsccElasticacheGlobalReplicationGroupMembers = void 0;
const cdktf = require("cdktf");
class DataAwsccElasticacheGlobalReplicationGroupMembers extends cdktf.ComplexComputedList {
    // replication_group_id - computed: true, optional: false, required: false
    get replicationGroupId() {
        return this.getStringAttribute('replication_group_id');
    }
    // replication_group_region - computed: true, optional: false, required: false
    get replicationGroupRegion() {
        return this.getStringAttribute('replication_group_region');
    }
    // role - computed: true, optional: false, required: false
    get role() {
        return this.getStringAttribute('role');
    }
}
exports.DataAwsccElasticacheGlobalReplicationGroupMembers = DataAwsccElasticacheGlobalReplicationGroupMembers;
function dataAwsccElasticacheGlobalReplicationGroupMembersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replication_group_id: cdktf.stringToTerraform(struct.replicationGroupId),
        replication_group_region: cdktf.stringToTerraform(struct.replicationGroupRegion),
        role: cdktf.stringToTerraform(struct.role),
    };
}
exports.dataAwsccElasticacheGlobalReplicationGroupMembersToTerraform = dataAwsccElasticacheGlobalReplicationGroupMembersToTerraform;
class DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurations extends cdktf.ComplexComputedList {
    // node_group_id - computed: true, optional: false, required: false
    get nodeGroupId() {
        return this.getStringAttribute('node_group_id');
    }
    // preferred_availability_zones - computed: true, optional: false, required: false
    get preferredAvailabilityZones() {
        return this.getListAttribute('preferred_availability_zones');
    }
}
exports.DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurations = DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurations;
function dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        node_group_id: cdktf.stringToTerraform(struct.nodeGroupId),
        preferred_availability_zones: cdktf.listMapper(cdktf.stringToTerraform)(struct.preferredAvailabilityZones),
    };
}
exports.dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform = dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform;
class DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurations extends cdktf.ComplexComputedList {
    // replication_group_id - computed: true, optional: false, required: false
    get replicationGroupId() {
        return this.getStringAttribute('replication_group_id');
    }
    // replication_group_region - computed: true, optional: false, required: false
    get replicationGroupRegion() {
        return this.getStringAttribute('replication_group_region');
    }
    // resharding_configurations - computed: true, optional: false, required: false
    get reshardingConfigurations() {
        return this.interpolationForAttribute('resharding_configurations');
    }
}
exports.DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurations = DataAwsccElasticacheGlobalReplicationGroupRegionalConfigurations;
function dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replication_group_id: cdktf.stringToTerraform(struct.replicationGroupId),
        replication_group_region: cdktf.stringToTerraform(struct.replicationGroupRegion),
        resharding_configurations: cdktf.listMapper(dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsReshardingConfigurationsToTerraform)(struct.reshardingConfigurations),
    };
}
exports.dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform = dataAwsccElasticacheGlobalReplicationGroupRegionalConfigurationsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/elasticache_global_replication_group.html awscc_elasticache_global_replication_group}
*/
class DataAwsccElasticacheGlobalReplicationGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/elasticache_global_replication_group.html awscc_elasticache_global_replication_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccElasticacheGlobalReplicationGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_elasticache_global_replication_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // automatic_failover_enabled - computed: true, optional: false, required: false
    get automaticFailoverEnabled() {
        return this.getBooleanAttribute('automatic_failover_enabled');
    }
    // cache_node_type - computed: true, optional: false, required: false
    get cacheNodeType() {
        return this.getStringAttribute('cache_node_type');
    }
    // cache_parameter_group_name - computed: true, optional: false, required: false
    get cacheParameterGroupName() {
        return this.getStringAttribute('cache_parameter_group_name');
    }
    // engine_version - computed: true, optional: false, required: false
    get engineVersion() {
        return this.getStringAttribute('engine_version');
    }
    // global_node_group_count - computed: true, optional: false, required: false
    get globalNodeGroupCount() {
        return this.getNumberAttribute('global_node_group_count');
    }
    // global_replication_group_description - computed: true, optional: false, required: false
    get globalReplicationGroupDescription() {
        return this.getStringAttribute('global_replication_group_description');
    }
    // global_replication_group_id - computed: true, optional: false, required: false
    get globalReplicationGroupId() {
        return this.getStringAttribute('global_replication_group_id');
    }
    // global_replication_group_id_suffix - computed: true, optional: false, required: false
    get globalReplicationGroupIdSuffix() {
        return this.getStringAttribute('global_replication_group_id_suffix');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // members - computed: true, optional: false, required: false
    get members() {
        return this.interpolationForAttribute('members');
    }
    // regional_configurations - computed: true, optional: false, required: false
    get regionalConfigurations() {
        return this.interpolationForAttribute('regional_configurations');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccElasticacheGlobalReplicationGroup = DataAwsccElasticacheGlobalReplicationGroup;
// =================
// STATIC PROPERTIES
// =================
DataAwsccElasticacheGlobalReplicationGroup.tfResourceType = "awscc_elasticache_global_replication_group";
//# sourceMappingURL=data:application/json;base64,