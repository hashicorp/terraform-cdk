"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediapackage_asset.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediapackageAsset = exports.mediapackageAssetTagsToTerraform = exports.mediapackageAssetEgressEndpointsToTerraform = exports.MediapackageAssetEgressEndpoints = void 0;
const cdktf = require("cdktf");
class MediapackageAssetEgressEndpoints extends cdktf.ComplexComputedList {
    // packaging_configuration_id - computed: true, optional: false, required: true
    get packagingConfigurationId() {
        return this.getStringAttribute('packaging_configuration_id');
    }
    // url - computed: true, optional: false, required: true
    get url() {
        return this.getStringAttribute('url');
    }
}
exports.MediapackageAssetEgressEndpoints = MediapackageAssetEgressEndpoints;
function mediapackageAssetEgressEndpointsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        packaging_configuration_id: cdktf.stringToTerraform(struct.packagingConfigurationId),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageAssetEgressEndpointsToTerraform = mediapackageAssetEgressEndpointsToTerraform;
function mediapackageAssetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.mediapackageAssetTagsToTerraform = mediapackageAssetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_asset.html awscc_mediapackage_asset}
*/
class MediapackageAsset extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_asset.html awscc_mediapackage_asset} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediapackageAssetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_asset',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
        this._packagingGroupId = config.packagingGroupId;
        this._resourceId = config.resourceId;
        this._sourceArn = config.sourceArn;
        this._sourceRoleArn = config.sourceRoleArn;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    // egress_endpoints - computed: true, optional: false, required: false
    get egressEndpoints() {
        return this.interpolationForAttribute('egress_endpoints');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get packagingGroupId() {
        return this.getStringAttribute('packaging_group_id');
    }
    set packagingGroupId(value) {
        this._packagingGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get packagingGroupIdInput() {
        return this._packagingGroupId;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    resetResourceId() {
        this._resourceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
    get sourceArn() {
        return this.getStringAttribute('source_arn');
    }
    set sourceArn(value) {
        this._sourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceArnInput() {
        return this._sourceArn;
    }
    get sourceRoleArn() {
        return this.getStringAttribute('source_role_arn');
    }
    set sourceRoleArn(value) {
        this._sourceRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceRoleArnInput() {
        return this._sourceRoleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            packaging_group_id: cdktf.stringToTerraform(this._packagingGroupId),
            resource_id: cdktf.stringToTerraform(this._resourceId),
            source_arn: cdktf.stringToTerraform(this._sourceArn),
            source_role_arn: cdktf.stringToTerraform(this._sourceRoleArn),
            tags: cdktf.listMapper(mediapackageAssetTagsToTerraform)(this._tags),
        };
    }
}
exports.MediapackageAsset = MediapackageAsset;
// =================
// STATIC PROPERTIES
// =================
MediapackageAsset.tfResourceType = "awscc_mediapackage_asset";
//# sourceMappingURL=data:application/json;base64,