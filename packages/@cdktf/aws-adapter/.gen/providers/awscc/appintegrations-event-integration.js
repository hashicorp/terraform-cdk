"use strict";
// https://www.terraform.io/docs/providers/awscc/r/appintegrations_event_integration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppintegrationsEventIntegration = exports.appintegrationsEventIntegrationTagsToTerraform = exports.appintegrationsEventIntegrationEventFilterToTerraform = exports.appintegrationsEventIntegrationAssociationsToTerraform = exports.AppintegrationsEventIntegrationAssociations = exports.appintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform = void 0;
const cdktf = require("cdktf");
function appintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.appintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform = appintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform;
class AppintegrationsEventIntegrationAssociations extends cdktf.ComplexComputedList {
    get clientAssociationMetadata() {
        return this.interpolationForAttribute('client_association_metadata');
    }
    set clientAssociationMetadata(value) {
        this._clientAssociationMetadata = value;
    }
    resetClientAssociationMetadata() {
        this._clientAssociationMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAssociationMetadataInput() {
        return this._clientAssociationMetadata;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get eventBridgeRuleName() {
        return this.getStringAttribute('event_bridge_rule_name');
    }
    set eventBridgeRuleName(value) {
        this._eventBridgeRuleName = value;
    }
    resetEventBridgeRuleName() {
        this._eventBridgeRuleName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventBridgeRuleNameInput() {
        return this._eventBridgeRuleName;
    }
    get eventIntegrationAssociationArn() {
        return this.getStringAttribute('event_integration_association_arn');
    }
    set eventIntegrationAssociationArn(value) {
        this._eventIntegrationAssociationArn = value;
    }
    resetEventIntegrationAssociationArn() {
        this._eventIntegrationAssociationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIntegrationAssociationArnInput() {
        return this._eventIntegrationAssociationArn;
    }
    get eventIntegrationAssociationId() {
        return this.getStringAttribute('event_integration_association_id');
    }
    set eventIntegrationAssociationId(value) {
        this._eventIntegrationAssociationId = value;
    }
    resetEventIntegrationAssociationId() {
        this._eventIntegrationAssociationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIntegrationAssociationIdInput() {
        return this._eventIntegrationAssociationId;
    }
}
exports.AppintegrationsEventIntegrationAssociations = AppintegrationsEventIntegrationAssociations;
function appintegrationsEventIntegrationAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_association_metadata: cdktf.listMapper(appintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform)(struct.clientAssociationMetadata),
        client_id: cdktf.stringToTerraform(struct.clientId),
        event_bridge_rule_name: cdktf.stringToTerraform(struct.eventBridgeRuleName),
        event_integration_association_arn: cdktf.stringToTerraform(struct.eventIntegrationAssociationArn),
        event_integration_association_id: cdktf.stringToTerraform(struct.eventIntegrationAssociationId),
    };
}
exports.appintegrationsEventIntegrationAssociationsToTerraform = appintegrationsEventIntegrationAssociationsToTerraform;
function appintegrationsEventIntegrationEventFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
    };
}
exports.appintegrationsEventIntegrationEventFilterToTerraform = appintegrationsEventIntegrationEventFilterToTerraform;
function appintegrationsEventIntegrationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.appintegrationsEventIntegrationTagsToTerraform = appintegrationsEventIntegrationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/appintegrations_event_integration.html awscc_appintegrations_event_integration}
*/
class AppintegrationsEventIntegration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/appintegrations_event_integration.html awscc_appintegrations_event_integration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppintegrationsEventIntegrationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_appintegrations_event_integration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._eventBridgeBus = config.eventBridgeBus;
        this._eventFilter = config.eventFilter;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // associations - computed: true, optional: false, required: false
    get associations() {
        return this.interpolationForAttribute('associations');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get eventBridgeBus() {
        return this.getStringAttribute('event_bridge_bus');
    }
    set eventBridgeBus(value) {
        this._eventBridgeBus = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventBridgeBusInput() {
        return this._eventBridgeBus;
    }
    get eventFilter() {
        return this.interpolationForAttribute('event_filter');
    }
    set eventFilter(value) {
        this._eventFilter = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventFilterInput() {
        return this._eventFilter;
    }
    // event_integration_arn - computed: true, optional: false, required: false
    get eventIntegrationArn() {
        return this.getStringAttribute('event_integration_arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            event_bridge_bus: cdktf.stringToTerraform(this._eventBridgeBus),
            event_filter: appintegrationsEventIntegrationEventFilterToTerraform(this._eventFilter),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(appintegrationsEventIntegrationTagsToTerraform)(this._tags),
        };
    }
}
exports.AppintegrationsEventIntegration = AppintegrationsEventIntegration;
// =================
// STATIC PROPERTIES
// =================
AppintegrationsEventIntegration.tfResourceType = "awscc_appintegrations_event_integration";
//# sourceMappingURL=data:application/json;base64,