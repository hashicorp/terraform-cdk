"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_package_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerModelPackageGroup = exports.sagemakerModelPackageGroupTagsToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerModelPackageGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerModelPackageGroupTagsToTerraform = sagemakerModelPackageGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_package_group.html awscc_sagemaker_model_package_group}
*/
class SagemakerModelPackageGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_package_group.html awscc_sagemaker_model_package_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerModelPackageGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_model_package_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._modelPackageGroupDescription = config.modelPackageGroupDescription;
        this._modelPackageGroupName = config.modelPackageGroupName;
        this._modelPackageGroupPolicy = config.modelPackageGroupPolicy;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // model_package_group_arn - computed: true, optional: false, required: false
    get modelPackageGroupArn() {
        return this.getStringAttribute('model_package_group_arn');
    }
    get modelPackageGroupDescription() {
        return this.getStringAttribute('model_package_group_description');
    }
    set modelPackageGroupDescription(value) {
        this._modelPackageGroupDescription = value;
    }
    resetModelPackageGroupDescription() {
        this._modelPackageGroupDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelPackageGroupDescriptionInput() {
        return this._modelPackageGroupDescription;
    }
    get modelPackageGroupName() {
        return this.getStringAttribute('model_package_group_name');
    }
    set modelPackageGroupName(value) {
        this._modelPackageGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelPackageGroupNameInput() {
        return this._modelPackageGroupName;
    }
    get modelPackageGroupPolicy() {
        return this.getStringAttribute('model_package_group_policy');
    }
    set modelPackageGroupPolicy(value) {
        this._modelPackageGroupPolicy = value;
    }
    resetModelPackageGroupPolicy() {
        this._modelPackageGroupPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelPackageGroupPolicyInput() {
        return this._modelPackageGroupPolicy;
    }
    // model_package_group_status - computed: true, optional: false, required: false
    get modelPackageGroupStatus() {
        return this.getStringAttribute('model_package_group_status');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            model_package_group_description: cdktf.stringToTerraform(this._modelPackageGroupDescription),
            model_package_group_name: cdktf.stringToTerraform(this._modelPackageGroupName),
            model_package_group_policy: cdktf.stringToTerraform(this._modelPackageGroupPolicy),
            tags: cdktf.listMapper(sagemakerModelPackageGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerModelPackageGroup = SagemakerModelPackageGroup;
// =================
// STATIC PROPERTIES
// =================
SagemakerModelPackageGroup.tfResourceType = "awscc_sagemaker_model_package_group";
//# sourceMappingURL=data:application/json;base64,