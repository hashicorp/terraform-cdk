"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53_health_check.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53HealthCheck = exports.route53HealthCheckHealthCheckTagsToTerraform = exports.route53HealthCheckHealthCheckConfigToTerraform = exports.route53HealthCheckHealthCheckConfigAlarmIdentifierToTerraform = void 0;
const cdktf = require("cdktf");
function route53HealthCheckHealthCheckConfigAlarmIdentifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.route53HealthCheckHealthCheckConfigAlarmIdentifierToTerraform = route53HealthCheckHealthCheckConfigAlarmIdentifierToTerraform;
function route53HealthCheckHealthCheckConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_identifier: route53HealthCheckHealthCheckConfigAlarmIdentifierToTerraform(struct.alarmIdentifier),
        child_health_checks: cdktf.listMapper(cdktf.stringToTerraform)(struct.childHealthChecks),
        enable_sni: cdktf.booleanToTerraform(struct.enableSni),
        failure_threshold: cdktf.numberToTerraform(struct.failureThreshold),
        fully_qualified_domain_name: cdktf.stringToTerraform(struct.fullyQualifiedDomainName),
        health_threshold: cdktf.numberToTerraform(struct.healthThreshold),
        insufficient_data_health_status: cdktf.stringToTerraform(struct.insufficientDataHealthStatus),
        inverted: cdktf.booleanToTerraform(struct.inverted),
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        measure_latency: cdktf.booleanToTerraform(struct.measureLatency),
        port: cdktf.numberToTerraform(struct.port),
        regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.regions),
        request_interval: cdktf.numberToTerraform(struct.requestInterval),
        resource_path: cdktf.stringToTerraform(struct.resourcePath),
        routing_control_arn: cdktf.stringToTerraform(struct.routingControlArn),
        search_string: cdktf.stringToTerraform(struct.searchString),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.route53HealthCheckHealthCheckConfigToTerraform = route53HealthCheckHealthCheckConfigToTerraform;
function route53HealthCheckHealthCheckTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.route53HealthCheckHealthCheckTagsToTerraform = route53HealthCheckHealthCheckTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53_health_check.html awscc_route53_health_check}
*/
class Route53HealthCheck extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53_health_check.html awscc_route53_health_check} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53HealthCheckConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53_health_check',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._healthCheckConfig = config.healthCheckConfig;
        this._healthCheckTags = config.healthCheckTags;
    }
    get healthCheckConfig() {
        return this.interpolationForAttribute('health_check_config');
    }
    set healthCheckConfig(value) {
        this._healthCheckConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckConfigInput() {
        return this._healthCheckConfig;
    }
    // health_check_id - computed: true, optional: false, required: false
    get healthCheckId() {
        return this.getStringAttribute('health_check_id');
    }
    get healthCheckTags() {
        return this.interpolationForAttribute('health_check_tags');
    }
    set healthCheckTags(value) {
        this._healthCheckTags = value;
    }
    resetHealthCheckTags() {
        this._healthCheckTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckTagsInput() {
        return this._healthCheckTags;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            health_check_config: route53HealthCheckHealthCheckConfigToTerraform(this._healthCheckConfig),
            health_check_tags: cdktf.listMapper(route53HealthCheckHealthCheckTagsToTerraform)(this._healthCheckTags),
        };
    }
}
exports.Route53HealthCheck = Route53HealthCheck;
// =================
// STATIC PROPERTIES
// =================
Route53HealthCheck.tfResourceType = "awscc_route53_health_check";
//# sourceMappingURL=data:application/json;base64,