"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_flow_log.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2FlowLog = exports.ec2FlowLogTagsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2FlowLogTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2FlowLogTagsToTerraform = ec2FlowLogTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_flow_log.html awscc_ec2_flow_log}
*/
class Ec2FlowLog extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_flow_log.html awscc_ec2_flow_log} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2FlowLogConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_flow_log',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deliverLogsPermissionArn = config.deliverLogsPermissionArn;
        this._logDestination = config.logDestination;
        this._logDestinationType = config.logDestinationType;
        this._logFormat = config.logFormat;
        this._logGroupName = config.logGroupName;
        this._maxAggregationInterval = config.maxAggregationInterval;
        this._resourceId = config.resourceId;
        this._resourceType = config.resourceType;
        this._tags = config.tags;
        this._trafficType = config.trafficType;
    }
    get deliverLogsPermissionArn() {
        return this.getStringAttribute('deliver_logs_permission_arn');
    }
    set deliverLogsPermissionArn(value) {
        this._deliverLogsPermissionArn = value;
    }
    resetDeliverLogsPermissionArn() {
        this._deliverLogsPermissionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliverLogsPermissionArnInput() {
        return this._deliverLogsPermissionArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logDestination() {
        return this.getStringAttribute('log_destination');
    }
    set logDestination(value) {
        this._logDestination = value;
    }
    resetLogDestination() {
        this._logDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationInput() {
        return this._logDestination;
    }
    get logDestinationType() {
        return this.getStringAttribute('log_destination_type');
    }
    set logDestinationType(value) {
        this._logDestinationType = value;
    }
    resetLogDestinationType() {
        this._logDestinationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationTypeInput() {
        return this._logDestinationType;
    }
    get logFormat() {
        return this.getStringAttribute('log_format');
    }
    set logFormat(value) {
        this._logFormat = value;
    }
    resetLogFormat() {
        this._logFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logFormatInput() {
        return this._logFormat;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get maxAggregationInterval() {
        return this.getNumberAttribute('max_aggregation_interval');
    }
    set maxAggregationInterval(value) {
        this._maxAggregationInterval = value;
    }
    resetMaxAggregationInterval() {
        this._maxAggregationInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAggregationIntervalInput() {
        return this._maxAggregationInterval;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get trafficType() {
        return this.getStringAttribute('traffic_type');
    }
    set trafficType(value) {
        this._trafficType = value;
    }
    // Temporarily expose input value. Use with caution.
    get trafficTypeInput() {
        return this._trafficType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            deliver_logs_permission_arn: cdktf.stringToTerraform(this._deliverLogsPermissionArn),
            log_destination: cdktf.stringToTerraform(this._logDestination),
            log_destination_type: cdktf.stringToTerraform(this._logDestinationType),
            log_format: cdktf.stringToTerraform(this._logFormat),
            log_group_name: cdktf.stringToTerraform(this._logGroupName),
            max_aggregation_interval: cdktf.numberToTerraform(this._maxAggregationInterval),
            resource_id: cdktf.stringToTerraform(this._resourceId),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            tags: cdktf.listMapper(ec2FlowLogTagsToTerraform)(this._tags),
            traffic_type: cdktf.stringToTerraform(this._trafficType),
        };
    }
}
exports.Ec2FlowLog = Ec2FlowLog;
// =================
// STATIC PROPERTIES
// =================
Ec2FlowLog.tfResourceType = "awscc_ec2_flow_log";
//# sourceMappingURL=data:application/json;base64,