"use strict";
// https://www.terraform.io/docs/providers/awscc/r/devopsguru_notification_channel.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevopsguruNotificationChannel = exports.devopsguruNotificationChannelConfigAToTerraform = exports.devopsguruNotificationChannelConfigSnsToTerraform = void 0;
const cdktf = require("cdktf");
function devopsguruNotificationChannelConfigSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        topic_arn: cdktf.stringToTerraform(struct.topicArn),
    };
}
exports.devopsguruNotificationChannelConfigSnsToTerraform = devopsguruNotificationChannelConfigSnsToTerraform;
function devopsguruNotificationChannelConfigAToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sns: devopsguruNotificationChannelConfigSnsToTerraform(struct.sns),
    };
}
exports.devopsguruNotificationChannelConfigAToTerraform = devopsguruNotificationChannelConfigAToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/devopsguru_notification_channel.html awscc_devopsguru_notification_channel}
*/
class DevopsguruNotificationChannel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/devopsguru_notification_channel.html awscc_devopsguru_notification_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DevopsguruNotificationChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_devopsguru_notification_channel',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._config = config.config;
    }
    get config() {
        return this.interpolationForAttribute('config');
    }
    set config(value) {
        this._config = value;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            config: devopsguruNotificationChannelConfigAToTerraform(this._config),
        };
    }
}
exports.DevopsguruNotificationChannel = DevopsguruNotificationChannel;
// =================
// STATIC PROPERTIES
// =================
DevopsguruNotificationChannel.tfResourceType = "awscc_devopsguru_notification_channel";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2b3BzZ3VydS1ub3RpZmljYXRpb24tY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldm9wc2d1cnUtbm90aWZpY2F0aW9uLWNoYW5uZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVGQUF1RjtBQUN2RiwyQ0FBMkM7OztBQUczQywrQkFBK0I7QUFtQi9CLFNBQWdCLGlEQUFpRCxDQUFDLE1BQStDO0lBQy9HLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsU0FBUyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsUUFBUSxDQUFDO0tBQ3JELENBQUE7QUFDSCxDQUFDO0FBTEQsOEdBS0M7QUFXRCxTQUFnQiwrQ0FBK0MsQ0FBQyxNQUE2QztJQUMzRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLEdBQUcsRUFBRSxpREFBaUQsQ0FBQyxNQUFPLENBQUMsR0FBRyxDQUFDO0tBQ3BFLENBQUE7QUFDSCxDQUFDO0FBTEQsMEdBS0M7QUFHRDs7RUFFRTtBQUNGLE1BQWEsNkJBQThCLFNBQVEsS0FBSyxDQUFDLGlCQUFpQjtJQU94RSxjQUFjO0lBQ2QsY0FBYztJQUNkLGNBQWM7SUFFZDs7Ozs7O01BTUU7SUFDRixZQUFtQixLQUFnQixFQUFFLEVBQVUsRUFBRSxNQUEyQztRQUMxRixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLHFCQUFxQixFQUFFLHVDQUF1QztZQUM5RCwwQkFBMEIsRUFBRTtnQkFDMUIsWUFBWSxFQUFFLE9BQU87YUFDdEI7WUFDRCxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7WUFDekIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1lBQzNCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFRRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQVEsQ0FBQztJQUN6RCxDQUFDO0lBQ0QsSUFBVyxNQUFNLENBQUMsS0FBMkM7UUFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUNELG9EQUFvRDtJQUNwRCxJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3JCLENBQUM7SUFFRCx3REFBd0Q7SUFDeEQsSUFBVyxFQUFFO1FBQ1gsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFlBQVk7SUFDWixZQUFZO0lBQ1osWUFBWTtJQUVGLG9CQUFvQjtRQUM1QixPQUFPO1lBQ0wsTUFBTSxFQUFFLCtDQUErQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdEUsQ0FBQztJQUNKLENBQUM7O0FBOURILHNFQStEQztBQTdEQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNHLDRDQUFjLEdBQVcsdUNBQXVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9kZXZvcHNndXJ1X25vdGlmaWNhdGlvbl9jaGFubmVsLmh0bWxcbi8vIGdlbmVyYXRlZCBmcm9tIHRlcnJhZm9ybSByZXNvdXJjZSBzY2hlbWFcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGt0ZiBmcm9tICdjZGt0Zic7XG5cbi8vIENvbmZpZ3VyYXRpb25cblxuZXhwb3J0IGludGVyZmFjZSBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZyBleHRlbmRzIGNka3RmLlRlcnJhZm9ybU1ldGFBcmd1bWVudHMge1xuICAvKipcbiAgKiBJbmZvcm1hdGlvbiBhYm91dCBub3RpZmljYXRpb24gY2hhbm5lbHMgeW91IGhhdmUgY29uZmlndXJlZCB3aXRoIERldk9wcyBHdXJ1LlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZGV2b3BzZ3VydV9ub3RpZmljYXRpb25fY2hhbm5lbC5odG1sI2NvbmZpZyBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbCNjb25maWd9XG4gICovXG4gIHJlYWRvbmx5IGNvbmZpZzogRGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdBO1xufVxuZXhwb3J0IGludGVyZmFjZSBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZ1NucyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZGV2b3BzZ3VydV9ub3RpZmljYXRpb25fY2hhbm5lbC5odG1sI3RvcGljX2FybiBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbCN0b3BpY19hcm59XG4gICovXG4gIHJlYWRvbmx5IHRvcGljQXJuPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdTbnNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZ1Nucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICB0b3BpY19hcm46IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudG9waWNBcm4pLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdBIHtcbiAgLyoqXG4gICogSW5mb3JtYXRpb24gYWJvdXQgYSBub3RpZmljYXRpb24gY2hhbm5lbCBjb25maWd1cmVkIGluIERldk9wcyBHdXJ1IHRvIHNlbmQgbm90aWZpY2F0aW9ucyB3aGVuIGluc2lnaHRzIGFyZSBjcmVhdGVkLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZGV2b3BzZ3VydV9ub3RpZmljYXRpb25fY2hhbm5lbC5odG1sI3NucyBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbCNzbnN9XG4gICovXG4gIHJlYWRvbmx5IHNucz86IERldm9wc2d1cnVOb3RpZmljYXRpb25DaGFubmVsQ29uZmlnU25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdBVG9UZXJyYWZvcm0oc3RydWN0PzogRGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdBKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIHNuczogZGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdTbnNUb1RlcnJhZm9ybShzdHJ1Y3QhLnNucyksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9kZXZvcHNndXJ1X25vdGlmaWNhdGlvbl9jaGFubmVsLmh0bWwgYXdzY2NfZGV2b3BzZ3VydV9ub3RpZmljYXRpb25fY2hhbm5lbH1cbiovXG5leHBvcnQgY2xhc3MgRGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWwgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19kZXZvcHNndXJ1X25vdGlmaWNhdGlvbl9jaGFubmVsXCI7XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2Rldm9wc2d1cnVfbm90aWZpY2F0aW9uX2NoYW5uZWwuaHRtbCBhd3NjY19kZXZvcHNndXJ1X25vdGlmaWNhdGlvbl9jaGFubmVsfSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgdGVycmFmb3JtUmVzb3VyY2VUeXBlOiAnYXdzY2NfZGV2b3BzZ3VydV9ub3RpZmljYXRpb25fY2hhbm5lbCcsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZy5jb25maWc7XG4gIH1cblxuICAvLyA9PT09PT09PT09XG4gIC8vIEFUVFJJQlVURVNcbiAgLy8gPT09PT09PT09PVxuXG4gIC8vIGNvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jb25maWc6IERldm9wc2d1cnVOb3RpZmljYXRpb25DaGFubmVsQ29uZmlnQTtcbiAgcHVibGljIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnY29uZmlnJykgYXMgYW55O1xuICB9XG4gIHB1YmxpYyBzZXQgY29uZmlnKHZhbHVlOiBEZXZvcHNndXJ1Tm90aWZpY2F0aW9uQ2hhbm5lbENvbmZpZ0EpIHtcbiAgICB0aGlzLl9jb25maWcgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZ1xuICB9XG5cbiAgLy8gaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2lkJyk7XG4gIH1cblxuICAvLyA9PT09PT09PT1cbiAgLy8gU1lOVEhFU0lTXG4gIC8vID09PT09PT09PVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZzogZGV2b3BzZ3VydU5vdGlmaWNhdGlvbkNoYW5uZWxDb25maWdBVG9UZXJyYWZvcm0odGhpcy5fY29uZmlnKSxcbiAgICB9O1xuICB9XG59XG4iXX0=