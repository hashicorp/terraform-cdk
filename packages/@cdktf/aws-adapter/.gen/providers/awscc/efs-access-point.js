"use strict";
// https://www.terraform.io/docs/providers/awscc/r/efs_access_point.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EfsAccessPoint = exports.efsAccessPointRootDirectoryToTerraform = exports.efsAccessPointRootDirectoryCreationInfoToTerraform = exports.efsAccessPointPosixUserToTerraform = exports.efsAccessPointAccessPointTagsToTerraform = void 0;
const cdktf = require("cdktf");
function efsAccessPointAccessPointTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.efsAccessPointAccessPointTagsToTerraform = efsAccessPointAccessPointTagsToTerraform;
function efsAccessPointPosixUserToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        gid: cdktf.stringToTerraform(struct.gid),
        secondary_gids: cdktf.listMapper(cdktf.stringToTerraform)(struct.secondaryGids),
        uid: cdktf.stringToTerraform(struct.uid),
    };
}
exports.efsAccessPointPosixUserToTerraform = efsAccessPointPosixUserToTerraform;
function efsAccessPointRootDirectoryCreationInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        owner_gid: cdktf.stringToTerraform(struct.ownerGid),
        owner_uid: cdktf.stringToTerraform(struct.ownerUid),
        permissions: cdktf.stringToTerraform(struct.permissions),
    };
}
exports.efsAccessPointRootDirectoryCreationInfoToTerraform = efsAccessPointRootDirectoryCreationInfoToTerraform;
function efsAccessPointRootDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        creation_info: efsAccessPointRootDirectoryCreationInfoToTerraform(struct.creationInfo),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.efsAccessPointRootDirectoryToTerraform = efsAccessPointRootDirectoryToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/efs_access_point.html awscc_efs_access_point}
*/
class EfsAccessPoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/efs_access_point.html awscc_efs_access_point} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EfsAccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_efs_access_point',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accessPointTags = config.accessPointTags;
        this._clientToken = config.clientToken;
        this._fileSystemId = config.fileSystemId;
        this._posixUser = config.posixUser;
        this._rootDirectory = config.rootDirectory;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // access_point_id - computed: true, optional: false, required: false
    get accessPointId() {
        return this.getStringAttribute('access_point_id');
    }
    get accessPointTags() {
        return this.interpolationForAttribute('access_point_tags');
    }
    set accessPointTags(value) {
        this._accessPointTags = value;
    }
    resetAccessPointTags() {
        this._accessPointTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessPointTagsInput() {
        return this._accessPointTags;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get clientToken() {
        return this.getStringAttribute('client_token');
    }
    set clientToken(value) {
        this._clientToken = value;
    }
    resetClientToken() {
        this._clientToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientTokenInput() {
        return this._clientToken;
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get posixUser() {
        return this.interpolationForAttribute('posix_user');
    }
    set posixUser(value) {
        this._posixUser = value;
    }
    resetPosixUser() {
        this._posixUser = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get posixUserInput() {
        return this._posixUser;
    }
    get rootDirectory() {
        return this.interpolationForAttribute('root_directory');
    }
    set rootDirectory(value) {
        this._rootDirectory = value;
    }
    resetRootDirectory() {
        this._rootDirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootDirectoryInput() {
        return this._rootDirectory;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_point_tags: cdktf.listMapper(efsAccessPointAccessPointTagsToTerraform)(this._accessPointTags),
            client_token: cdktf.stringToTerraform(this._clientToken),
            file_system_id: cdktf.stringToTerraform(this._fileSystemId),
            posix_user: efsAccessPointPosixUserToTerraform(this._posixUser),
            root_directory: efsAccessPointRootDirectoryToTerraform(this._rootDirectory),
        };
    }
}
exports.EfsAccessPoint = EfsAccessPoint;
// =================
// STATIC PROPERTIES
// =================
EfsAccessPoint.tfResourceType = "awscc_efs_access_point";
//# sourceMappingURL=data:application/json;base64,