"use strict";
// https://www.terraform.io/docs/providers/awscc/r/datasync_location_smb.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasyncLocationSmb = exports.datasyncLocationSmbTagsToTerraform = exports.datasyncLocationSmbMountOptionsToTerraform = void 0;
const cdktf = require("cdktf");
function datasyncLocationSmbMountOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.datasyncLocationSmbMountOptionsToTerraform = datasyncLocationSmbMountOptionsToTerraform;
function datasyncLocationSmbTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.datasyncLocationSmbTagsToTerraform = datasyncLocationSmbTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_smb.html awscc_datasync_location_smb}
*/
class DatasyncLocationSmb extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_smb.html awscc_datasync_location_smb} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatasyncLocationSmbConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_datasync_location_smb',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._agentArns = config.agentArns;
        this._domain = config.domain;
        this._mountOptions = config.mountOptions;
        this._password = config.password;
        this._serverHostname = config.serverHostname;
        this._subdirectory = config.subdirectory;
        this._tags = config.tags;
        this._user = config.user;
    }
    get agentArns() {
        return this.getListAttribute('agent_arns');
    }
    set agentArns(value) {
        this._agentArns = value;
    }
    // Temporarily expose input value. Use with caution.
    get agentArnsInput() {
        return this._agentArns;
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    resetDomain() {
        this._domain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // location_arn - computed: true, optional: false, required: false
    get locationArn() {
        return this.getStringAttribute('location_arn');
    }
    // location_uri - computed: true, optional: false, required: false
    get locationUri() {
        return this.getStringAttribute('location_uri');
    }
    get mountOptions() {
        return this.interpolationForAttribute('mount_options');
    }
    set mountOptions(value) {
        this._mountOptions = value;
    }
    resetMountOptions() {
        this._mountOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mountOptionsInput() {
        return this._mountOptions;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get serverHostname() {
        return this.getStringAttribute('server_hostname');
    }
    set serverHostname(value) {
        this._serverHostname = value;
    }
    // Temporarily expose input value. Use with caution.
    get serverHostnameInput() {
        return this._serverHostname;
    }
    get subdirectory() {
        return this.getStringAttribute('subdirectory');
    }
    set subdirectory(value) {
        this._subdirectory = value;
    }
    // Temporarily expose input value. Use with caution.
    get subdirectoryInput() {
        return this._subdirectory;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            agent_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._agentArns),
            domain: cdktf.stringToTerraform(this._domain),
            mount_options: datasyncLocationSmbMountOptionsToTerraform(this._mountOptions),
            password: cdktf.stringToTerraform(this._password),
            server_hostname: cdktf.stringToTerraform(this._serverHostname),
            subdirectory: cdktf.stringToTerraform(this._subdirectory),
            tags: cdktf.listMapper(datasyncLocationSmbTagsToTerraform)(this._tags),
            user: cdktf.stringToTerraform(this._user),
        };
    }
}
exports.DatasyncLocationSmb = DatasyncLocationSmb;
// =================
// STATIC PROPERTIES
// =================
DatasyncLocationSmb.tfResourceType = "awscc_datasync_location_smb";
//# sourceMappingURL=data:application/json;base64,