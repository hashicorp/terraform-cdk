"use strict";
// https://www.terraform.io/docs/providers/awscc/d/networkfirewall_logging_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccNetworkfirewallLoggingConfiguration = exports.dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationToTerraform = exports.DataAwsccNetworkfirewallLoggingConfigurationLoggingConfiguration = exports.dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform = exports.DataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigs = void 0;
const cdktf = require("cdktf");
class DataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigs extends cdktf.ComplexComputedList {
    // log_destination - computed: true, optional: false, required: false
    get logDestination() {
        return this.interpolationForAttribute('log_destination');
    }
    // log_destination_type - computed: true, optional: false, required: false
    get logDestinationType() {
        return this.getStringAttribute('log_destination_type');
    }
    // log_type - computed: true, optional: false, required: false
    get logType() {
        return this.getStringAttribute('log_type');
    }
}
exports.DataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigs = DataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigs;
function dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination: cdktf.hashMapper(cdktf.stringToTerraform)(struct.logDestination),
        log_destination_type: cdktf.stringToTerraform(struct.logDestinationType),
        log_type: cdktf.stringToTerraform(struct.logType),
    };
}
exports.dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform = dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform;
class DataAwsccNetworkfirewallLoggingConfigurationLoggingConfiguration extends cdktf.ComplexComputedList {
    // log_destination_configs - computed: true, optional: false, required: false
    get logDestinationConfigs() {
        return this.interpolationForAttribute('log_destination_configs');
    }
}
exports.DataAwsccNetworkfirewallLoggingConfigurationLoggingConfiguration = DataAwsccNetworkfirewallLoggingConfigurationLoggingConfiguration;
function dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination_configs: cdktf.listMapper(dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform)(struct.logDestinationConfigs),
    };
}
exports.dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationToTerraform = dataAwsccNetworkfirewallLoggingConfigurationLoggingConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/networkfirewall_logging_configuration.html awscc_networkfirewall_logging_configuration}
*/
class DataAwsccNetworkfirewallLoggingConfiguration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/networkfirewall_logging_configuration.html awscc_networkfirewall_logging_configuration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccNetworkfirewallLoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // firewall_arn - computed: true, optional: false, required: false
    get firewallArn() {
        return this.getStringAttribute('firewall_arn');
    }
    // firewall_name - computed: true, optional: false, required: false
    get firewallName() {
        return this.getStringAttribute('firewall_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // logging_configuration - computed: true, optional: false, required: false
    get loggingConfiguration() {
        return this.interpolationForAttribute('logging_configuration');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccNetworkfirewallLoggingConfiguration = DataAwsccNetworkfirewallLoggingConfiguration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccNetworkfirewallLoggingConfiguration.tfResourceType = "awscc_networkfirewall_logging_configuration";
//# sourceMappingURL=data:application/json;base64,