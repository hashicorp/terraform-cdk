"use strict";
// https://www.terraform.io/docs/providers/awscc/r/customerprofiles_domain.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerprofilesDomain = exports.customerprofilesDomainTagsToTerraform = void 0;
const cdktf = require("cdktf");
function customerprofilesDomainTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.customerprofilesDomainTagsToTerraform = customerprofilesDomainTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_domain.html awscc_customerprofiles_domain}
*/
class CustomerprofilesDomain extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_domain.html awscc_customerprofiles_domain} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CustomerprofilesDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_customerprofiles_domain',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deadLetterQueueUrl = config.deadLetterQueueUrl;
        this._defaultEncryptionKey = config.defaultEncryptionKey;
        this._defaultExpirationDays = config.defaultExpirationDays;
        this._domainName = config.domainName;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get deadLetterQueueUrl() {
        return this.getStringAttribute('dead_letter_queue_url');
    }
    set deadLetterQueueUrl(value) {
        this._deadLetterQueueUrl = value;
    }
    resetDeadLetterQueueUrl() {
        this._deadLetterQueueUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deadLetterQueueUrlInput() {
        return this._deadLetterQueueUrl;
    }
    get defaultEncryptionKey() {
        return this.getStringAttribute('default_encryption_key');
    }
    set defaultEncryptionKey(value) {
        this._defaultEncryptionKey = value;
    }
    resetDefaultEncryptionKey() {
        this._defaultEncryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEncryptionKeyInput() {
        return this._defaultEncryptionKey;
    }
    get defaultExpirationDays() {
        return this.getNumberAttribute('default_expiration_days');
    }
    set defaultExpirationDays(value) {
        this._defaultExpirationDays = value;
    }
    resetDefaultExpirationDays() {
        this._defaultExpirationDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultExpirationDaysInput() {
        return this._defaultExpirationDays;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_at - computed: true, optional: false, required: false
    get lastUpdatedAt() {
        return this.getStringAttribute('last_updated_at');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            dead_letter_queue_url: cdktf.stringToTerraform(this._deadLetterQueueUrl),
            default_encryption_key: cdktf.stringToTerraform(this._defaultEncryptionKey),
            default_expiration_days: cdktf.numberToTerraform(this._defaultExpirationDays),
            domain_name: cdktf.stringToTerraform(this._domainName),
            tags: cdktf.listMapper(customerprofilesDomainTagsToTerraform)(this._tags),
        };
    }
}
exports.CustomerprofilesDomain = CustomerprofilesDomain;
// =================
// STATIC PROPERTIES
// =================
CustomerprofilesDomain.tfResourceType = "awscc_customerprofiles_domain";
//# sourceMappingURL=data:application/json;base64,