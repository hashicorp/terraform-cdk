"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotsitewise_gateway.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotsitewiseGateway = exports.dataAwsccIotsitewiseGatewayTagsToTerraform = exports.DataAwsccIotsitewiseGatewayTags = exports.dataAwsccIotsitewiseGatewayGatewayPlatformToTerraform = exports.DataAwsccIotsitewiseGatewayGatewayPlatform = exports.dataAwsccIotsitewiseGatewayGatewayPlatformGreengrassToTerraform = exports.DataAwsccIotsitewiseGatewayGatewayPlatformGreengrass = exports.dataAwsccIotsitewiseGatewayGatewayCapabilitySummariesToTerraform = exports.DataAwsccIotsitewiseGatewayGatewayCapabilitySummaries = void 0;
const cdktf = require("cdktf");
class DataAwsccIotsitewiseGatewayGatewayCapabilitySummaries extends cdktf.ComplexComputedList {
    // capability_configuration - computed: true, optional: false, required: false
    get capabilityConfiguration() {
        return this.getStringAttribute('capability_configuration');
    }
    // capability_namespace - computed: true, optional: false, required: false
    get capabilityNamespace() {
        return this.getStringAttribute('capability_namespace');
    }
}
exports.DataAwsccIotsitewiseGatewayGatewayCapabilitySummaries = DataAwsccIotsitewiseGatewayGatewayCapabilitySummaries;
function dataAwsccIotsitewiseGatewayGatewayCapabilitySummariesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        capability_configuration: cdktf.stringToTerraform(struct.capabilityConfiguration),
        capability_namespace: cdktf.stringToTerraform(struct.capabilityNamespace),
    };
}
exports.dataAwsccIotsitewiseGatewayGatewayCapabilitySummariesToTerraform = dataAwsccIotsitewiseGatewayGatewayCapabilitySummariesToTerraform;
class DataAwsccIotsitewiseGatewayGatewayPlatformGreengrass extends cdktf.ComplexComputedList {
    // group_arn - computed: true, optional: false, required: false
    get groupArn() {
        return this.getStringAttribute('group_arn');
    }
}
exports.DataAwsccIotsitewiseGatewayGatewayPlatformGreengrass = DataAwsccIotsitewiseGatewayGatewayPlatformGreengrass;
function dataAwsccIotsitewiseGatewayGatewayPlatformGreengrassToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        group_arn: cdktf.stringToTerraform(struct.groupArn),
    };
}
exports.dataAwsccIotsitewiseGatewayGatewayPlatformGreengrassToTerraform = dataAwsccIotsitewiseGatewayGatewayPlatformGreengrassToTerraform;
class DataAwsccIotsitewiseGatewayGatewayPlatform extends cdktf.ComplexComputedList {
    // greengrass - computed: true, optional: false, required: false
    get greengrass() {
        return this.interpolationForAttribute('greengrass');
    }
}
exports.DataAwsccIotsitewiseGatewayGatewayPlatform = DataAwsccIotsitewiseGatewayGatewayPlatform;
function dataAwsccIotsitewiseGatewayGatewayPlatformToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        greengrass: dataAwsccIotsitewiseGatewayGatewayPlatformGreengrassToTerraform(struct.greengrass),
    };
}
exports.dataAwsccIotsitewiseGatewayGatewayPlatformToTerraform = dataAwsccIotsitewiseGatewayGatewayPlatformToTerraform;
class DataAwsccIotsitewiseGatewayTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotsitewiseGatewayTags = DataAwsccIotsitewiseGatewayTags;
function dataAwsccIotsitewiseGatewayTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotsitewiseGatewayTagsToTerraform = dataAwsccIotsitewiseGatewayTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotsitewise_gateway.html awscc_iotsitewise_gateway}
*/
class DataAwsccIotsitewiseGateway extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotsitewise_gateway.html awscc_iotsitewise_gateway} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotsitewiseGatewayConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_gateway',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // gateway_capability_summaries - computed: true, optional: false, required: false
    get gatewayCapabilitySummaries() {
        return this.interpolationForAttribute('gateway_capability_summaries');
    }
    // gateway_id - computed: true, optional: false, required: false
    get gatewayId() {
        return this.getStringAttribute('gateway_id');
    }
    // gateway_name - computed: true, optional: false, required: false
    get gatewayName() {
        return this.getStringAttribute('gateway_name');
    }
    // gateway_platform - computed: true, optional: false, required: false
    get gatewayPlatform() {
        return this.interpolationForAttribute('gateway_platform');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotsitewiseGateway = DataAwsccIotsitewiseGateway;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotsitewiseGateway.tfResourceType = "awscc_iotsitewise_gateway";
//# sourceMappingURL=data:application/json;base64,