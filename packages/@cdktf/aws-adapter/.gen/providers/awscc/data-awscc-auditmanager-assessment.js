"use strict";
// https://www.terraform.io/docs/providers/awscc/d/auditmanager_assessment.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccAuditmanagerAssessment = exports.dataAwsccAuditmanagerAssessmentTagsToTerraform = exports.DataAwsccAuditmanagerAssessmentTags = exports.dataAwsccAuditmanagerAssessmentScopeToTerraform = exports.DataAwsccAuditmanagerAssessmentScope = exports.dataAwsccAuditmanagerAssessmentScopeAwsServicesToTerraform = exports.DataAwsccAuditmanagerAssessmentScopeAwsServices = exports.dataAwsccAuditmanagerAssessmentScopeAwsAccountsToTerraform = exports.DataAwsccAuditmanagerAssessmentScopeAwsAccounts = exports.dataAwsccAuditmanagerAssessmentRolesToTerraform = exports.DataAwsccAuditmanagerAssessmentRoles = exports.dataAwsccAuditmanagerAssessmentDelegationsToTerraform = exports.DataAwsccAuditmanagerAssessmentDelegations = exports.dataAwsccAuditmanagerAssessmentAwsAccountToTerraform = exports.DataAwsccAuditmanagerAssessmentAwsAccount = exports.dataAwsccAuditmanagerAssessmentAssessmentReportsDestinationToTerraform = exports.DataAwsccAuditmanagerAssessmentAssessmentReportsDestination = void 0;
const cdktf = require("cdktf");
class DataAwsccAuditmanagerAssessmentAssessmentReportsDestination extends cdktf.ComplexComputedList {
    // destination - computed: true, optional: false, required: false
    get destination() {
        return this.getStringAttribute('destination');
    }
    // destination_type - computed: true, optional: false, required: false
    get destinationType() {
        return this.getStringAttribute('destination_type');
    }
}
exports.DataAwsccAuditmanagerAssessmentAssessmentReportsDestination = DataAwsccAuditmanagerAssessmentAssessmentReportsDestination;
function dataAwsccAuditmanagerAssessmentAssessmentReportsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
        destination_type: cdktf.stringToTerraform(struct.destinationType),
    };
}
exports.dataAwsccAuditmanagerAssessmentAssessmentReportsDestinationToTerraform = dataAwsccAuditmanagerAssessmentAssessmentReportsDestinationToTerraform;
class DataAwsccAuditmanagerAssessmentAwsAccount extends cdktf.ComplexComputedList {
    // email_address - computed: true, optional: false, required: false
    get emailAddress() {
        return this.getStringAttribute('email_address');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsccAuditmanagerAssessmentAwsAccount = DataAwsccAuditmanagerAssessmentAwsAccount;
function dataAwsccAuditmanagerAssessmentAwsAccountToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        email_address: cdktf.stringToTerraform(struct.emailAddress),
        id: cdktf.stringToTerraform(struct.id),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataAwsccAuditmanagerAssessmentAwsAccountToTerraform = dataAwsccAuditmanagerAssessmentAwsAccountToTerraform;
class DataAwsccAuditmanagerAssessmentDelegations extends cdktf.ComplexComputedList {
    // assessment_id - computed: true, optional: false, required: false
    get assessmentId() {
        return this.getStringAttribute('assessment_id');
    }
    // assessment_name - computed: true, optional: false, required: false
    get assessmentName() {
        return this.getStringAttribute('assessment_name');
    }
    // comment - computed: true, optional: false, required: false
    get comment() {
        return this.getStringAttribute('comment');
    }
    // control_set_id - computed: true, optional: false, required: false
    get controlSetId() {
        return this.getStringAttribute('control_set_id');
    }
    // created_by - computed: true, optional: false, required: false
    get createdBy() {
        return this.getStringAttribute('created_by');
    }
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getNumberAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated - computed: true, optional: false, required: false
    get lastUpdated() {
        return this.getNumberAttribute('last_updated');
    }
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // role_type - computed: true, optional: false, required: false
    get roleType() {
        return this.getStringAttribute('role_type');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
}
exports.DataAwsccAuditmanagerAssessmentDelegations = DataAwsccAuditmanagerAssessmentDelegations;
function dataAwsccAuditmanagerAssessmentDelegationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        assessment_id: cdktf.stringToTerraform(struct.assessmentId),
        assessment_name: cdktf.stringToTerraform(struct.assessmentName),
        comment: cdktf.stringToTerraform(struct.comment),
        control_set_id: cdktf.stringToTerraform(struct.controlSetId),
        created_by: cdktf.stringToTerraform(struct.createdBy),
        creation_time: cdktf.numberToTerraform(struct.creationTime),
        id: cdktf.stringToTerraform(struct.id),
        last_updated: cdktf.numberToTerraform(struct.lastUpdated),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        role_type: cdktf.stringToTerraform(struct.roleType),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.dataAwsccAuditmanagerAssessmentDelegationsToTerraform = dataAwsccAuditmanagerAssessmentDelegationsToTerraform;
class DataAwsccAuditmanagerAssessmentRoles extends cdktf.ComplexComputedList {
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // role_type - computed: true, optional: false, required: false
    get roleType() {
        return this.getStringAttribute('role_type');
    }
}
exports.DataAwsccAuditmanagerAssessmentRoles = DataAwsccAuditmanagerAssessmentRoles;
function dataAwsccAuditmanagerAssessmentRolesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        role_type: cdktf.stringToTerraform(struct.roleType),
    };
}
exports.dataAwsccAuditmanagerAssessmentRolesToTerraform = dataAwsccAuditmanagerAssessmentRolesToTerraform;
class DataAwsccAuditmanagerAssessmentScopeAwsAccounts extends cdktf.ComplexComputedList {
    // email_address - computed: true, optional: false, required: false
    get emailAddress() {
        return this.getStringAttribute('email_address');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsccAuditmanagerAssessmentScopeAwsAccounts = DataAwsccAuditmanagerAssessmentScopeAwsAccounts;
function dataAwsccAuditmanagerAssessmentScopeAwsAccountsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        email_address: cdktf.stringToTerraform(struct.emailAddress),
        id: cdktf.stringToTerraform(struct.id),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataAwsccAuditmanagerAssessmentScopeAwsAccountsToTerraform = dataAwsccAuditmanagerAssessmentScopeAwsAccountsToTerraform;
class DataAwsccAuditmanagerAssessmentScopeAwsServices extends cdktf.ComplexComputedList {
    // service_name - computed: true, optional: false, required: false
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
}
exports.DataAwsccAuditmanagerAssessmentScopeAwsServices = DataAwsccAuditmanagerAssessmentScopeAwsServices;
function dataAwsccAuditmanagerAssessmentScopeAwsServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.dataAwsccAuditmanagerAssessmentScopeAwsServicesToTerraform = dataAwsccAuditmanagerAssessmentScopeAwsServicesToTerraform;
class DataAwsccAuditmanagerAssessmentScope extends cdktf.ComplexComputedList {
    // aws_accounts - computed: true, optional: false, required: false
    get awsAccounts() {
        return this.interpolationForAttribute('aws_accounts');
    }
    // aws_services - computed: true, optional: false, required: false
    get awsServices() {
        return this.interpolationForAttribute('aws_services');
    }
}
exports.DataAwsccAuditmanagerAssessmentScope = DataAwsccAuditmanagerAssessmentScope;
function dataAwsccAuditmanagerAssessmentScopeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aws_accounts: cdktf.listMapper(dataAwsccAuditmanagerAssessmentScopeAwsAccountsToTerraform)(struct.awsAccounts),
        aws_services: cdktf.listMapper(dataAwsccAuditmanagerAssessmentScopeAwsServicesToTerraform)(struct.awsServices),
    };
}
exports.dataAwsccAuditmanagerAssessmentScopeToTerraform = dataAwsccAuditmanagerAssessmentScopeToTerraform;
class DataAwsccAuditmanagerAssessmentTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccAuditmanagerAssessmentTags = DataAwsccAuditmanagerAssessmentTags;
function dataAwsccAuditmanagerAssessmentTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccAuditmanagerAssessmentTagsToTerraform = dataAwsccAuditmanagerAssessmentTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/auditmanager_assessment.html awscc_auditmanager_assessment}
*/
class DataAwsccAuditmanagerAssessment extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/auditmanager_assessment.html awscc_auditmanager_assessment} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccAuditmanagerAssessmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_auditmanager_assessment',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // assessment_id - computed: true, optional: false, required: false
    get assessmentId() {
        return this.getStringAttribute('assessment_id');
    }
    // assessment_reports_destination - computed: true, optional: false, required: false
    get assessmentReportsDestination() {
        return this.interpolationForAttribute('assessment_reports_destination');
    }
    // aws_account - computed: true, optional: false, required: false
    get awsAccount() {
        return this.interpolationForAttribute('aws_account');
    }
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getNumberAttribute('creation_time');
    }
    // delegations - computed: true, optional: false, required: false
    get delegations() {
        return this.interpolationForAttribute('delegations');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // framework_id - computed: true, optional: false, required: false
    get frameworkId() {
        return this.getStringAttribute('framework_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // roles - computed: true, optional: false, required: false
    get roles() {
        return this.interpolationForAttribute('roles');
    }
    // scope - computed: true, optional: false, required: false
    get scope() {
        return this.interpolationForAttribute('scope');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccAuditmanagerAssessment = DataAwsccAuditmanagerAssessment;
// =================
// STATIC PROPERTIES
// =================
DataAwsccAuditmanagerAssessment.tfResourceType = "awscc_auditmanager_assessment";
//# sourceMappingURL=data:application/json;base64,