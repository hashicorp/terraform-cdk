"use strict";
// https://www.terraform.io/docs/providers/awscc/r/xray_sampling_rule.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.XraySamplingRule = exports.xraySamplingRuleTagsToTerraform = exports.xraySamplingRuleSamplingRuleUpdateToTerraform = exports.xraySamplingRuleSamplingRuleRecordToTerraform = exports.xraySamplingRuleSamplingRuleRecordSamplingRuleToTerraform = exports.xraySamplingRuleSamplingRuleToTerraform = void 0;
const cdktf = require("cdktf");
function xraySamplingRuleSamplingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attributes: cdktf.hashMapper(cdktf.anyToTerraform)(struct.attributes),
        fixed_rate: cdktf.numberToTerraform(struct.fixedRate),
        host: cdktf.stringToTerraform(struct.host),
        http_method: cdktf.stringToTerraform(struct.httpMethod),
        priority: cdktf.numberToTerraform(struct.priority),
        reservoir_size: cdktf.numberToTerraform(struct.reservoirSize),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
        rule_arn: cdktf.stringToTerraform(struct.ruleArn),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_type: cdktf.stringToTerraform(struct.serviceType),
        url_path: cdktf.stringToTerraform(struct.urlPath),
        version: cdktf.numberToTerraform(struct.version),
    };
}
exports.xraySamplingRuleSamplingRuleToTerraform = xraySamplingRuleSamplingRuleToTerraform;
function xraySamplingRuleSamplingRuleRecordSamplingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attributes: cdktf.hashMapper(cdktf.anyToTerraform)(struct.attributes),
        fixed_rate: cdktf.numberToTerraform(struct.fixedRate),
        host: cdktf.stringToTerraform(struct.host),
        http_method: cdktf.stringToTerraform(struct.httpMethod),
        priority: cdktf.numberToTerraform(struct.priority),
        reservoir_size: cdktf.numberToTerraform(struct.reservoirSize),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
        rule_arn: cdktf.stringToTerraform(struct.ruleArn),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_type: cdktf.stringToTerraform(struct.serviceType),
        url_path: cdktf.stringToTerraform(struct.urlPath),
        version: cdktf.numberToTerraform(struct.version),
    };
}
exports.xraySamplingRuleSamplingRuleRecordSamplingRuleToTerraform = xraySamplingRuleSamplingRuleRecordSamplingRuleToTerraform;
function xraySamplingRuleSamplingRuleRecordToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        created_at: cdktf.stringToTerraform(struct.createdAt),
        modified_at: cdktf.stringToTerraform(struct.modifiedAt),
        sampling_rule: xraySamplingRuleSamplingRuleRecordSamplingRuleToTerraform(struct.samplingRule),
    };
}
exports.xraySamplingRuleSamplingRuleRecordToTerraform = xraySamplingRuleSamplingRuleRecordToTerraform;
function xraySamplingRuleSamplingRuleUpdateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attributes: cdktf.hashMapper(cdktf.anyToTerraform)(struct.attributes),
        fixed_rate: cdktf.numberToTerraform(struct.fixedRate),
        host: cdktf.stringToTerraform(struct.host),
        http_method: cdktf.stringToTerraform(struct.httpMethod),
        priority: cdktf.numberToTerraform(struct.priority),
        reservoir_size: cdktf.numberToTerraform(struct.reservoirSize),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
        rule_arn: cdktf.stringToTerraform(struct.ruleArn),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_type: cdktf.stringToTerraform(struct.serviceType),
        url_path: cdktf.stringToTerraform(struct.urlPath),
    };
}
exports.xraySamplingRuleSamplingRuleUpdateToTerraform = xraySamplingRuleSamplingRuleUpdateToTerraform;
function xraySamplingRuleTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.xraySamplingRuleTagsToTerraform = xraySamplingRuleTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/xray_sampling_rule.html awscc_xray_sampling_rule}
*/
class XraySamplingRule extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/xray_sampling_rule.html awscc_xray_sampling_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options XraySamplingRuleConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_xray_sampling_rule',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._ruleName = config.ruleName;
        this._samplingRule = config.samplingRule;
        this._samplingRuleRecord = config.samplingRuleRecord;
        this._samplingRuleUpdate = config.samplingRuleUpdate;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // rule_arn - computed: true, optional: false, required: false
    get ruleArn() {
        return this.getStringAttribute('rule_arn');
    }
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    set ruleName(value) {
        this._ruleName = value;
    }
    resetRuleName() {
        this._ruleName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNameInput() {
        return this._ruleName;
    }
    get samplingRule() {
        return this.interpolationForAttribute('sampling_rule');
    }
    set samplingRule(value) {
        this._samplingRule = value;
    }
    resetSamplingRule() {
        this._samplingRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samplingRuleInput() {
        return this._samplingRule;
    }
    get samplingRuleRecord() {
        return this.interpolationForAttribute('sampling_rule_record');
    }
    set samplingRuleRecord(value) {
        this._samplingRuleRecord = value;
    }
    resetSamplingRuleRecord() {
        this._samplingRuleRecord = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samplingRuleRecordInput() {
        return this._samplingRuleRecord;
    }
    get samplingRuleUpdate() {
        return this.interpolationForAttribute('sampling_rule_update');
    }
    set samplingRuleUpdate(value) {
        this._samplingRuleUpdate = value;
    }
    resetSamplingRuleUpdate() {
        this._samplingRuleUpdate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samplingRuleUpdateInput() {
        return this._samplingRuleUpdate;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            rule_name: cdktf.stringToTerraform(this._ruleName),
            sampling_rule: xraySamplingRuleSamplingRuleToTerraform(this._samplingRule),
            sampling_rule_record: xraySamplingRuleSamplingRuleRecordToTerraform(this._samplingRuleRecord),
            sampling_rule_update: xraySamplingRuleSamplingRuleUpdateToTerraform(this._samplingRuleUpdate),
            tags: cdktf.listMapper(xraySamplingRuleTagsToTerraform)(this._tags),
        };
    }
}
exports.XraySamplingRule = XraySamplingRule;
// =================
// STATIC PROPERTIES
// =================
XraySamplingRule.tfResourceType = "awscc_xray_sampling_rule";
//# sourceMappingURL=data:application/json;base64,