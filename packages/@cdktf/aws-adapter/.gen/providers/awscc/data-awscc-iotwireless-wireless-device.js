"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotwireless_wireless_device.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotwirelessWirelessDevice = exports.dataAwsccIotwirelessWirelessDeviceTagsToTerraform = exports.DataAwsccIotwirelessWirelessDeviceTags = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWan = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11 = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10X = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11 = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeys = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10X = exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform = exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeys = void 0;
const cdktf = require("cdktf");
class DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeys extends cdktf.ComplexComputedList {
    // app_s_key - computed: true, optional: false, required: false
    get appSKey() {
        return this.getStringAttribute('app_s_key');
    }
    // nwk_s_key - computed: true, optional: false, required: false
    get nwkSKey() {
        return this.getStringAttribute('nwk_s_key');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeys = DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeys;
function dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_s_key: cdktf.stringToTerraform(struct.appSKey),
        nwk_s_key: cdktf.stringToTerraform(struct.nwkSKey),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10X extends cdktf.ComplexComputedList {
    // dev_addr - computed: true, optional: false, required: false
    get devAddr() {
        return this.getStringAttribute('dev_addr');
    }
    // session_keys - computed: true, optional: false, required: false
    get sessionKeys() {
        return this.interpolationForAttribute('session_keys');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10X = DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10X;
function dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dev_addr: cdktf.stringToTerraform(struct.devAddr),
        session_keys: dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XSessionKeysToTerraform(struct.sessionKeys),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeys extends cdktf.ComplexComputedList {
    // app_s_key - computed: true, optional: false, required: false
    get appSKey() {
        return this.getStringAttribute('app_s_key');
    }
    // f_nwk_s_int_key - computed: true, optional: false, required: false
    get fNwkSIntKey() {
        return this.getStringAttribute('f_nwk_s_int_key');
    }
    // nwk_s_enc_key - computed: true, optional: false, required: false
    get nwkSEncKey() {
        return this.getStringAttribute('nwk_s_enc_key');
    }
    // s_nwk_s_int_key - computed: true, optional: false, required: false
    get sNwkSIntKey() {
        return this.getStringAttribute('s_nwk_s_int_key');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeys = DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeys;
function dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_s_key: cdktf.stringToTerraform(struct.appSKey),
        f_nwk_s_int_key: cdktf.stringToTerraform(struct.fNwkSIntKey),
        nwk_s_enc_key: cdktf.stringToTerraform(struct.nwkSEncKey),
        s_nwk_s_int_key: cdktf.stringToTerraform(struct.sNwkSIntKey),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11 extends cdktf.ComplexComputedList {
    // dev_addr - computed: true, optional: false, required: false
    get devAddr() {
        return this.getStringAttribute('dev_addr');
    }
    // session_keys - computed: true, optional: false, required: false
    get sessionKeys() {
        return this.interpolationForAttribute('session_keys');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11 = DataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11;
function dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dev_addr: cdktf.stringToTerraform(struct.devAddr),
        session_keys: dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11SessionKeysToTerraform(struct.sessionKeys),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10X extends cdktf.ComplexComputedList {
    // app_eui - computed: true, optional: false, required: false
    get appEui() {
        return this.getStringAttribute('app_eui');
    }
    // app_key - computed: true, optional: false, required: false
    get appKey() {
        return this.getStringAttribute('app_key');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10X = DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10X;
function dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_eui: cdktf.stringToTerraform(struct.appEui),
        app_key: cdktf.stringToTerraform(struct.appKey),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11 extends cdktf.ComplexComputedList {
    // app_key - computed: true, optional: false, required: false
    get appKey() {
        return this.getStringAttribute('app_key');
    }
    // join_eui - computed: true, optional: false, required: false
    get joinEui() {
        return this.getStringAttribute('join_eui');
    }
    // nwk_key - computed: true, optional: false, required: false
    get nwkKey() {
        return this.getStringAttribute('nwk_key');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11 = DataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11;
function dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_key: cdktf.stringToTerraform(struct.appKey),
        join_eui: cdktf.stringToTerraform(struct.joinEui),
        nwk_key: cdktf.stringToTerraform(struct.nwkKey),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform;
class DataAwsccIotwirelessWirelessDeviceLoRaWan extends cdktf.ComplexComputedList {
    // abp_v10_x - computed: true, optional: false, required: false
    get abpV10X() {
        return this.interpolationForAttribute('abp_v10_x');
    }
    // abp_v11 - computed: true, optional: false, required: false
    get abpV11() {
        return this.interpolationForAttribute('abp_v11');
    }
    // dev_eui - computed: true, optional: false, required: false
    get devEui() {
        return this.getStringAttribute('dev_eui');
    }
    // device_profile_id - computed: true, optional: false, required: false
    get deviceProfileId() {
        return this.getStringAttribute('device_profile_id');
    }
    // otaa_v10_x - computed: true, optional: false, required: false
    get otaaV10X() {
        return this.interpolationForAttribute('otaa_v10_x');
    }
    // otaa_v11 - computed: true, optional: false, required: false
    get otaaV11() {
        return this.interpolationForAttribute('otaa_v11');
    }
    // service_profile_id - computed: true, optional: false, required: false
    get serviceProfileId() {
        return this.getStringAttribute('service_profile_id');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceLoRaWan = DataAwsccIotwirelessWirelessDeviceLoRaWan;
function dataAwsccIotwirelessWirelessDeviceLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        abp_v10_x: dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV10XToTerraform(struct.abpV10X),
        abp_v11: dataAwsccIotwirelessWirelessDeviceLoRaWanAbpV11ToTerraform(struct.abpV11),
        dev_eui: cdktf.stringToTerraform(struct.devEui),
        device_profile_id: cdktf.stringToTerraform(struct.deviceProfileId),
        otaa_v10_x: dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV10XToTerraform(struct.otaaV10X),
        otaa_v11: dataAwsccIotwirelessWirelessDeviceLoRaWanOtaaV11ToTerraform(struct.otaaV11),
        service_profile_id: cdktf.stringToTerraform(struct.serviceProfileId),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceLoRaWanToTerraform = dataAwsccIotwirelessWirelessDeviceLoRaWanToTerraform;
class DataAwsccIotwirelessWirelessDeviceTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotwirelessWirelessDeviceTags = DataAwsccIotwirelessWirelessDeviceTags;
function dataAwsccIotwirelessWirelessDeviceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotwirelessWirelessDeviceTagsToTerraform = dataAwsccIotwirelessWirelessDeviceTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_wireless_device.html awscc_iotwireless_wireless_device}
*/
class DataAwsccIotwirelessWirelessDevice extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_wireless_device.html awscc_iotwireless_wireless_device} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotwirelessWirelessDeviceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_wireless_device',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // destination_name - computed: true, optional: false, required: false
    get destinationName() {
        return this.getStringAttribute('destination_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_uplink_received_at - computed: true, optional: false, required: false
    get lastUplinkReceivedAt() {
        return this.getStringAttribute('last_uplink_received_at');
    }
    // lo_ra_wan - computed: true, optional: false, required: false
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // thing_arn - computed: true, optional: false, required: false
    get thingArn() {
        return this.getStringAttribute('thing_arn');
    }
    // thing_name - computed: true, optional: false, required: false
    get thingName() {
        return this.getStringAttribute('thing_name');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotwirelessWirelessDevice = DataAwsccIotwirelessWirelessDevice;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotwirelessWirelessDevice.tfResourceType = "awscc_iotwireless_wireless_device";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1hd3NjYy1pb3R3aXJlbGVzcy13aXJlbGVzcy1kZXZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhLWF3c2NjLWlvdHdpcmVsZXNzLXdpcmVsZXNzLWRldmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbUZBQW1GO0FBQ25GLDJDQUEyQzs7O0FBRzNDLCtCQUErQjtBQVkvQixNQUFhLDJEQUE0RCxTQUFRLEtBQUssQ0FBQyxtQkFBbUI7SUFFeEcsK0RBQStEO0lBQy9ELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsK0RBQStEO0lBQy9ELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7QUFYRCxrSUFXQztBQUVELFNBQWdCLHNFQUFzRSxDQUFDLE1BQW9FO0lBQ3pKLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsU0FBUyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsT0FBTyxDQUFDO1FBQ25ELFNBQVMsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLE9BQU8sQ0FBQztLQUNwRCxDQUFBO0FBQ0gsQ0FBQztBQU5ELHdKQU1DO0FBRUQsTUFBYSxnREFBaUQsU0FBUSxLQUFLLENBQUMsbUJBQW1CO0lBRTdGLDhEQUE4RDtJQUM5RCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGtFQUFrRTtJQUNsRSxJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFRLENBQUM7SUFD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QStEO0lBQy9ELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLENBQVEsQ0FBQztJQUM1RCxDQUFDO0lBRUQsMERBQTBEO0lBQzFELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwwREFBMEQ7SUFDMUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFRLENBQUM7SUFDdkQsQ0FBQztJQUVELCtEQUErRDtJQUMvRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGdFQUFnRTtJQUNoRSxJQUFXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELDBEQUEwRDtJQUMxRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBRUYsb0JBQW9CO1FBQzVCLE9BQU87WUFDTCxFQUFFLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDdEMsQ0FBQztJQUNKLENBQUM7O0FBM0dILGdGQTRHQztBQTFHQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNHLGlEQUFjLEdBQVcsbUNBQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2MvZC9pb3R3aXJlbGVzc193aXJlbGVzc19kZXZpY2UuaHRtbFxuLy8gZ2VuZXJhdGVkIGZyb20gdGVycmFmb3JtIHJlc291cmNlIHNjaGVtYVxuXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGNka3RmIGZyb20gJ2Nka3RmJztcblxuLy8gQ29uZmlndXJhdGlvblxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogVW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgcmVzb3VyY2UuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2MvZC9pb3R3aXJlbGVzc193aXJlbGVzc19kZXZpY2UuaHRtbCNpZCBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlI2lkfVxuICAqL1xuICByZWFkb25seSBpZDogc3RyaW5nO1xufVxuZXhwb3J0IGNsYXNzIERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWFNlc3Npb25LZXlzIGV4dGVuZHMgY2RrdGYuQ29tcGxleENvbXB1dGVkTGlzdCB7XG5cbiAgLy8gYXBwX3Nfa2V5IC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgYXBwU0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2FwcF9zX2tleScpO1xuICB9XG5cbiAgLy8gbndrX3Nfa2V5IC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgbndrU0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ253a19zX2tleScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbkFicFYxMFhTZXNzaW9uS2V5c1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWFNlc3Npb25LZXlzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFwcF9zX2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hcHBTS2V5KSxcbiAgICBud2tfc19rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubndrU0tleSksXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWCBleHRlbmRzIGNka3RmLkNvbXBsZXhDb21wdXRlZExpc3Qge1xuXG4gIC8vIGRldl9hZGRyIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgZGV2QWRkcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2Rldl9hZGRyJyk7XG4gIH1cblxuICAvLyBzZXNzaW9uX2tleXMgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBzZXNzaW9uS2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdzZXNzaW9uX2tleXMnKSBhcyBhbnk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWFRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBkZXZfYWRkcjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kZXZBZGRyKSxcbiAgICBzZXNzaW9uX2tleXM6IGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjEwWFNlc3Npb25LZXlzVG9UZXJyYWZvcm0oc3RydWN0IS5zZXNzaW9uS2V5cyksXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjExU2Vzc2lvbktleXMgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4Q29tcHV0ZWRMaXN0IHtcblxuICAvLyBhcHBfc19rZXkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBhcHBTS2V5KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnYXBwX3Nfa2V5Jyk7XG4gIH1cblxuICAvLyBmX253a19zX2ludF9rZXkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBmTndrU0ludEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ZfbndrX3NfaW50X2tleScpO1xuICB9XG5cbiAgLy8gbndrX3NfZW5jX2tleSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IG53a1NFbmNLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdud2tfc19lbmNfa2V5Jyk7XG4gIH1cblxuICAvLyBzX253a19zX2ludF9rZXkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBzTndrU0ludEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3NfbndrX3NfaW50X2tleScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbkFicFYxMVNlc3Npb25LZXlzVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZUxvUmFXYW5BYnBWMTFTZXNzaW9uS2V5cyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcHBfc19rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBwU0tleSksXG4gICAgZl9ud2tfc19pbnRfa2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmZOd2tTSW50S2V5KSxcbiAgICBud2tfc19lbmNfa2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm53a1NFbmNLZXkpLFxuICAgIHNfbndrX3NfaW50X2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zTndrU0ludEtleSksXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjExIGV4dGVuZHMgY2RrdGYuQ29tcGxleENvbXB1dGVkTGlzdCB7XG5cbiAgLy8gZGV2X2FkZHIgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBkZXZBZGRyKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGV2X2FkZHInKTtcbiAgfVxuXG4gIC8vIHNlc3Npb25fa2V5cyAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IHNlc3Npb25LZXlzKCkge1xuICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoJ3Nlc3Npb25fa2V5cycpIGFzIGFueTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZUxvUmFXYW5BYnBWMTFUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbkFicFYxMSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBkZXZfYWRkcjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kZXZBZGRyKSxcbiAgICBzZXNzaW9uX2tleXM6IGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuQWJwVjExU2Vzc2lvbktleXNUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlc3Npb25LZXlzKSxcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZUxvUmFXYW5PdGFhVjEwWCBleHRlbmRzIGNka3RmLkNvbXBsZXhDb21wdXRlZExpc3Qge1xuXG4gIC8vIGFwcF9ldWkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBhcHBFdWkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdhcHBfZXVpJyk7XG4gIH1cblxuICAvLyBhcHBfa2V5IC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgYXBwS2V5KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnYXBwX2tleScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbk90YWFWMTBYVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZUxvUmFXYW5PdGFhVjEwWCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcHBfZXVpOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFwcEV1aSksXG4gICAgYXBwX2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hcHBLZXkpLFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbk90YWFWMTEgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4Q29tcHV0ZWRMaXN0IHtcblxuICAvLyBhcHBfa2V5IC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgYXBwS2V5KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnYXBwX2tleScpO1xuICB9XG5cbiAgLy8gam9pbl9ldWkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBqb2luRXVpKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnam9pbl9ldWknKTtcbiAgfVxuXG4gIC8vIG53a19rZXkgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBud2tLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdud2tfa2V5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuT3RhYVYxMVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuT3RhYVYxMSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcHBfa2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFwcEtleSksXG4gICAgam9pbl9ldWk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuam9pbkV1aSksXG4gICAgbndrX2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5ud2tLZXkpLFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbiBleHRlbmRzIGNka3RmLkNvbXBsZXhDb21wdXRlZExpc3Qge1xuXG4gIC8vIGFicF92MTBfeCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGFicFYxMFgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnYWJwX3YxMF94JykgYXMgYW55O1xuICB9XG5cbiAgLy8gYWJwX3YxMSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGFicFYxMSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdhYnBfdjExJykgYXMgYW55O1xuICB9XG5cbiAgLy8gZGV2X2V1aSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGRldkV1aSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2Rldl9ldWknKTtcbiAgfVxuXG4gIC8vIGRldmljZV9wcm9maWxlX2lkIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgZGV2aWNlUHJvZmlsZUlkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGV2aWNlX3Byb2ZpbGVfaWQnKTtcbiAgfVxuXG4gIC8vIG90YWFfdjEwX3ggLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBvdGFhVjEwWCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdvdGFhX3YxMF94JykgYXMgYW55O1xuICB9XG5cbiAgLy8gb3RhYV92MTEgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBvdGFhVjExKCkge1xuICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoJ290YWFfdjExJykgYXMgYW55O1xuICB9XG5cbiAgLy8gc2VydmljZV9wcm9maWxlX2lkIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgc2VydmljZVByb2ZpbGVJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3NlcnZpY2VfcHJvZmlsZV9pZCcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhblRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFicF92MTBfeDogZGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZUxvUmFXYW5BYnBWMTBYVG9UZXJyYWZvcm0oc3RydWN0IS5hYnBWMTBYKSxcbiAgICBhYnBfdjExOiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbkFicFYxMVRvVGVycmFmb3JtKHN0cnVjdCEuYWJwVjExKSxcbiAgICBkZXZfZXVpOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmRldkV1aSksXG4gICAgZGV2aWNlX3Byb2ZpbGVfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGV2aWNlUHJvZmlsZUlkKSxcbiAgICBvdGFhX3YxMF94OiBkYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlTG9SYVdhbk90YWFWMTBYVG9UZXJyYWZvcm0oc3RydWN0IS5vdGFhVjEwWCksXG4gICAgb3RhYV92MTE6IGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VMb1JhV2FuT3RhYVYxMVRvVGVycmFmb3JtKHN0cnVjdCEub3RhYVYxMSksXG4gICAgc2VydmljZV9wcm9maWxlX2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlcnZpY2VQcm9maWxlSWQpLFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlVGFncyBleHRlbmRzIGNka3RmLkNvbXBsZXhDb21wdXRlZExpc3Qge1xuXG4gIC8vIGtleSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2tleScpO1xuICB9XG5cbiAgLy8gdmFsdWUgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VUYWdzVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUF3c2NjSW90d2lyZWxlc3NXaXJlbGVzc0RldmljZVRhZ3MpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAga2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudmFsdWUpLFxuICB9XG59XG5cblxuLyoqXG4qIFJlcHJlc2VudHMgYSB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL2QvaW90d2lyZWxlc3Nfd2lyZWxlc3NfZGV2aWNlLmh0bWwgYXdzY2NfaW90d2lyZWxlc3Nfd2lyZWxlc3NfZGV2aWNlfVxuKi9cbmV4cG9ydCBjbGFzcyBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlIGV4dGVuZHMgY2RrdGYuVGVycmFmb3JtRGF0YVNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19pb3R3aXJlbGVzc193aXJlbGVzc19kZXZpY2VcIjtcblxuICAvLyA9PT09PT09PT09PVxuICAvLyBJTklUSUFMSVpFUlxuICAvLyA9PT09PT09PT09PVxuXG4gIC8qKlxuICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL2QvaW90d2lyZWxlc3Nfd2lyZWxlc3NfZGV2aWNlLmh0bWwgYXdzY2NfaW90d2lyZWxlc3Nfd2lyZWxlc3NfZGV2aWNlfSBEYXRhIFNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBEYXRhQXdzY2NJb3R3aXJlbGVzc1dpcmVsZXNzRGV2aWNlQ29uZmlnXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBjb25maWc6IERhdGFBd3NjY0lvdHdpcmVsZXNzV2lyZWxlc3NEZXZpY2VDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHRlcnJhZm9ybVJlc291cmNlVHlwZTogJ2F3c2NjX2lvdHdpcmVsZXNzX3dpcmVsZXNzX2RldmljZScsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2lkID0gY29uZmlnLmlkO1xuICB9XG5cbiAgLy8gPT09PT09PT09PVxuICAvLyBBVFRSSUJVVEVTXG4gIC8vID09PT09PT09PT1cblxuICAvLyBhcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBhcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdhcm4nKTtcbiAgfVxuXG4gIC8vIGRlc2NyaXB0aW9uIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdkZXNjcmlwdGlvbicpO1xuICB9XG5cbiAgLy8gZGVzdGluYXRpb25fbmFtZSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGRlc3RpbmF0aW9uTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2Rlc3RpbmF0aW9uX25hbWUnKTtcbiAgfVxuXG4gIC8vIGlkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdpZCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgaWQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGlkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkXG4gIH1cblxuICAvLyBsYXN0X3VwbGlua19yZWNlaXZlZF9hdCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGxhc3RVcGxpbmtSZWNlaXZlZEF0KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbGFzdF91cGxpbmtfcmVjZWl2ZWRfYXQnKTtcbiAgfVxuXG4gIC8vIGxvX3JhX3dhbiAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGxvUmFXYW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnbG9fcmFfd2FuJykgYXMgYW55O1xuICB9XG5cbiAgLy8gbmFtZSAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCduYW1lJyk7XG4gIH1cblxuICAvLyB0YWdzIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgdGFncygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCd0YWdzJykgYXMgYW55O1xuICB9XG5cbiAgLy8gdGhpbmdfYXJuIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgdGhpbmdBcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aGluZ19hcm4nKTtcbiAgfVxuXG4gIC8vIHRoaW5nX25hbWUgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCB0aGluZ05hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aGluZ19uYW1lJyk7XG4gIH1cblxuICAvLyB0eXBlIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3R5cGUnKTtcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX2lkKSxcbiAgICB9O1xuICB9XG59XG4iXX0=