"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotevents_input.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoteventsInput = exports.ioteventsInputTagsToTerraform = exports.ioteventsInputInputDefinitionToTerraform = exports.ioteventsInputInputDefinitionAttributesToTerraform = void 0;
const cdktf = require("cdktf");
function ioteventsInputInputDefinitionAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        json_path: cdktf.stringToTerraform(struct.jsonPath),
    };
}
exports.ioteventsInputInputDefinitionAttributesToTerraform = ioteventsInputInputDefinitionAttributesToTerraform;
function ioteventsInputInputDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attributes: cdktf.listMapper(ioteventsInputInputDefinitionAttributesToTerraform)(struct.attributes),
    };
}
exports.ioteventsInputInputDefinitionToTerraform = ioteventsInputInputDefinitionToTerraform;
function ioteventsInputTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ioteventsInputTagsToTerraform = ioteventsInputTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotevents_input.html awscc_iotevents_input}
*/
class IoteventsInput extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotevents_input.html awscc_iotevents_input} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IoteventsInputConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotevents_input',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._inputDefinition = config.inputDefinition;
        this._inputDescription = config.inputDescription;
        this._inputName = config.inputName;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get inputDefinition() {
        return this.interpolationForAttribute('input_definition');
    }
    set inputDefinition(value) {
        this._inputDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputDefinitionInput() {
        return this._inputDefinition;
    }
    get inputDescription() {
        return this.getStringAttribute('input_description');
    }
    set inputDescription(value) {
        this._inputDescription = value;
    }
    resetInputDescription() {
        this._inputDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputDescriptionInput() {
        return this._inputDescription;
    }
    get inputName() {
        return this.getStringAttribute('input_name');
    }
    set inputName(value) {
        this._inputName = value;
    }
    resetInputName() {
        this._inputName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputNameInput() {
        return this._inputName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            input_definition: ioteventsInputInputDefinitionToTerraform(this._inputDefinition),
            input_description: cdktf.stringToTerraform(this._inputDescription),
            input_name: cdktf.stringToTerraform(this._inputName),
            tags: cdktf.listMapper(ioteventsInputTagsToTerraform)(this._tags),
        };
    }
}
exports.IoteventsInput = IoteventsInput;
// =================
// STATIC PROPERTIES
// =================
IoteventsInput.tfResourceType = "awscc_iotevents_input";
//# sourceMappingURL=data:application/json;base64,