"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediapackage_channel.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediapackageChannel = exports.mediapackageChannelTagsToTerraform = exports.mediapackageChannelIngressAccessLogsToTerraform = exports.mediapackageChannelHlsIngestToTerraform = exports.MediapackageChannelHlsIngest = exports.mediapackageChannelHlsIngestIngestEndpointsToTerraform = exports.mediapackageChannelEgressAccessLogsToTerraform = void 0;
const cdktf = require("cdktf");
function mediapackageChannelEgressAccessLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
    };
}
exports.mediapackageChannelEgressAccessLogsToTerraform = mediapackageChannelEgressAccessLogsToTerraform;
function mediapackageChannelHlsIngestIngestEndpointsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        password: cdktf.stringToTerraform(struct.password),
        url: cdktf.stringToTerraform(struct.url),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.mediapackageChannelHlsIngestIngestEndpointsToTerraform = mediapackageChannelHlsIngestIngestEndpointsToTerraform;
class MediapackageChannelHlsIngest extends cdktf.ComplexComputedList {
    get ingestEndpoints() {
        return this.interpolationForAttribute('ingest_endpoints');
    }
    set ingestEndpoints(value) {
        this._ingestEndpoints = value;
    }
    resetIngestEndpoints() {
        this._ingestEndpoints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingestEndpointsInput() {
        return this._ingestEndpoints;
    }
}
exports.MediapackageChannelHlsIngest = MediapackageChannelHlsIngest;
function mediapackageChannelHlsIngestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ingest_endpoints: cdktf.listMapper(mediapackageChannelHlsIngestIngestEndpointsToTerraform)(struct.ingestEndpoints),
    };
}
exports.mediapackageChannelHlsIngestToTerraform = mediapackageChannelHlsIngestToTerraform;
function mediapackageChannelIngressAccessLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
    };
}
exports.mediapackageChannelIngressAccessLogsToTerraform = mediapackageChannelIngressAccessLogsToTerraform;
function mediapackageChannelTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.mediapackageChannelTagsToTerraform = mediapackageChannelTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_channel.html awscc_mediapackage_channel}
*/
class MediapackageChannel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_channel.html awscc_mediapackage_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediapackageChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_channel',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._egressAccessLogs = config.egressAccessLogs;
        this._id = config.id;
        this._ingressAccessLogs = config.ingressAccessLogs;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get egressAccessLogs() {
        return this.interpolationForAttribute('egress_access_logs');
    }
    set egressAccessLogs(value) {
        this._egressAccessLogs = value;
    }
    resetEgressAccessLogs() {
        this._egressAccessLogs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressAccessLogsInput() {
        return this._egressAccessLogs;
    }
    // hls_ingest - computed: true, optional: false, required: false
    get hlsIngest() {
        return this.interpolationForAttribute('hls_ingest');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ingressAccessLogs() {
        return this.interpolationForAttribute('ingress_access_logs');
    }
    set ingressAccessLogs(value) {
        this._ingressAccessLogs = value;
    }
    resetIngressAccessLogs() {
        this._ingressAccessLogs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressAccessLogsInput() {
        return this._ingressAccessLogs;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            egress_access_logs: mediapackageChannelEgressAccessLogsToTerraform(this._egressAccessLogs),
            id: cdktf.stringToTerraform(this._id),
            ingress_access_logs: mediapackageChannelIngressAccessLogsToTerraform(this._ingressAccessLogs),
            tags: cdktf.listMapper(mediapackageChannelTagsToTerraform)(this._tags),
        };
    }
}
exports.MediapackageChannel = MediapackageChannel;
// =================
// STATIC PROPERTIES
// =================
MediapackageChannel.tfResourceType = "awscc_mediapackage_channel";
//# sourceMappingURL=data:application/json;base64,