"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_output.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaconnectFlowOutput = exports.mediaconnectFlowOutputVpcInterfaceAttachmentToTerraform = exports.mediaconnectFlowOutputEncryptionToTerraform = void 0;
const cdktf = require("cdktf");
function mediaconnectFlowOutputEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        key_type: cdktf.stringToTerraform(struct.keyType),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
    };
}
exports.mediaconnectFlowOutputEncryptionToTerraform = mediaconnectFlowOutputEncryptionToTerraform;
function mediaconnectFlowOutputVpcInterfaceAttachmentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        vpc_interface_name: cdktf.stringToTerraform(struct.vpcInterfaceName),
    };
}
exports.mediaconnectFlowOutputVpcInterfaceAttachmentToTerraform = mediaconnectFlowOutputVpcInterfaceAttachmentToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_output.html awscc_mediaconnect_flow_output}
*/
class MediaconnectFlowOutput extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_output.html awscc_mediaconnect_flow_output} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediaconnectFlowOutputConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediaconnect_flow_output',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cidrAllowList = config.cidrAllowList;
        this._description = config.description;
        this._destination = config.destination;
        this._encryption = config.encryption;
        this._flowArn = config.flowArn;
        this._maxLatency = config.maxLatency;
        this._name = config.name;
        this._port = config.port;
        this._protocol = config.protocol;
        this._remoteId = config.remoteId;
        this._smoothingLatency = config.smoothingLatency;
        this._streamId = config.streamId;
        this._vpcInterfaceAttachment = config.vpcInterfaceAttachment;
    }
    get cidrAllowList() {
        return this.getListAttribute('cidr_allow_list');
    }
    set cidrAllowList(value) {
        this._cidrAllowList = value;
    }
    resetCidrAllowList() {
        this._cidrAllowList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrAllowListInput() {
        return this._cidrAllowList;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    resetDestination() {
        this._destination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get encryption() {
        return this.interpolationForAttribute('encryption');
    }
    set encryption(value) {
        this._encryption = value;
    }
    resetEncryption() {
        this._encryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionInput() {
        return this._encryption;
    }
    get flowArn() {
        return this.getStringAttribute('flow_arn');
    }
    set flowArn(value) {
        this._flowArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get flowArnInput() {
        return this._flowArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get maxLatency() {
        return this.getNumberAttribute('max_latency');
    }
    set maxLatency(value) {
        this._maxLatency = value;
    }
    resetMaxLatency() {
        this._maxLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxLatencyInput() {
        return this._maxLatency;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // output_arn - computed: true, optional: false, required: false
    get outputArn() {
        return this.getStringAttribute('output_arn');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get remoteId() {
        return this.getStringAttribute('remote_id');
    }
    set remoteId(value) {
        this._remoteId = value;
    }
    resetRemoteId() {
        this._remoteId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteIdInput() {
        return this._remoteId;
    }
    get smoothingLatency() {
        return this.getNumberAttribute('smoothing_latency');
    }
    set smoothingLatency(value) {
        this._smoothingLatency = value;
    }
    resetSmoothingLatency() {
        this._smoothingLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smoothingLatencyInput() {
        return this._smoothingLatency;
    }
    get streamId() {
        return this.getStringAttribute('stream_id');
    }
    set streamId(value) {
        this._streamId = value;
    }
    resetStreamId() {
        this._streamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamIdInput() {
        return this._streamId;
    }
    get vpcInterfaceAttachment() {
        return this.interpolationForAttribute('vpc_interface_attachment');
    }
    set vpcInterfaceAttachment(value) {
        this._vpcInterfaceAttachment = value;
    }
    resetVpcInterfaceAttachment() {
        this._vpcInterfaceAttachment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcInterfaceAttachmentInput() {
        return this._vpcInterfaceAttachment;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cidr_allow_list: cdktf.listMapper(cdktf.stringToTerraform)(this._cidrAllowList),
            description: cdktf.stringToTerraform(this._description),
            destination: cdktf.stringToTerraform(this._destination),
            encryption: mediaconnectFlowOutputEncryptionToTerraform(this._encryption),
            flow_arn: cdktf.stringToTerraform(this._flowArn),
            max_latency: cdktf.numberToTerraform(this._maxLatency),
            name: cdktf.stringToTerraform(this._name),
            port: cdktf.numberToTerraform(this._port),
            protocol: cdktf.stringToTerraform(this._protocol),
            remote_id: cdktf.stringToTerraform(this._remoteId),
            smoothing_latency: cdktf.numberToTerraform(this._smoothingLatency),
            stream_id: cdktf.stringToTerraform(this._streamId),
            vpc_interface_attachment: mediaconnectFlowOutputVpcInterfaceAttachmentToTerraform(this._vpcInterfaceAttachment),
        };
    }
}
exports.MediaconnectFlowOutput = MediaconnectFlowOutput;
// =================
// STATIC PROPERTIES
// =================
MediaconnectFlowOutput.tfResourceType = "awscc_mediaconnect_flow_output";
//# sourceMappingURL=data:application/json;base64,