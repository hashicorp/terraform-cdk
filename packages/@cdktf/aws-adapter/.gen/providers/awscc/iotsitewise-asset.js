"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotsitewiseAsset = exports.iotsitewiseAssetTagsToTerraform = exports.iotsitewiseAssetAssetPropertiesToTerraform = exports.iotsitewiseAssetAssetHierarchiesToTerraform = void 0;
const cdktf = require("cdktf");
function iotsitewiseAssetAssetHierarchiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        child_asset_id: cdktf.stringToTerraform(struct.childAssetId),
        logical_id: cdktf.stringToTerraform(struct.logicalId),
    };
}
exports.iotsitewiseAssetAssetHierarchiesToTerraform = iotsitewiseAssetAssetHierarchiesToTerraform;
function iotsitewiseAssetAssetPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alias: cdktf.stringToTerraform(struct.alias),
        logical_id: cdktf.stringToTerraform(struct.logicalId),
        notification_state: cdktf.stringToTerraform(struct.notificationState),
    };
}
exports.iotsitewiseAssetAssetPropertiesToTerraform = iotsitewiseAssetAssetPropertiesToTerraform;
function iotsitewiseAssetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetTagsToTerraform = iotsitewiseAssetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset.html awscc_iotsitewise_asset}
*/
class IotsitewiseAsset extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset.html awscc_iotsitewise_asset} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotsitewiseAssetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_asset',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._assetHierarchies = config.assetHierarchies;
        this._assetModelId = config.assetModelId;
        this._assetName = config.assetName;
        this._assetProperties = config.assetProperties;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // asset_arn - computed: true, optional: false, required: false
    get assetArn() {
        return this.getStringAttribute('asset_arn');
    }
    get assetHierarchies() {
        return this.interpolationForAttribute('asset_hierarchies');
    }
    set assetHierarchies(value) {
        this._assetHierarchies = value;
    }
    resetAssetHierarchies() {
        this._assetHierarchies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetHierarchiesInput() {
        return this._assetHierarchies;
    }
    // asset_id - computed: true, optional: false, required: false
    get assetId() {
        return this.getStringAttribute('asset_id');
    }
    get assetModelId() {
        return this.getStringAttribute('asset_model_id');
    }
    set assetModelId(value) {
        this._assetModelId = value;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelIdInput() {
        return this._assetModelId;
    }
    get assetName() {
        return this.getStringAttribute('asset_name');
    }
    set assetName(value) {
        this._assetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get assetNameInput() {
        return this._assetName;
    }
    get assetProperties() {
        return this.interpolationForAttribute('asset_properties');
    }
    set assetProperties(value) {
        this._assetProperties = value;
    }
    resetAssetProperties() {
        this._assetProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetPropertiesInput() {
        return this._assetProperties;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            asset_hierarchies: cdktf.listMapper(iotsitewiseAssetAssetHierarchiesToTerraform)(this._assetHierarchies),
            asset_model_id: cdktf.stringToTerraform(this._assetModelId),
            asset_name: cdktf.stringToTerraform(this._assetName),
            asset_properties: cdktf.listMapper(iotsitewiseAssetAssetPropertiesToTerraform)(this._assetProperties),
            tags: cdktf.listMapper(iotsitewiseAssetTagsToTerraform)(this._tags),
        };
    }
}
exports.IotsitewiseAsset = IotsitewiseAsset;
// =================
// STATIC PROPERTIES
// =================
IotsitewiseAsset.tfResourceType = "awscc_iotsitewise_asset";
//# sourceMappingURL=data:application/json;base64,