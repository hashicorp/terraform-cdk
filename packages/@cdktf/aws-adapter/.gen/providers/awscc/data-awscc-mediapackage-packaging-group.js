"use strict";
// https://www.terraform.io/docs/providers/awscc/d/mediapackage_packaging_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccMediapackagePackagingGroup = exports.dataAwsccMediapackagePackagingGroupTagsToTerraform = exports.DataAwsccMediapackagePackagingGroupTags = exports.dataAwsccMediapackagePackagingGroupEgressAccessLogsToTerraform = exports.DataAwsccMediapackagePackagingGroupEgressAccessLogs = exports.dataAwsccMediapackagePackagingGroupAuthorizationToTerraform = exports.DataAwsccMediapackagePackagingGroupAuthorization = void 0;
const cdktf = require("cdktf");
class DataAwsccMediapackagePackagingGroupAuthorization extends cdktf.ComplexComputedList {
    // cdn_identifier_secret - computed: true, optional: false, required: false
    get cdnIdentifierSecret() {
        return this.getStringAttribute('cdn_identifier_secret');
    }
    // secrets_role_arn - computed: true, optional: false, required: false
    get secretsRoleArn() {
        return this.getStringAttribute('secrets_role_arn');
    }
}
exports.DataAwsccMediapackagePackagingGroupAuthorization = DataAwsccMediapackagePackagingGroupAuthorization;
function dataAwsccMediapackagePackagingGroupAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cdn_identifier_secret: cdktf.stringToTerraform(struct.cdnIdentifierSecret),
        secrets_role_arn: cdktf.stringToTerraform(struct.secretsRoleArn),
    };
}
exports.dataAwsccMediapackagePackagingGroupAuthorizationToTerraform = dataAwsccMediapackagePackagingGroupAuthorizationToTerraform;
class DataAwsccMediapackagePackagingGroupEgressAccessLogs extends cdktf.ComplexComputedList {
    // log_group_name - computed: true, optional: false, required: false
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
}
exports.DataAwsccMediapackagePackagingGroupEgressAccessLogs = DataAwsccMediapackagePackagingGroupEgressAccessLogs;
function dataAwsccMediapackagePackagingGroupEgressAccessLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
    };
}
exports.dataAwsccMediapackagePackagingGroupEgressAccessLogsToTerraform = dataAwsccMediapackagePackagingGroupEgressAccessLogsToTerraform;
class DataAwsccMediapackagePackagingGroupTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccMediapackagePackagingGroupTags = DataAwsccMediapackagePackagingGroupTags;
function dataAwsccMediapackagePackagingGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccMediapackagePackagingGroupTagsToTerraform = dataAwsccMediapackagePackagingGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/mediapackage_packaging_group.html awscc_mediapackage_packaging_group}
*/
class DataAwsccMediapackagePackagingGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/mediapackage_packaging_group.html awscc_mediapackage_packaging_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccMediapackagePackagingGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_packaging_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // authorization - computed: true, optional: false, required: false
    get authorization() {
        return this.interpolationForAttribute('authorization');
    }
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    // egress_access_logs - computed: true, optional: false, required: false
    get egressAccessLogs() {
        return this.interpolationForAttribute('egress_access_logs');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccMediapackagePackagingGroup = DataAwsccMediapackagePackagingGroup;
// =================
// STATIC PROPERTIES
// =================
DataAwsccMediapackagePackagingGroup.tfResourceType = "awscc_mediapackage_packaging_group";
//# sourceMappingURL=data:application/json;base64,