"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cassandra_table.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CassandraTable = exports.cassandraTableTagsToTerraform = exports.cassandraTableRegularColumnsToTerraform = exports.cassandraTablePartitionKeyColumnsToTerraform = exports.cassandraTableEncryptionSpecificationToTerraform = exports.cassandraTableClusteringKeyColumnsToTerraform = exports.cassandraTableClusteringKeyColumnsColumnToTerraform = exports.CassandraTableClusteringKeyColumnsColumn = exports.cassandraTableBillingModeToTerraform = exports.cassandraTableBillingModeProvisionedThroughputToTerraform = void 0;
const cdktf = require("cdktf");
function cassandraTableBillingModeProvisionedThroughputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_capacity_units: cdktf.numberToTerraform(struct.readCapacityUnits),
        write_capacity_units: cdktf.numberToTerraform(struct.writeCapacityUnits),
    };
}
exports.cassandraTableBillingModeProvisionedThroughputToTerraform = cassandraTableBillingModeProvisionedThroughputToTerraform;
function cassandraTableBillingModeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        provisioned_throughput: cassandraTableBillingModeProvisionedThroughputToTerraform(struct.provisionedThroughput),
    };
}
exports.cassandraTableBillingModeToTerraform = cassandraTableBillingModeToTerraform;
class CassandraTableClusteringKeyColumnsColumn extends cdktf.ComplexComputedList {
    // column_name - computed: true, optional: false, required: true
    get columnName() {
        return this.getStringAttribute('column_name');
    }
    // column_type - computed: true, optional: false, required: true
    get columnType() {
        return this.getStringAttribute('column_type');
    }
}
exports.CassandraTableClusteringKeyColumnsColumn = CassandraTableClusteringKeyColumnsColumn;
function cassandraTableClusteringKeyColumnsColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.cassandraTableClusteringKeyColumnsColumnToTerraform = cassandraTableClusteringKeyColumnsColumnToTerraform;
function cassandraTableClusteringKeyColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column: cassandraTableClusteringKeyColumnsColumnToTerraform(struct.column),
        order_by: cdktf.stringToTerraform(struct.orderBy),
    };
}
exports.cassandraTableClusteringKeyColumnsToTerraform = cassandraTableClusteringKeyColumnsToTerraform;
function cassandraTableEncryptionSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        kms_key_identifier: cdktf.stringToTerraform(struct.kmsKeyIdentifier),
    };
}
exports.cassandraTableEncryptionSpecificationToTerraform = cassandraTableEncryptionSpecificationToTerraform;
function cassandraTablePartitionKeyColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.cassandraTablePartitionKeyColumnsToTerraform = cassandraTablePartitionKeyColumnsToTerraform;
function cassandraTableRegularColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
        column_type: cdktf.stringToTerraform(struct.columnType),
    };
}
exports.cassandraTableRegularColumnsToTerraform = cassandraTableRegularColumnsToTerraform;
function cassandraTableTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cassandraTableTagsToTerraform = cassandraTableTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cassandra_table.html awscc_cassandra_table}
*/
class CassandraTable extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cassandra_table.html awscc_cassandra_table} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CassandraTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cassandra_table',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._billingMode = config.billingMode;
        this._clusteringKeyColumns = config.clusteringKeyColumns;
        this._encryptionSpecification = config.encryptionSpecification;
        this._keyspaceName = config.keyspaceName;
        this._partitionKeyColumns = config.partitionKeyColumns;
        this._pointInTimeRecoveryEnabled = config.pointInTimeRecoveryEnabled;
        this._regularColumns = config.regularColumns;
        this._tableName = config.tableName;
        this._tags = config.tags;
    }
    get billingMode() {
        return this.interpolationForAttribute('billing_mode');
    }
    set billingMode(value) {
        this._billingMode = value;
    }
    resetBillingMode() {
        this._billingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get billingModeInput() {
        return this._billingMode;
    }
    get clusteringKeyColumns() {
        return this.interpolationForAttribute('clustering_key_columns');
    }
    set clusteringKeyColumns(value) {
        this._clusteringKeyColumns = value;
    }
    resetClusteringKeyColumns() {
        this._clusteringKeyColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusteringKeyColumnsInput() {
        return this._clusteringKeyColumns;
    }
    get encryptionSpecification() {
        return this.interpolationForAttribute('encryption_specification');
    }
    set encryptionSpecification(value) {
        this._encryptionSpecification = value;
    }
    resetEncryptionSpecification() {
        this._encryptionSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionSpecificationInput() {
        return this._encryptionSpecification;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get keyspaceName() {
        return this.getStringAttribute('keyspace_name');
    }
    set keyspaceName(value) {
        this._keyspaceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyspaceNameInput() {
        return this._keyspaceName;
    }
    get partitionKeyColumns() {
        return this.interpolationForAttribute('partition_key_columns');
    }
    set partitionKeyColumns(value) {
        this._partitionKeyColumns = value;
    }
    // Temporarily expose input value. Use with caution.
    get partitionKeyColumnsInput() {
        return this._partitionKeyColumns;
    }
    get pointInTimeRecoveryEnabled() {
        return this.getBooleanAttribute('point_in_time_recovery_enabled');
    }
    set pointInTimeRecoveryEnabled(value) {
        this._pointInTimeRecoveryEnabled = value;
    }
    resetPointInTimeRecoveryEnabled() {
        this._pointInTimeRecoveryEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pointInTimeRecoveryEnabledInput() {
        return this._pointInTimeRecoveryEnabled;
    }
    get regularColumns() {
        return this.interpolationForAttribute('regular_columns');
    }
    set regularColumns(value) {
        this._regularColumns = value;
    }
    resetRegularColumns() {
        this._regularColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regularColumnsInput() {
        return this._regularColumns;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    resetTableName() {
        this._tableName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            billing_mode: cassandraTableBillingModeToTerraform(this._billingMode),
            clustering_key_columns: cdktf.listMapper(cassandraTableClusteringKeyColumnsToTerraform)(this._clusteringKeyColumns),
            encryption_specification: cassandraTableEncryptionSpecificationToTerraform(this._encryptionSpecification),
            keyspace_name: cdktf.stringToTerraform(this._keyspaceName),
            partition_key_columns: cdktf.listMapper(cassandraTablePartitionKeyColumnsToTerraform)(this._partitionKeyColumns),
            point_in_time_recovery_enabled: cdktf.booleanToTerraform(this._pointInTimeRecoveryEnabled),
            regular_columns: cdktf.listMapper(cassandraTableRegularColumnsToTerraform)(this._regularColumns),
            table_name: cdktf.stringToTerraform(this._tableName),
            tags: cdktf.listMapper(cassandraTableTagsToTerraform)(this._tags),
        };
    }
}
exports.CassandraTable = CassandraTable;
// =================
// STATIC PROPERTIES
// =================
CassandraTable.tfResourceType = "awscc_cassandra_table";
//# sourceMappingURL=data:application/json;base64,