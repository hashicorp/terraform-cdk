"use strict";
// https://www.terraform.io/docs/providers/awscc/r/kinesisfirehose_delivery_stream.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRetryOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributesToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationEndpointConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationVpcConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationRetryOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInputToTerraform = void 0;
exports.KinesisfirehoseDeliveryStream = exports.kinesisfirehoseDeliveryStreamTagsToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationRetryOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationRetryOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCopyCommandToTerraform = exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCloudwatchLoggingOptionsToTerraform = exports.kinesisfirehoseDeliveryStreamKinesisStreamSourceConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationToTerraform = exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function kinesisfirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key_arn: cdktf.stringToTerraform(struct.keyArn),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.kinesisfirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInputToTerraform = kinesisfirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInputToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameters: cdktf.listMapper(kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationRetryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_seconds: cdktf.numberToTerraform(struct.durationInSeconds),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationRetryOptionsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationRetryOptionsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationVpcConfigurationToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationVpcConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        buffering_hints: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        cluster_endpoint: cdktf.stringToTerraform(struct.clusterEndpoint),
        domain_arn: cdktf.stringToTerraform(struct.domainArn),
        index_name: cdktf.stringToTerraform(struct.indexName),
        index_rotation_period: cdktf.stringToTerraform(struct.indexRotationPeriod),
        processing_configuration: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        retry_options: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationRetryOptionsToTerraform(struct.retryOptions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        s3_configuration: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        type_name: cdktf.stringToTerraform(struct.typeName),
        vpc_configuration: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timestamp_formats: cdktf.listMapper(cdktf.stringToTerraform)(struct.timestampFormats),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        case_insensitive: cdktf.booleanToTerraform(struct.caseInsensitive),
        column_to_json_key_mappings: cdktf.hashMapper(cdktf.anyToTerraform)(struct.columnToJsonKeyMappings),
        convert_dots_in_json_keys_to_underscores: cdktf.booleanToTerraform(struct.convertDotsInJsonKeysToUnderscores),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hive_json_ser_de: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform(struct.hiveJsonSerDe),
        open_x_json_ser_de: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform(struct.openXJsonSerDe),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        deserializer: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform(struct.deserializer),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        bloom_filter_columns: cdktf.listMapper(cdktf.stringToTerraform)(struct.bloomFilterColumns),
        bloom_filter_false_positive_probability: cdktf.numberToTerraform(struct.bloomFilterFalsePositiveProbability),
        compression: cdktf.stringToTerraform(struct.compression),
        dictionary_key_threshold: cdktf.numberToTerraform(struct.dictionaryKeyThreshold),
        enable_padding: cdktf.booleanToTerraform(struct.enablePadding),
        format_version: cdktf.stringToTerraform(struct.formatVersion),
        padding_tolerance: cdktf.numberToTerraform(struct.paddingTolerance),
        row_index_stride: cdktf.numberToTerraform(struct.rowIndexStride),
        stripe_size_bytes: cdktf.numberToTerraform(struct.stripeSizeBytes),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        compression: cdktf.stringToTerraform(struct.compression),
        enable_dictionary_compression: cdktf.booleanToTerraform(struct.enableDictionaryCompression),
        max_padding_bytes: cdktf.numberToTerraform(struct.maxPaddingBytes),
        page_size_bytes: cdktf.numberToTerraform(struct.pageSizeBytes),
        writer_version: cdktf.stringToTerraform(struct.writerVersion),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        orc_ser_de: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform(struct.orcSerDe),
        parquet_ser_de: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform(struct.parquetSerDe),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        serializer: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform(struct.serializer),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        region: cdktf.stringToTerraform(struct.region),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        version_id: cdktf.stringToTerraform(struct.versionId),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        input_format_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform(struct.inputFormatConfiguration),
        output_format_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform(struct.outputFormatConfiguration),
        schema_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform(struct.schemaConfiguration),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameters: cdktf.listMapper(kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        data_format_conversion_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationDataFormatConversionConfigurationToTerraform(struct.dataFormatConversionConfiguration),
        encryption_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        processing_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationS3BackupConfigurationToTerraform(struct.s3BackupConfiguration),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
    };
}
exports.kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationEndpointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_key: cdktf.stringToTerraform(struct.accessKey),
        name: cdktf.stringToTerraform(struct.name),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationEndpointConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationEndpointConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameters: cdktf.listMapper(kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        attribute_value: cdktf.stringToTerraform(struct.attributeValue),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributesToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributesToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        common_attributes: cdktf.listMapper(kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributesToTerraform)(struct.commonAttributes),
        content_encoding: cdktf.stringToTerraform(struct.contentEncoding),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRetryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_seconds: cdktf.numberToTerraform(struct.durationInSeconds),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRetryOptionsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRetryOptionsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        buffering_hints: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        endpoint_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationEndpointConfigurationToTerraform(struct.endpointConfiguration),
        processing_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        request_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRequestConfigurationToTerraform(struct.requestConfiguration),
        retry_options: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationRetryOptionsToTerraform(struct.retryOptions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        s3_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamKinesisStreamSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kinesis_stream_arn: cdktf.stringToTerraform(struct.kinesisStreamArn),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamKinesisStreamSourceConfigurationToTerraform = kinesisfirehoseDeliveryStreamKinesisStreamSourceConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCopyCommandToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        copy_options: cdktf.stringToTerraform(struct.copyOptions),
        data_table_columns: cdktf.stringToTerraform(struct.dataTableColumns),
        data_table_name: cdktf.stringToTerraform(struct.dataTableName),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCopyCommandToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCopyCommandToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameters: cdktf.listMapper(kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationRetryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_seconds: cdktf.numberToTerraform(struct.durationInSeconds),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationRetryOptionsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationRetryOptionsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        cluster_jdbcurl: cdktf.stringToTerraform(struct.clusterJdbcurl),
        copy_command: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationCopyCommandToTerraform(struct.copyCommand),
        password: cdktf.stringToTerraform(struct.password),
        processing_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        retry_options: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationRetryOptionsToTerraform(struct.retryOptions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3BackupConfigurationToTerraform(struct.s3BackupConfiguration),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        s3_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamS3DestinationConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamS3DestinationConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamS3DestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamS3DestinationConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamS3DestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamS3DestinationConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamS3DestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamS3DestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameters: cdktf.listMapper(kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationRetryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_seconds: cdktf.numberToTerraform(struct.durationInSeconds),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationRetryOptionsToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationRetryOptionsToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval_in_seconds: cdktf.numberToTerraform(struct.intervalInSeconds),
        size_in_m_bs: cdktf.numberToTerraform(struct.sizeInMBs),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationBufferingHintsToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationBufferingHintsToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        awskms_key_arn: cdktf.stringToTerraform(struct.awskmsKeyArn),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
        no_encryption_config: cdktf.stringToTerraform(struct.noEncryptionConfig),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_hints: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationBufferingHintsToTerraform(struct.bufferingHints),
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        encryption_configuration: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logging_options: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        hec_acknowledgment_timeout_in_seconds: cdktf.numberToTerraform(struct.hecAcknowledgmentTimeoutInSeconds),
        hec_endpoint: cdktf.stringToTerraform(struct.hecEndpoint),
        hec_endpoint_type: cdktf.stringToTerraform(struct.hecEndpointType),
        hec_token: cdktf.stringToTerraform(struct.hecToken),
        processing_configuration: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        retry_options: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationRetryOptionsToTerraform(struct.retryOptions),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        s3_configuration: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationToTerraform = kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationToTerraform;
function kinesisfirehoseDeliveryStreamTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kinesisfirehoseDeliveryStreamTagsToTerraform = kinesisfirehoseDeliveryStreamTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/kinesisfirehose_delivery_stream.html awscc_kinesisfirehose_delivery_stream}
*/
class KinesisfirehoseDeliveryStream extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/kinesisfirehose_delivery_stream.html awscc_kinesisfirehose_delivery_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KinesisfirehoseDeliveryStreamConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_kinesisfirehose_delivery_stream',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deliveryStreamEncryptionConfigurationInput = config.deliveryStreamEncryptionConfigurationInput;
        this._deliveryStreamName = config.deliveryStreamName;
        this._deliveryStreamType = config.deliveryStreamType;
        this._elasticsearchDestinationConfiguration = config.elasticsearchDestinationConfiguration;
        this._extendedS3DestinationConfiguration = config.extendedS3DestinationConfiguration;
        this._httpEndpointDestinationConfiguration = config.httpEndpointDestinationConfiguration;
        this._kinesisStreamSourceConfiguration = config.kinesisStreamSourceConfiguration;
        this._redshiftDestinationConfiguration = config.redshiftDestinationConfiguration;
        this._s3DestinationConfiguration = config.s3DestinationConfiguration;
        this._splunkDestinationConfiguration = config.splunkDestinationConfiguration;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deliveryStreamEncryptionConfigurationInput() {
        return this.interpolationForAttribute('delivery_stream_encryption_configuration_input');
    }
    set deliveryStreamEncryptionConfigurationInput(value) {
        this._deliveryStreamEncryptionConfigurationInput = value;
    }
    resetDeliveryStreamEncryptionConfigurationInput() {
        this._deliveryStreamEncryptionConfigurationInput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryStreamEncryptionConfigurationInputInput() {
        return this._deliveryStreamEncryptionConfigurationInput;
    }
    get deliveryStreamName() {
        return this.getStringAttribute('delivery_stream_name');
    }
    set deliveryStreamName(value) {
        this._deliveryStreamName = value;
    }
    resetDeliveryStreamName() {
        this._deliveryStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryStreamNameInput() {
        return this._deliveryStreamName;
    }
    get deliveryStreamType() {
        return this.getStringAttribute('delivery_stream_type');
    }
    set deliveryStreamType(value) {
        this._deliveryStreamType = value;
    }
    resetDeliveryStreamType() {
        this._deliveryStreamType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryStreamTypeInput() {
        return this._deliveryStreamType;
    }
    get elasticsearchDestinationConfiguration() {
        return this.interpolationForAttribute('elasticsearch_destination_configuration');
    }
    set elasticsearchDestinationConfiguration(value) {
        this._elasticsearchDestinationConfiguration = value;
    }
    resetElasticsearchDestinationConfiguration() {
        this._elasticsearchDestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticsearchDestinationConfigurationInput() {
        return this._elasticsearchDestinationConfiguration;
    }
    get extendedS3DestinationConfiguration() {
        return this.interpolationForAttribute('extended_s3_destination_configuration');
    }
    set extendedS3DestinationConfiguration(value) {
        this._extendedS3DestinationConfiguration = value;
    }
    resetExtendedS3DestinationConfiguration() {
        this._extendedS3DestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extendedS3DestinationConfigurationInput() {
        return this._extendedS3DestinationConfiguration;
    }
    get httpEndpointDestinationConfiguration() {
        return this.interpolationForAttribute('http_endpoint_destination_configuration');
    }
    set httpEndpointDestinationConfiguration(value) {
        this._httpEndpointDestinationConfiguration = value;
    }
    resetHttpEndpointDestinationConfiguration() {
        this._httpEndpointDestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointDestinationConfigurationInput() {
        return this._httpEndpointDestinationConfiguration;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kinesisStreamSourceConfiguration() {
        return this.interpolationForAttribute('kinesis_stream_source_configuration');
    }
    set kinesisStreamSourceConfiguration(value) {
        this._kinesisStreamSourceConfiguration = value;
    }
    resetKinesisStreamSourceConfiguration() {
        this._kinesisStreamSourceConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisStreamSourceConfigurationInput() {
        return this._kinesisStreamSourceConfiguration;
    }
    get redshiftDestinationConfiguration() {
        return this.interpolationForAttribute('redshift_destination_configuration');
    }
    set redshiftDestinationConfiguration(value) {
        this._redshiftDestinationConfiguration = value;
    }
    resetRedshiftDestinationConfiguration() {
        this._redshiftDestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftDestinationConfigurationInput() {
        return this._redshiftDestinationConfiguration;
    }
    get s3DestinationConfiguration() {
        return this.interpolationForAttribute('s3_destination_configuration');
    }
    set s3DestinationConfiguration(value) {
        this._s3DestinationConfiguration = value;
    }
    resetS3DestinationConfiguration() {
        this._s3DestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3DestinationConfigurationInput() {
        return this._s3DestinationConfiguration;
    }
    get splunkDestinationConfiguration() {
        return this.interpolationForAttribute('splunk_destination_configuration');
    }
    set splunkDestinationConfiguration(value) {
        this._splunkDestinationConfiguration = value;
    }
    resetSplunkDestinationConfiguration() {
        this._splunkDestinationConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get splunkDestinationConfigurationInput() {
        return this._splunkDestinationConfiguration;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            delivery_stream_encryption_configuration_input: kinesisfirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInputToTerraform(this._deliveryStreamEncryptionConfigurationInput),
            delivery_stream_name: cdktf.stringToTerraform(this._deliveryStreamName),
            delivery_stream_type: cdktf.stringToTerraform(this._deliveryStreamType),
            elasticsearch_destination_configuration: kinesisfirehoseDeliveryStreamElasticsearchDestinationConfigurationToTerraform(this._elasticsearchDestinationConfiguration),
            extended_s3_destination_configuration: kinesisfirehoseDeliveryStreamExtendedS3DestinationConfigurationToTerraform(this._extendedS3DestinationConfiguration),
            http_endpoint_destination_configuration: kinesisfirehoseDeliveryStreamHttpEndpointDestinationConfigurationToTerraform(this._httpEndpointDestinationConfiguration),
            kinesis_stream_source_configuration: kinesisfirehoseDeliveryStreamKinesisStreamSourceConfigurationToTerraform(this._kinesisStreamSourceConfiguration),
            redshift_destination_configuration: kinesisfirehoseDeliveryStreamRedshiftDestinationConfigurationToTerraform(this._redshiftDestinationConfiguration),
            s3_destination_configuration: kinesisfirehoseDeliveryStreamS3DestinationConfigurationToTerraform(this._s3DestinationConfiguration),
            splunk_destination_configuration: kinesisfirehoseDeliveryStreamSplunkDestinationConfigurationToTerraform(this._splunkDestinationConfiguration),
            tags: cdktf.listMapper(kinesisfirehoseDeliveryStreamTagsToTerraform)(this._tags),
        };
    }
}
exports.KinesisfirehoseDeliveryStream = KinesisfirehoseDeliveryStream;
// =================
// STATIC PROPERTIES
// =================
KinesisfirehoseDeliveryStream.tfResourceType = "awscc_kinesisfirehose_delivery_stream";
//# sourceMappingURL=data:application/json;base64,