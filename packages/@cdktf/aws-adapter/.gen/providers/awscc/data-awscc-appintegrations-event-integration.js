"use strict";
// https://www.terraform.io/docs/providers/awscc/d/appintegrations_event_integration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccAppintegrationsEventIntegration = exports.dataAwsccAppintegrationsEventIntegrationTagsToTerraform = exports.DataAwsccAppintegrationsEventIntegrationTags = exports.dataAwsccAppintegrationsEventIntegrationEventFilterToTerraform = exports.DataAwsccAppintegrationsEventIntegrationEventFilter = exports.dataAwsccAppintegrationsEventIntegrationAssociationsToTerraform = exports.DataAwsccAppintegrationsEventIntegrationAssociations = exports.dataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform = exports.DataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadata = void 0;
const cdktf = require("cdktf");
class DataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadata extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadata = DataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadata;
function dataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform = dataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform;
class DataAwsccAppintegrationsEventIntegrationAssociations extends cdktf.ComplexComputedList {
    // client_association_metadata - computed: true, optional: false, required: false
    get clientAssociationMetadata() {
        return this.interpolationForAttribute('client_association_metadata');
    }
    // client_id - computed: true, optional: false, required: false
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    // event_bridge_rule_name - computed: true, optional: false, required: false
    get eventBridgeRuleName() {
        return this.getStringAttribute('event_bridge_rule_name');
    }
    // event_integration_association_arn - computed: true, optional: false, required: false
    get eventIntegrationAssociationArn() {
        return this.getStringAttribute('event_integration_association_arn');
    }
    // event_integration_association_id - computed: true, optional: false, required: false
    get eventIntegrationAssociationId() {
        return this.getStringAttribute('event_integration_association_id');
    }
}
exports.DataAwsccAppintegrationsEventIntegrationAssociations = DataAwsccAppintegrationsEventIntegrationAssociations;
function dataAwsccAppintegrationsEventIntegrationAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_association_metadata: cdktf.listMapper(dataAwsccAppintegrationsEventIntegrationAssociationsClientAssociationMetadataToTerraform)(struct.clientAssociationMetadata),
        client_id: cdktf.stringToTerraform(struct.clientId),
        event_bridge_rule_name: cdktf.stringToTerraform(struct.eventBridgeRuleName),
        event_integration_association_arn: cdktf.stringToTerraform(struct.eventIntegrationAssociationArn),
        event_integration_association_id: cdktf.stringToTerraform(struct.eventIntegrationAssociationId),
    };
}
exports.dataAwsccAppintegrationsEventIntegrationAssociationsToTerraform = dataAwsccAppintegrationsEventIntegrationAssociationsToTerraform;
class DataAwsccAppintegrationsEventIntegrationEventFilter extends cdktf.ComplexComputedList {
    // source - computed: true, optional: false, required: false
    get source() {
        return this.getStringAttribute('source');
    }
}
exports.DataAwsccAppintegrationsEventIntegrationEventFilter = DataAwsccAppintegrationsEventIntegrationEventFilter;
function dataAwsccAppintegrationsEventIntegrationEventFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
    };
}
exports.dataAwsccAppintegrationsEventIntegrationEventFilterToTerraform = dataAwsccAppintegrationsEventIntegrationEventFilterToTerraform;
class DataAwsccAppintegrationsEventIntegrationTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccAppintegrationsEventIntegrationTags = DataAwsccAppintegrationsEventIntegrationTags;
function dataAwsccAppintegrationsEventIntegrationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccAppintegrationsEventIntegrationTagsToTerraform = dataAwsccAppintegrationsEventIntegrationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/appintegrations_event_integration.html awscc_appintegrations_event_integration}
*/
class DataAwsccAppintegrationsEventIntegration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/appintegrations_event_integration.html awscc_appintegrations_event_integration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccAppintegrationsEventIntegrationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_appintegrations_event_integration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // associations - computed: true, optional: false, required: false
    get associations() {
        return this.interpolationForAttribute('associations');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // event_bridge_bus - computed: true, optional: false, required: false
    get eventBridgeBus() {
        return this.getStringAttribute('event_bridge_bus');
    }
    // event_filter - computed: true, optional: false, required: false
    get eventFilter() {
        return this.interpolationForAttribute('event_filter');
    }
    // event_integration_arn - computed: true, optional: false, required: false
    get eventIntegrationArn() {
        return this.getStringAttribute('event_integration_arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccAppintegrationsEventIntegration = DataAwsccAppintegrationsEventIntegration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccAppintegrationsEventIntegration.tfResourceType = "awscc_appintegrations_event_integration";
//# sourceMappingURL=data:application/json;base64,