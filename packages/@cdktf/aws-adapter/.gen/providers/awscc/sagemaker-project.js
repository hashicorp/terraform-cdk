"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_project.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerProject = exports.sagemakerProjectTagsToTerraform = exports.sagemakerProjectServiceCatalogProvisioningDetailsToTerraform = exports.sagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform = exports.sagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform = exports.SagemakerProjectServiceCatalogProvisionedProductDetails = void 0;
const cdktf = require("cdktf");
class SagemakerProjectServiceCatalogProvisionedProductDetails extends cdktf.ComplexComputedList {
    get provisionedProductId() {
        return this.getStringAttribute('provisioned_product_id');
    }
    set provisionedProductId(value) {
        this._provisionedProductId = value;
    }
    resetProvisionedProductId() {
        this._provisionedProductId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedProductIdInput() {
        return this._provisionedProductId;
    }
    get provisionedProductStatusMessage() {
        return this.getStringAttribute('provisioned_product_status_message');
    }
    set provisionedProductStatusMessage(value) {
        this._provisionedProductStatusMessage = value;
    }
    resetProvisionedProductStatusMessage() {
        this._provisionedProductStatusMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedProductStatusMessageInput() {
        return this._provisionedProductStatusMessage;
    }
}
exports.SagemakerProjectServiceCatalogProvisionedProductDetails = SagemakerProjectServiceCatalogProvisionedProductDetails;
function sagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        provisioned_product_id: cdktf.stringToTerraform(struct.provisionedProductId),
        provisioned_product_status_message: cdktf.stringToTerraform(struct.provisionedProductStatusMessage),
    };
}
exports.sagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform = sagemakerProjectServiceCatalogProvisionedProductDetailsToTerraform;
function sagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform = sagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform;
function sagemakerProjectServiceCatalogProvisioningDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        path_id: cdktf.stringToTerraform(struct.pathId),
        product_id: cdktf.stringToTerraform(struct.productId),
        provisioning_artifact_id: cdktf.stringToTerraform(struct.provisioningArtifactId),
        provisioning_parameters: cdktf.listMapper(sagemakerProjectServiceCatalogProvisioningDetailsProvisioningParametersToTerraform)(struct.provisioningParameters),
    };
}
exports.sagemakerProjectServiceCatalogProvisioningDetailsToTerraform = sagemakerProjectServiceCatalogProvisioningDetailsToTerraform;
function sagemakerProjectTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerProjectTagsToTerraform = sagemakerProjectTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_project.html awscc_sagemaker_project}
*/
class SagemakerProject extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_project.html awscc_sagemaker_project} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerProjectConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_project',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._projectDescription = config.projectDescription;
        this._projectName = config.projectName;
        this._serviceCatalogProvisioningDetails = config.serviceCatalogProvisioningDetails;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // project_arn - computed: true, optional: false, required: false
    get projectArn() {
        return this.getStringAttribute('project_arn');
    }
    get projectDescription() {
        return this.getStringAttribute('project_description');
    }
    set projectDescription(value) {
        this._projectDescription = value;
    }
    resetProjectDescription() {
        this._projectDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectDescriptionInput() {
        return this._projectDescription;
    }
    // project_id - computed: true, optional: false, required: false
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    get projectName() {
        return this.getStringAttribute('project_name');
    }
    set projectName(value) {
        this._projectName = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectNameInput() {
        return this._projectName;
    }
    // project_status - computed: true, optional: false, required: false
    get projectStatus() {
        return this.getStringAttribute('project_status');
    }
    // service_catalog_provisioned_product_details - computed: true, optional: false, required: false
    get serviceCatalogProvisionedProductDetails() {
        return this.interpolationForAttribute('service_catalog_provisioned_product_details');
    }
    get serviceCatalogProvisioningDetails() {
        return this.interpolationForAttribute('service_catalog_provisioning_details');
    }
    set serviceCatalogProvisioningDetails(value) {
        this._serviceCatalogProvisioningDetails = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceCatalogProvisioningDetailsInput() {
        return this._serviceCatalogProvisioningDetails;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            project_description: cdktf.stringToTerraform(this._projectDescription),
            project_name: cdktf.stringToTerraform(this._projectName),
            service_catalog_provisioning_details: sagemakerProjectServiceCatalogProvisioningDetailsToTerraform(this._serviceCatalogProvisioningDetails),
            tags: cdktf.listMapper(sagemakerProjectTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerProject = SagemakerProject;
// =================
// STATIC PROPERTIES
// =================
SagemakerProject.tfResourceType = "awscc_sagemaker_project";
//# sourceMappingURL=data:application/json;base64,