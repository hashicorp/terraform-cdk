"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_entitlement.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaconnectFlowEntitlement = exports.mediaconnectFlowEntitlementEncryptionToTerraform = void 0;
const cdktf = require("cdktf");
function mediaconnectFlowEntitlementEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        device_id: cdktf.stringToTerraform(struct.deviceId),
        key_type: cdktf.stringToTerraform(struct.keyType),
        region: cdktf.stringToTerraform(struct.region),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediaconnectFlowEntitlementEncryptionToTerraform = mediaconnectFlowEntitlementEncryptionToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_entitlement.html awscc_mediaconnect_flow_entitlement}
*/
class MediaconnectFlowEntitlement extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow_entitlement.html awscc_mediaconnect_flow_entitlement} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediaconnectFlowEntitlementConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediaconnect_flow_entitlement',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._dataTransferSubscriberFeePercent = config.dataTransferSubscriberFeePercent;
        this._description = config.description;
        this._encryption = config.encryption;
        this._entitlementStatus = config.entitlementStatus;
        this._flowArn = config.flowArn;
        this._name = config.name;
        this._subscribers = config.subscribers;
    }
    get dataTransferSubscriberFeePercent() {
        return this.getNumberAttribute('data_transfer_subscriber_fee_percent');
    }
    set dataTransferSubscriberFeePercent(value) {
        this._dataTransferSubscriberFeePercent = value;
    }
    resetDataTransferSubscriberFeePercent() {
        this._dataTransferSubscriberFeePercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTransferSubscriberFeePercentInput() {
        return this._dataTransferSubscriberFeePercent;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get encryption() {
        return this.interpolationForAttribute('encryption');
    }
    set encryption(value) {
        this._encryption = value;
    }
    resetEncryption() {
        this._encryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionInput() {
        return this._encryption;
    }
    // entitlement_arn - computed: true, optional: false, required: false
    get entitlementArn() {
        return this.getStringAttribute('entitlement_arn');
    }
    get entitlementStatus() {
        return this.getStringAttribute('entitlement_status');
    }
    set entitlementStatus(value) {
        this._entitlementStatus = value;
    }
    resetEntitlementStatus() {
        this._entitlementStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entitlementStatusInput() {
        return this._entitlementStatus;
    }
    get flowArn() {
        return this.getStringAttribute('flow_arn');
    }
    set flowArn(value) {
        this._flowArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get flowArnInput() {
        return this._flowArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get subscribers() {
        return this.getListAttribute('subscribers');
    }
    set subscribers(value) {
        this._subscribers = value;
    }
    // Temporarily expose input value. Use with caution.
    get subscribersInput() {
        return this._subscribers;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            data_transfer_subscriber_fee_percent: cdktf.numberToTerraform(this._dataTransferSubscriberFeePercent),
            description: cdktf.stringToTerraform(this._description),
            encryption: mediaconnectFlowEntitlementEncryptionToTerraform(this._encryption),
            entitlement_status: cdktf.stringToTerraform(this._entitlementStatus),
            flow_arn: cdktf.stringToTerraform(this._flowArn),
            name: cdktf.stringToTerraform(this._name),
            subscribers: cdktf.listMapper(cdktf.stringToTerraform)(this._subscribers),
        };
    }
}
exports.MediaconnectFlowEntitlement = MediaconnectFlowEntitlement;
// =================
// STATIC PROPERTIES
// =================
MediaconnectFlowEntitlement.tfResourceType = "awscc_mediaconnect_flow_entitlement";
//# sourceMappingURL=data:application/json;base64,