"use strict";
// https://www.terraform.io/docs/providers/awscc/r/datasync_location_fsx_windows.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasyncLocationFsxWindows = exports.datasyncLocationFsxWindowsTagsToTerraform = void 0;
const cdktf = require("cdktf");
function datasyncLocationFsxWindowsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.datasyncLocationFsxWindowsTagsToTerraform = datasyncLocationFsxWindowsTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_fsx_windows.html awscc_datasync_location_fsx_windows}
*/
class DatasyncLocationFsxWindows extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_fsx_windows.html awscc_datasync_location_fsx_windows} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatasyncLocationFsxWindowsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_datasync_location_fsx_windows',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._domain = config.domain;
        this._fsxFilesystemArn = config.fsxFilesystemArn;
        this._password = config.password;
        this._securityGroupArns = config.securityGroupArns;
        this._subdirectory = config.subdirectory;
        this._tags = config.tags;
        this._user = config.user;
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    resetDomain() {
        this._domain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    get fsxFilesystemArn() {
        return this.getStringAttribute('fsx_filesystem_arn');
    }
    set fsxFilesystemArn(value) {
        this._fsxFilesystemArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get fsxFilesystemArnInput() {
        return this._fsxFilesystemArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // location_arn - computed: true, optional: false, required: false
    get locationArn() {
        return this.getStringAttribute('location_arn');
    }
    // location_uri - computed: true, optional: false, required: false
    get locationUri() {
        return this.getStringAttribute('location_uri');
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get securityGroupArns() {
        return this.getListAttribute('security_group_arns');
    }
    set securityGroupArns(value) {
        this._securityGroupArns = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupArnsInput() {
        return this._securityGroupArns;
    }
    get subdirectory() {
        return this.getStringAttribute('subdirectory');
    }
    set subdirectory(value) {
        this._subdirectory = value;
    }
    resetSubdirectory() {
        this._subdirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subdirectoryInput() {
        return this._subdirectory;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain: cdktf.stringToTerraform(this._domain),
            fsx_filesystem_arn: cdktf.stringToTerraform(this._fsxFilesystemArn),
            password: cdktf.stringToTerraform(this._password),
            security_group_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._securityGroupArns),
            subdirectory: cdktf.stringToTerraform(this._subdirectory),
            tags: cdktf.listMapper(datasyncLocationFsxWindowsTagsToTerraform)(this._tags),
            user: cdktf.stringToTerraform(this._user),
        };
    }
}
exports.DatasyncLocationFsxWindows = DatasyncLocationFsxWindows;
// =================
// STATIC PROPERTIES
// =================
DatasyncLocationFsxWindows.tfResourceType = "awscc_datasync_location_fsx_windows";
//# sourceMappingURL=data:application/json;base64,