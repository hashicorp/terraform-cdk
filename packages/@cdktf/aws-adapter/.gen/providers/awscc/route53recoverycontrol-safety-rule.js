"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_safety_rule.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53RecoverycontrolSafetyRule = exports.route53RecoverycontrolSafetyRuleRuleConfigToTerraform = exports.route53RecoverycontrolSafetyRuleGatingRuleToTerraform = exports.route53RecoverycontrolSafetyRuleAssertionRuleToTerraform = void 0;
const cdktf = require("cdktf");
function route53RecoverycontrolSafetyRuleAssertionRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asserted_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.assertedControls),
        wait_period_ms: cdktf.numberToTerraform(struct.waitPeriodMs),
    };
}
exports.route53RecoverycontrolSafetyRuleAssertionRuleToTerraform = route53RecoverycontrolSafetyRuleAssertionRuleToTerraform;
function route53RecoverycontrolSafetyRuleGatingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        gating_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.gatingControls),
        target_controls: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetControls),
        wait_period_ms: cdktf.numberToTerraform(struct.waitPeriodMs),
    };
}
exports.route53RecoverycontrolSafetyRuleGatingRuleToTerraform = route53RecoverycontrolSafetyRuleGatingRuleToTerraform;
function route53RecoverycontrolSafetyRuleRuleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        inverted: cdktf.booleanToTerraform(struct.inverted),
        threshold: cdktf.numberToTerraform(struct.threshold),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.route53RecoverycontrolSafetyRuleRuleConfigToTerraform = route53RecoverycontrolSafetyRuleRuleConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_safety_rule.html awscc_route53recoverycontrol_safety_rule}
*/
class Route53RecoverycontrolSafetyRule extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53recoverycontrol_safety_rule.html awscc_route53recoverycontrol_safety_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53RecoverycontrolSafetyRuleConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoverycontrol_safety_rule',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._assertionRule = config.assertionRule;
        this._controlPanelArn = config.controlPanelArn;
        this._gatingRule = config.gatingRule;
        this._name = config.name;
        this._ruleConfig = config.ruleConfig;
    }
    get assertionRule() {
        return this.interpolationForAttribute('assertion_rule');
    }
    set assertionRule(value) {
        this._assertionRule = value;
    }
    resetAssertionRule() {
        this._assertionRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assertionRuleInput() {
        return this._assertionRule;
    }
    get controlPanelArn() {
        return this.getStringAttribute('control_panel_arn');
    }
    set controlPanelArn(value) {
        this._controlPanelArn = value;
    }
    resetControlPanelArn() {
        this._controlPanelArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlPanelArnInput() {
        return this._controlPanelArn;
    }
    get gatingRule() {
        return this.interpolationForAttribute('gating_rule');
    }
    set gatingRule(value) {
        this._gatingRule = value;
    }
    resetGatingRule() {
        this._gatingRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gatingRuleInput() {
        return this._gatingRule;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get ruleConfig() {
        return this.interpolationForAttribute('rule_config');
    }
    set ruleConfig(value) {
        this._ruleConfig = value;
    }
    resetRuleConfig() {
        this._ruleConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleConfigInput() {
        return this._ruleConfig;
    }
    // safety_rule_arn - computed: true, optional: false, required: false
    get safetyRuleArn() {
        return this.getStringAttribute('safety_rule_arn');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            assertion_rule: route53RecoverycontrolSafetyRuleAssertionRuleToTerraform(this._assertionRule),
            control_panel_arn: cdktf.stringToTerraform(this._controlPanelArn),
            gating_rule: route53RecoverycontrolSafetyRuleGatingRuleToTerraform(this._gatingRule),
            name: cdktf.stringToTerraform(this._name),
            rule_config: route53RecoverycontrolSafetyRuleRuleConfigToTerraform(this._ruleConfig),
        };
    }
}
exports.Route53RecoverycontrolSafetyRule = Route53RecoverycontrolSafetyRule;
// =================
// STATIC PROPERTIES
// =================
Route53RecoverycontrolSafetyRule.tfResourceType = "awscc_route53recoverycontrol_safety_rule";
//# sourceMappingURL=data:application/json;base64,