"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iam_saml_provider.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IamSamlProvider = exports.iamSamlProviderTagsToTerraform = void 0;
const cdktf = require("cdktf");
function iamSamlProviderTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iamSamlProviderTagsToTerraform = iamSamlProviderTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iam_saml_provider.html awscc_iam_saml_provider}
*/
class IamSamlProvider extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iam_saml_provider.html awscc_iam_saml_provider} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IamSamlProviderConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iam_saml_provider',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._samlMetadataDocument = config.samlMetadataDocument;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get samlMetadataDocument() {
        return this.getStringAttribute('saml_metadata_document');
    }
    set samlMetadataDocument(value) {
        this._samlMetadataDocument = value;
    }
    // Temporarily expose input value. Use with caution.
    get samlMetadataDocumentInput() {
        return this._samlMetadataDocument;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            saml_metadata_document: cdktf.stringToTerraform(this._samlMetadataDocument),
            tags: cdktf.listMapper(iamSamlProviderTagsToTerraform)(this._tags),
        };
    }
}
exports.IamSamlProvider = IamSamlProvider;
// =================
// STATIC PROPERTIES
// =================
IamSamlProvider.tfResourceType = "awscc_iam_saml_provider";
//# sourceMappingURL=data:application/json;base64,