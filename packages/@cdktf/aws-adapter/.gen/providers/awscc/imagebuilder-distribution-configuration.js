"use strict";
// https://www.terraform.io/docs/providers/awscc/r/imagebuilder_distribution_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderDistributionConfiguration = exports.imagebuilderDistributionConfigurationDistributionsToTerraform = exports.imagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform = exports.imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform = exports.imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform = exports.imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform = exports.imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        user_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.userGroups),
        user_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.userIds),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform = imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform;
function imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ami_tags: cdktf.hashMapper(cdktf.anyToTerraform)(struct.amiTags),
        description: cdktf.stringToTerraform(struct.description),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        launch_permission_configuration: imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationLaunchPermissionConfigurationToTerraform(struct.launchPermissionConfiguration),
        name: cdktf.stringToTerraform(struct.name),
        target_account_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetAccountIds),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform = imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform;
function imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        repository_name: cdktf.stringToTerraform(struct.repositoryName),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform = imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform;
function imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_tags: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerTags),
        description: cdktf.stringToTerraform(struct.description),
        target_repository: imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationTargetRepositoryToTerraform(struct.targetRepository),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform = imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform;
function imagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        set_default_version: cdktf.booleanToTerraform(struct.setDefaultVersion),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform = imagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform;
function imagebuilderDistributionConfigurationDistributionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ami_distribution_configuration: imagebuilderDistributionConfigurationDistributionsAmiDistributionConfigurationToTerraform(struct.amiDistributionConfiguration),
        container_distribution_configuration: imagebuilderDistributionConfigurationDistributionsContainerDistributionConfigurationToTerraform(struct.containerDistributionConfiguration),
        launch_template_configurations: cdktf.listMapper(imagebuilderDistributionConfigurationDistributionsLaunchTemplateConfigurationsToTerraform)(struct.launchTemplateConfigurations),
        license_configuration_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.licenseConfigurationArns),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.imagebuilderDistributionConfigurationDistributionsToTerraform = imagebuilderDistributionConfigurationDistributionsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_distribution_configuration.html awscc_imagebuilder_distribution_configuration}
*/
class ImagebuilderDistributionConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_distribution_configuration.html awscc_imagebuilder_distribution_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderDistributionConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_distribution_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._distributions = config.distributions;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get distributions() {
        return this.interpolationForAttribute('distributions');
    }
    set distributions(value) {
        this._distributions = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionsInput() {
        return this._distributions;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            distributions: cdktf.listMapper(imagebuilderDistributionConfigurationDistributionsToTerraform)(this._distributions),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.ImagebuilderDistributionConfiguration = ImagebuilderDistributionConfiguration;
// =================
// STATIC PROPERTIES
// =================
ImagebuilderDistributionConfiguration.tfResourceType = "awscc_imagebuilder_distribution_configuration";
//# sourceMappingURL=data:application/json;base64,