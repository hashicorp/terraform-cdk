"use strict";
// https://www.terraform.io/docs/providers/awscc/d/ssm_association.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSsmAssociation = exports.dataAwsccSsmAssociationTargetsToTerraform = exports.DataAwsccSsmAssociationTargets = exports.dataAwsccSsmAssociationOutputLocationToTerraform = exports.DataAwsccSsmAssociationOutputLocation = exports.dataAwsccSsmAssociationOutputLocationS3LocationToTerraform = exports.DataAwsccSsmAssociationOutputLocationS3Location = void 0;
const cdktf = require("cdktf");
class DataAwsccSsmAssociationOutputLocationS3Location extends cdktf.ComplexComputedList {
    // output_s3_bucket_name - computed: true, optional: false, required: false
    get outputS3BucketName() {
        return this.getStringAttribute('output_s3_bucket_name');
    }
    // output_s3_key_prefix - computed: true, optional: false, required: false
    get outputS3KeyPrefix() {
        return this.getStringAttribute('output_s3_key_prefix');
    }
    // output_s3_region - computed: true, optional: false, required: false
    get outputS3Region() {
        return this.getStringAttribute('output_s3_region');
    }
}
exports.DataAwsccSsmAssociationOutputLocationS3Location = DataAwsccSsmAssociationOutputLocationS3Location;
function dataAwsccSsmAssociationOutputLocationS3LocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        output_s3_bucket_name: cdktf.stringToTerraform(struct.outputS3BucketName),
        output_s3_key_prefix: cdktf.stringToTerraform(struct.outputS3KeyPrefix),
        output_s3_region: cdktf.stringToTerraform(struct.outputS3Region),
    };
}
exports.dataAwsccSsmAssociationOutputLocationS3LocationToTerraform = dataAwsccSsmAssociationOutputLocationS3LocationToTerraform;
class DataAwsccSsmAssociationOutputLocation extends cdktf.ComplexComputedList {
    // s3_location - computed: true, optional: false, required: false
    get s3Location() {
        return this.interpolationForAttribute('s3_location');
    }
}
exports.DataAwsccSsmAssociationOutputLocation = DataAwsccSsmAssociationOutputLocation;
function dataAwsccSsmAssociationOutputLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_location: dataAwsccSsmAssociationOutputLocationS3LocationToTerraform(struct.s3Location),
    };
}
exports.dataAwsccSsmAssociationOutputLocationToTerraform = dataAwsccSsmAssociationOutputLocationToTerraform;
class DataAwsccSsmAssociationTargets extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // values - computed: true, optional: false, required: false
    get values() {
        return this.getListAttribute('values');
    }
}
exports.DataAwsccSsmAssociationTargets = DataAwsccSsmAssociationTargets;
function dataAwsccSsmAssociationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.dataAwsccSsmAssociationTargetsToTerraform = dataAwsccSsmAssociationTargetsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/ssm_association.html awscc_ssm_association}
*/
class DataAwsccSsmAssociation extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/ssm_association.html awscc_ssm_association} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSsmAssociationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssm_association',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // apply_only_at_cron_interval - computed: true, optional: false, required: false
    get applyOnlyAtCronInterval() {
        return this.getBooleanAttribute('apply_only_at_cron_interval');
    }
    // association_id - computed: true, optional: false, required: false
    get associationId() {
        return this.getStringAttribute('association_id');
    }
    // association_name - computed: true, optional: false, required: false
    get associationName() {
        return this.getStringAttribute('association_name');
    }
    // automation_target_parameter_name - computed: true, optional: false, required: false
    get automationTargetParameterName() {
        return this.getStringAttribute('automation_target_parameter_name');
    }
    // calendar_names - computed: true, optional: false, required: false
    get calendarNames() {
        return this.getListAttribute('calendar_names');
    }
    // compliance_severity - computed: true, optional: false, required: false
    get complianceSeverity() {
        return this.getStringAttribute('compliance_severity');
    }
    // document_version - computed: true, optional: false, required: false
    get documentVersion() {
        return this.getStringAttribute('document_version');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_id - computed: true, optional: false, required: false
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    // max_concurrency - computed: true, optional: false, required: false
    get maxConcurrency() {
        return this.getStringAttribute('max_concurrency');
    }
    // max_errors - computed: true, optional: false, required: false
    get maxErrors() {
        return this.getStringAttribute('max_errors');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // output_location - computed: true, optional: false, required: false
    get outputLocation() {
        return this.interpolationForAttribute('output_location');
    }
    // parameters - computed: true, optional: false, required: false
    parameters(index, key) {
        return new cdktf.StringMap(this, `parameters.${index}`).lookup(key);
    }
    // schedule_expression - computed: true, optional: false, required: false
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    // sync_compliance - computed: true, optional: false, required: false
    get syncCompliance() {
        return this.getStringAttribute('sync_compliance');
    }
    // targets - computed: true, optional: false, required: false
    get targets() {
        return this.interpolationForAttribute('targets');
    }
    // wait_for_success_timeout_seconds - computed: true, optional: false, required: false
    get waitForSuccessTimeoutSeconds() {
        return this.getNumberAttribute('wait_for_success_timeout_seconds');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSsmAssociation = DataAwsccSsmAssociation;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSsmAssociation.tfResourceType = "awscc_ssm_association";
//# sourceMappingURL=data:application/json;base64,