"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_domain.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerDomain = exports.sagemakerDomainTagsToTerraform = exports.sagemakerDomainDefaultUserSettingsToTerraform = exports.sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_images: cdktf.listMapper(sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform)(struct.customImages),
        default_resource_spec: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        jupyter_server_app_settings: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        sharing_settings: sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
    };
}
exports.sagemakerDomainDefaultUserSettingsToTerraform = sagemakerDomainDefaultUserSettingsToTerraform;
function sagemakerDomainTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerDomainTagsToTerraform = sagemakerDomainTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_domain.html awscc_sagemaker_domain}
*/
class SagemakerDomain extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_domain.html awscc_sagemaker_domain} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_domain',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._appNetworkAccessType = config.appNetworkAccessType;
        this._authMode = config.authMode;
        this._defaultUserSettings = config.defaultUserSettings;
        this._domainName = config.domainName;
        this._kmsKeyId = config.kmsKeyId;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._vpcId = config.vpcId;
    }
    get appNetworkAccessType() {
        return this.getStringAttribute('app_network_access_type');
    }
    set appNetworkAccessType(value) {
        this._appNetworkAccessType = value;
    }
    resetAppNetworkAccessType() {
        this._appNetworkAccessType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appNetworkAccessTypeInput() {
        return this._appNetworkAccessType;
    }
    get authMode() {
        return this.getStringAttribute('auth_mode');
    }
    set authMode(value) {
        this._authMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get authModeInput() {
        return this._authMode;
    }
    get defaultUserSettings() {
        return this.interpolationForAttribute('default_user_settings');
    }
    set defaultUserSettings(value) {
        this._defaultUserSettings = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUserSettingsInput() {
        return this._defaultUserSettings;
    }
    // domain_arn - computed: true, optional: false, required: false
    get domainArn() {
        return this.getStringAttribute('domain_arn');
    }
    // domain_id - computed: true, optional: false, required: false
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    // home_efs_file_system_id - computed: true, optional: false, required: false
    get homeEfsFileSystemId() {
        return this.getStringAttribute('home_efs_file_system_id');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // single_sign_on_managed_application_instance_id - computed: true, optional: false, required: false
    get singleSignOnManagedApplicationInstanceId() {
        return this.getStringAttribute('single_sign_on_managed_application_instance_id');
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_network_access_type: cdktf.stringToTerraform(this._appNetworkAccessType),
            auth_mode: cdktf.stringToTerraform(this._authMode),
            default_user_settings: sagemakerDomainDefaultUserSettingsToTerraform(this._defaultUserSettings),
            domain_name: cdktf.stringToTerraform(this._domainName),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._subnetIds),
            tags: cdktf.listMapper(sagemakerDomainTagsToTerraform)(this._tags),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
        };
    }
}
exports.SagemakerDomain = SagemakerDomain;
// =================
// STATIC PROPERTIES
// =================
SagemakerDomain.tfResourceType = "awscc_sagemaker_domain";
//# sourceMappingURL=data:application/json;base64,