"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_image.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerImage = exports.sagemakerImageTagsToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerImageTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerImageTagsToTerraform = sagemakerImageTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_image.html awscc_sagemaker_image}
*/
class SagemakerImage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_image.html awscc_sagemaker_image} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerImageConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_image',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._imageDescription = config.imageDescription;
        this._imageDisplayName = config.imageDisplayName;
        this._imageName = config.imageName;
        this._imageRoleArn = config.imageRoleArn;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // image_arn - computed: true, optional: false, required: false
    get imageArn() {
        return this.getStringAttribute('image_arn');
    }
    get imageDescription() {
        return this.getStringAttribute('image_description');
    }
    set imageDescription(value) {
        this._imageDescription = value;
    }
    resetImageDescription() {
        this._imageDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageDescriptionInput() {
        return this._imageDescription;
    }
    get imageDisplayName() {
        return this.getStringAttribute('image_display_name');
    }
    set imageDisplayName(value) {
        this._imageDisplayName = value;
    }
    resetImageDisplayName() {
        this._imageDisplayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageDisplayNameInput() {
        return this._imageDisplayName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageRoleArn() {
        return this.getStringAttribute('image_role_arn');
    }
    set imageRoleArn(value) {
        this._imageRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageRoleArnInput() {
        return this._imageRoleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            image_description: cdktf.stringToTerraform(this._imageDescription),
            image_display_name: cdktf.stringToTerraform(this._imageDisplayName),
            image_name: cdktf.stringToTerraform(this._imageName),
            image_role_arn: cdktf.stringToTerraform(this._imageRoleArn),
            tags: cdktf.listMapper(sagemakerImageTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerImage = SagemakerImage;
// =================
// STATIC PROPERTIES
// =================
SagemakerImage.tfResourceType = "awscc_sagemaker_image";
//# sourceMappingURL=data:application/json;base64,