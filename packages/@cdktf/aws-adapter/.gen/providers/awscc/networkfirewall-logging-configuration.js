"use strict";
// https://www.terraform.io/docs/providers/awscc/r/networkfirewall_logging_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallLoggingConfiguration = exports.networkfirewallLoggingConfigurationLoggingConfigurationToTerraform = exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform = void 0;
const cdktf = require("cdktf");
function networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination: cdktf.hashMapper(cdktf.anyToTerraform)(struct.logDestination),
        log_destination_type: cdktf.stringToTerraform(struct.logDestinationType),
        log_type: cdktf.stringToTerraform(struct.logType),
    };
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform = networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform;
function networkfirewallLoggingConfigurationLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination_configs: cdktf.listMapper(networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigsToTerraform)(struct.logDestinationConfigs),
    };
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationToTerraform = networkfirewallLoggingConfigurationLoggingConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_logging_configuration.html awscc_networkfirewall_logging_configuration}
*/
class NetworkfirewallLoggingConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_logging_configuration.html awscc_networkfirewall_logging_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkfirewallLoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._firewallArn = config.firewallArn;
        this._firewallName = config.firewallName;
        this._loggingConfiguration = config.loggingConfiguration;
    }
    get firewallArn() {
        return this.getStringAttribute('firewall_arn');
    }
    set firewallArn(value) {
        this._firewallArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallArnInput() {
        return this._firewallArn;
    }
    get firewallName() {
        return this.getStringAttribute('firewall_name');
    }
    set firewallName(value) {
        this._firewallName = value;
    }
    resetFirewallName() {
        this._firewallName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firewallNameInput() {
        return this._firewallName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loggingConfiguration() {
        return this.interpolationForAttribute('logging_configuration');
    }
    set loggingConfiguration(value) {
        this._loggingConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigurationInput() {
        return this._loggingConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            firewall_arn: cdktf.stringToTerraform(this._firewallArn),
            firewall_name: cdktf.stringToTerraform(this._firewallName),
            logging_configuration: networkfirewallLoggingConfigurationLoggingConfigurationToTerraform(this._loggingConfiguration),
        };
    }
}
exports.NetworkfirewallLoggingConfiguration = NetworkfirewallLoggingConfiguration;
// =================
// STATIC PROPERTIES
// =================
NetworkfirewallLoggingConfiguration.tfResourceType = "awscc_networkfirewall_logging_configuration";
//# sourceMappingURL=data:application/json;base64,