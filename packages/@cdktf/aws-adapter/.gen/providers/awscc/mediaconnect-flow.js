"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaconnectFlow = exports.mediaconnectFlowSourceFailoverConfigToTerraform = exports.mediaconnectFlowSourceToTerraform = exports.mediaconnectFlowSourceDecryptionToTerraform = void 0;
const cdktf = require("cdktf");
function mediaconnectFlowSourceDecryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        device_id: cdktf.stringToTerraform(struct.deviceId),
        key_type: cdktf.stringToTerraform(struct.keyType),
        region: cdktf.stringToTerraform(struct.region),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediaconnectFlowSourceDecryptionToTerraform = mediaconnectFlowSourceDecryptionToTerraform;
function mediaconnectFlowSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        decryption: mediaconnectFlowSourceDecryptionToTerraform(struct.decryption),
        description: cdktf.stringToTerraform(struct.description),
        entitlement_arn: cdktf.stringToTerraform(struct.entitlementArn),
        ingest_ip: cdktf.stringToTerraform(struct.ingestIp),
        ingest_port: cdktf.numberToTerraform(struct.ingestPort),
        max_bitrate: cdktf.numberToTerraform(struct.maxBitrate),
        max_latency: cdktf.numberToTerraform(struct.maxLatency),
        name: cdktf.stringToTerraform(struct.name),
        protocol: cdktf.stringToTerraform(struct.protocol),
        source_arn: cdktf.stringToTerraform(struct.sourceArn),
        stream_id: cdktf.stringToTerraform(struct.streamId),
        vpc_interface_name: cdktf.stringToTerraform(struct.vpcInterfaceName),
        whitelist_cidr: cdktf.stringToTerraform(struct.whitelistCidr),
    };
}
exports.mediaconnectFlowSourceToTerraform = mediaconnectFlowSourceToTerraform;
function mediaconnectFlowSourceFailoverConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        recovery_window: cdktf.numberToTerraform(struct.recoveryWindow),
        state: cdktf.stringToTerraform(struct.state),
    };
}
exports.mediaconnectFlowSourceFailoverConfigToTerraform = mediaconnectFlowSourceFailoverConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow.html awscc_mediaconnect_flow}
*/
class MediaconnectFlow extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediaconnect_flow.html awscc_mediaconnect_flow} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediaconnectFlowConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediaconnect_flow',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._availabilityZone = config.availabilityZone;
        this._name = config.name;
        this._source = config.source;
        this._sourceFailoverConfig = config.sourceFailoverConfig;
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    resetAvailabilityZone() {
        this._availabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    // flow_arn - computed: true, optional: false, required: false
    get flowArn() {
        return this.getStringAttribute('flow_arn');
    }
    // flow_availability_zone - computed: true, optional: false, required: false
    get flowAvailabilityZone() {
        return this.getStringAttribute('flow_availability_zone');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get source() {
        return this.interpolationForAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get sourceFailoverConfig() {
        return this.interpolationForAttribute('source_failover_config');
    }
    set sourceFailoverConfig(value) {
        this._sourceFailoverConfig = value;
    }
    resetSourceFailoverConfig() {
        this._sourceFailoverConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFailoverConfigInput() {
        return this._sourceFailoverConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            availability_zone: cdktf.stringToTerraform(this._availabilityZone),
            name: cdktf.stringToTerraform(this._name),
            source: mediaconnectFlowSourceToTerraform(this._source),
            source_failover_config: mediaconnectFlowSourceFailoverConfigToTerraform(this._sourceFailoverConfig),
        };
    }
}
exports.MediaconnectFlow = MediaconnectFlow;
// =================
// STATIC PROPERTIES
// =================
MediaconnectFlow.tfResourceType = "awscc_mediaconnect_flow";
//# sourceMappingURL=data:application/json;base64,