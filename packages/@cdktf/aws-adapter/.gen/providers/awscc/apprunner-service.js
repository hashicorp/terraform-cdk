"use strict";
// https://www.terraform.io/docs/providers/awscc/r/apprunner_service.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprunnerService = exports.apprunnerServiceTagsToTerraform = exports.apprunnerServiceSourceConfigurationToTerraform = exports.apprunnerServiceSourceConfigurationImageRepositoryToTerraform = exports.apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationToTerraform = exports.apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationRuntimeEnvironmentVariablesToTerraform = exports.apprunnerServiceSourceConfigurationCodeRepositoryToTerraform = exports.apprunnerServiceSourceConfigurationCodeRepositorySourceCodeVersionToTerraform = exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationToTerraform = exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesToTerraform = exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesRuntimeEnvironmentVariablesToTerraform = exports.apprunnerServiceSourceConfigurationAuthenticationConfigurationToTerraform = exports.apprunnerServiceInstanceConfigurationToTerraform = exports.apprunnerServiceHealthCheckConfigurationToTerraform = exports.apprunnerServiceEncryptionConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function apprunnerServiceEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.apprunnerServiceEncryptionConfigurationToTerraform = apprunnerServiceEncryptionConfigurationToTerraform;
function apprunnerServiceHealthCheckConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval: cdktf.numberToTerraform(struct.interval),
        path: cdktf.stringToTerraform(struct.path),
        protocol: cdktf.stringToTerraform(struct.protocol),
        timeout: cdktf.numberToTerraform(struct.timeout),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
    };
}
exports.apprunnerServiceHealthCheckConfigurationToTerraform = apprunnerServiceHealthCheckConfigurationToTerraform;
function apprunnerServiceInstanceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cpu: cdktf.stringToTerraform(struct.cpu),
        instance_role_arn: cdktf.stringToTerraform(struct.instanceRoleArn),
        memory: cdktf.stringToTerraform(struct.memory),
    };
}
exports.apprunnerServiceInstanceConfigurationToTerraform = apprunnerServiceInstanceConfigurationToTerraform;
function apprunnerServiceSourceConfigurationAuthenticationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_role_arn: cdktf.stringToTerraform(struct.accessRoleArn),
        connection_arn: cdktf.stringToTerraform(struct.connectionArn),
    };
}
exports.apprunnerServiceSourceConfigurationAuthenticationConfigurationToTerraform = apprunnerServiceSourceConfigurationAuthenticationConfigurationToTerraform;
function apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesRuntimeEnvironmentVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesRuntimeEnvironmentVariablesToTerraform = apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesRuntimeEnvironmentVariablesToTerraform;
function apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        build_command: cdktf.stringToTerraform(struct.buildCommand),
        port: cdktf.stringToTerraform(struct.port),
        runtime: cdktf.stringToTerraform(struct.runtime),
        runtime_environment_variables: cdktf.listMapper(apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesRuntimeEnvironmentVariablesToTerraform)(struct.runtimeEnvironmentVariables),
        start_command: cdktf.stringToTerraform(struct.startCommand),
    };
}
exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesToTerraform = apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesToTerraform;
function apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        code_configuration_values: apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesToTerraform(struct.codeConfigurationValues),
        configuration_source: cdktf.stringToTerraform(struct.configurationSource),
    };
}
exports.apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationToTerraform = apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationToTerraform;
function apprunnerServiceSourceConfigurationCodeRepositorySourceCodeVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.apprunnerServiceSourceConfigurationCodeRepositorySourceCodeVersionToTerraform = apprunnerServiceSourceConfigurationCodeRepositorySourceCodeVersionToTerraform;
function apprunnerServiceSourceConfigurationCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        code_configuration: apprunnerServiceSourceConfigurationCodeRepositoryCodeConfigurationToTerraform(struct.codeConfiguration),
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
        source_code_version: apprunnerServiceSourceConfigurationCodeRepositorySourceCodeVersionToTerraform(struct.sourceCodeVersion),
    };
}
exports.apprunnerServiceSourceConfigurationCodeRepositoryToTerraform = apprunnerServiceSourceConfigurationCodeRepositoryToTerraform;
function apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationRuntimeEnvironmentVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationRuntimeEnvironmentVariablesToTerraform = apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationRuntimeEnvironmentVariablesToTerraform;
function apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        port: cdktf.stringToTerraform(struct.port),
        runtime_environment_variables: cdktf.listMapper(apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationRuntimeEnvironmentVariablesToTerraform)(struct.runtimeEnvironmentVariables),
        start_command: cdktf.stringToTerraform(struct.startCommand),
    };
}
exports.apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationToTerraform = apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationToTerraform;
function apprunnerServiceSourceConfigurationImageRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        image_configuration: apprunnerServiceSourceConfigurationImageRepositoryImageConfigurationToTerraform(struct.imageConfiguration),
        image_identifier: cdktf.stringToTerraform(struct.imageIdentifier),
        image_repository_type: cdktf.stringToTerraform(struct.imageRepositoryType),
    };
}
exports.apprunnerServiceSourceConfigurationImageRepositoryToTerraform = apprunnerServiceSourceConfigurationImageRepositoryToTerraform;
function apprunnerServiceSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        authentication_configuration: apprunnerServiceSourceConfigurationAuthenticationConfigurationToTerraform(struct.authenticationConfiguration),
        auto_deployments_enabled: cdktf.booleanToTerraform(struct.autoDeploymentsEnabled),
        code_repository: apprunnerServiceSourceConfigurationCodeRepositoryToTerraform(struct.codeRepository),
        image_repository: apprunnerServiceSourceConfigurationImageRepositoryToTerraform(struct.imageRepository),
    };
}
exports.apprunnerServiceSourceConfigurationToTerraform = apprunnerServiceSourceConfigurationToTerraform;
function apprunnerServiceTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.apprunnerServiceTagsToTerraform = apprunnerServiceTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/apprunner_service.html awscc_apprunner_service}
*/
class ApprunnerService extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/apprunner_service.html awscc_apprunner_service} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApprunnerServiceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_apprunner_service',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoScalingConfigurationArn = config.autoScalingConfigurationArn;
        this._encryptionConfiguration = config.encryptionConfiguration;
        this._healthCheckConfiguration = config.healthCheckConfiguration;
        this._instanceConfiguration = config.instanceConfiguration;
        this._serviceName = config.serviceName;
        this._sourceConfiguration = config.sourceConfiguration;
        this._tags = config.tags;
    }
    get autoScalingConfigurationArn() {
        return this.getStringAttribute('auto_scaling_configuration_arn');
    }
    set autoScalingConfigurationArn(value) {
        this._autoScalingConfigurationArn = value;
    }
    resetAutoScalingConfigurationArn() {
        this._autoScalingConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingConfigurationArnInput() {
        return this._autoScalingConfigurationArn;
    }
    get encryptionConfiguration() {
        return this.interpolationForAttribute('encryption_configuration');
    }
    set encryptionConfiguration(value) {
        this._encryptionConfiguration = value;
    }
    resetEncryptionConfiguration() {
        this._encryptionConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration;
    }
    get healthCheckConfiguration() {
        return this.interpolationForAttribute('health_check_configuration');
    }
    set healthCheckConfiguration(value) {
        this._healthCheckConfiguration = value;
    }
    resetHealthCheckConfiguration() {
        this._healthCheckConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckConfigurationInput() {
        return this._healthCheckConfiguration;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceConfiguration() {
        return this.interpolationForAttribute('instance_configuration');
    }
    set instanceConfiguration(value) {
        this._instanceConfiguration = value;
    }
    resetInstanceConfiguration() {
        this._instanceConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceConfigurationInput() {
        return this._instanceConfiguration;
    }
    // service_arn - computed: true, optional: false, required: false
    get serviceArn() {
        return this.getStringAttribute('service_arn');
    }
    // service_id - computed: true, optional: false, required: false
    get serviceId() {
        return this.getStringAttribute('service_id');
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    // service_url - computed: true, optional: false, required: false
    get serviceUrl() {
        return this.getStringAttribute('service_url');
    }
    get sourceConfiguration() {
        return this.interpolationForAttribute('source_configuration');
    }
    set sourceConfiguration(value) {
        this._sourceConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConfigurationInput() {
        return this._sourceConfiguration;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_scaling_configuration_arn: cdktf.stringToTerraform(this._autoScalingConfigurationArn),
            encryption_configuration: apprunnerServiceEncryptionConfigurationToTerraform(this._encryptionConfiguration),
            health_check_configuration: apprunnerServiceHealthCheckConfigurationToTerraform(this._healthCheckConfiguration),
            instance_configuration: apprunnerServiceInstanceConfigurationToTerraform(this._instanceConfiguration),
            service_name: cdktf.stringToTerraform(this._serviceName),
            source_configuration: apprunnerServiceSourceConfigurationToTerraform(this._sourceConfiguration),
            tags: cdktf.listMapper(apprunnerServiceTagsToTerraform)(this._tags),
        };
    }
}
exports.ApprunnerService = ApprunnerService;
// =================
// STATIC PROPERTIES
// =================
ApprunnerService.tfResourceType = "awscc_apprunner_service";
//# sourceMappingURL=data:application/json;base64,