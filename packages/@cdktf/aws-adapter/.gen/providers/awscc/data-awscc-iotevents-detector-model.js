"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotevents_detector_model.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActions = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqs = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSns = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariable = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambda = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublish = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWise = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestamp = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehose = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDb = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2 = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2Payload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimer = void 0;
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSns = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariable = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambda = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublish = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWise = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestamp = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehose = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDb = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2 = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2Payload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnter = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEvents = void 0;
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariable = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambda = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublish = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWise = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestamp = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehose = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDb = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2 = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2Payload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExit = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActions = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqs = void 0;
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariable = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambda = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublish = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWise = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValue = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestamp = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehose = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDb = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2 = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2Payload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimer = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActions = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqs = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSns = void 0;
exports.DataAwsccIoteventsDetectorModel = exports.dataAwsccIoteventsDetectorModelTagsToTerraform = exports.DataAwsccIoteventsDetectorModelTags = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinition = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStates = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInput = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEvents = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActions = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqs = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayload = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSns = exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform = exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayload = void 0;
const cdktf = require("cdktf");
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2Payload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2Payload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2Payload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2 extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2 = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDb extends cdktf.ComplexComputedList {
    // hash_key_field - computed: true, optional: false, required: false
    get hashKeyField() {
        return this.getStringAttribute('hash_key_field');
    }
    // hash_key_type - computed: true, optional: false, required: false
    get hashKeyType() {
        return this.getStringAttribute('hash_key_type');
    }
    // hash_key_value - computed: true, optional: false, required: false
    get hashKeyValue() {
        return this.getStringAttribute('hash_key_value');
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // payload_field - computed: true, optional: false, required: false
    get payloadField() {
        return this.getStringAttribute('payload_field');
    }
    // range_key_field - computed: true, optional: false, required: false
    get rangeKeyField() {
        return this.getStringAttribute('range_key_field');
    }
    // range_key_type - computed: true, optional: false, required: false
    get rangeKeyType() {
        return this.getStringAttribute('range_key_type');
    }
    // range_key_value - computed: true, optional: false, required: false
    get rangeKeyValue() {
        return this.getStringAttribute('range_key_value');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDb = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDb;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehose extends cdktf.ComplexComputedList {
    // delivery_stream_name - computed: true, optional: false, required: false
    get deliveryStreamName() {
        return this.getStringAttribute('delivery_stream_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // separator - computed: true, optional: false, required: false
    get separator() {
        return this.getStringAttribute('separator');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehose = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehose;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEvents extends cdktf.ComplexComputedList {
    // input_name - computed: true, optional: false, required: false
    get inputName() {
        return this.getStringAttribute('input_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestamp extends cdktf.ComplexComputedList {
    // offset_in_nanos - computed: true, optional: false, required: false
    get offsetInNanos() {
        return this.getStringAttribute('offset_in_nanos');
    }
    // time_in_seconds - computed: true, optional: false, required: false
    get timeInSeconds() {
        return this.getStringAttribute('time_in_seconds');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestamp = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestamp;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValue extends cdktf.ComplexComputedList {
    // boolean_value - computed: true, optional: false, required: false
    get booleanValue() {
        return this.getStringAttribute('boolean_value');
    }
    // double_value - computed: true, optional: false, required: false
    get doubleValue() {
        return this.getStringAttribute('double_value');
    }
    // integer_value - computed: true, optional: false, required: false
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    // string_value - computed: true, optional: false, required: false
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValue extends cdktf.ComplexComputedList {
    // quality - computed: true, optional: false, required: false
    get quality() {
        return this.getStringAttribute('quality');
    }
    // timestamp - computed: true, optional: false, required: false
    get timestamp() {
        return this.interpolationForAttribute('timestamp');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWise extends cdktf.ComplexComputedList {
    // asset_id - computed: true, optional: false, required: false
    get assetId() {
        return this.getStringAttribute('asset_id');
    }
    // entry_id - computed: true, optional: false, required: false
    get entryId() {
        return this.getStringAttribute('entry_id');
    }
    // property_alias - computed: true, optional: false, required: false
    get propertyAlias() {
        return this.getStringAttribute('property_alias');
    }
    // property_id - computed: true, optional: false, required: false
    get propertyId() {
        return this.getStringAttribute('property_id');
    }
    // property_value - computed: true, optional: false, required: false
    get propertyValue() {
        return this.interpolationForAttribute('property_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWise = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWise;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublish extends cdktf.ComplexComputedList {
    // mqtt_topic - computed: true, optional: false, required: false
    get mqttTopic() {
        return this.getStringAttribute('mqtt_topic');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublish = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublish;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambda extends cdktf.ComplexComputedList {
    // function_arn - computed: true, optional: false, required: false
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambda = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambda;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimer extends cdktf.ComplexComputedList {
    // duration_expression - computed: true, optional: false, required: false
    get durationExpression() {
        return this.getStringAttribute('duration_expression');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariable extends cdktf.ComplexComputedList {
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
    // variable_name - computed: true, optional: false, required: false
    get variableName() {
        return this.getStringAttribute('variable_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariable = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariable;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSns extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // target_arn - computed: true, optional: false, required: false
    get targetArn() {
        return this.getStringAttribute('target_arn');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSns = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSns;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqs extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // queue_url - computed: true, optional: false, required: false
    get queueUrl() {
        return this.getStringAttribute('queue_url');
    }
    // use_base_64 - computed: true, optional: false, required: false
    get useBase64() {
        return this.getBooleanAttribute('use_base_64');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqs = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqs;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActions extends cdktf.ComplexComputedList {
    // clear_timer - computed: true, optional: false, required: false
    get clearTimer() {
        return this.interpolationForAttribute('clear_timer');
    }
    // dynamo_d_bv_2 - computed: true, optional: false, required: false
    get dynamoDBv2() {
        return this.interpolationForAttribute('dynamo_d_bv_2');
    }
    // dynamo_db - computed: true, optional: false, required: false
    get dynamoDb() {
        return this.interpolationForAttribute('dynamo_db');
    }
    // firehose - computed: true, optional: false, required: false
    get firehose() {
        return this.interpolationForAttribute('firehose');
    }
    // iot_events - computed: true, optional: false, required: false
    get iotEvents() {
        return this.interpolationForAttribute('iot_events');
    }
    // iot_site_wise - computed: true, optional: false, required: false
    get iotSiteWise() {
        return this.interpolationForAttribute('iot_site_wise');
    }
    // iot_topic_publish - computed: true, optional: false, required: false
    get iotTopicPublish() {
        return this.interpolationForAttribute('iot_topic_publish');
    }
    // lambda - computed: true, optional: false, required: false
    get lambda() {
        return this.interpolationForAttribute('lambda');
    }
    // reset_timer - computed: true, optional: false, required: false
    get resetTimer() {
        return this.interpolationForAttribute('reset_timer');
    }
    // set_timer - computed: true, optional: false, required: false
    get setTimer() {
        return this.interpolationForAttribute('set_timer');
    }
    // set_variable - computed: true, optional: false, required: false
    get setVariable() {
        return this.interpolationForAttribute('set_variable');
    }
    // sns - computed: true, optional: false, required: false
    get sns() {
        return this.interpolationForAttribute('sns');
    }
    // sqs - computed: true, optional: false, required: false
    get sqs() {
        return this.interpolationForAttribute('sqs');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActions = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActions;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform(struct.sns),
        sqs: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEvents extends cdktf.ComplexComputedList {
    // actions - computed: true, optional: false, required: false
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    // condition - computed: true, optional: false, required: false
    get condition() {
        return this.getStringAttribute('condition');
    }
    // event_name - computed: true, optional: false, required: false
    get eventName() {
        return this.getStringAttribute('event_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnter extends cdktf.ComplexComputedList {
    // events - computed: true, optional: false, required: false
    get events() {
        return this.interpolationForAttribute('events');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnter = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnter;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform)(struct.events),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2Payload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2Payload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2Payload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2 extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2 = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDb extends cdktf.ComplexComputedList {
    // hash_key_field - computed: true, optional: false, required: false
    get hashKeyField() {
        return this.getStringAttribute('hash_key_field');
    }
    // hash_key_type - computed: true, optional: false, required: false
    get hashKeyType() {
        return this.getStringAttribute('hash_key_type');
    }
    // hash_key_value - computed: true, optional: false, required: false
    get hashKeyValue() {
        return this.getStringAttribute('hash_key_value');
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // payload_field - computed: true, optional: false, required: false
    get payloadField() {
        return this.getStringAttribute('payload_field');
    }
    // range_key_field - computed: true, optional: false, required: false
    get rangeKeyField() {
        return this.getStringAttribute('range_key_field');
    }
    // range_key_type - computed: true, optional: false, required: false
    get rangeKeyType() {
        return this.getStringAttribute('range_key_type');
    }
    // range_key_value - computed: true, optional: false, required: false
    get rangeKeyValue() {
        return this.getStringAttribute('range_key_value');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDb = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDb;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehose extends cdktf.ComplexComputedList {
    // delivery_stream_name - computed: true, optional: false, required: false
    get deliveryStreamName() {
        return this.getStringAttribute('delivery_stream_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // separator - computed: true, optional: false, required: false
    get separator() {
        return this.getStringAttribute('separator');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehose = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehose;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEvents extends cdktf.ComplexComputedList {
    // input_name - computed: true, optional: false, required: false
    get inputName() {
        return this.getStringAttribute('input_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestamp extends cdktf.ComplexComputedList {
    // offset_in_nanos - computed: true, optional: false, required: false
    get offsetInNanos() {
        return this.getStringAttribute('offset_in_nanos');
    }
    // time_in_seconds - computed: true, optional: false, required: false
    get timeInSeconds() {
        return this.getStringAttribute('time_in_seconds');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestamp = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestamp;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValue extends cdktf.ComplexComputedList {
    // boolean_value - computed: true, optional: false, required: false
    get booleanValue() {
        return this.getStringAttribute('boolean_value');
    }
    // double_value - computed: true, optional: false, required: false
    get doubleValue() {
        return this.getStringAttribute('double_value');
    }
    // integer_value - computed: true, optional: false, required: false
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    // string_value - computed: true, optional: false, required: false
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValue extends cdktf.ComplexComputedList {
    // quality - computed: true, optional: false, required: false
    get quality() {
        return this.getStringAttribute('quality');
    }
    // timestamp - computed: true, optional: false, required: false
    get timestamp() {
        return this.interpolationForAttribute('timestamp');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWise extends cdktf.ComplexComputedList {
    // asset_id - computed: true, optional: false, required: false
    get assetId() {
        return this.getStringAttribute('asset_id');
    }
    // entry_id - computed: true, optional: false, required: false
    get entryId() {
        return this.getStringAttribute('entry_id');
    }
    // property_alias - computed: true, optional: false, required: false
    get propertyAlias() {
        return this.getStringAttribute('property_alias');
    }
    // property_id - computed: true, optional: false, required: false
    get propertyId() {
        return this.getStringAttribute('property_id');
    }
    // property_value - computed: true, optional: false, required: false
    get propertyValue() {
        return this.interpolationForAttribute('property_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWise = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWise;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublish extends cdktf.ComplexComputedList {
    // mqtt_topic - computed: true, optional: false, required: false
    get mqttTopic() {
        return this.getStringAttribute('mqtt_topic');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublish = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublish;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambda extends cdktf.ComplexComputedList {
    // function_arn - computed: true, optional: false, required: false
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambda = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambda;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimer extends cdktf.ComplexComputedList {
    // duration_expression - computed: true, optional: false, required: false
    get durationExpression() {
        return this.getStringAttribute('duration_expression');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariable extends cdktf.ComplexComputedList {
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
    // variable_name - computed: true, optional: false, required: false
    get variableName() {
        return this.getStringAttribute('variable_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariable = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariable;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSns extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // target_arn - computed: true, optional: false, required: false
    get targetArn() {
        return this.getStringAttribute('target_arn');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSns = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSns;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqs extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // queue_url - computed: true, optional: false, required: false
    get queueUrl() {
        return this.getStringAttribute('queue_url');
    }
    // use_base_64 - computed: true, optional: false, required: false
    get useBase64() {
        return this.getBooleanAttribute('use_base_64');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqs = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqs;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActions extends cdktf.ComplexComputedList {
    // clear_timer - computed: true, optional: false, required: false
    get clearTimer() {
        return this.interpolationForAttribute('clear_timer');
    }
    // dynamo_d_bv_2 - computed: true, optional: false, required: false
    get dynamoDBv2() {
        return this.interpolationForAttribute('dynamo_d_bv_2');
    }
    // dynamo_db - computed: true, optional: false, required: false
    get dynamoDb() {
        return this.interpolationForAttribute('dynamo_db');
    }
    // firehose - computed: true, optional: false, required: false
    get firehose() {
        return this.interpolationForAttribute('firehose');
    }
    // iot_events - computed: true, optional: false, required: false
    get iotEvents() {
        return this.interpolationForAttribute('iot_events');
    }
    // iot_site_wise - computed: true, optional: false, required: false
    get iotSiteWise() {
        return this.interpolationForAttribute('iot_site_wise');
    }
    // iot_topic_publish - computed: true, optional: false, required: false
    get iotTopicPublish() {
        return this.interpolationForAttribute('iot_topic_publish');
    }
    // lambda - computed: true, optional: false, required: false
    get lambda() {
        return this.interpolationForAttribute('lambda');
    }
    // reset_timer - computed: true, optional: false, required: false
    get resetTimer() {
        return this.interpolationForAttribute('reset_timer');
    }
    // set_timer - computed: true, optional: false, required: false
    get setTimer() {
        return this.interpolationForAttribute('set_timer');
    }
    // set_variable - computed: true, optional: false, required: false
    get setVariable() {
        return this.interpolationForAttribute('set_variable');
    }
    // sns - computed: true, optional: false, required: false
    get sns() {
        return this.interpolationForAttribute('sns');
    }
    // sqs - computed: true, optional: false, required: false
    get sqs() {
        return this.interpolationForAttribute('sqs');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActions = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActions;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform(struct.sns),
        sqs: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEvents extends cdktf.ComplexComputedList {
    // actions - computed: true, optional: false, required: false
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    // condition - computed: true, optional: false, required: false
    get condition() {
        return this.getStringAttribute('condition');
    }
    // event_name - computed: true, optional: false, required: false
    get eventName() {
        return this.getStringAttribute('event_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExit extends cdktf.ComplexComputedList {
    // events - computed: true, optional: false, required: false
    get events() {
        return this.interpolationForAttribute('events');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExit = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExit;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform)(struct.events),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2Payload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2Payload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2Payload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2 extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2 = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDb extends cdktf.ComplexComputedList {
    // hash_key_field - computed: true, optional: false, required: false
    get hashKeyField() {
        return this.getStringAttribute('hash_key_field');
    }
    // hash_key_type - computed: true, optional: false, required: false
    get hashKeyType() {
        return this.getStringAttribute('hash_key_type');
    }
    // hash_key_value - computed: true, optional: false, required: false
    get hashKeyValue() {
        return this.getStringAttribute('hash_key_value');
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // payload_field - computed: true, optional: false, required: false
    get payloadField() {
        return this.getStringAttribute('payload_field');
    }
    // range_key_field - computed: true, optional: false, required: false
    get rangeKeyField() {
        return this.getStringAttribute('range_key_field');
    }
    // range_key_type - computed: true, optional: false, required: false
    get rangeKeyType() {
        return this.getStringAttribute('range_key_type');
    }
    // range_key_value - computed: true, optional: false, required: false
    get rangeKeyValue() {
        return this.getStringAttribute('range_key_value');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDb = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDb;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehose extends cdktf.ComplexComputedList {
    // delivery_stream_name - computed: true, optional: false, required: false
    get deliveryStreamName() {
        return this.getStringAttribute('delivery_stream_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // separator - computed: true, optional: false, required: false
    get separator() {
        return this.getStringAttribute('separator');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehose = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehose;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEvents extends cdktf.ComplexComputedList {
    // input_name - computed: true, optional: false, required: false
    get inputName() {
        return this.getStringAttribute('input_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestamp extends cdktf.ComplexComputedList {
    // offset_in_nanos - computed: true, optional: false, required: false
    get offsetInNanos() {
        return this.getStringAttribute('offset_in_nanos');
    }
    // time_in_seconds - computed: true, optional: false, required: false
    get timeInSeconds() {
        return this.getStringAttribute('time_in_seconds');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestamp = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestamp;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValue extends cdktf.ComplexComputedList {
    // boolean_value - computed: true, optional: false, required: false
    get booleanValue() {
        return this.getStringAttribute('boolean_value');
    }
    // double_value - computed: true, optional: false, required: false
    get doubleValue() {
        return this.getStringAttribute('double_value');
    }
    // integer_value - computed: true, optional: false, required: false
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    // string_value - computed: true, optional: false, required: false
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValue extends cdktf.ComplexComputedList {
    // quality - computed: true, optional: false, required: false
    get quality() {
        return this.getStringAttribute('quality');
    }
    // timestamp - computed: true, optional: false, required: false
    get timestamp() {
        return this.interpolationForAttribute('timestamp');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWise extends cdktf.ComplexComputedList {
    // asset_id - computed: true, optional: false, required: false
    get assetId() {
        return this.getStringAttribute('asset_id');
    }
    // entry_id - computed: true, optional: false, required: false
    get entryId() {
        return this.getStringAttribute('entry_id');
    }
    // property_alias - computed: true, optional: false, required: false
    get propertyAlias() {
        return this.getStringAttribute('property_alias');
    }
    // property_id - computed: true, optional: false, required: false
    get propertyId() {
        return this.getStringAttribute('property_id');
    }
    // property_value - computed: true, optional: false, required: false
    get propertyValue() {
        return this.interpolationForAttribute('property_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWise = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWise;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublish extends cdktf.ComplexComputedList {
    // mqtt_topic - computed: true, optional: false, required: false
    get mqttTopic() {
        return this.getStringAttribute('mqtt_topic');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublish = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublish;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambda extends cdktf.ComplexComputedList {
    // function_arn - computed: true, optional: false, required: false
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambda = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambda;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimer extends cdktf.ComplexComputedList {
    // duration_expression - computed: true, optional: false, required: false
    get durationExpression() {
        return this.getStringAttribute('duration_expression');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariable extends cdktf.ComplexComputedList {
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
    // variable_name - computed: true, optional: false, required: false
    get variableName() {
        return this.getStringAttribute('variable_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariable = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariable;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSns extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // target_arn - computed: true, optional: false, required: false
    get targetArn() {
        return this.getStringAttribute('target_arn');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSns = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSns;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqs extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // queue_url - computed: true, optional: false, required: false
    get queueUrl() {
        return this.getStringAttribute('queue_url');
    }
    // use_base_64 - computed: true, optional: false, required: false
    get useBase64() {
        return this.getBooleanAttribute('use_base_64');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqs = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqs;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActions extends cdktf.ComplexComputedList {
    // clear_timer - computed: true, optional: false, required: false
    get clearTimer() {
        return this.interpolationForAttribute('clear_timer');
    }
    // dynamo_d_bv_2 - computed: true, optional: false, required: false
    get dynamoDBv2() {
        return this.interpolationForAttribute('dynamo_d_bv_2');
    }
    // dynamo_db - computed: true, optional: false, required: false
    get dynamoDb() {
        return this.interpolationForAttribute('dynamo_db');
    }
    // firehose - computed: true, optional: false, required: false
    get firehose() {
        return this.interpolationForAttribute('firehose');
    }
    // iot_events - computed: true, optional: false, required: false
    get iotEvents() {
        return this.interpolationForAttribute('iot_events');
    }
    // iot_site_wise - computed: true, optional: false, required: false
    get iotSiteWise() {
        return this.interpolationForAttribute('iot_site_wise');
    }
    // iot_topic_publish - computed: true, optional: false, required: false
    get iotTopicPublish() {
        return this.interpolationForAttribute('iot_topic_publish');
    }
    // lambda - computed: true, optional: false, required: false
    get lambda() {
        return this.interpolationForAttribute('lambda');
    }
    // reset_timer - computed: true, optional: false, required: false
    get resetTimer() {
        return this.interpolationForAttribute('reset_timer');
    }
    // set_timer - computed: true, optional: false, required: false
    get setTimer() {
        return this.interpolationForAttribute('set_timer');
    }
    // set_variable - computed: true, optional: false, required: false
    get setVariable() {
        return this.interpolationForAttribute('set_variable');
    }
    // sns - computed: true, optional: false, required: false
    get sns() {
        return this.interpolationForAttribute('sns');
    }
    // sqs - computed: true, optional: false, required: false
    get sqs() {
        return this.interpolationForAttribute('sqs');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActions = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActions;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform(struct.sns),
        sqs: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEvents extends cdktf.ComplexComputedList {
    // actions - computed: true, optional: false, required: false
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    // condition - computed: true, optional: false, required: false
    get condition() {
        return this.getStringAttribute('condition');
    }
    // event_name - computed: true, optional: false, required: false
    get eventName() {
        return this.getStringAttribute('event_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2Payload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2Payload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2Payload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2 extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2 = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDb extends cdktf.ComplexComputedList {
    // hash_key_field - computed: true, optional: false, required: false
    get hashKeyField() {
        return this.getStringAttribute('hash_key_field');
    }
    // hash_key_type - computed: true, optional: false, required: false
    get hashKeyType() {
        return this.getStringAttribute('hash_key_type');
    }
    // hash_key_value - computed: true, optional: false, required: false
    get hashKeyValue() {
        return this.getStringAttribute('hash_key_value');
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // payload_field - computed: true, optional: false, required: false
    get payloadField() {
        return this.getStringAttribute('payload_field');
    }
    // range_key_field - computed: true, optional: false, required: false
    get rangeKeyField() {
        return this.getStringAttribute('range_key_field');
    }
    // range_key_type - computed: true, optional: false, required: false
    get rangeKeyType() {
        return this.getStringAttribute('range_key_type');
    }
    // range_key_value - computed: true, optional: false, required: false
    get rangeKeyValue() {
        return this.getStringAttribute('range_key_value');
    }
    // table_name - computed: true, optional: false, required: false
    get tableName() {
        return this.getStringAttribute('table_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDb = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDb;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehose extends cdktf.ComplexComputedList {
    // delivery_stream_name - computed: true, optional: false, required: false
    get deliveryStreamName() {
        return this.getStringAttribute('delivery_stream_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // separator - computed: true, optional: false, required: false
    get separator() {
        return this.getStringAttribute('separator');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehose = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehose;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEvents extends cdktf.ComplexComputedList {
    // input_name - computed: true, optional: false, required: false
    get inputName() {
        return this.getStringAttribute('input_name');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestamp extends cdktf.ComplexComputedList {
    // offset_in_nanos - computed: true, optional: false, required: false
    get offsetInNanos() {
        return this.getStringAttribute('offset_in_nanos');
    }
    // time_in_seconds - computed: true, optional: false, required: false
    get timeInSeconds() {
        return this.getStringAttribute('time_in_seconds');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestamp = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestamp;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValue extends cdktf.ComplexComputedList {
    // boolean_value - computed: true, optional: false, required: false
    get booleanValue() {
        return this.getStringAttribute('boolean_value');
    }
    // double_value - computed: true, optional: false, required: false
    get doubleValue() {
        return this.getStringAttribute('double_value');
    }
    // integer_value - computed: true, optional: false, required: false
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    // string_value - computed: true, optional: false, required: false
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValue extends cdktf.ComplexComputedList {
    // quality - computed: true, optional: false, required: false
    get quality() {
        return this.getStringAttribute('quality');
    }
    // timestamp - computed: true, optional: false, required: false
    get timestamp() {
        return this.interpolationForAttribute('timestamp');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.interpolationForAttribute('value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValue = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValue;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWise extends cdktf.ComplexComputedList {
    // asset_id - computed: true, optional: false, required: false
    get assetId() {
        return this.getStringAttribute('asset_id');
    }
    // entry_id - computed: true, optional: false, required: false
    get entryId() {
        return this.getStringAttribute('entry_id');
    }
    // property_alias - computed: true, optional: false, required: false
    get propertyAlias() {
        return this.getStringAttribute('property_alias');
    }
    // property_id - computed: true, optional: false, required: false
    get propertyId() {
        return this.getStringAttribute('property_id');
    }
    // property_value - computed: true, optional: false, required: false
    get propertyValue() {
        return this.interpolationForAttribute('property_value');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWise = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWise;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublish extends cdktf.ComplexComputedList {
    // mqtt_topic - computed: true, optional: false, required: false
    get mqttTopic() {
        return this.getStringAttribute('mqtt_topic');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublish = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublish;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambda extends cdktf.ComplexComputedList {
    // function_arn - computed: true, optional: false, required: false
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambda = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambda;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimer extends cdktf.ComplexComputedList {
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimer extends cdktf.ComplexComputedList {
    // duration_expression - computed: true, optional: false, required: false
    get durationExpression() {
        return this.getStringAttribute('duration_expression');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    // timer_name - computed: true, optional: false, required: false
    get timerName() {
        return this.getStringAttribute('timer_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimer = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimer;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariable extends cdktf.ComplexComputedList {
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
    // variable_name - computed: true, optional: false, required: false
    get variableName() {
        return this.getStringAttribute('variable_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariable = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariable;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSns extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // target_arn - computed: true, optional: false, required: false
    get targetArn() {
        return this.getStringAttribute('target_arn');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSns = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSns;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayload extends cdktf.ComplexComputedList {
    // content_expression - computed: true, optional: false, required: false
    get contentExpression() {
        return this.getStringAttribute('content_expression');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayload = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayload;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqs extends cdktf.ComplexComputedList {
    // payload - computed: true, optional: false, required: false
    get payload() {
        return this.interpolationForAttribute('payload');
    }
    // queue_url - computed: true, optional: false, required: false
    get queueUrl() {
        return this.getStringAttribute('queue_url');
    }
    // use_base_64 - computed: true, optional: false, required: false
    get useBase64() {
        return this.getBooleanAttribute('use_base_64');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqs = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqs;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActions extends cdktf.ComplexComputedList {
    // clear_timer - computed: true, optional: false, required: false
    get clearTimer() {
        return this.interpolationForAttribute('clear_timer');
    }
    // dynamo_d_bv_2 - computed: true, optional: false, required: false
    get dynamoDBv2() {
        return this.interpolationForAttribute('dynamo_d_bv_2');
    }
    // dynamo_db - computed: true, optional: false, required: false
    get dynamoDb() {
        return this.interpolationForAttribute('dynamo_db');
    }
    // firehose - computed: true, optional: false, required: false
    get firehose() {
        return this.interpolationForAttribute('firehose');
    }
    // iot_events - computed: true, optional: false, required: false
    get iotEvents() {
        return this.interpolationForAttribute('iot_events');
    }
    // iot_site_wise - computed: true, optional: false, required: false
    get iotSiteWise() {
        return this.interpolationForAttribute('iot_site_wise');
    }
    // iot_topic_publish - computed: true, optional: false, required: false
    get iotTopicPublish() {
        return this.interpolationForAttribute('iot_topic_publish');
    }
    // lambda - computed: true, optional: false, required: false
    get lambda() {
        return this.interpolationForAttribute('lambda');
    }
    // reset_timer - computed: true, optional: false, required: false
    get resetTimer() {
        return this.interpolationForAttribute('reset_timer');
    }
    // set_timer - computed: true, optional: false, required: false
    get setTimer() {
        return this.interpolationForAttribute('set_timer');
    }
    // set_variable - computed: true, optional: false, required: false
    get setVariable() {
        return this.interpolationForAttribute('set_variable');
    }
    // sns - computed: true, optional: false, required: false
    get sns() {
        return this.interpolationForAttribute('sns');
    }
    // sqs - computed: true, optional: false, required: false
    get sqs() {
        return this.interpolationForAttribute('sqs');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActions = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActions;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform(struct.sns),
        sqs: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEvents extends cdktf.ComplexComputedList {
    // actions - computed: true, optional: false, required: false
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    // condition - computed: true, optional: false, required: false
    get condition() {
        return this.getStringAttribute('condition');
    }
    // event_name - computed: true, optional: false, required: false
    get eventName() {
        return this.getStringAttribute('event_name');
    }
    // next_state - computed: true, optional: false, required: false
    get nextState() {
        return this.getStringAttribute('next_state');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEvents = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEvents;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
        next_state: cdktf.stringToTerraform(struct.nextState),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInput extends cdktf.ComplexComputedList {
    // events - computed: true, optional: false, required: false
    get events() {
        return this.interpolationForAttribute('events');
    }
    // transition_events - computed: true, optional: false, required: false
    get transitionEvents() {
        return this.interpolationForAttribute('transition_events');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInput = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInput;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform)(struct.events),
        transition_events: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform)(struct.transitionEvents),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinitionStates extends cdktf.ComplexComputedList {
    // on_enter - computed: true, optional: false, required: false
    get onEnter() {
        return this.interpolationForAttribute('on_enter');
    }
    // on_exit - computed: true, optional: false, required: false
    get onExit() {
        return this.interpolationForAttribute('on_exit');
    }
    // on_input - computed: true, optional: false, required: false
    get onInput() {
        return this.interpolationForAttribute('on_input');
    }
    // state_name - computed: true, optional: false, required: false
    get stateName() {
        return this.getStringAttribute('state_name');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinitionStates = DataAwsccIoteventsDetectorModelDetectorModelDefinitionStates;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        on_enter: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform(struct.onEnter),
        on_exit: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform(struct.onExit),
        on_input: dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform(struct.onInput),
        state_name: cdktf.stringToTerraform(struct.stateName),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesToTerraform;
class DataAwsccIoteventsDetectorModelDetectorModelDefinition extends cdktf.ComplexComputedList {
    // initial_state_name - computed: true, optional: false, required: false
    get initialStateName() {
        return this.getStringAttribute('initial_state_name');
    }
    // states - computed: true, optional: false, required: false
    get states() {
        return this.interpolationForAttribute('states');
    }
}
exports.DataAwsccIoteventsDetectorModelDetectorModelDefinition = DataAwsccIoteventsDetectorModelDetectorModelDefinition;
function dataAwsccIoteventsDetectorModelDetectorModelDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        initial_state_name: cdktf.stringToTerraform(struct.initialStateName),
        states: cdktf.listMapper(dataAwsccIoteventsDetectorModelDetectorModelDefinitionStatesToTerraform)(struct.states),
    };
}
exports.dataAwsccIoteventsDetectorModelDetectorModelDefinitionToTerraform = dataAwsccIoteventsDetectorModelDetectorModelDefinitionToTerraform;
class DataAwsccIoteventsDetectorModelTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIoteventsDetectorModelTags = DataAwsccIoteventsDetectorModelTags;
function dataAwsccIoteventsDetectorModelTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIoteventsDetectorModelTagsToTerraform = dataAwsccIoteventsDetectorModelTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotevents_detector_model.html awscc_iotevents_detector_model}
*/
class DataAwsccIoteventsDetectorModel extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotevents_detector_model.html awscc_iotevents_detector_model} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIoteventsDetectorModelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotevents_detector_model',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // detector_model_definition - computed: true, optional: false, required: false
    get detectorModelDefinition() {
        return this.interpolationForAttribute('detector_model_definition');
    }
    // detector_model_description - computed: true, optional: false, required: false
    get detectorModelDescription() {
        return this.getStringAttribute('detector_model_description');
    }
    // detector_model_name - computed: true, optional: false, required: false
    get detectorModelName() {
        return this.getStringAttribute('detector_model_name');
    }
    // evaluation_method - computed: true, optional: false, required: false
    get evaluationMethod() {
        return this.getStringAttribute('evaluation_method');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIoteventsDetectorModel = DataAwsccIoteventsDetectorModel;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIoteventsDetectorModel.tfResourceType = "awscc_iotevents_detector_model";
//# sourceMappingURL=data:application/json;base64,