"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudformation_type_activation.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationTypeActivation = exports.cloudformationTypeActivationLoggingConfigToTerraform = void 0;
const cdktf = require("cdktf");
function cloudformationTypeActivationLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_role_arn: cdktf.stringToTerraform(struct.logRoleArn),
    };
}
exports.cloudformationTypeActivationLoggingConfigToTerraform = cloudformationTypeActivationLoggingConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_type_activation.html awscc_cloudformation_type_activation}
*/
class CloudformationTypeActivation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudformation_type_activation.html awscc_cloudformation_type_activation} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudformationTypeActivationConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudformation_type_activation',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoUpdate = config.autoUpdate;
        this._executionRoleArn = config.executionRoleArn;
        this._loggingConfig = config.loggingConfig;
        this._majorVersion = config.majorVersion;
        this._publicTypeArn = config.publicTypeArn;
        this._publisherId = config.publisherId;
        this._type = config.type;
        this._typeName = config.typeName;
        this._typeNameAlias = config.typeNameAlias;
        this._versionBump = config.versionBump;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoUpdate() {
        return this.getBooleanAttribute('auto_update');
    }
    set autoUpdate(value) {
        this._autoUpdate = value;
    }
    resetAutoUpdate() {
        this._autoUpdate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoUpdateInput() {
        return this._autoUpdate;
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    resetExecutionRoleArn() {
        this._executionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loggingConfig() {
        return this.interpolationForAttribute('logging_config');
    }
    set loggingConfig(value) {
        this._loggingConfig = value;
    }
    resetLoggingConfig() {
        this._loggingConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig;
    }
    get majorVersion() {
        return this.getStringAttribute('major_version');
    }
    set majorVersion(value) {
        this._majorVersion = value;
    }
    resetMajorVersion() {
        this._majorVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get majorVersionInput() {
        return this._majorVersion;
    }
    get publicTypeArn() {
        return this.getStringAttribute('public_type_arn');
    }
    set publicTypeArn(value) {
        this._publicTypeArn = value;
    }
    resetPublicTypeArn() {
        this._publicTypeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicTypeArnInput() {
        return this._publicTypeArn;
    }
    get publisherId() {
        return this.getStringAttribute('publisher_id');
    }
    set publisherId(value) {
        this._publisherId = value;
    }
    resetPublisherId() {
        this._publisherId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publisherIdInput() {
        return this._publisherId;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    resetTypeName() {
        this._typeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    get typeNameAlias() {
        return this.getStringAttribute('type_name_alias');
    }
    set typeNameAlias(value) {
        this._typeNameAlias = value;
    }
    resetTypeNameAlias() {
        this._typeNameAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameAliasInput() {
        return this._typeNameAlias;
    }
    get versionBump() {
        return this.getStringAttribute('version_bump');
    }
    set versionBump(value) {
        this._versionBump = value;
    }
    resetVersionBump() {
        this._versionBump = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionBumpInput() {
        return this._versionBump;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_update: cdktf.booleanToTerraform(this._autoUpdate),
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            logging_config: cloudformationTypeActivationLoggingConfigToTerraform(this._loggingConfig),
            major_version: cdktf.stringToTerraform(this._majorVersion),
            public_type_arn: cdktf.stringToTerraform(this._publicTypeArn),
            publisher_id: cdktf.stringToTerraform(this._publisherId),
            type: cdktf.stringToTerraform(this._type),
            type_name: cdktf.stringToTerraform(this._typeName),
            type_name_alias: cdktf.stringToTerraform(this._typeNameAlias),
            version_bump: cdktf.stringToTerraform(this._versionBump),
        };
    }
}
exports.CloudformationTypeActivation = CloudformationTypeActivation;
// =================
// STATIC PROPERTIES
// =================
CloudformationTypeActivation.tfResourceType = "awscc_cloudformation_type_activation";
//# sourceMappingURL=data:application/json;base64,