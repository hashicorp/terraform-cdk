"use strict";
// https://www.terraform.io/docs/providers/awscc/d/gamelift_fleet.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccGameliftFleet = exports.dataAwsccGameliftFleetRuntimeConfigurationToTerraform = exports.DataAwsccGameliftFleetRuntimeConfiguration = exports.dataAwsccGameliftFleetRuntimeConfigurationServerProcessesToTerraform = exports.DataAwsccGameliftFleetRuntimeConfigurationServerProcesses = exports.dataAwsccGameliftFleetResourceCreationLimitPolicyToTerraform = exports.DataAwsccGameliftFleetResourceCreationLimitPolicy = exports.dataAwsccGameliftFleetLocationsToTerraform = exports.DataAwsccGameliftFleetLocations = exports.dataAwsccGameliftFleetLocationsLocationCapacityToTerraform = exports.DataAwsccGameliftFleetLocationsLocationCapacity = exports.dataAwsccGameliftFleetEc2InboundPermissionsToTerraform = exports.DataAwsccGameliftFleetEc2InboundPermissions = exports.dataAwsccGameliftFleetCertificateConfigurationToTerraform = exports.DataAwsccGameliftFleetCertificateConfiguration = void 0;
const cdktf = require("cdktf");
class DataAwsccGameliftFleetCertificateConfiguration extends cdktf.ComplexComputedList {
    // certificate_type - computed: true, optional: false, required: false
    get certificateType() {
        return this.getStringAttribute('certificate_type');
    }
}
exports.DataAwsccGameliftFleetCertificateConfiguration = DataAwsccGameliftFleetCertificateConfiguration;
function dataAwsccGameliftFleetCertificateConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_type: cdktf.stringToTerraform(struct.certificateType),
    };
}
exports.dataAwsccGameliftFleetCertificateConfigurationToTerraform = dataAwsccGameliftFleetCertificateConfigurationToTerraform;
class DataAwsccGameliftFleetEc2InboundPermissions extends cdktf.ComplexComputedList {
    // from_port - computed: true, optional: false, required: false
    get fromPort() {
        return this.getNumberAttribute('from_port');
    }
    // ip_range - computed: true, optional: false, required: false
    get ipRange() {
        return this.getStringAttribute('ip_range');
    }
    // protocol - computed: true, optional: false, required: false
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    // to_port - computed: true, optional: false, required: false
    get toPort() {
        return this.getNumberAttribute('to_port');
    }
}
exports.DataAwsccGameliftFleetEc2InboundPermissions = DataAwsccGameliftFleetEc2InboundPermissions;
function dataAwsccGameliftFleetEc2InboundPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        ip_range: cdktf.stringToTerraform(struct.ipRange),
        protocol: cdktf.stringToTerraform(struct.protocol),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.dataAwsccGameliftFleetEc2InboundPermissionsToTerraform = dataAwsccGameliftFleetEc2InboundPermissionsToTerraform;
class DataAwsccGameliftFleetLocationsLocationCapacity extends cdktf.ComplexComputedList {
    // desired_ec2_instances - computed: true, optional: false, required: false
    get desiredEc2Instances() {
        return this.getNumberAttribute('desired_ec2_instances');
    }
    // max_size - computed: true, optional: false, required: false
    get maxSize() {
        return this.getNumberAttribute('max_size');
    }
    // min_size - computed: true, optional: false, required: false
    get minSize() {
        return this.getNumberAttribute('min_size');
    }
}
exports.DataAwsccGameliftFleetLocationsLocationCapacity = DataAwsccGameliftFleetLocationsLocationCapacity;
function dataAwsccGameliftFleetLocationsLocationCapacityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        desired_ec2_instances: cdktf.numberToTerraform(struct.desiredEc2Instances),
        max_size: cdktf.numberToTerraform(struct.maxSize),
        min_size: cdktf.numberToTerraform(struct.minSize),
    };
}
exports.dataAwsccGameliftFleetLocationsLocationCapacityToTerraform = dataAwsccGameliftFleetLocationsLocationCapacityToTerraform;
class DataAwsccGameliftFleetLocations extends cdktf.ComplexComputedList {
    // location - computed: true, optional: false, required: false
    get location() {
        return this.getStringAttribute('location');
    }
    // location_capacity - computed: true, optional: false, required: false
    get locationCapacity() {
        return this.interpolationForAttribute('location_capacity');
    }
}
exports.DataAwsccGameliftFleetLocations = DataAwsccGameliftFleetLocations;
function dataAwsccGameliftFleetLocationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        location: cdktf.stringToTerraform(struct.location),
        location_capacity: dataAwsccGameliftFleetLocationsLocationCapacityToTerraform(struct.locationCapacity),
    };
}
exports.dataAwsccGameliftFleetLocationsToTerraform = dataAwsccGameliftFleetLocationsToTerraform;
class DataAwsccGameliftFleetResourceCreationLimitPolicy extends cdktf.ComplexComputedList {
    // new_game_sessions_per_creator - computed: true, optional: false, required: false
    get newGameSessionsPerCreator() {
        return this.getNumberAttribute('new_game_sessions_per_creator');
    }
    // policy_period_in_minutes - computed: true, optional: false, required: false
    get policyPeriodInMinutes() {
        return this.getNumberAttribute('policy_period_in_minutes');
    }
}
exports.DataAwsccGameliftFleetResourceCreationLimitPolicy = DataAwsccGameliftFleetResourceCreationLimitPolicy;
function dataAwsccGameliftFleetResourceCreationLimitPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        new_game_sessions_per_creator: cdktf.numberToTerraform(struct.newGameSessionsPerCreator),
        policy_period_in_minutes: cdktf.numberToTerraform(struct.policyPeriodInMinutes),
    };
}
exports.dataAwsccGameliftFleetResourceCreationLimitPolicyToTerraform = dataAwsccGameliftFleetResourceCreationLimitPolicyToTerraform;
class DataAwsccGameliftFleetRuntimeConfigurationServerProcesses extends cdktf.ComplexComputedList {
    // concurrent_executions - computed: true, optional: false, required: false
    get concurrentExecutions() {
        return this.getNumberAttribute('concurrent_executions');
    }
    // launch_path - computed: true, optional: false, required: false
    get launchPath() {
        return this.getStringAttribute('launch_path');
    }
    // parameters - computed: true, optional: false, required: false
    get parameters() {
        return this.getStringAttribute('parameters');
    }
}
exports.DataAwsccGameliftFleetRuntimeConfigurationServerProcesses = DataAwsccGameliftFleetRuntimeConfigurationServerProcesses;
function dataAwsccGameliftFleetRuntimeConfigurationServerProcessesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        concurrent_executions: cdktf.numberToTerraform(struct.concurrentExecutions),
        launch_path: cdktf.stringToTerraform(struct.launchPath),
        parameters: cdktf.stringToTerraform(struct.parameters),
    };
}
exports.dataAwsccGameliftFleetRuntimeConfigurationServerProcessesToTerraform = dataAwsccGameliftFleetRuntimeConfigurationServerProcessesToTerraform;
class DataAwsccGameliftFleetRuntimeConfiguration extends cdktf.ComplexComputedList {
    // game_session_activation_timeout_seconds - computed: true, optional: false, required: false
    get gameSessionActivationTimeoutSeconds() {
        return this.getNumberAttribute('game_session_activation_timeout_seconds');
    }
    // max_concurrent_game_session_activations - computed: true, optional: false, required: false
    get maxConcurrentGameSessionActivations() {
        return this.getNumberAttribute('max_concurrent_game_session_activations');
    }
    // server_processes - computed: true, optional: false, required: false
    get serverProcesses() {
        return this.interpolationForAttribute('server_processes');
    }
}
exports.DataAwsccGameliftFleetRuntimeConfiguration = DataAwsccGameliftFleetRuntimeConfiguration;
function dataAwsccGameliftFleetRuntimeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        game_session_activation_timeout_seconds: cdktf.numberToTerraform(struct.gameSessionActivationTimeoutSeconds),
        max_concurrent_game_session_activations: cdktf.numberToTerraform(struct.maxConcurrentGameSessionActivations),
        server_processes: cdktf.listMapper(dataAwsccGameliftFleetRuntimeConfigurationServerProcessesToTerraform)(struct.serverProcesses),
    };
}
exports.dataAwsccGameliftFleetRuntimeConfigurationToTerraform = dataAwsccGameliftFleetRuntimeConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/gamelift_fleet.html awscc_gamelift_fleet}
*/
class DataAwsccGameliftFleet extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/gamelift_fleet.html awscc_gamelift_fleet} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccGameliftFleetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_gamelift_fleet',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // build_id - computed: true, optional: false, required: false
    get buildId() {
        return this.getStringAttribute('build_id');
    }
    // certificate_configuration - computed: true, optional: false, required: false
    get certificateConfiguration() {
        return this.interpolationForAttribute('certificate_configuration');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // desired_ec2_instances - computed: true, optional: false, required: false
    get desiredEc2Instances() {
        return this.getNumberAttribute('desired_ec2_instances');
    }
    // ec2_inbound_permissions - computed: true, optional: false, required: false
    get ec2InboundPermissions() {
        return this.interpolationForAttribute('ec2_inbound_permissions');
    }
    // ec2_instance_type - computed: true, optional: false, required: false
    get ec2InstanceType() {
        return this.getStringAttribute('ec2_instance_type');
    }
    // fleet_id - computed: true, optional: false, required: false
    get fleetId() {
        return this.getStringAttribute('fleet_id');
    }
    // fleet_type - computed: true, optional: false, required: false
    get fleetType() {
        return this.getStringAttribute('fleet_type');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_role_arn - computed: true, optional: false, required: false
    get instanceRoleArn() {
        return this.getStringAttribute('instance_role_arn');
    }
    // locations - computed: true, optional: false, required: false
    get locations() {
        return this.interpolationForAttribute('locations');
    }
    // log_paths - computed: true, optional: false, required: false
    get logPaths() {
        return this.getListAttribute('log_paths');
    }
    // max_size - computed: true, optional: false, required: false
    get maxSize() {
        return this.getNumberAttribute('max_size');
    }
    // metric_groups - computed: true, optional: false, required: false
    get metricGroups() {
        return this.getListAttribute('metric_groups');
    }
    // min_size - computed: true, optional: false, required: false
    get minSize() {
        return this.getNumberAttribute('min_size');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // new_game_session_protection_policy - computed: true, optional: false, required: false
    get newGameSessionProtectionPolicy() {
        return this.getStringAttribute('new_game_session_protection_policy');
    }
    // peer_vpc_aws_account_id - computed: true, optional: false, required: false
    get peerVpcAwsAccountId() {
        return this.getStringAttribute('peer_vpc_aws_account_id');
    }
    // peer_vpc_id - computed: true, optional: false, required: false
    get peerVpcId() {
        return this.getStringAttribute('peer_vpc_id');
    }
    // resource_creation_limit_policy - computed: true, optional: false, required: false
    get resourceCreationLimitPolicy() {
        return this.interpolationForAttribute('resource_creation_limit_policy');
    }
    // runtime_configuration - computed: true, optional: false, required: false
    get runtimeConfiguration() {
        return this.interpolationForAttribute('runtime_configuration');
    }
    // script_id - computed: true, optional: false, required: false
    get scriptId() {
        return this.getStringAttribute('script_id');
    }
    // server_launch_parameters - computed: true, optional: false, required: false
    get serverLaunchParameters() {
        return this.getStringAttribute('server_launch_parameters');
    }
    // server_launch_path - computed: true, optional: false, required: false
    get serverLaunchPath() {
        return this.getStringAttribute('server_launch_path');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccGameliftFleet = DataAwsccGameliftFleet;
// =================
// STATIC PROPERTIES
// =================
DataAwsccGameliftFleet.tfResourceType = "awscc_gamelift_fleet";
//# sourceMappingURL=data:application/json;base64,