"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediapackage_origin_endpoint.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediapackageOriginEndpoint = exports.mediapackageOriginEndpointTagsToTerraform = exports.mediapackageOriginEndpointMssPackageToTerraform = exports.mediapackageOriginEndpointMssPackageStreamSelectionToTerraform = exports.mediapackageOriginEndpointMssPackageEncryptionToTerraform = exports.mediapackageOriginEndpointMssPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackageOriginEndpointHlsPackageToTerraform = exports.mediapackageOriginEndpointHlsPackageStreamSelectionToTerraform = exports.mediapackageOriginEndpointHlsPackageEncryptionToTerraform = exports.mediapackageOriginEndpointHlsPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackageOriginEndpointDashPackageToTerraform = exports.mediapackageOriginEndpointDashPackageStreamSelectionToTerraform = exports.mediapackageOriginEndpointDashPackageEncryptionToTerraform = exports.mediapackageOriginEndpointDashPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackageOriginEndpointCmafPackageToTerraform = exports.mediapackageOriginEndpointCmafPackageStreamSelectionToTerraform = exports.mediapackageOriginEndpointCmafPackageHlsManifestsToTerraform = exports.mediapackageOriginEndpointCmafPackageEncryptionToTerraform = exports.mediapackageOriginEndpointCmafPackageEncryptionSpekeKeyProviderToTerraform = exports.mediapackageOriginEndpointAuthorizationToTerraform = void 0;
const cdktf = require("cdktf");
function mediapackageOriginEndpointAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cdn_identifier_secret: cdktf.stringToTerraform(struct.cdnIdentifierSecret),
        secrets_role_arn: cdktf.stringToTerraform(struct.secretsRoleArn),
    };
}
exports.mediapackageOriginEndpointAuthorizationToTerraform = mediapackageOriginEndpointAuthorizationToTerraform;
function mediapackageOriginEndpointCmafPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageOriginEndpointCmafPackageEncryptionSpekeKeyProviderToTerraform = mediapackageOriginEndpointCmafPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackageOriginEndpointCmafPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        key_rotation_interval_seconds: cdktf.numberToTerraform(struct.keyRotationIntervalSeconds),
        speke_key_provider: mediapackageOriginEndpointCmafPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackageOriginEndpointCmafPackageEncryptionToTerraform = mediapackageOriginEndpointCmafPackageEncryptionToTerraform;
function mediapackageOriginEndpointCmafPackageHlsManifestsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ad_markers: cdktf.stringToTerraform(struct.adMarkers),
        ad_triggers: cdktf.listMapper(cdktf.stringToTerraform)(struct.adTriggers),
        ads_on_delivery_restrictions: cdktf.stringToTerraform(struct.adsOnDeliveryRestrictions),
        id: cdktf.stringToTerraform(struct.id),
        include_iframe_only_stream: cdktf.booleanToTerraform(struct.includeIframeOnlyStream),
        manifest_name: cdktf.stringToTerraform(struct.manifestName),
        playlist_type: cdktf.stringToTerraform(struct.playlistType),
        playlist_window_seconds: cdktf.numberToTerraform(struct.playlistWindowSeconds),
        program_date_time_interval_seconds: cdktf.numberToTerraform(struct.programDateTimeIntervalSeconds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageOriginEndpointCmafPackageHlsManifestsToTerraform = mediapackageOriginEndpointCmafPackageHlsManifestsToTerraform;
function mediapackageOriginEndpointCmafPackageStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackageOriginEndpointCmafPackageStreamSelectionToTerraform = mediapackageOriginEndpointCmafPackageStreamSelectionToTerraform;
function mediapackageOriginEndpointCmafPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption: mediapackageOriginEndpointCmafPackageEncryptionToTerraform(struct.encryption),
        hls_manifests: cdktf.listMapper(mediapackageOriginEndpointCmafPackageHlsManifestsToTerraform)(struct.hlsManifests),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        segment_prefix: cdktf.stringToTerraform(struct.segmentPrefix),
        stream_selection: mediapackageOriginEndpointCmafPackageStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackageOriginEndpointCmafPackageToTerraform = mediapackageOriginEndpointCmafPackageToTerraform;
function mediapackageOriginEndpointDashPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageOriginEndpointDashPackageEncryptionSpekeKeyProviderToTerraform = mediapackageOriginEndpointDashPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackageOriginEndpointDashPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key_rotation_interval_seconds: cdktf.numberToTerraform(struct.keyRotationIntervalSeconds),
        speke_key_provider: mediapackageOriginEndpointDashPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackageOriginEndpointDashPackageEncryptionToTerraform = mediapackageOriginEndpointDashPackageEncryptionToTerraform;
function mediapackageOriginEndpointDashPackageStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackageOriginEndpointDashPackageStreamSelectionToTerraform = mediapackageOriginEndpointDashPackageStreamSelectionToTerraform;
function mediapackageOriginEndpointDashPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ad_triggers: cdktf.listMapper(cdktf.stringToTerraform)(struct.adTriggers),
        ads_on_delivery_restrictions: cdktf.stringToTerraform(struct.adsOnDeliveryRestrictions),
        encryption: mediapackageOriginEndpointDashPackageEncryptionToTerraform(struct.encryption),
        manifest_layout: cdktf.stringToTerraform(struct.manifestLayout),
        manifest_window_seconds: cdktf.numberToTerraform(struct.manifestWindowSeconds),
        min_buffer_time_seconds: cdktf.numberToTerraform(struct.minBufferTimeSeconds),
        min_update_period_seconds: cdktf.numberToTerraform(struct.minUpdatePeriodSeconds),
        period_triggers: cdktf.listMapper(cdktf.stringToTerraform)(struct.periodTriggers),
        profile: cdktf.stringToTerraform(struct.profile),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        segment_template_format: cdktf.stringToTerraform(struct.segmentTemplateFormat),
        stream_selection: mediapackageOriginEndpointDashPackageStreamSelectionToTerraform(struct.streamSelection),
        suggested_presentation_delay_seconds: cdktf.numberToTerraform(struct.suggestedPresentationDelaySeconds),
        utc_timing: cdktf.stringToTerraform(struct.utcTiming),
        utc_timing_uri: cdktf.stringToTerraform(struct.utcTimingUri),
    };
}
exports.mediapackageOriginEndpointDashPackageToTerraform = mediapackageOriginEndpointDashPackageToTerraform;
function mediapackageOriginEndpointHlsPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageOriginEndpointHlsPackageEncryptionSpekeKeyProviderToTerraform = mediapackageOriginEndpointHlsPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackageOriginEndpointHlsPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        constant_initialization_vector: cdktf.stringToTerraform(struct.constantInitializationVector),
        encryption_method: cdktf.stringToTerraform(struct.encryptionMethod),
        key_rotation_interval_seconds: cdktf.numberToTerraform(struct.keyRotationIntervalSeconds),
        repeat_ext_x_key: cdktf.booleanToTerraform(struct.repeatExtXKey),
        speke_key_provider: mediapackageOriginEndpointHlsPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackageOriginEndpointHlsPackageEncryptionToTerraform = mediapackageOriginEndpointHlsPackageEncryptionToTerraform;
function mediapackageOriginEndpointHlsPackageStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackageOriginEndpointHlsPackageStreamSelectionToTerraform = mediapackageOriginEndpointHlsPackageStreamSelectionToTerraform;
function mediapackageOriginEndpointHlsPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ad_markers: cdktf.stringToTerraform(struct.adMarkers),
        ad_triggers: cdktf.listMapper(cdktf.stringToTerraform)(struct.adTriggers),
        ads_on_delivery_restrictions: cdktf.stringToTerraform(struct.adsOnDeliveryRestrictions),
        encryption: mediapackageOriginEndpointHlsPackageEncryptionToTerraform(struct.encryption),
        include_iframe_only_stream: cdktf.booleanToTerraform(struct.includeIframeOnlyStream),
        playlist_type: cdktf.stringToTerraform(struct.playlistType),
        playlist_window_seconds: cdktf.numberToTerraform(struct.playlistWindowSeconds),
        program_date_time_interval_seconds: cdktf.numberToTerraform(struct.programDateTimeIntervalSeconds),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        stream_selection: mediapackageOriginEndpointHlsPackageStreamSelectionToTerraform(struct.streamSelection),
        use_audio_rendition_group: cdktf.booleanToTerraform(struct.useAudioRenditionGroup),
    };
}
exports.mediapackageOriginEndpointHlsPackageToTerraform = mediapackageOriginEndpointHlsPackageToTerraform;
function mediapackageOriginEndpointMssPackageEncryptionSpekeKeyProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        system_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.systemIds),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.mediapackageOriginEndpointMssPackageEncryptionSpekeKeyProviderToTerraform = mediapackageOriginEndpointMssPackageEncryptionSpekeKeyProviderToTerraform;
function mediapackageOriginEndpointMssPackageEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        speke_key_provider: mediapackageOriginEndpointMssPackageEncryptionSpekeKeyProviderToTerraform(struct.spekeKeyProvider),
    };
}
exports.mediapackageOriginEndpointMssPackageEncryptionToTerraform = mediapackageOriginEndpointMssPackageEncryptionToTerraform;
function mediapackageOriginEndpointMssPackageStreamSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_video_bits_per_second: cdktf.numberToTerraform(struct.maxVideoBitsPerSecond),
        min_video_bits_per_second: cdktf.numberToTerraform(struct.minVideoBitsPerSecond),
        stream_order: cdktf.stringToTerraform(struct.streamOrder),
    };
}
exports.mediapackageOriginEndpointMssPackageStreamSelectionToTerraform = mediapackageOriginEndpointMssPackageStreamSelectionToTerraform;
function mediapackageOriginEndpointMssPackageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption: mediapackageOriginEndpointMssPackageEncryptionToTerraform(struct.encryption),
        manifest_window_seconds: cdktf.numberToTerraform(struct.manifestWindowSeconds),
        segment_duration_seconds: cdktf.numberToTerraform(struct.segmentDurationSeconds),
        stream_selection: mediapackageOriginEndpointMssPackageStreamSelectionToTerraform(struct.streamSelection),
    };
}
exports.mediapackageOriginEndpointMssPackageToTerraform = mediapackageOriginEndpointMssPackageToTerraform;
function mediapackageOriginEndpointTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.mediapackageOriginEndpointTagsToTerraform = mediapackageOriginEndpointTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_origin_endpoint.html awscc_mediapackage_origin_endpoint}
*/
class MediapackageOriginEndpoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_origin_endpoint.html awscc_mediapackage_origin_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediapackageOriginEndpointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_origin_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authorization = config.authorization;
        this._channelId = config.channelId;
        this._cmafPackage = config.cmafPackage;
        this._dashPackage = config.dashPackage;
        this._description = config.description;
        this._hlsPackage = config.hlsPackage;
        this._id = config.id;
        this._manifestName = config.manifestName;
        this._mssPackage = config.mssPackage;
        this._origination = config.origination;
        this._startoverWindowSeconds = config.startoverWindowSeconds;
        this._tags = config.tags;
        this._timeDelaySeconds = config.timeDelaySeconds;
        this._whitelist = config.whitelist;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authorization() {
        return this.interpolationForAttribute('authorization');
    }
    set authorization(value) {
        this._authorization = value;
    }
    resetAuthorization() {
        this._authorization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationInput() {
        return this._authorization;
    }
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    set channelId(value) {
        this._channelId = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelIdInput() {
        return this._channelId;
    }
    get cmafPackage() {
        return this.interpolationForAttribute('cmaf_package');
    }
    set cmafPackage(value) {
        this._cmafPackage = value;
    }
    resetCmafPackage() {
        this._cmafPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cmafPackageInput() {
        return this._cmafPackage;
    }
    get dashPackage() {
        return this.interpolationForAttribute('dash_package');
    }
    set dashPackage(value) {
        this._dashPackage = value;
    }
    resetDashPackage() {
        this._dashPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dashPackageInput() {
        return this._dashPackage;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hlsPackage() {
        return this.interpolationForAttribute('hls_package');
    }
    set hlsPackage(value) {
        this._hlsPackage = value;
    }
    resetHlsPackage() {
        this._hlsPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsPackageInput() {
        return this._hlsPackage;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get manifestName() {
        return this.getStringAttribute('manifest_name');
    }
    set manifestName(value) {
        this._manifestName = value;
    }
    resetManifestName() {
        this._manifestName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manifestNameInput() {
        return this._manifestName;
    }
    get mssPackage() {
        return this.interpolationForAttribute('mss_package');
    }
    set mssPackage(value) {
        this._mssPackage = value;
    }
    resetMssPackage() {
        this._mssPackage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mssPackageInput() {
        return this._mssPackage;
    }
    get origination() {
        return this.getStringAttribute('origination');
    }
    set origination(value) {
        this._origination = value;
    }
    resetOrigination() {
        this._origination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originationInput() {
        return this._origination;
    }
    get startoverWindowSeconds() {
        return this.getNumberAttribute('startover_window_seconds');
    }
    set startoverWindowSeconds(value) {
        this._startoverWindowSeconds = value;
    }
    resetStartoverWindowSeconds() {
        this._startoverWindowSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startoverWindowSecondsInput() {
        return this._startoverWindowSeconds;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get timeDelaySeconds() {
        return this.getNumberAttribute('time_delay_seconds');
    }
    set timeDelaySeconds(value) {
        this._timeDelaySeconds = value;
    }
    resetTimeDelaySeconds() {
        this._timeDelaySeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeDelaySecondsInput() {
        return this._timeDelaySeconds;
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    get whitelist() {
        return this.getListAttribute('whitelist');
    }
    set whitelist(value) {
        this._whitelist = value;
    }
    resetWhitelist() {
        this._whitelist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get whitelistInput() {
        return this._whitelist;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorization: mediapackageOriginEndpointAuthorizationToTerraform(this._authorization),
            channel_id: cdktf.stringToTerraform(this._channelId),
            cmaf_package: mediapackageOriginEndpointCmafPackageToTerraform(this._cmafPackage),
            dash_package: mediapackageOriginEndpointDashPackageToTerraform(this._dashPackage),
            description: cdktf.stringToTerraform(this._description),
            hls_package: mediapackageOriginEndpointHlsPackageToTerraform(this._hlsPackage),
            id: cdktf.stringToTerraform(this._id),
            manifest_name: cdktf.stringToTerraform(this._manifestName),
            mss_package: mediapackageOriginEndpointMssPackageToTerraform(this._mssPackage),
            origination: cdktf.stringToTerraform(this._origination),
            startover_window_seconds: cdktf.numberToTerraform(this._startoverWindowSeconds),
            tags: cdktf.listMapper(mediapackageOriginEndpointTagsToTerraform)(this._tags),
            time_delay_seconds: cdktf.numberToTerraform(this._timeDelaySeconds),
            whitelist: cdktf.listMapper(cdktf.stringToTerraform)(this._whitelist),
        };
    }
}
exports.MediapackageOriginEndpoint = MediapackageOriginEndpoint;
// =================
// STATIC PROPERTIES
// =================
MediapackageOriginEndpoint.tfResourceType = "awscc_mediapackage_origin_endpoint";
//# sourceMappingURL=data:application/json;base64,