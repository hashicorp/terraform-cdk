"use strict";
// https://www.terraform.io/docs/providers/awscc/r/kendra_index.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraIndex = exports.kendraIndexUserTokenConfigurationsToTerraform = exports.kendraIndexUserTokenConfigurationsJwtTokenTypeConfigurationToTerraform = exports.kendraIndexUserTokenConfigurationsJsonTokenTypeConfigurationToTerraform = exports.kendraIndexTagsToTerraform = exports.kendraIndexServerSideEncryptionConfigurationToTerraform = exports.kendraIndexDocumentMetadataConfigurationsToTerraform = exports.kendraIndexDocumentMetadataConfigurationsSearchToTerraform = exports.kendraIndexDocumentMetadataConfigurationsRelevanceToTerraform = exports.kendraIndexDocumentMetadataConfigurationsRelevanceValueImportanceItemsToTerraform = exports.kendraIndexCapacityUnitsToTerraform = void 0;
const cdktf = require("cdktf");
function kendraIndexCapacityUnitsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        query_capacity_units: cdktf.numberToTerraform(struct.queryCapacityUnits),
        storage_capacity_units: cdktf.numberToTerraform(struct.storageCapacityUnits),
    };
}
exports.kendraIndexCapacityUnitsToTerraform = kendraIndexCapacityUnitsToTerraform;
function kendraIndexDocumentMetadataConfigurationsRelevanceValueImportanceItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.kendraIndexDocumentMetadataConfigurationsRelevanceValueImportanceItemsToTerraform = kendraIndexDocumentMetadataConfigurationsRelevanceValueImportanceItemsToTerraform;
function kendraIndexDocumentMetadataConfigurationsRelevanceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        freshness: cdktf.booleanToTerraform(struct.freshness),
        importance: cdktf.numberToTerraform(struct.importance),
        rank_order: cdktf.stringToTerraform(struct.rankOrder),
        value_importance_items: cdktf.listMapper(kendraIndexDocumentMetadataConfigurationsRelevanceValueImportanceItemsToTerraform)(struct.valueImportanceItems),
    };
}
exports.kendraIndexDocumentMetadataConfigurationsRelevanceToTerraform = kendraIndexDocumentMetadataConfigurationsRelevanceToTerraform;
function kendraIndexDocumentMetadataConfigurationsSearchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        displayable: cdktf.booleanToTerraform(struct.displayable),
        facetable: cdktf.booleanToTerraform(struct.facetable),
        searchable: cdktf.booleanToTerraform(struct.searchable),
        sortable: cdktf.booleanToTerraform(struct.sortable),
    };
}
exports.kendraIndexDocumentMetadataConfigurationsSearchToTerraform = kendraIndexDocumentMetadataConfigurationsSearchToTerraform;
function kendraIndexDocumentMetadataConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        relevance: kendraIndexDocumentMetadataConfigurationsRelevanceToTerraform(struct.relevance),
        search: kendraIndexDocumentMetadataConfigurationsSearchToTerraform(struct.search),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kendraIndexDocumentMetadataConfigurationsToTerraform = kendraIndexDocumentMetadataConfigurationsToTerraform;
function kendraIndexServerSideEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
    };
}
exports.kendraIndexServerSideEncryptionConfigurationToTerraform = kendraIndexServerSideEncryptionConfigurationToTerraform;
function kendraIndexTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kendraIndexTagsToTerraform = kendraIndexTagsToTerraform;
function kendraIndexUserTokenConfigurationsJsonTokenTypeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        group_attribute_field: cdktf.stringToTerraform(struct.groupAttributeField),
        user_name_attribute_field: cdktf.stringToTerraform(struct.userNameAttributeField),
    };
}
exports.kendraIndexUserTokenConfigurationsJsonTokenTypeConfigurationToTerraform = kendraIndexUserTokenConfigurationsJsonTokenTypeConfigurationToTerraform;
function kendraIndexUserTokenConfigurationsJwtTokenTypeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        claim_regex: cdktf.stringToTerraform(struct.claimRegex),
        group_attribute_field: cdktf.stringToTerraform(struct.groupAttributeField),
        issuer: cdktf.stringToTerraform(struct.issuer),
        key_location: cdktf.stringToTerraform(struct.keyLocation),
        secret_manager_arn: cdktf.stringToTerraform(struct.secretManagerArn),
        url: cdktf.stringToTerraform(struct.url),
        user_name_attribute_field: cdktf.stringToTerraform(struct.userNameAttributeField),
    };
}
exports.kendraIndexUserTokenConfigurationsJwtTokenTypeConfigurationToTerraform = kendraIndexUserTokenConfigurationsJwtTokenTypeConfigurationToTerraform;
function kendraIndexUserTokenConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        json_token_type_configuration: kendraIndexUserTokenConfigurationsJsonTokenTypeConfigurationToTerraform(struct.jsonTokenTypeConfiguration),
        jwt_token_type_configuration: kendraIndexUserTokenConfigurationsJwtTokenTypeConfigurationToTerraform(struct.jwtTokenTypeConfiguration),
    };
}
exports.kendraIndexUserTokenConfigurationsToTerraform = kendraIndexUserTokenConfigurationsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/kendra_index.html awscc_kendra_index}
*/
class KendraIndex extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/kendra_index.html awscc_kendra_index} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KendraIndexConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_kendra_index',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._capacityUnits = config.capacityUnits;
        this._description = config.description;
        this._documentMetadataConfigurations = config.documentMetadataConfigurations;
        this._edition = config.edition;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._serverSideEncryptionConfiguration = config.serverSideEncryptionConfiguration;
        this._tags = config.tags;
        this._userContextPolicy = config.userContextPolicy;
        this._userTokenConfigurations = config.userTokenConfigurations;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get capacityUnits() {
        return this.interpolationForAttribute('capacity_units');
    }
    set capacityUnits(value) {
        this._capacityUnits = value;
    }
    resetCapacityUnits() {
        this._capacityUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityUnitsInput() {
        return this._capacityUnits;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get documentMetadataConfigurations() {
        return this.interpolationForAttribute('document_metadata_configurations');
    }
    set documentMetadataConfigurations(value) {
        this._documentMetadataConfigurations = value;
    }
    resetDocumentMetadataConfigurations() {
        this._documentMetadataConfigurations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentMetadataConfigurationsInput() {
        return this._documentMetadataConfigurations;
    }
    get edition() {
        return this.getStringAttribute('edition');
    }
    set edition(value) {
        this._edition = value;
    }
    // Temporarily expose input value. Use with caution.
    get editionInput() {
        return this._edition;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get serverSideEncryptionConfiguration() {
        return this.interpolationForAttribute('server_side_encryption_configuration');
    }
    set serverSideEncryptionConfiguration(value) {
        this._serverSideEncryptionConfiguration = value;
    }
    resetServerSideEncryptionConfiguration() {
        this._serverSideEncryptionConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverSideEncryptionConfigurationInput() {
        return this._serverSideEncryptionConfiguration;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get userContextPolicy() {
        return this.getStringAttribute('user_context_policy');
    }
    set userContextPolicy(value) {
        this._userContextPolicy = value;
    }
    resetUserContextPolicy() {
        this._userContextPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userContextPolicyInput() {
        return this._userContextPolicy;
    }
    get userTokenConfigurations() {
        return this.interpolationForAttribute('user_token_configurations');
    }
    set userTokenConfigurations(value) {
        this._userTokenConfigurations = value;
    }
    resetUserTokenConfigurations() {
        this._userTokenConfigurations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenConfigurationsInput() {
        return this._userTokenConfigurations;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            capacity_units: kendraIndexCapacityUnitsToTerraform(this._capacityUnits),
            description: cdktf.stringToTerraform(this._description),
            document_metadata_configurations: cdktf.listMapper(kendraIndexDocumentMetadataConfigurationsToTerraform)(this._documentMetadataConfigurations),
            edition: cdktf.stringToTerraform(this._edition),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            server_side_encryption_configuration: kendraIndexServerSideEncryptionConfigurationToTerraform(this._serverSideEncryptionConfiguration),
            tags: cdktf.listMapper(kendraIndexTagsToTerraform)(this._tags),
            user_context_policy: cdktf.stringToTerraform(this._userContextPolicy),
            user_token_configurations: cdktf.listMapper(kendraIndexUserTokenConfigurationsToTerraform)(this._userTokenConfigurations),
        };
    }
}
exports.KendraIndex = KendraIndex;
// =================
// STATIC PROPERTIES
// =================
KendraIndex.tfResourceType = "awscc_kendra_index";
//# sourceMappingURL=data:application/json;base64,