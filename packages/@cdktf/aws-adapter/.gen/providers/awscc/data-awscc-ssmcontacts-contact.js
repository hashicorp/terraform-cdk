"use strict";
// https://www.terraform.io/docs/providers/awscc/d/ssmcontacts_contact.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSsmcontactsContact = exports.dataAwsccSsmcontactsContactPlanToTerraform = exports.DataAwsccSsmcontactsContactPlan = exports.dataAwsccSsmcontactsContactPlanTargetsToTerraform = exports.DataAwsccSsmcontactsContactPlanTargets = exports.dataAwsccSsmcontactsContactPlanTargetsContactTargetInfoToTerraform = exports.DataAwsccSsmcontactsContactPlanTargetsContactTargetInfo = exports.dataAwsccSsmcontactsContactPlanTargetsChannelTargetInfoToTerraform = exports.DataAwsccSsmcontactsContactPlanTargetsChannelTargetInfo = void 0;
const cdktf = require("cdktf");
class DataAwsccSsmcontactsContactPlanTargetsChannelTargetInfo extends cdktf.ComplexComputedList {
    // channel_id - computed: true, optional: false, required: false
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    // retry_interval_in_minutes - computed: true, optional: false, required: false
    get retryIntervalInMinutes() {
        return this.getNumberAttribute('retry_interval_in_minutes');
    }
}
exports.DataAwsccSsmcontactsContactPlanTargetsChannelTargetInfo = DataAwsccSsmcontactsContactPlanTargetsChannelTargetInfo;
function dataAwsccSsmcontactsContactPlanTargetsChannelTargetInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        channel_id: cdktf.stringToTerraform(struct.channelId),
        retry_interval_in_minutes: cdktf.numberToTerraform(struct.retryIntervalInMinutes),
    };
}
exports.dataAwsccSsmcontactsContactPlanTargetsChannelTargetInfoToTerraform = dataAwsccSsmcontactsContactPlanTargetsChannelTargetInfoToTerraform;
class DataAwsccSsmcontactsContactPlanTargetsContactTargetInfo extends cdktf.ComplexComputedList {
    // contact_id - computed: true, optional: false, required: false
    get contactId() {
        return this.getStringAttribute('contact_id');
    }
    // is_essential - computed: true, optional: false, required: false
    get isEssential() {
        return this.getBooleanAttribute('is_essential');
    }
}
exports.DataAwsccSsmcontactsContactPlanTargetsContactTargetInfo = DataAwsccSsmcontactsContactPlanTargetsContactTargetInfo;
function dataAwsccSsmcontactsContactPlanTargetsContactTargetInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contact_id: cdktf.stringToTerraform(struct.contactId),
        is_essential: cdktf.booleanToTerraform(struct.isEssential),
    };
}
exports.dataAwsccSsmcontactsContactPlanTargetsContactTargetInfoToTerraform = dataAwsccSsmcontactsContactPlanTargetsContactTargetInfoToTerraform;
class DataAwsccSsmcontactsContactPlanTargets extends cdktf.ComplexComputedList {
    // channel_target_info - computed: true, optional: false, required: false
    get channelTargetInfo() {
        return this.interpolationForAttribute('channel_target_info');
    }
    // contact_target_info - computed: true, optional: false, required: false
    get contactTargetInfo() {
        return this.interpolationForAttribute('contact_target_info');
    }
}
exports.DataAwsccSsmcontactsContactPlanTargets = DataAwsccSsmcontactsContactPlanTargets;
function dataAwsccSsmcontactsContactPlanTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        channel_target_info: dataAwsccSsmcontactsContactPlanTargetsChannelTargetInfoToTerraform(struct.channelTargetInfo),
        contact_target_info: dataAwsccSsmcontactsContactPlanTargetsContactTargetInfoToTerraform(struct.contactTargetInfo),
    };
}
exports.dataAwsccSsmcontactsContactPlanTargetsToTerraform = dataAwsccSsmcontactsContactPlanTargetsToTerraform;
class DataAwsccSsmcontactsContactPlan extends cdktf.ComplexComputedList {
    // duration_in_minutes - computed: true, optional: false, required: false
    get durationInMinutes() {
        return this.getNumberAttribute('duration_in_minutes');
    }
    // targets - computed: true, optional: false, required: false
    get targets() {
        return this.interpolationForAttribute('targets');
    }
}
exports.DataAwsccSsmcontactsContactPlan = DataAwsccSsmcontactsContactPlan;
function dataAwsccSsmcontactsContactPlanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_in_minutes: cdktf.numberToTerraform(struct.durationInMinutes),
        targets: cdktf.listMapper(dataAwsccSsmcontactsContactPlanTargetsToTerraform)(struct.targets),
    };
}
exports.dataAwsccSsmcontactsContactPlanToTerraform = dataAwsccSsmcontactsContactPlanToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/ssmcontacts_contact.html awscc_ssmcontacts_contact}
*/
class DataAwsccSsmcontactsContact extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/ssmcontacts_contact.html awscc_ssmcontacts_contact} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSsmcontactsContactConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssmcontacts_contact',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // alias - computed: true, optional: false, required: false
    get alias() {
        return this.getStringAttribute('alias');
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // plan - computed: true, optional: false, required: false
    get plan() {
        return this.interpolationForAttribute('plan');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSsmcontactsContact = DataAwsccSsmcontactsContact;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSsmcontactsContact.tfResourceType = "awscc_ssmcontacts_contact";
//# sourceMappingURL=data:application/json;base64,