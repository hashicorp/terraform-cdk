"use strict";
// https://www.terraform.io/docs/providers/awscc/r/customerprofiles_integration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerprofilesIntegration = exports.customerprofilesIntegrationTagsToTerraform = exports.customerprofilesIntegrationFlowDefinitionToTerraform = exports.customerprofilesIntegrationFlowDefinitionTriggerConfigToTerraform = exports.customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesToTerraform = exports.customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesScheduledToTerraform = exports.customerprofilesIntegrationFlowDefinitionTasksToTerraform = exports.customerprofilesIntegrationFlowDefinitionTasksTaskPropertiesToTerraform = exports.customerprofilesIntegrationFlowDefinitionTasksConnectorOperatorToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigIncrementalPullConfigToTerraform = void 0;
const cdktf = require("cdktf");
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigIncrementalPullConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        datetime_type_field_name: cdktf.stringToTerraform(struct.datetimeTypeFieldName),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigIncrementalPullConfigToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigIncrementalPullConfigToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesS3ToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_dynamic_field_update: cdktf.booleanToTerraform(struct.enableDynamicFieldUpdate),
        include_deleted_records: cdktf.booleanToTerraform(struct.includeDeletedRecords),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        marketo: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct.marketo),
        s3: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct.s3),
        salesforce: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct.salesforce),
        service_now: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct.serviceNow),
        zendesk: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesToTerraform;
function customerprofilesIntegrationFlowDefinitionSourceFlowConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_profile_name: cdktf.stringToTerraform(struct.connectorProfileName),
        connector_type: cdktf.stringToTerraform(struct.connectorType),
        incremental_pull_config: customerprofilesIntegrationFlowDefinitionSourceFlowConfigIncrementalPullConfigToTerraform(struct.incrementalPullConfig),
        source_connector_properties: customerprofilesIntegrationFlowDefinitionSourceFlowConfigSourceConnectorPropertiesToTerraform(struct.sourceConnectorProperties),
    };
}
exports.customerprofilesIntegrationFlowDefinitionSourceFlowConfigToTerraform = customerprofilesIntegrationFlowDefinitionSourceFlowConfigToTerraform;
function customerprofilesIntegrationFlowDefinitionTasksConnectorOperatorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        marketo: cdktf.stringToTerraform(struct.marketo),
        s3: cdktf.stringToTerraform(struct.s3),
        salesforce: cdktf.stringToTerraform(struct.salesforce),
        service_now: cdktf.stringToTerraform(struct.serviceNow),
        zendesk: cdktf.stringToTerraform(struct.zendesk),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTasksConnectorOperatorToTerraform = customerprofilesIntegrationFlowDefinitionTasksConnectorOperatorToTerraform;
function customerprofilesIntegrationFlowDefinitionTasksTaskPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        operator_property_key: cdktf.stringToTerraform(struct.operatorPropertyKey),
        property: cdktf.stringToTerraform(struct.property),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTasksTaskPropertiesToTerraform = customerprofilesIntegrationFlowDefinitionTasksTaskPropertiesToTerraform;
function customerprofilesIntegrationFlowDefinitionTasksToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_operator: customerprofilesIntegrationFlowDefinitionTasksConnectorOperatorToTerraform(struct.connectorOperator),
        destination_field: cdktf.stringToTerraform(struct.destinationField),
        source_fields: cdktf.listMapper(cdktf.stringToTerraform)(struct.sourceFields),
        task_properties: cdktf.listMapper(customerprofilesIntegrationFlowDefinitionTasksTaskPropertiesToTerraform)(struct.taskProperties),
        task_type: cdktf.stringToTerraform(struct.taskType),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTasksToTerraform = customerprofilesIntegrationFlowDefinitionTasksToTerraform;
function customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesScheduledToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_pull_mode: cdktf.stringToTerraform(struct.dataPullMode),
        first_execution_from: cdktf.numberToTerraform(struct.firstExecutionFrom),
        schedule_end_time: cdktf.numberToTerraform(struct.scheduleEndTime),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        schedule_offset: cdktf.numberToTerraform(struct.scheduleOffset),
        schedule_start_time: cdktf.numberToTerraform(struct.scheduleStartTime),
        timezone: cdktf.stringToTerraform(struct.timezone),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesScheduledToTerraform = customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesScheduledToTerraform;
function customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        scheduled: customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesScheduledToTerraform(struct.scheduled),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesToTerraform = customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesToTerraform;
function customerprofilesIntegrationFlowDefinitionTriggerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        trigger_properties: customerprofilesIntegrationFlowDefinitionTriggerConfigTriggerPropertiesToTerraform(struct.triggerProperties),
        trigger_type: cdktf.stringToTerraform(struct.triggerType),
    };
}
exports.customerprofilesIntegrationFlowDefinitionTriggerConfigToTerraform = customerprofilesIntegrationFlowDefinitionTriggerConfigToTerraform;
function customerprofilesIntegrationFlowDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        flow_name: cdktf.stringToTerraform(struct.flowName),
        kms_arn: cdktf.stringToTerraform(struct.kmsArn),
        source_flow_config: customerprofilesIntegrationFlowDefinitionSourceFlowConfigToTerraform(struct.sourceFlowConfig),
        tasks: cdktf.listMapper(customerprofilesIntegrationFlowDefinitionTasksToTerraform)(struct.tasks),
        trigger_config: customerprofilesIntegrationFlowDefinitionTriggerConfigToTerraform(struct.triggerConfig),
    };
}
exports.customerprofilesIntegrationFlowDefinitionToTerraform = customerprofilesIntegrationFlowDefinitionToTerraform;
function customerprofilesIntegrationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.customerprofilesIntegrationTagsToTerraform = customerprofilesIntegrationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_integration.html awscc_customerprofiles_integration}
*/
class CustomerprofilesIntegration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/customerprofiles_integration.html awscc_customerprofiles_integration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CustomerprofilesIntegrationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_customerprofiles_integration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._domainName = config.domainName;
        this._flowDefinition = config.flowDefinition;
        this._objectTypeName = config.objectTypeName;
        this._tags = config.tags;
        this._uri = config.uri;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get flowDefinition() {
        return this.interpolationForAttribute('flow_definition');
    }
    set flowDefinition(value) {
        this._flowDefinition = value;
    }
    resetFlowDefinition() {
        this._flowDefinition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flowDefinitionInput() {
        return this._flowDefinition;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_at - computed: true, optional: false, required: false
    get lastUpdatedAt() {
        return this.getStringAttribute('last_updated_at');
    }
    get objectTypeName() {
        return this.getStringAttribute('object_type_name');
    }
    set objectTypeName(value) {
        this._objectTypeName = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectTypeNameInput() {
        return this._objectTypeName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_name: cdktf.stringToTerraform(this._domainName),
            flow_definition: customerprofilesIntegrationFlowDefinitionToTerraform(this._flowDefinition),
            object_type_name: cdktf.stringToTerraform(this._objectTypeName),
            tags: cdktf.listMapper(customerprofilesIntegrationTagsToTerraform)(this._tags),
            uri: cdktf.stringToTerraform(this._uri),
        };
    }
}
exports.CustomerprofilesIntegration = CustomerprofilesIntegration;
// =================
// STATIC PROPERTIES
// =================
CustomerprofilesIntegration.tfResourceType = "awscc_customerprofiles_integration";
//# sourceMappingURL=data:application/json;base64,