"use strict";
// https://www.terraform.io/docs/providers/awscc
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsccProvider = exports.awsccProviderAssumeRoleToTerraform = void 0;
const cdktf = require("cdktf");
function awsccProviderAssumeRoleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_seconds: cdktf.numberToTerraform(struct.durationSeconds),
        external_id: cdktf.stringToTerraform(struct.externalId),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        session_name: cdktf.stringToTerraform(struct.sessionName),
        tags: cdktf.hashMapper(cdktf.anyToTerraform)(struct.tags),
        transitive_tag_keys: cdktf.listMapper(cdktf.stringToTerraform)(struct.transitiveTagKeys),
    };
}
exports.awsccProviderAssumeRoleToTerraform = awsccProviderAssumeRoleToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc awscc}
*/
class AwsccProvider extends cdktf.TerraformProvider {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc awscc} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AwsccProviderConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc',
            terraformGeneratorMetadata: {
                providerName: 'awscc',
                providerVersionConstraint: '0.1.0'
            },
            terraformProviderSource: 'local/hashicorp/awscc'
        });
        this._accessKey = config.accessKey;
        this._assumeRole = config.assumeRole;
        this._insecure = config.insecure;
        this._profile = config.profile;
        this._region = config.region;
        this._roleArn = config.roleArn;
        this._secretKey = config.secretKey;
        this._sharedConfigFiles = config.sharedConfigFiles;
        this._sharedCredentialsFiles = config.sharedCredentialsFiles;
        this._skipMedatadataApiCheck = config.skipMedatadataApiCheck;
        this._token = config.token;
        this._alias = config.alias;
    }
    get accessKey() {
        return this._accessKey;
    }
    set accessKey(value) {
        this._accessKey = value;
    }
    resetAccessKey() {
        this._accessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyInput() {
        return this._accessKey;
    }
    get assumeRole() {
        return this._assumeRole;
    }
    set assumeRole(value) {
        this._assumeRole = value;
    }
    resetAssumeRole() {
        this._assumeRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assumeRoleInput() {
        return this._assumeRole;
    }
    get insecure() {
        return this._insecure;
    }
    set insecure(value) {
        this._insecure = value;
    }
    resetInsecure() {
        this._insecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureInput() {
        return this._insecure;
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get region() {
        return this._region;
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get roleArn() {
        return this._roleArn;
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get secretKey() {
        return this._secretKey;
    }
    set secretKey(value) {
        this._secretKey = value;
    }
    resetSecretKey() {
        this._secretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretKeyInput() {
        return this._secretKey;
    }
    get sharedConfigFiles() {
        return this._sharedConfigFiles;
    }
    set sharedConfigFiles(value) {
        this._sharedConfigFiles = value;
    }
    resetSharedConfigFiles() {
        this._sharedConfigFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedConfigFilesInput() {
        return this._sharedConfigFiles;
    }
    get sharedCredentialsFiles() {
        return this._sharedCredentialsFiles;
    }
    set sharedCredentialsFiles(value) {
        this._sharedCredentialsFiles = value;
    }
    resetSharedCredentialsFiles() {
        this._sharedCredentialsFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedCredentialsFilesInput() {
        return this._sharedCredentialsFiles;
    }
    get skipMedatadataApiCheck() {
        return this._skipMedatadataApiCheck;
    }
    set skipMedatadataApiCheck(value) {
        this._skipMedatadataApiCheck = value;
    }
    resetSkipMedatadataApiCheck() {
        this._skipMedatadataApiCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipMedatadataApiCheckInput() {
        return this._skipMedatadataApiCheck;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
    get alias() {
        return this._alias;
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_key: cdktf.stringToTerraform(this._accessKey),
            assume_role: awsccProviderAssumeRoleToTerraform(this._assumeRole),
            insecure: cdktf.booleanToTerraform(this._insecure),
            profile: cdktf.stringToTerraform(this._profile),
            region: cdktf.stringToTerraform(this._region),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            secret_key: cdktf.stringToTerraform(this._secretKey),
            shared_config_files: cdktf.listMapper(cdktf.stringToTerraform)(this._sharedConfigFiles),
            shared_credentials_files: cdktf.listMapper(cdktf.stringToTerraform)(this._sharedCredentialsFiles),
            skip_medatadata_api_check: cdktf.booleanToTerraform(this._skipMedatadataApiCheck),
            token: cdktf.stringToTerraform(this._token),
            alias: cdktf.stringToTerraform(this._alias),
        };
    }
}
exports.AwsccProvider = AwsccProvider;
// =================
// STATIC PROPERTIES
// =================
AwsccProvider.tfResourceType = "awscc";
//# sourceMappingURL=data:application/json;base64,