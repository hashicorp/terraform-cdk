"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecs_capacity_provider.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsCapacityProvider = exports.ecsCapacityProviderTagsToTerraform = exports.ecsCapacityProviderAutoScalingGroupProviderToTerraform = exports.ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform = void 0;
const cdktf = require("cdktf");
function ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_warmup_period: cdktf.numberToTerraform(struct.instanceWarmupPeriod),
        maximum_scaling_step_size: cdktf.numberToTerraform(struct.maximumScalingStepSize),
        minimum_scaling_step_size: cdktf.numberToTerraform(struct.minimumScalingStepSize),
        status: cdktf.stringToTerraform(struct.status),
        target_capacity: cdktf.numberToTerraform(struct.targetCapacity),
    };
}
exports.ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform = ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform;
function ecsCapacityProviderAutoScalingGroupProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auto_scaling_group_arn: cdktf.stringToTerraform(struct.autoScalingGroupArn),
        managed_scaling: ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform(struct.managedScaling),
        managed_termination_protection: cdktf.stringToTerraform(struct.managedTerminationProtection),
    };
}
exports.ecsCapacityProviderAutoScalingGroupProviderToTerraform = ecsCapacityProviderAutoScalingGroupProviderToTerraform;
function ecsCapacityProviderTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsCapacityProviderTagsToTerraform = ecsCapacityProviderTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecs_capacity_provider.html awscc_ecs_capacity_provider}
*/
class EcsCapacityProvider extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecs_capacity_provider.html awscc_ecs_capacity_provider} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsCapacityProviderConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_capacity_provider',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoScalingGroupProvider = config.autoScalingGroupProvider;
        this._name = config.name;
        this._tags = config.tags;
    }
    get autoScalingGroupProvider() {
        return this.interpolationForAttribute('auto_scaling_group_provider');
    }
    set autoScalingGroupProvider(value) {
        this._autoScalingGroupProvider = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingGroupProviderInput() {
        return this._autoScalingGroupProvider;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_scaling_group_provider: ecsCapacityProviderAutoScalingGroupProviderToTerraform(this._autoScalingGroupProvider),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(ecsCapacityProviderTagsToTerraform)(this._tags),
        };
    }
}
exports.EcsCapacityProvider = EcsCapacityProvider;
// =================
// STATIC PROPERTIES
// =================
EcsCapacityProvider.tfResourceType = "awscc_ecs_capacity_provider";
//# sourceMappingURL=data:application/json;base64,