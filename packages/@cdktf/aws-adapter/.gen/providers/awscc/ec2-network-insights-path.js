"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_network_insights_path.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2NetworkInsightsPath = exports.ec2NetworkInsightsPathTagsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2NetworkInsightsPathTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2NetworkInsightsPathTagsToTerraform = ec2NetworkInsightsPathTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_network_insights_path.html awscc_ec2_network_insights_path}
*/
class Ec2NetworkInsightsPath extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_network_insights_path.html awscc_ec2_network_insights_path} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2NetworkInsightsPathConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_network_insights_path',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._destination = config.destination;
        this._destinationIp = config.destinationIp;
        this._destinationPort = config.destinationPort;
        this._protocol = config.protocol;
        this._source = config.source;
        this._sourceIp = config.sourceIp;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_date - computed: true, optional: false, required: false
    get createdDate() {
        return this.getStringAttribute('created_date');
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get destinationIp() {
        return this.getStringAttribute('destination_ip');
    }
    set destinationIp(value) {
        this._destinationIp = value;
    }
    resetDestinationIp() {
        this._destinationIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationIpInput() {
        return this._destinationIp;
    }
    get destinationPort() {
        return this.getNumberAttribute('destination_port');
    }
    set destinationPort(value) {
        this._destinationPort = value;
    }
    resetDestinationPort() {
        this._destinationPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationPortInput() {
        return this._destinationPort;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // network_insights_path_arn - computed: true, optional: false, required: false
    get networkInsightsPathArn() {
        return this.getStringAttribute('network_insights_path_arn');
    }
    // network_insights_path_id - computed: true, optional: false, required: false
    get networkInsightsPathId() {
        return this.getStringAttribute('network_insights_path_id');
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get sourceIp() {
        return this.getStringAttribute('source_ip');
    }
    set sourceIp(value) {
        this._sourceIp = value;
    }
    resetSourceIp() {
        this._sourceIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceIpInput() {
        return this._sourceIp;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            destination: cdktf.stringToTerraform(this._destination),
            destination_ip: cdktf.stringToTerraform(this._destinationIp),
            destination_port: cdktf.numberToTerraform(this._destinationPort),
            protocol: cdktf.stringToTerraform(this._protocol),
            source: cdktf.stringToTerraform(this._source),
            source_ip: cdktf.stringToTerraform(this._sourceIp),
            tags: cdktf.listMapper(ec2NetworkInsightsPathTagsToTerraform)(this._tags),
        };
    }
}
exports.Ec2NetworkInsightsPath = Ec2NetworkInsightsPath;
// =================
// STATIC PROPERTIES
// =================
Ec2NetworkInsightsPath.tfResourceType = "awscc_ec2_network_insights_path";
//# sourceMappingURL=data:application/json;base64,