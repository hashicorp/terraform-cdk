"use strict";
// https://www.terraform.io/docs/providers/awscc/d/lambda_code_signing_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccLambdaCodeSigningConfig = exports.dataAwsccLambdaCodeSigningConfigCodeSigningPoliciesToTerraform = exports.DataAwsccLambdaCodeSigningConfigCodeSigningPolicies = exports.dataAwsccLambdaCodeSigningConfigAllowedPublishersToTerraform = exports.DataAwsccLambdaCodeSigningConfigAllowedPublishers = void 0;
const cdktf = require("cdktf");
class DataAwsccLambdaCodeSigningConfigAllowedPublishers extends cdktf.ComplexComputedList {
    // signing_profile_version_arns - computed: true, optional: false, required: false
    get signingProfileVersionArns() {
        return this.getListAttribute('signing_profile_version_arns');
    }
}
exports.DataAwsccLambdaCodeSigningConfigAllowedPublishers = DataAwsccLambdaCodeSigningConfigAllowedPublishers;
function dataAwsccLambdaCodeSigningConfigAllowedPublishersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        signing_profile_version_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.signingProfileVersionArns),
    };
}
exports.dataAwsccLambdaCodeSigningConfigAllowedPublishersToTerraform = dataAwsccLambdaCodeSigningConfigAllowedPublishersToTerraform;
class DataAwsccLambdaCodeSigningConfigCodeSigningPolicies extends cdktf.ComplexComputedList {
    // untrusted_artifact_on_deployment - computed: true, optional: false, required: false
    get untrustedArtifactOnDeployment() {
        return this.getStringAttribute('untrusted_artifact_on_deployment');
    }
}
exports.DataAwsccLambdaCodeSigningConfigCodeSigningPolicies = DataAwsccLambdaCodeSigningConfigCodeSigningPolicies;
function dataAwsccLambdaCodeSigningConfigCodeSigningPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        untrusted_artifact_on_deployment: cdktf.stringToTerraform(struct.untrustedArtifactOnDeployment),
    };
}
exports.dataAwsccLambdaCodeSigningConfigCodeSigningPoliciesToTerraform = dataAwsccLambdaCodeSigningConfigCodeSigningPoliciesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/lambda_code_signing_config.html awscc_lambda_code_signing_config}
*/
class DataAwsccLambdaCodeSigningConfig extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/lambda_code_signing_config.html awscc_lambda_code_signing_config} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccLambdaCodeSigningConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_lambda_code_signing_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // allowed_publishers - computed: true, optional: false, required: false
    get allowedPublishers() {
        return this.interpolationForAttribute('allowed_publishers');
    }
    // code_signing_config_arn - computed: true, optional: false, required: false
    get codeSigningConfigArn() {
        return this.getStringAttribute('code_signing_config_arn');
    }
    // code_signing_config_id - computed: true, optional: false, required: false
    get codeSigningConfigId() {
        return this.getStringAttribute('code_signing_config_id');
    }
    // code_signing_policies - computed: true, optional: false, required: false
    get codeSigningPolicies() {
        return this.interpolationForAttribute('code_signing_policies');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccLambdaCodeSigningConfig = DataAwsccLambdaCodeSigningConfig;
// =================
// STATIC PROPERTIES
// =================
DataAwsccLambdaCodeSigningConfig.tfResourceType = "awscc_lambda_code_signing_config";
//# sourceMappingURL=data:application/json;base64,