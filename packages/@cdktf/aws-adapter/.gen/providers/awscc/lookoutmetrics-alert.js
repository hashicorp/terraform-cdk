"use strict";
// https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_alert.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookoutmetricsAlert = exports.lookoutmetricsAlertActionToTerraform = exports.lookoutmetricsAlertActionSnsConfigurationToTerraform = exports.lookoutmetricsAlertActionLambdaConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function lookoutmetricsAlertActionLambdaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.lookoutmetricsAlertActionLambdaConfigurationToTerraform = lookoutmetricsAlertActionLambdaConfigurationToTerraform;
function lookoutmetricsAlertActionSnsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        sns_topic_arn: cdktf.stringToTerraform(struct.snsTopicArn),
    };
}
exports.lookoutmetricsAlertActionSnsConfigurationToTerraform = lookoutmetricsAlertActionSnsConfigurationToTerraform;
function lookoutmetricsAlertActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        lambda_configuration: lookoutmetricsAlertActionLambdaConfigurationToTerraform(struct.lambdaConfiguration),
        sns_configuration: lookoutmetricsAlertActionSnsConfigurationToTerraform(struct.snsConfiguration),
    };
}
exports.lookoutmetricsAlertActionToTerraform = lookoutmetricsAlertActionToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_alert.html awscc_lookoutmetrics_alert}
*/
class LookoutmetricsAlert extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/lookoutmetrics_alert.html awscc_lookoutmetrics_alert} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LookoutmetricsAlertConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_lookoutmetrics_alert',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._action = config.action;
        this._alertDescription = config.alertDescription;
        this._alertName = config.alertName;
        this._alertSensitivityThreshold = config.alertSensitivityThreshold;
        this._anomalyDetectorArn = config.anomalyDetectorArn;
    }
    get action() {
        return this.interpolationForAttribute('action');
    }
    set action(value) {
        this._action = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action;
    }
    get alertDescription() {
        return this.getStringAttribute('alert_description');
    }
    set alertDescription(value) {
        this._alertDescription = value;
    }
    resetAlertDescription() {
        this._alertDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertDescriptionInput() {
        return this._alertDescription;
    }
    get alertName() {
        return this.getStringAttribute('alert_name');
    }
    set alertName(value) {
        this._alertName = value;
    }
    resetAlertName() {
        this._alertName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertNameInput() {
        return this._alertName;
    }
    get alertSensitivityThreshold() {
        return this.getNumberAttribute('alert_sensitivity_threshold');
    }
    set alertSensitivityThreshold(value) {
        this._alertSensitivityThreshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get alertSensitivityThresholdInput() {
        return this._alertSensitivityThreshold;
    }
    get anomalyDetectorArn() {
        return this.getStringAttribute('anomaly_detector_arn');
    }
    set anomalyDetectorArn(value) {
        this._anomalyDetectorArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectorArnInput() {
        return this._anomalyDetectorArn;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            action: lookoutmetricsAlertActionToTerraform(this._action),
            alert_description: cdktf.stringToTerraform(this._alertDescription),
            alert_name: cdktf.stringToTerraform(this._alertName),
            alert_sensitivity_threshold: cdktf.numberToTerraform(this._alertSensitivityThreshold),
            anomaly_detector_arn: cdktf.stringToTerraform(this._anomalyDetectorArn),
        };
    }
}
exports.LookoutmetricsAlert = LookoutmetricsAlert;
// =================
// STATIC PROPERTIES
// =================
LookoutmetricsAlert.tfResourceType = "awscc_lookoutmetrics_alert";
//# sourceMappingURL=data:application/json;base64,