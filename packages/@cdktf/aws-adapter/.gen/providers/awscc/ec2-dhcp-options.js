"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_dhcp_options.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2DhcpOptions = exports.ec2DhcpOptionsTagsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2DhcpOptionsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2DhcpOptionsTagsToTerraform = ec2DhcpOptionsTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_dhcp_options.html awscc_ec2_dhcp_options}
*/
class Ec2DhcpOptions extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_dhcp_options.html awscc_ec2_dhcp_options} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2DhcpOptionsConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_dhcp_options',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._domainName = config.domainName;
        this._domainNameServers = config.domainNameServers;
        this._netbiosNameServers = config.netbiosNameServers;
        this._netbiosNodeType = config.netbiosNodeType;
        this._ntpServers = config.ntpServers;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // dhcp_options_id - computed: true, optional: false, required: false
    get dhcpOptionsId() {
        return this.getStringAttribute('dhcp_options_id');
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    resetDomainName() {
        this._domainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get domainNameServers() {
        return this.getListAttribute('domain_name_servers');
    }
    set domainNameServers(value) {
        this._domainNameServers = value;
    }
    resetDomainNameServers() {
        this._domainNameServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameServersInput() {
        return this._domainNameServers;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get netbiosNameServers() {
        return this.getListAttribute('netbios_name_servers');
    }
    set netbiosNameServers(value) {
        this._netbiosNameServers = value;
    }
    resetNetbiosNameServers() {
        this._netbiosNameServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get netbiosNameServersInput() {
        return this._netbiosNameServers;
    }
    get netbiosNodeType() {
        return this.getNumberAttribute('netbios_node_type');
    }
    set netbiosNodeType(value) {
        this._netbiosNodeType = value;
    }
    resetNetbiosNodeType() {
        this._netbiosNodeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get netbiosNodeTypeInput() {
        return this._netbiosNodeType;
    }
    get ntpServers() {
        return this.getListAttribute('ntp_servers');
    }
    set ntpServers(value) {
        this._ntpServers = value;
    }
    resetNtpServers() {
        this._ntpServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ntpServersInput() {
        return this._ntpServers;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_name: cdktf.stringToTerraform(this._domainName),
            domain_name_servers: cdktf.listMapper(cdktf.stringToTerraform)(this._domainNameServers),
            netbios_name_servers: cdktf.listMapper(cdktf.stringToTerraform)(this._netbiosNameServers),
            netbios_node_type: cdktf.numberToTerraform(this._netbiosNodeType),
            ntp_servers: cdktf.listMapper(cdktf.stringToTerraform)(this._ntpServers),
            tags: cdktf.listMapper(ec2DhcpOptionsTagsToTerraform)(this._tags),
        };
    }
}
exports.Ec2DhcpOptions = Ec2DhcpOptions;
// =================
// STATIC PROPERTIES
// =================
Ec2DhcpOptions.tfResourceType = "awscc_ec2_dhcp_options";
//# sourceMappingURL=data:application/json;base64,