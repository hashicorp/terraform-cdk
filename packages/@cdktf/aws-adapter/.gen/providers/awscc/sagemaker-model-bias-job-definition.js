"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_bias_job_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerModelBiasJobDefinition = exports.sagemakerModelBiasJobDefinitionTagsToTerraform = exports.sagemakerModelBiasJobDefinitionStoppingConditionToTerraform = exports.sagemakerModelBiasJobDefinitionNetworkConfigToTerraform = exports.sagemakerModelBiasJobDefinitionNetworkConfigVpcConfigToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsS3OutputToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobInputToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobInputGroundTruthS3InputToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasJobInputEndpointInputToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasBaselineConfigToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasBaselineConfigConstraintsResourceToTerraform = exports.sagemakerModelBiasJobDefinitionModelBiasAppSpecificationToTerraform = exports.sagemakerModelBiasJobDefinitionJobResourcesToTerraform = exports.sagemakerModelBiasJobDefinitionJobResourcesClusterConfigToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerModelBiasJobDefinitionJobResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerModelBiasJobDefinitionJobResourcesClusterConfigToTerraform = sagemakerModelBiasJobDefinitionJobResourcesClusterConfigToTerraform;
function sagemakerModelBiasJobDefinitionJobResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_config: sagemakerModelBiasJobDefinitionJobResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerModelBiasJobDefinitionJobResourcesToTerraform = sagemakerModelBiasJobDefinitionJobResourcesToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        config_uri: cdktf.stringToTerraform(struct.configUri),
        environment: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environment),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasAppSpecificationToTerraform = sagemakerModelBiasJobDefinitionModelBiasAppSpecificationToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasBaselineConfigConstraintsResourceToTerraform = sagemakerModelBiasJobDefinitionModelBiasBaselineConfigConstraintsResourceToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        baselining_job_name: cdktf.stringToTerraform(struct.baseliningJobName),
        constraints_resource: sagemakerModelBiasJobDefinitionModelBiasBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasBaselineConfigToTerraform = sagemakerModelBiasJobDefinitionModelBiasBaselineConfigToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobInputEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        end_time_offset: cdktf.stringToTerraform(struct.endTimeOffset),
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        features_attribute: cdktf.stringToTerraform(struct.featuresAttribute),
        inference_attribute: cdktf.stringToTerraform(struct.inferenceAttribute),
        local_path: cdktf.stringToTerraform(struct.localPath),
        probability_attribute: cdktf.stringToTerraform(struct.probabilityAttribute),
        probability_threshold_attribute: cdktf.numberToTerraform(struct.probabilityThresholdAttribute),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
        start_time_offset: cdktf.stringToTerraform(struct.startTimeOffset),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobInputEndpointInputToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobInputEndpointInputToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobInputGroundTruthS3InputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobInputGroundTruthS3InputToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobInputGroundTruthS3InputToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_input: sagemakerModelBiasJobDefinitionModelBiasJobInputEndpointInputToTerraform(struct.endpointInput),
        ground_truth_s3_input: sagemakerModelBiasJobDefinitionModelBiasJobInputGroundTruthS3InputToTerraform(struct.groundTruthS3Input),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobInputToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobInputToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_output: sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsToTerraform;
function sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: cdktf.listMapper(sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigMonitoringOutputsToTerraform)(struct.monitoringOutputs),
    };
}
exports.sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigToTerraform = sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigToTerraform;
function sagemakerModelBiasJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.sagemakerModelBiasJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerModelBiasJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerModelBiasJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerModelBiasJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerModelBiasJobDefinitionNetworkConfigToTerraform = sagemakerModelBiasJobDefinitionNetworkConfigToTerraform;
function sagemakerModelBiasJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerModelBiasJobDefinitionStoppingConditionToTerraform = sagemakerModelBiasJobDefinitionStoppingConditionToTerraform;
function sagemakerModelBiasJobDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerModelBiasJobDefinitionTagsToTerraform = sagemakerModelBiasJobDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_bias_job_definition.html awscc_sagemaker_model_bias_job_definition}
*/
class SagemakerModelBiasJobDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_bias_job_definition.html awscc_sagemaker_model_bias_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerModelBiasJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_model_bias_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._jobDefinitionName = config.jobDefinitionName;
        this._jobResources = config.jobResources;
        this._modelBiasAppSpecification = config.modelBiasAppSpecification;
        this._modelBiasBaselineConfig = config.modelBiasBaselineConfig;
        this._modelBiasJobInput = config.modelBiasJobInput;
        this._modelBiasJobOutputConfig = config.modelBiasJobOutputConfig;
        this._networkConfig = config.networkConfig;
        this._roleArn = config.roleArn;
        this._stoppingCondition = config.stoppingCondition;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // job_definition_arn - computed: true, optional: false, required: false
    get jobDefinitionArn() {
        return this.getStringAttribute('job_definition_arn');
    }
    get jobDefinitionName() {
        return this.getStringAttribute('job_definition_name');
    }
    set jobDefinitionName(value) {
        this._jobDefinitionName = value;
    }
    resetJobDefinitionName() {
        this._jobDefinitionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobDefinitionNameInput() {
        return this._jobDefinitionName;
    }
    get jobResources() {
        return this.interpolationForAttribute('job_resources');
    }
    set jobResources(value) {
        this._jobResources = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobResourcesInput() {
        return this._jobResources;
    }
    get modelBiasAppSpecification() {
        return this.interpolationForAttribute('model_bias_app_specification');
    }
    set modelBiasAppSpecification(value) {
        this._modelBiasAppSpecification = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelBiasAppSpecificationInput() {
        return this._modelBiasAppSpecification;
    }
    get modelBiasBaselineConfig() {
        return this.interpolationForAttribute('model_bias_baseline_config');
    }
    set modelBiasBaselineConfig(value) {
        this._modelBiasBaselineConfig = value;
    }
    resetModelBiasBaselineConfig() {
        this._modelBiasBaselineConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelBiasBaselineConfigInput() {
        return this._modelBiasBaselineConfig;
    }
    get modelBiasJobInput() {
        return this.interpolationForAttribute('model_bias_job_input');
    }
    set modelBiasJobInput(value) {
        this._modelBiasJobInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelBiasJobInputInput() {
        return this._modelBiasJobInput;
    }
    get modelBiasJobOutputConfig() {
        return this.interpolationForAttribute('model_bias_job_output_config');
    }
    set modelBiasJobOutputConfig(value) {
        this._modelBiasJobOutputConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelBiasJobOutputConfigInput() {
        return this._modelBiasJobOutputConfig;
    }
    get networkConfig() {
        return this.interpolationForAttribute('network_config');
    }
    set networkConfig(value) {
        this._networkConfig = value;
    }
    resetNetworkConfig() {
        this._networkConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stoppingCondition() {
        return this.interpolationForAttribute('stopping_condition');
    }
    set stoppingCondition(value) {
        this._stoppingCondition = value;
    }
    resetStoppingCondition() {
        this._stoppingCondition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stoppingConditionInput() {
        return this._stoppingCondition;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            job_definition_name: cdktf.stringToTerraform(this._jobDefinitionName),
            job_resources: sagemakerModelBiasJobDefinitionJobResourcesToTerraform(this._jobResources),
            model_bias_app_specification: sagemakerModelBiasJobDefinitionModelBiasAppSpecificationToTerraform(this._modelBiasAppSpecification),
            model_bias_baseline_config: sagemakerModelBiasJobDefinitionModelBiasBaselineConfigToTerraform(this._modelBiasBaselineConfig),
            model_bias_job_input: sagemakerModelBiasJobDefinitionModelBiasJobInputToTerraform(this._modelBiasJobInput),
            model_bias_job_output_config: sagemakerModelBiasJobDefinitionModelBiasJobOutputConfigToTerraform(this._modelBiasJobOutputConfig),
            network_config: sagemakerModelBiasJobDefinitionNetworkConfigToTerraform(this._networkConfig),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            stopping_condition: sagemakerModelBiasJobDefinitionStoppingConditionToTerraform(this._stoppingCondition),
            tags: cdktf.listMapper(sagemakerModelBiasJobDefinitionTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerModelBiasJobDefinition = SagemakerModelBiasJobDefinition;
// =================
// STATIC PROPERTIES
// =================
SagemakerModelBiasJobDefinition.tfResourceType = "awscc_sagemaker_model_bias_job_definition";
//# sourceMappingURL=data:application/json;base64,