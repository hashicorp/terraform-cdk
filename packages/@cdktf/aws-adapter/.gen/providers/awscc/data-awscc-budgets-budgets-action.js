"use strict";
// https://www.terraform.io/docs/providers/awscc/d/budgets_budgets_action.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccBudgetsBudgetsAction = exports.dataAwsccBudgetsBudgetsActionSubscribersToTerraform = exports.DataAwsccBudgetsBudgetsActionSubscribers = exports.dataAwsccBudgetsBudgetsActionDefinitionToTerraform = exports.DataAwsccBudgetsBudgetsActionDefinition = exports.dataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform = exports.DataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinition = exports.dataAwsccBudgetsBudgetsActionDefinitionScpActionDefinitionToTerraform = exports.DataAwsccBudgetsBudgetsActionDefinitionScpActionDefinition = exports.dataAwsccBudgetsBudgetsActionDefinitionIamActionDefinitionToTerraform = exports.DataAwsccBudgetsBudgetsActionDefinitionIamActionDefinition = exports.dataAwsccBudgetsBudgetsActionActionThresholdToTerraform = exports.DataAwsccBudgetsBudgetsActionActionThreshold = void 0;
const cdktf = require("cdktf");
class DataAwsccBudgetsBudgetsActionActionThreshold extends cdktf.ComplexComputedList {
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getNumberAttribute('value');
    }
}
exports.DataAwsccBudgetsBudgetsActionActionThreshold = DataAwsccBudgetsBudgetsActionActionThreshold;
function dataAwsccBudgetsBudgetsActionActionThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.dataAwsccBudgetsBudgetsActionActionThresholdToTerraform = dataAwsccBudgetsBudgetsActionActionThresholdToTerraform;
class DataAwsccBudgetsBudgetsActionDefinitionIamActionDefinition extends cdktf.ComplexComputedList {
    // groups - computed: true, optional: false, required: false
    get groups() {
        return this.getListAttribute('groups');
    }
    // policy_arn - computed: true, optional: false, required: false
    get policyArn() {
        return this.getStringAttribute('policy_arn');
    }
    // roles - computed: true, optional: false, required: false
    get roles() {
        return this.getListAttribute('roles');
    }
    // users - computed: true, optional: false, required: false
    get users() {
        return this.getListAttribute('users');
    }
}
exports.DataAwsccBudgetsBudgetsActionDefinitionIamActionDefinition = DataAwsccBudgetsBudgetsActionDefinitionIamActionDefinition;
function dataAwsccBudgetsBudgetsActionDefinitionIamActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.groups),
        policy_arn: cdktf.stringToTerraform(struct.policyArn),
        roles: cdktf.listMapper(cdktf.stringToTerraform)(struct.roles),
        users: cdktf.listMapper(cdktf.stringToTerraform)(struct.users),
    };
}
exports.dataAwsccBudgetsBudgetsActionDefinitionIamActionDefinitionToTerraform = dataAwsccBudgetsBudgetsActionDefinitionIamActionDefinitionToTerraform;
class DataAwsccBudgetsBudgetsActionDefinitionScpActionDefinition extends cdktf.ComplexComputedList {
    // policy_id - computed: true, optional: false, required: false
    get policyId() {
        return this.getStringAttribute('policy_id');
    }
    // target_ids - computed: true, optional: false, required: false
    get targetIds() {
        return this.getListAttribute('target_ids');
    }
}
exports.DataAwsccBudgetsBudgetsActionDefinitionScpActionDefinition = DataAwsccBudgetsBudgetsActionDefinitionScpActionDefinition;
function dataAwsccBudgetsBudgetsActionDefinitionScpActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        policy_id: cdktf.stringToTerraform(struct.policyId),
        target_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.targetIds),
    };
}
exports.dataAwsccBudgetsBudgetsActionDefinitionScpActionDefinitionToTerraform = dataAwsccBudgetsBudgetsActionDefinitionScpActionDefinitionToTerraform;
class DataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinition extends cdktf.ComplexComputedList {
    // instance_ids - computed: true, optional: false, required: false
    get instanceIds() {
        return this.getListAttribute('instance_ids');
    }
    // region - computed: true, optional: false, required: false
    get region() {
        return this.getStringAttribute('region');
    }
    // subtype - computed: true, optional: false, required: false
    get subtype() {
        return this.getStringAttribute('subtype');
    }
}
exports.DataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinition = DataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinition;
function dataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.instanceIds),
        region: cdktf.stringToTerraform(struct.region),
        subtype: cdktf.stringToTerraform(struct.subtype),
    };
}
exports.dataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform = dataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform;
class DataAwsccBudgetsBudgetsActionDefinition extends cdktf.ComplexComputedList {
    // iam_action_definition - computed: true, optional: false, required: false
    get iamActionDefinition() {
        return this.interpolationForAttribute('iam_action_definition');
    }
    // scp_action_definition - computed: true, optional: false, required: false
    get scpActionDefinition() {
        return this.interpolationForAttribute('scp_action_definition');
    }
    // ssm_action_definition - computed: true, optional: false, required: false
    get ssmActionDefinition() {
        return this.interpolationForAttribute('ssm_action_definition');
    }
}
exports.DataAwsccBudgetsBudgetsActionDefinition = DataAwsccBudgetsBudgetsActionDefinition;
function dataAwsccBudgetsBudgetsActionDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        iam_action_definition: dataAwsccBudgetsBudgetsActionDefinitionIamActionDefinitionToTerraform(struct.iamActionDefinition),
        scp_action_definition: dataAwsccBudgetsBudgetsActionDefinitionScpActionDefinitionToTerraform(struct.scpActionDefinition),
        ssm_action_definition: dataAwsccBudgetsBudgetsActionDefinitionSsmActionDefinitionToTerraform(struct.ssmActionDefinition),
    };
}
exports.dataAwsccBudgetsBudgetsActionDefinitionToTerraform = dataAwsccBudgetsBudgetsActionDefinitionToTerraform;
class DataAwsccBudgetsBudgetsActionSubscribers extends cdktf.ComplexComputedList {
    // address - computed: true, optional: false, required: false
    get address() {
        return this.getStringAttribute('address');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DataAwsccBudgetsBudgetsActionSubscribers = DataAwsccBudgetsBudgetsActionSubscribers;
function dataAwsccBudgetsBudgetsActionSubscribersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: cdktf.stringToTerraform(struct.address),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsccBudgetsBudgetsActionSubscribersToTerraform = dataAwsccBudgetsBudgetsActionSubscribersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/budgets_budgets_action.html awscc_budgets_budgets_action}
*/
class DataAwsccBudgetsBudgetsAction extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/budgets_budgets_action.html awscc_budgets_budgets_action} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccBudgetsBudgetsActionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_budgets_budgets_action',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // action_id - computed: true, optional: false, required: false
    get actionId() {
        return this.getStringAttribute('action_id');
    }
    // action_threshold - computed: true, optional: false, required: false
    get actionThreshold() {
        return this.interpolationForAttribute('action_threshold');
    }
    // action_type - computed: true, optional: false, required: false
    get actionType() {
        return this.getStringAttribute('action_type');
    }
    // approval_model - computed: true, optional: false, required: false
    get approvalModel() {
        return this.getStringAttribute('approval_model');
    }
    // budget_name - computed: true, optional: false, required: false
    get budgetName() {
        return this.getStringAttribute('budget_name');
    }
    // definition - computed: true, optional: false, required: false
    get definition() {
        return this.interpolationForAttribute('definition');
    }
    // execution_role_arn - computed: true, optional: false, required: false
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // notification_type - computed: true, optional: false, required: false
    get notificationType() {
        return this.getStringAttribute('notification_type');
    }
    // subscribers - computed: true, optional: false, required: false
    get subscribers() {
        return this.interpolationForAttribute('subscribers');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccBudgetsBudgetsAction = DataAwsccBudgetsBudgetsAction;
// =================
// STATIC PROPERTIES
// =================
DataAwsccBudgetsBudgetsAction.tfResourceType = "awscc_budgets_budgets_action";
//# sourceMappingURL=data:application/json;base64,