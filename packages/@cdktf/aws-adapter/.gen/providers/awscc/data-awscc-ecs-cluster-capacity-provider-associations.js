"use strict";
// https://www.terraform.io/docs/providers/awscc/d/ecs_cluster_capacity_provider_associations.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccEcsClusterCapacityProviderAssociations = exports.dataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform = exports.DataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategy = void 0;
const cdktf = require("cdktf");
class DataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategy extends cdktf.ComplexComputedList {
    // base - computed: true, optional: false, required: false
    get base() {
        return this.getNumberAttribute('base');
    }
    // capacity_provider - computed: true, optional: false, required: false
    get capacityProvider() {
        return this.getStringAttribute('capacity_provider');
    }
    // weight - computed: true, optional: false, required: false
    get weight() {
        return this.getNumberAttribute('weight');
    }
}
exports.DataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategy = DataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategy;
function dataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        base: cdktf.numberToTerraform(struct.base),
        capacity_provider: cdktf.stringToTerraform(struct.capacityProvider),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.dataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform = dataAwsccEcsClusterCapacityProviderAssociationsDefaultCapacityProviderStrategyToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/ecs_cluster_capacity_provider_associations.html awscc_ecs_cluster_capacity_provider_associations}
*/
class DataAwsccEcsClusterCapacityProviderAssociations extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/ecs_cluster_capacity_provider_associations.html awscc_ecs_cluster_capacity_provider_associations} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccEcsClusterCapacityProviderAssociationsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_cluster_capacity_provider_associations',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // capacity_providers - computed: true, optional: false, required: false
    get capacityProviders() {
        return this.getListAttribute('capacity_providers');
    }
    // cluster - computed: true, optional: false, required: false
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    // default_capacity_provider_strategy - computed: true, optional: false, required: false
    get defaultCapacityProviderStrategy() {
        return this.interpolationForAttribute('default_capacity_provider_strategy');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccEcsClusterCapacityProviderAssociations = DataAwsccEcsClusterCapacityProviderAssociations;
// =================
// STATIC PROPERTIES
// =================
DataAwsccEcsClusterCapacityProviderAssociations.tfResourceType = "awscc_ecs_cluster_capacity_provider_associations";
//# sourceMappingURL=data:application/json;base64,