"use strict";
// https://www.terraform.io/docs/providers/awscc/r/groundstation_mission_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroundstationMissionProfile = exports.groundstationMissionProfileTagsToTerraform = exports.groundstationMissionProfileDataflowEdgesToTerraform = void 0;
const cdktf = require("cdktf");
function groundstationMissionProfileDataflowEdgesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
        source: cdktf.stringToTerraform(struct.source),
    };
}
exports.groundstationMissionProfileDataflowEdgesToTerraform = groundstationMissionProfileDataflowEdgesToTerraform;
function groundstationMissionProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.groundstationMissionProfileTagsToTerraform = groundstationMissionProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/groundstation_mission_profile.html awscc_groundstation_mission_profile}
*/
class GroundstationMissionProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/groundstation_mission_profile.html awscc_groundstation_mission_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GroundstationMissionProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_groundstation_mission_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._contactPostPassDurationSeconds = config.contactPostPassDurationSeconds;
        this._contactPrePassDurationSeconds = config.contactPrePassDurationSeconds;
        this._dataflowEdges = config.dataflowEdges;
        this._minimumViableContactDurationSeconds = config.minimumViableContactDurationSeconds;
        this._name = config.name;
        this._tags = config.tags;
        this._trackingConfigArn = config.trackingConfigArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get contactPostPassDurationSeconds() {
        return this.getNumberAttribute('contact_post_pass_duration_seconds');
    }
    set contactPostPassDurationSeconds(value) {
        this._contactPostPassDurationSeconds = value;
    }
    resetContactPostPassDurationSeconds() {
        this._contactPostPassDurationSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contactPostPassDurationSecondsInput() {
        return this._contactPostPassDurationSeconds;
    }
    get contactPrePassDurationSeconds() {
        return this.getNumberAttribute('contact_pre_pass_duration_seconds');
    }
    set contactPrePassDurationSeconds(value) {
        this._contactPrePassDurationSeconds = value;
    }
    resetContactPrePassDurationSeconds() {
        this._contactPrePassDurationSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contactPrePassDurationSecondsInput() {
        return this._contactPrePassDurationSeconds;
    }
    get dataflowEdges() {
        return this.interpolationForAttribute('dataflow_edges');
    }
    set dataflowEdges(value) {
        this._dataflowEdges = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataflowEdgesInput() {
        return this._dataflowEdges;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get minimumViableContactDurationSeconds() {
        return this.getNumberAttribute('minimum_viable_contact_duration_seconds');
    }
    set minimumViableContactDurationSeconds(value) {
        this._minimumViableContactDurationSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get minimumViableContactDurationSecondsInput() {
        return this._minimumViableContactDurationSeconds;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // region - computed: true, optional: false, required: false
    get region() {
        return this.getStringAttribute('region');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get trackingConfigArn() {
        return this.getStringAttribute('tracking_config_arn');
    }
    set trackingConfigArn(value) {
        this._trackingConfigArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get trackingConfigArnInput() {
        return this._trackingConfigArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            contact_post_pass_duration_seconds: cdktf.numberToTerraform(this._contactPostPassDurationSeconds),
            contact_pre_pass_duration_seconds: cdktf.numberToTerraform(this._contactPrePassDurationSeconds),
            dataflow_edges: cdktf.listMapper(groundstationMissionProfileDataflowEdgesToTerraform)(this._dataflowEdges),
            minimum_viable_contact_duration_seconds: cdktf.numberToTerraform(this._minimumViableContactDurationSeconds),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(groundstationMissionProfileTagsToTerraform)(this._tags),
            tracking_config_arn: cdktf.stringToTerraform(this._trackingConfigArn),
        };
    }
}
exports.GroundstationMissionProfile = GroundstationMissionProfile;
// =================
// STATIC PROPERTIES
// =================
GroundstationMissionProfile.tfResourceType = "awscc_groundstation_mission_profile";
//# sourceMappingURL=data:application/json;base64,