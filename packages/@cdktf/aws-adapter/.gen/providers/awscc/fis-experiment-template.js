"use strict";
// https://www.terraform.io/docs/providers/awscc/r/fis_experiment_template.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.FisExperimentTemplate = exports.fisExperimentTemplateTargetsToTerraform = exports.fisExperimentTemplateTargetsFiltersToTerraform = exports.fisExperimentTemplateStopConditionsToTerraform = exports.fisExperimentTemplateActionsToTerraform = void 0;
const cdktf = require("cdktf");
function fisExperimentTemplateActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_id: cdktf.stringToTerraform(struct.actionId),
        description: cdktf.stringToTerraform(struct.description),
        parameters: cdktf.hashMapper(cdktf.anyToTerraform)(struct.parameters),
        start_after: cdktf.listMapper(cdktf.stringToTerraform)(struct.startAfter),
        targets: cdktf.hashMapper(cdktf.anyToTerraform)(struct.targets),
    };
}
exports.fisExperimentTemplateActionsToTerraform = fisExperimentTemplateActionsToTerraform;
function fisExperimentTemplateStopConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.fisExperimentTemplateStopConditionsToTerraform = fisExperimentTemplateStopConditionsToTerraform;
function fisExperimentTemplateTargetsFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.fisExperimentTemplateTargetsFiltersToTerraform = fisExperimentTemplateTargetsFiltersToTerraform;
function fisExperimentTemplateTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        filters: cdktf.listMapper(fisExperimentTemplateTargetsFiltersToTerraform)(struct.filters),
        resource_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.resourceArns),
        resource_tags: cdktf.hashMapper(cdktf.anyToTerraform)(struct.resourceTags),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
        selection_mode: cdktf.stringToTerraform(struct.selectionMode),
    };
}
exports.fisExperimentTemplateTargetsToTerraform = fisExperimentTemplateTargetsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/fis_experiment_template.html awscc_fis_experiment_template}
*/
class FisExperimentTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/fis_experiment_template.html awscc_fis_experiment_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FisExperimentTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_fis_experiment_template',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._actions = config.actions;
        this._description = config.description;
        this._roleArn = config.roleArn;
        this._stopConditions = config.stopConditions;
        this._tags = config.tags;
        this._targets = config.targets;
    }
    get actions() {
        return this.interpolationForAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stopConditions() {
        return this.interpolationForAttribute('stop_conditions');
    }
    set stopConditions(value) {
        this._stopConditions = value;
    }
    // Temporarily expose input value. Use with caution.
    get stopConditionsInput() {
        return this._stopConditions;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targets() {
        return this.interpolationForAttribute('targets');
    }
    set targets(value) {
        this._targets = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            actions: cdktf.hashMapper(cdktf.anyToTerraform)(this._actions),
            description: cdktf.stringToTerraform(this._description),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            stop_conditions: cdktf.listMapper(fisExperimentTemplateStopConditionsToTerraform)(this._stopConditions),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            targets: cdktf.hashMapper(cdktf.anyToTerraform)(this._targets),
        };
    }
}
exports.FisExperimentTemplate = FisExperimentTemplate;
// =================
// STATIC PROPERTIES
// =================
FisExperimentTemplate.tfResourceType = "awscc_fis_experiment_template";
//# sourceMappingURL=data:application/json;base64,