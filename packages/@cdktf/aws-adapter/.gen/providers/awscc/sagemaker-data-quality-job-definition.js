"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_data_quality_job_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerDataQualityJobDefinition = exports.sagemakerDataQualityJobDefinitionTagsToTerraform = exports.sagemakerDataQualityJobDefinitionStoppingConditionToTerraform = exports.sagemakerDataQualityJobDefinitionNetworkConfigToTerraform = exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform = exports.sagemakerDataQualityJobDefinitionJobResourcesToTerraform = exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_arguments: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerArguments),
        container_entrypoint: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerEntrypoint),
        environment: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environment),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        post_analytics_processor_source_uri: cdktf.stringToTerraform(struct.postAnalyticsProcessorSourceUri),
        record_preprocessor_source_uri: cdktf.stringToTerraform(struct.recordPreprocessorSourceUri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform = sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        baselining_job_name: cdktf.stringToTerraform(struct.baseliningJobName),
        constraints_resource: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
        statistics_resource: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform(struct.statisticsResource),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_input: sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform(struct.endpointInput),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_output: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: cdktf.listMapper(sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform)(struct.monitoringOutputs),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform;
function sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform = sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform;
function sagemakerDataQualityJobDefinitionJobResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_config: sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerDataQualityJobDefinitionJobResourcesToTerraform = sagemakerDataQualityJobDefinitionJobResourcesToTerraform;
function sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerDataQualityJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigToTerraform = sagemakerDataQualityJobDefinitionNetworkConfigToTerraform;
function sagemakerDataQualityJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerDataQualityJobDefinitionStoppingConditionToTerraform = sagemakerDataQualityJobDefinitionStoppingConditionToTerraform;
function sagemakerDataQualityJobDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerDataQualityJobDefinitionTagsToTerraform = sagemakerDataQualityJobDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_data_quality_job_definition.html awscc_sagemaker_data_quality_job_definition}
*/
class SagemakerDataQualityJobDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_data_quality_job_definition.html awscc_sagemaker_data_quality_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerDataQualityJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_data_quality_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._dataQualityAppSpecification = config.dataQualityAppSpecification;
        this._dataQualityBaselineConfig = config.dataQualityBaselineConfig;
        this._dataQualityJobInput = config.dataQualityJobInput;
        this._dataQualityJobOutputConfig = config.dataQualityJobOutputConfig;
        this._jobDefinitionName = config.jobDefinitionName;
        this._jobResources = config.jobResources;
        this._networkConfig = config.networkConfig;
        this._roleArn = config.roleArn;
        this._stoppingCondition = config.stoppingCondition;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    get dataQualityAppSpecification() {
        return this.interpolationForAttribute('data_quality_app_specification');
    }
    set dataQualityAppSpecification(value) {
        this._dataQualityAppSpecification = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityAppSpecificationInput() {
        return this._dataQualityAppSpecification;
    }
    get dataQualityBaselineConfig() {
        return this.interpolationForAttribute('data_quality_baseline_config');
    }
    set dataQualityBaselineConfig(value) {
        this._dataQualityBaselineConfig = value;
    }
    resetDataQualityBaselineConfig() {
        this._dataQualityBaselineConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityBaselineConfigInput() {
        return this._dataQualityBaselineConfig;
    }
    get dataQualityJobInput() {
        return this.interpolationForAttribute('data_quality_job_input');
    }
    set dataQualityJobInput(value) {
        this._dataQualityJobInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityJobInputInput() {
        return this._dataQualityJobInput;
    }
    get dataQualityJobOutputConfig() {
        return this.interpolationForAttribute('data_quality_job_output_config');
    }
    set dataQualityJobOutputConfig(value) {
        this._dataQualityJobOutputConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityJobOutputConfigInput() {
        return this._dataQualityJobOutputConfig;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // job_definition_arn - computed: true, optional: false, required: false
    get jobDefinitionArn() {
        return this.getStringAttribute('job_definition_arn');
    }
    get jobDefinitionName() {
        return this.getStringAttribute('job_definition_name');
    }
    set jobDefinitionName(value) {
        this._jobDefinitionName = value;
    }
    resetJobDefinitionName() {
        this._jobDefinitionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobDefinitionNameInput() {
        return this._jobDefinitionName;
    }
    get jobResources() {
        return this.interpolationForAttribute('job_resources');
    }
    set jobResources(value) {
        this._jobResources = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobResourcesInput() {
        return this._jobResources;
    }
    get networkConfig() {
        return this.interpolationForAttribute('network_config');
    }
    set networkConfig(value) {
        this._networkConfig = value;
    }
    resetNetworkConfig() {
        this._networkConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stoppingCondition() {
        return this.interpolationForAttribute('stopping_condition');
    }
    set stoppingCondition(value) {
        this._stoppingCondition = value;
    }
    resetStoppingCondition() {
        this._stoppingCondition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stoppingConditionInput() {
        return this._stoppingCondition;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            data_quality_app_specification: sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform(this._dataQualityAppSpecification),
            data_quality_baseline_config: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform(this._dataQualityBaselineConfig),
            data_quality_job_input: sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform(this._dataQualityJobInput),
            data_quality_job_output_config: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform(this._dataQualityJobOutputConfig),
            job_definition_name: cdktf.stringToTerraform(this._jobDefinitionName),
            job_resources: sagemakerDataQualityJobDefinitionJobResourcesToTerraform(this._jobResources),
            network_config: sagemakerDataQualityJobDefinitionNetworkConfigToTerraform(this._networkConfig),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            stopping_condition: sagemakerDataQualityJobDefinitionStoppingConditionToTerraform(this._stoppingCondition),
            tags: cdktf.listMapper(sagemakerDataQualityJobDefinitionTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerDataQualityJobDefinition = SagemakerDataQualityJobDefinition;
// =================
// STATIC PROPERTIES
// =================
SagemakerDataQualityJobDefinition.tfResourceType = "awscc_sagemaker_data_quality_job_definition";
//# sourceMappingURL=data:application/json;base64,