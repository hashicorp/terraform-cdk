"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact_channel.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmcontactsContactChannel = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact_channel.html awscc_ssmcontacts_contact_channel}
*/
class SsmcontactsContactChannel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssmcontacts_contact_channel.html awscc_ssmcontacts_contact_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmcontactsContactChannelConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssmcontacts_contact_channel',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._channelAddress = config.channelAddress;
        this._channelName = config.channelName;
        this._channelType = config.channelType;
        this._contactId = config.contactId;
        this._deferActivation = config.deferActivation;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get channelAddress() {
        return this.getStringAttribute('channel_address');
    }
    set channelAddress(value) {
        this._channelAddress = value;
    }
    resetChannelAddress() {
        this._channelAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelAddressInput() {
        return this._channelAddress;
    }
    get channelName() {
        return this.getStringAttribute('channel_name');
    }
    set channelName(value) {
        this._channelName = value;
    }
    resetChannelName() {
        this._channelName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelNameInput() {
        return this._channelName;
    }
    get channelType() {
        return this.getStringAttribute('channel_type');
    }
    set channelType(value) {
        this._channelType = value;
    }
    resetChannelType() {
        this._channelType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelTypeInput() {
        return this._channelType;
    }
    get contactId() {
        return this.getStringAttribute('contact_id');
    }
    set contactId(value) {
        this._contactId = value;
    }
    resetContactId() {
        this._contactId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contactIdInput() {
        return this._contactId;
    }
    get deferActivation() {
        return this.getBooleanAttribute('defer_activation');
    }
    set deferActivation(value) {
        this._deferActivation = value;
    }
    resetDeferActivation() {
        this._deferActivation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deferActivationInput() {
        return this._deferActivation;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            channel_address: cdktf.stringToTerraform(this._channelAddress),
            channel_name: cdktf.stringToTerraform(this._channelName),
            channel_type: cdktf.stringToTerraform(this._channelType),
            contact_id: cdktf.stringToTerraform(this._contactId),
            defer_activation: cdktf.booleanToTerraform(this._deferActivation),
        };
    }
}
exports.SsmcontactsContactChannel = SsmcontactsContactChannel;
// =================
// STATIC PROPERTIES
// =================
SsmcontactsContactChannel.tfResourceType = "awscc_ssmcontacts_contact_channel";
//# sourceMappingURL=data:application/json;base64,