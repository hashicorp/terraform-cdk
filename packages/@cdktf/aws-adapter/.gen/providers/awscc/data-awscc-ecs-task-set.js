"use strict";
// https://www.terraform.io/docs/providers/awscc/d/ecs_task_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccEcsTaskSet = exports.dataAwsccEcsTaskSetServiceRegistriesToTerraform = exports.DataAwsccEcsTaskSetServiceRegistries = exports.dataAwsccEcsTaskSetScaleToTerraform = exports.DataAwsccEcsTaskSetScale = exports.dataAwsccEcsTaskSetNetworkConfigurationToTerraform = exports.DataAwsccEcsTaskSetNetworkConfiguration = exports.dataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform = exports.DataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfiguration = exports.dataAwsccEcsTaskSetLoadBalancersToTerraform = exports.DataAwsccEcsTaskSetLoadBalancers = void 0;
const cdktf = require("cdktf");
class DataAwsccEcsTaskSetLoadBalancers extends cdktf.ComplexComputedList {
    // container_name - computed: true, optional: false, required: false
    get containerName() {
        return this.getStringAttribute('container_name');
    }
    // container_port - computed: true, optional: false, required: false
    get containerPort() {
        return this.getNumberAttribute('container_port');
    }
    // load_balancer_name - computed: true, optional: false, required: false
    get loadBalancerName() {
        return this.getStringAttribute('load_balancer_name');
    }
    // target_group_arn - computed: true, optional: false, required: false
    get targetGroupArn() {
        return this.getStringAttribute('target_group_arn');
    }
}
exports.DataAwsccEcsTaskSetLoadBalancers = DataAwsccEcsTaskSetLoadBalancers;
function dataAwsccEcsTaskSetLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        container_port: cdktf.numberToTerraform(struct.containerPort),
        load_balancer_name: cdktf.stringToTerraform(struct.loadBalancerName),
        target_group_arn: cdktf.stringToTerraform(struct.targetGroupArn),
    };
}
exports.dataAwsccEcsTaskSetLoadBalancersToTerraform = dataAwsccEcsTaskSetLoadBalancersToTerraform;
class DataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfiguration extends cdktf.ComplexComputedList {
    // assign_public_ip - computed: true, optional: false, required: false
    get assignPublicIp() {
        return this.getStringAttribute('assign_public_ip');
    }
    // security_groups - computed: true, optional: false, required: false
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    // subnets - computed: true, optional: false, required: false
    get subnets() {
        return this.getListAttribute('subnets');
    }
}
exports.DataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfiguration = DataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfiguration;
function dataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        assign_public_ip: cdktf.stringToTerraform(struct.assignPublicIp),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.dataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform = dataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform;
class DataAwsccEcsTaskSetNetworkConfiguration extends cdktf.ComplexComputedList {
    // aws_vpc_configuration - computed: true, optional: false, required: false
    get awsVpcConfiguration() {
        return this.interpolationForAttribute('aws_vpc_configuration');
    }
}
exports.DataAwsccEcsTaskSetNetworkConfiguration = DataAwsccEcsTaskSetNetworkConfiguration;
function dataAwsccEcsTaskSetNetworkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aws_vpc_configuration: dataAwsccEcsTaskSetNetworkConfigurationAwsVpcConfigurationToTerraform(struct.awsVpcConfiguration),
    };
}
exports.dataAwsccEcsTaskSetNetworkConfigurationToTerraform = dataAwsccEcsTaskSetNetworkConfigurationToTerraform;
class DataAwsccEcsTaskSetScale extends cdktf.ComplexComputedList {
    // unit - computed: true, optional: false, required: false
    get unit() {
        return this.getStringAttribute('unit');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getNumberAttribute('value');
    }
}
exports.DataAwsccEcsTaskSetScale = DataAwsccEcsTaskSetScale;
function dataAwsccEcsTaskSetScaleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.dataAwsccEcsTaskSetScaleToTerraform = dataAwsccEcsTaskSetScaleToTerraform;
class DataAwsccEcsTaskSetServiceRegistries extends cdktf.ComplexComputedList {
    // container_name - computed: true, optional: false, required: false
    get containerName() {
        return this.getStringAttribute('container_name');
    }
    // container_port - computed: true, optional: false, required: false
    get containerPort() {
        return this.getNumberAttribute('container_port');
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
    // registry_arn - computed: true, optional: false, required: false
    get registryArn() {
        return this.getStringAttribute('registry_arn');
    }
}
exports.DataAwsccEcsTaskSetServiceRegistries = DataAwsccEcsTaskSetServiceRegistries;
function dataAwsccEcsTaskSetServiceRegistriesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        container_port: cdktf.numberToTerraform(struct.containerPort),
        port: cdktf.numberToTerraform(struct.port),
        registry_arn: cdktf.stringToTerraform(struct.registryArn),
    };
}
exports.dataAwsccEcsTaskSetServiceRegistriesToTerraform = dataAwsccEcsTaskSetServiceRegistriesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/ecs_task_set.html awscc_ecs_task_set}
*/
class DataAwsccEcsTaskSet extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/ecs_task_set.html awscc_ecs_task_set} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccEcsTaskSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_task_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // cluster - computed: true, optional: false, required: false
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    // external_id - computed: true, optional: false, required: false
    get externalId() {
        return this.getStringAttribute('external_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // launch_type - computed: true, optional: false, required: false
    get launchType() {
        return this.getStringAttribute('launch_type');
    }
    // load_balancers - computed: true, optional: false, required: false
    get loadBalancers() {
        return this.interpolationForAttribute('load_balancers');
    }
    // network_configuration - computed: true, optional: false, required: false
    get networkConfiguration() {
        return this.interpolationForAttribute('network_configuration');
    }
    // platform_version - computed: true, optional: false, required: false
    get platformVersion() {
        return this.getStringAttribute('platform_version');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.interpolationForAttribute('scale');
    }
    // service - computed: true, optional: false, required: false
    get service() {
        return this.getStringAttribute('service');
    }
    // service_registries - computed: true, optional: false, required: false
    get serviceRegistries() {
        return this.interpolationForAttribute('service_registries');
    }
    // task_definition - computed: true, optional: false, required: false
    get taskDefinition() {
        return this.getStringAttribute('task_definition');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccEcsTaskSet = DataAwsccEcsTaskSet;
// =================
// STATIC PROPERTIES
// =================
DataAwsccEcsTaskSet.tfResourceType = "awscc_ecs_task_set";
//# sourceMappingURL=data:application/json;base64,