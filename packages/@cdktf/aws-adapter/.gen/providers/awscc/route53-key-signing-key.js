"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53_key_signing_key.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53KeySigningKey = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53_key_signing_key.html awscc_route53_key_signing_key}
*/
class Route53KeySigningKey extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53_key_signing_key.html awscc_route53_key_signing_key} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53KeySigningKeyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53_key_signing_key',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._hostedZoneId = config.hostedZoneId;
        this._keyManagementServiceArn = config.keyManagementServiceArn;
        this._name = config.name;
        this._status = config.status;
    }
    get hostedZoneId() {
        return this.getStringAttribute('hosted_zone_id');
    }
    set hostedZoneId(value) {
        this._hostedZoneId = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostedZoneIdInput() {
        return this._hostedZoneId;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get keyManagementServiceArn() {
        return this.getStringAttribute('key_management_service_arn');
    }
    set keyManagementServiceArn(value) {
        this._keyManagementServiceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyManagementServiceArnInput() {
        return this._keyManagementServiceArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            hosted_zone_id: cdktf.stringToTerraform(this._hostedZoneId),
            key_management_service_arn: cdktf.stringToTerraform(this._keyManagementServiceArn),
            name: cdktf.stringToTerraform(this._name),
            status: cdktf.stringToTerraform(this._status),
        };
    }
}
exports.Route53KeySigningKey = Route53KeySigningKey;
// =================
// STATIC PROPERTIES
// =================
Route53KeySigningKey.tfResourceType = "awscc_route53_key_signing_key";
//# sourceMappingURL=data:application/json;base64,