"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudfront_realtime_log_config.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontRealtimeLogConfig = exports.cloudfrontRealtimeLogConfigEndPointsToTerraform = exports.cloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform = void 0;
const cdktf = require("cdktf");
function cloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        stream_arn: cdktf.stringToTerraform(struct.streamArn),
    };
}
exports.cloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform = cloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform;
function cloudfrontRealtimeLogConfigEndPointsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kinesis_stream_config: cloudfrontRealtimeLogConfigEndPointsKinesisStreamConfigToTerraform(struct.kinesisStreamConfig),
        stream_type: cdktf.stringToTerraform(struct.streamType),
    };
}
exports.cloudfrontRealtimeLogConfigEndPointsToTerraform = cloudfrontRealtimeLogConfigEndPointsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_realtime_log_config.html awscc_cloudfront_realtime_log_config}
*/
class CloudfrontRealtimeLogConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_realtime_log_config.html awscc_cloudfront_realtime_log_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontRealtimeLogConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_realtime_log_config',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._endPoints = config.endPoints;
        this._fields = config.fields;
        this._name = config.name;
        this._samplingRate = config.samplingRate;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get endPoints() {
        return this.interpolationForAttribute('end_points');
    }
    set endPoints(value) {
        this._endPoints = value;
    }
    // Temporarily expose input value. Use with caution.
    get endPointsInput() {
        return this._endPoints;
    }
    get fields() {
        return this.getListAttribute('fields');
    }
    set fields(value) {
        this._fields = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldsInput() {
        return this._fields;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get samplingRate() {
        return this.getNumberAttribute('sampling_rate');
    }
    set samplingRate(value) {
        this._samplingRate = value;
    }
    // Temporarily expose input value. Use with caution.
    get samplingRateInput() {
        return this._samplingRate;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            end_points: cdktf.listMapper(cloudfrontRealtimeLogConfigEndPointsToTerraform)(this._endPoints),
            fields: cdktf.listMapper(cdktf.stringToTerraform)(this._fields),
            name: cdktf.stringToTerraform(this._name),
            sampling_rate: cdktf.numberToTerraform(this._samplingRate),
        };
    }
}
exports.CloudfrontRealtimeLogConfig = CloudfrontRealtimeLogConfig;
// =================
// STATIC PROPERTIES
// =================
CloudfrontRealtimeLogConfig.tfResourceType = "awscc_cloudfront_realtime_log_config";
//# sourceMappingURL=data:application/json;base64,