"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudfront_distribution.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontDistribution = exports.cloudfrontDistributionTagsToTerraform = exports.cloudfrontDistributionDistributionConfigToTerraform = exports.cloudfrontDistributionDistributionConfigViewerCertificateToTerraform = exports.cloudfrontDistributionDistributionConfigS3OriginToTerraform = exports.cloudfrontDistributionDistributionConfigRestrictionsToTerraform = exports.cloudfrontDistributionDistributionConfigRestrictionsGeoRestrictionToTerraform = exports.CloudfrontDistributionDistributionConfigRestrictionsGeoRestriction = exports.cloudfrontDistributionDistributionConfigOriginsToTerraform = exports.cloudfrontDistributionDistributionConfigOriginsS3OriginConfigToTerraform = exports.cloudfrontDistributionDistributionConfigOriginsOriginShieldToTerraform = exports.cloudfrontDistributionDistributionConfigOriginsOriginCustomHeadersToTerraform = exports.cloudfrontDistributionDistributionConfigOriginsCustomOriginConfigToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersItemsToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaToTerraform = exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodesToTerraform = exports.cloudfrontDistributionDistributionConfigLoggingToTerraform = exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorToTerraform = exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsToTerraform = exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorFunctionAssociationsToTerraform = exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesToTerraform = exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesToTerraform = exports.cloudfrontDistributionDistributionConfigCustomOriginToTerraform = exports.cloudfrontDistributionDistributionConfigCustomErrorResponsesToTerraform = exports.cloudfrontDistributionDistributionConfigCacheBehaviorsToTerraform = exports.cloudfrontDistributionDistributionConfigCacheBehaviorsLambdaFunctionAssociationsToTerraform = exports.cloudfrontDistributionDistributionConfigCacheBehaviorsFunctionAssociationsToTerraform = exports.cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesToTerraform = exports.cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesCookiesToTerraform = void 0;
const cdktf = require("cdktf");
function cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesCookiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        forward: cdktf.stringToTerraform(struct.forward),
        whitelisted_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.whitelistedNames),
    };
}
exports.cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesCookiesToTerraform = cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesCookiesToTerraform;
function cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cookies: cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesCookiesToTerraform(struct.cookies),
        headers: cdktf.listMapper(cdktf.stringToTerraform)(struct.headers),
        query_string: cdktf.booleanToTerraform(struct.queryString),
        query_string_cache_keys: cdktf.listMapper(cdktf.stringToTerraform)(struct.queryStringCacheKeys),
    };
}
exports.cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesToTerraform = cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesToTerraform;
function cloudfrontDistributionDistributionConfigCacheBehaviorsFunctionAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.cloudfrontDistributionDistributionConfigCacheBehaviorsFunctionAssociationsToTerraform = cloudfrontDistributionDistributionConfigCacheBehaviorsFunctionAssociationsToTerraform;
function cloudfrontDistributionDistributionConfigCacheBehaviorsLambdaFunctionAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        include_body: cdktf.booleanToTerraform(struct.includeBody),
        lambda_function_arn: cdktf.stringToTerraform(struct.lambdaFunctionArn),
    };
}
exports.cloudfrontDistributionDistributionConfigCacheBehaviorsLambdaFunctionAssociationsToTerraform = cloudfrontDistributionDistributionConfigCacheBehaviorsLambdaFunctionAssociationsToTerraform;
function cloudfrontDistributionDistributionConfigCacheBehaviorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform)(struct.allowedMethods),
        cache_policy_id: cdktf.stringToTerraform(struct.cachePolicyId),
        cached_methods: cdktf.listMapper(cdktf.stringToTerraform)(struct.cachedMethods),
        compress: cdktf.booleanToTerraform(struct.compress),
        default_ttl: cdktf.numberToTerraform(struct.defaultTtl),
        field_level_encryption_id: cdktf.stringToTerraform(struct.fieldLevelEncryptionId),
        forwarded_values: cloudfrontDistributionDistributionConfigCacheBehaviorsForwardedValuesToTerraform(struct.forwardedValues),
        function_associations: cdktf.listMapper(cloudfrontDistributionDistributionConfigCacheBehaviorsFunctionAssociationsToTerraform)(struct.functionAssociations),
        lambda_function_associations: cdktf.listMapper(cloudfrontDistributionDistributionConfigCacheBehaviorsLambdaFunctionAssociationsToTerraform)(struct.lambdaFunctionAssociations),
        max_ttl: cdktf.numberToTerraform(struct.maxTtl),
        min_ttl: cdktf.numberToTerraform(struct.minTtl),
        origin_request_policy_id: cdktf.stringToTerraform(struct.originRequestPolicyId),
        path_pattern: cdktf.stringToTerraform(struct.pathPattern),
        realtime_log_config_arn: cdktf.stringToTerraform(struct.realtimeLogConfigArn),
        smooth_streaming: cdktf.booleanToTerraform(struct.smoothStreaming),
        target_origin_id: cdktf.stringToTerraform(struct.targetOriginId),
        trusted_key_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.trustedKeyGroups),
        trusted_signers: cdktf.listMapper(cdktf.stringToTerraform)(struct.trustedSigners),
        viewer_protocol_policy: cdktf.stringToTerraform(struct.viewerProtocolPolicy),
    };
}
exports.cloudfrontDistributionDistributionConfigCacheBehaviorsToTerraform = cloudfrontDistributionDistributionConfigCacheBehaviorsToTerraform;
function cloudfrontDistributionDistributionConfigCustomErrorResponsesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        error_caching_min_ttl: cdktf.numberToTerraform(struct.errorCachingMinTtl),
        error_code: cdktf.numberToTerraform(struct.errorCode),
        response_code: cdktf.numberToTerraform(struct.responseCode),
        response_page_path: cdktf.stringToTerraform(struct.responsePagePath),
    };
}
exports.cloudfrontDistributionDistributionConfigCustomErrorResponsesToTerraform = cloudfrontDistributionDistributionConfigCustomErrorResponsesToTerraform;
function cloudfrontDistributionDistributionConfigCustomOriginToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dns_name: cdktf.stringToTerraform(struct.dnsName),
        http_port: cdktf.numberToTerraform(struct.httpPort),
        https_port: cdktf.numberToTerraform(struct.httpsPort),
        origin_protocol_policy: cdktf.stringToTerraform(struct.originProtocolPolicy),
        origin_ssl_protocols: cdktf.listMapper(cdktf.stringToTerraform)(struct.originSslProtocols),
    };
}
exports.cloudfrontDistributionDistributionConfigCustomOriginToTerraform = cloudfrontDistributionDistributionConfigCustomOriginToTerraform;
function cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        forward: cdktf.stringToTerraform(struct.forward),
        whitelisted_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.whitelistedNames),
    };
}
exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesToTerraform = cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesToTerraform;
function cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cookies: cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesToTerraform(struct.cookies),
        headers: cdktf.listMapper(cdktf.stringToTerraform)(struct.headers),
        query_string: cdktf.booleanToTerraform(struct.queryString),
        query_string_cache_keys: cdktf.listMapper(cdktf.stringToTerraform)(struct.queryStringCacheKeys),
    };
}
exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesToTerraform = cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesToTerraform;
function cloudfrontDistributionDistributionConfigDefaultCacheBehaviorFunctionAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorFunctionAssociationsToTerraform = cloudfrontDistributionDistributionConfigDefaultCacheBehaviorFunctionAssociationsToTerraform;
function cloudfrontDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        include_body: cdktf.booleanToTerraform(struct.includeBody),
        lambda_function_arn: cdktf.stringToTerraform(struct.lambdaFunctionArn),
    };
}
exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsToTerraform = cloudfrontDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsToTerraform;
function cloudfrontDistributionDistributionConfigDefaultCacheBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform)(struct.allowedMethods),
        cache_policy_id: cdktf.stringToTerraform(struct.cachePolicyId),
        cached_methods: cdktf.listMapper(cdktf.stringToTerraform)(struct.cachedMethods),
        compress: cdktf.booleanToTerraform(struct.compress),
        default_ttl: cdktf.numberToTerraform(struct.defaultTtl),
        field_level_encryption_id: cdktf.stringToTerraform(struct.fieldLevelEncryptionId),
        forwarded_values: cloudfrontDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesToTerraform(struct.forwardedValues),
        function_associations: cdktf.listMapper(cloudfrontDistributionDistributionConfigDefaultCacheBehaviorFunctionAssociationsToTerraform)(struct.functionAssociations),
        lambda_function_associations: cdktf.listMapper(cloudfrontDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsToTerraform)(struct.lambdaFunctionAssociations),
        max_ttl: cdktf.numberToTerraform(struct.maxTtl),
        min_ttl: cdktf.numberToTerraform(struct.minTtl),
        origin_request_policy_id: cdktf.stringToTerraform(struct.originRequestPolicyId),
        realtime_log_config_arn: cdktf.stringToTerraform(struct.realtimeLogConfigArn),
        smooth_streaming: cdktf.booleanToTerraform(struct.smoothStreaming),
        target_origin_id: cdktf.stringToTerraform(struct.targetOriginId),
        trusted_key_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.trustedKeyGroups),
        trusted_signers: cdktf.listMapper(cdktf.stringToTerraform)(struct.trustedSigners),
        viewer_protocol_policy: cdktf.stringToTerraform(struct.viewerProtocolPolicy),
    };
}
exports.cloudfrontDistributionDistributionConfigDefaultCacheBehaviorToTerraform = cloudfrontDistributionDistributionConfigDefaultCacheBehaviorToTerraform;
function cloudfrontDistributionDistributionConfigLoggingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        include_cookies: cdktf.booleanToTerraform(struct.includeCookies),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.cloudfrontDistributionDistributionConfigLoggingToTerraform = cloudfrontDistributionDistributionConfigLoggingToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        items: cdktf.listMapper(cdktf.numberToTerraform)(struct.items),
        quantity: cdktf.numberToTerraform(struct.quantity),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodesToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodesToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        status_codes: cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodesToTerraform(struct.statusCodes),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        origin_id: cdktf.stringToTerraform(struct.originId),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersItemsToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersItemsToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        items: cdktf.listMapper(cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersItemsToTerraform)(struct.items),
        quantity: cdktf.numberToTerraform(struct.quantity),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        failover_criteria: cloudfrontDistributionDistributionConfigOriginGroupsItemsFailoverCriteriaToTerraform(struct.failoverCriteria),
        id: cdktf.stringToTerraform(struct.id),
        members: cloudfrontDistributionDistributionConfigOriginGroupsItemsMembersToTerraform(struct.members),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsItemsToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsItemsToTerraform;
function cloudfrontDistributionDistributionConfigOriginGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        items: cdktf.listMapper(cloudfrontDistributionDistributionConfigOriginGroupsItemsToTerraform)(struct.items),
        quantity: cdktf.numberToTerraform(struct.quantity),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginGroupsToTerraform = cloudfrontDistributionDistributionConfigOriginGroupsToTerraform;
function cloudfrontDistributionDistributionConfigOriginsCustomOriginConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        http_port: cdktf.numberToTerraform(struct.httpPort),
        https_port: cdktf.numberToTerraform(struct.httpsPort),
        origin_keepalive_timeout: cdktf.numberToTerraform(struct.originKeepaliveTimeout),
        origin_protocol_policy: cdktf.stringToTerraform(struct.originProtocolPolicy),
        origin_read_timeout: cdktf.numberToTerraform(struct.originReadTimeout),
        origin_ssl_protocols: cdktf.listMapper(cdktf.stringToTerraform)(struct.originSslProtocols),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginsCustomOriginConfigToTerraform = cloudfrontDistributionDistributionConfigOriginsCustomOriginConfigToTerraform;
function cloudfrontDistributionDistributionConfigOriginsOriginCustomHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginsOriginCustomHeadersToTerraform = cloudfrontDistributionDistributionConfigOriginsOriginCustomHeadersToTerraform;
function cloudfrontDistributionDistributionConfigOriginsOriginShieldToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        origin_shield_region: cdktf.stringToTerraform(struct.originShieldRegion),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginsOriginShieldToTerraform = cloudfrontDistributionDistributionConfigOriginsOriginShieldToTerraform;
function cloudfrontDistributionDistributionConfigOriginsS3OriginConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        origin_access_identity: cdktf.stringToTerraform(struct.originAccessIdentity),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginsS3OriginConfigToTerraform = cloudfrontDistributionDistributionConfigOriginsS3OriginConfigToTerraform;
function cloudfrontDistributionDistributionConfigOriginsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connection_attempts: cdktf.numberToTerraform(struct.connectionAttempts),
        connection_timeout: cdktf.numberToTerraform(struct.connectionTimeout),
        custom_origin_config: cloudfrontDistributionDistributionConfigOriginsCustomOriginConfigToTerraform(struct.customOriginConfig),
        domain_name: cdktf.stringToTerraform(struct.domainName),
        id: cdktf.stringToTerraform(struct.id),
        origin_custom_headers: cdktf.listMapper(cloudfrontDistributionDistributionConfigOriginsOriginCustomHeadersToTerraform)(struct.originCustomHeaders),
        origin_path: cdktf.stringToTerraform(struct.originPath),
        origin_shield: cloudfrontDistributionDistributionConfigOriginsOriginShieldToTerraform(struct.originShield),
        s3_origin_config: cloudfrontDistributionDistributionConfigOriginsS3OriginConfigToTerraform(struct.s3OriginConfig),
    };
}
exports.cloudfrontDistributionDistributionConfigOriginsToTerraform = cloudfrontDistributionDistributionConfigOriginsToTerraform;
class CloudfrontDistributionDistributionConfigRestrictionsGeoRestriction extends cdktf.ComplexComputedList {
    get locations() {
        return this.getListAttribute('locations');
    }
    set locations(value) {
        this._locations = value;
    }
    resetLocations() {
        this._locations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationsInput() {
        return this._locations;
    }
    // restriction_type - computed: true, optional: false, required: true
    get restrictionType() {
        return this.getStringAttribute('restriction_type');
    }
}
exports.CloudfrontDistributionDistributionConfigRestrictionsGeoRestriction = CloudfrontDistributionDistributionConfigRestrictionsGeoRestriction;
function cloudfrontDistributionDistributionConfigRestrictionsGeoRestrictionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        locations: cdktf.listMapper(cdktf.stringToTerraform)(struct.locations),
        restriction_type: cdktf.stringToTerraform(struct.restrictionType),
    };
}
exports.cloudfrontDistributionDistributionConfigRestrictionsGeoRestrictionToTerraform = cloudfrontDistributionDistributionConfigRestrictionsGeoRestrictionToTerraform;
function cloudfrontDistributionDistributionConfigRestrictionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        geo_restriction: cloudfrontDistributionDistributionConfigRestrictionsGeoRestrictionToTerraform(struct.geoRestriction),
    };
}
exports.cloudfrontDistributionDistributionConfigRestrictionsToTerraform = cloudfrontDistributionDistributionConfigRestrictionsToTerraform;
function cloudfrontDistributionDistributionConfigS3OriginToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dns_name: cdktf.stringToTerraform(struct.dnsName),
        origin_access_identity: cdktf.stringToTerraform(struct.originAccessIdentity),
    };
}
exports.cloudfrontDistributionDistributionConfigS3OriginToTerraform = cloudfrontDistributionDistributionConfigS3OriginToTerraform;
function cloudfrontDistributionDistributionConfigViewerCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        acm_certificate_arn: cdktf.stringToTerraform(struct.acmCertificateArn),
        cloudfront_default_certificate: cdktf.booleanToTerraform(struct.cloudfrontDefaultCertificate),
        iam_certificate_id: cdktf.stringToTerraform(struct.iamCertificateId),
        minimum_protocol_version: cdktf.stringToTerraform(struct.minimumProtocolVersion),
        ssl_support_method: cdktf.stringToTerraform(struct.sslSupportMethod),
    };
}
exports.cloudfrontDistributionDistributionConfigViewerCertificateToTerraform = cloudfrontDistributionDistributionConfigViewerCertificateToTerraform;
function cloudfrontDistributionDistributionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aliases: cdktf.listMapper(cdktf.stringToTerraform)(struct.aliases),
        cache_behaviors: cdktf.listMapper(cloudfrontDistributionDistributionConfigCacheBehaviorsToTerraform)(struct.cacheBehaviors),
        cnam_es: cdktf.listMapper(cdktf.stringToTerraform)(struct.cnamEs),
        comment: cdktf.stringToTerraform(struct.comment),
        custom_error_responses: cdktf.listMapper(cloudfrontDistributionDistributionConfigCustomErrorResponsesToTerraform)(struct.customErrorResponses),
        custom_origin: cloudfrontDistributionDistributionConfigCustomOriginToTerraform(struct.customOrigin),
        default_cache_behavior: cloudfrontDistributionDistributionConfigDefaultCacheBehaviorToTerraform(struct.defaultCacheBehavior),
        default_root_object: cdktf.stringToTerraform(struct.defaultRootObject),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        http_version: cdktf.stringToTerraform(struct.httpVersion),
        ipv6_enabled: cdktf.booleanToTerraform(struct.ipv6Enabled),
        logging: cloudfrontDistributionDistributionConfigLoggingToTerraform(struct.logging),
        origin_groups: cloudfrontDistributionDistributionConfigOriginGroupsToTerraform(struct.originGroups),
        origins: cdktf.listMapper(cloudfrontDistributionDistributionConfigOriginsToTerraform)(struct.origins),
        price_class: cdktf.stringToTerraform(struct.priceClass),
        restrictions: cloudfrontDistributionDistributionConfigRestrictionsToTerraform(struct.restrictions),
        s3_origin: cloudfrontDistributionDistributionConfigS3OriginToTerraform(struct.s3Origin),
        viewer_certificate: cloudfrontDistributionDistributionConfigViewerCertificateToTerraform(struct.viewerCertificate),
        web_acl_id: cdktf.stringToTerraform(struct.webAclId),
    };
}
exports.cloudfrontDistributionDistributionConfigToTerraform = cloudfrontDistributionDistributionConfigToTerraform;
function cloudfrontDistributionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudfrontDistributionTagsToTerraform = cloudfrontDistributionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_distribution.html awscc_cloudfront_distribution}
*/
class CloudfrontDistribution extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudfront_distribution.html awscc_cloudfront_distribution} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontDistributionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudfront_distribution',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._distributionConfig = config.distributionConfig;
        this._tags = config.tags;
    }
    get distributionConfig() {
        return this.interpolationForAttribute('distribution_config');
    }
    set distributionConfig(value) {
        this._distributionConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionConfigInput() {
        return this._distributionConfig;
    }
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            distribution_config: cloudfrontDistributionDistributionConfigToTerraform(this._distributionConfig),
            tags: cdktf.listMapper(cloudfrontDistributionTagsToTerraform)(this._tags),
        };
    }
}
exports.CloudfrontDistribution = CloudfrontDistribution;
// =================
// STATIC PROPERTIES
// =================
CloudfrontDistribution.tfResourceType = "awscc_cloudfront_distribution";
//# sourceMappingURL=data:application/json;base64,