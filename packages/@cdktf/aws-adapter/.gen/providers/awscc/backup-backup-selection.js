"use strict";
// https://www.terraform.io/docs/providers/awscc/r/backup_backup_selection.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupBackupSelection = exports.backupBackupSelectionBackupSelectionToTerraform = exports.backupBackupSelectionBackupSelectionListOfTagsToTerraform = void 0;
const cdktf = require("cdktf");
function backupBackupSelectionBackupSelectionListOfTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        condition_key: cdktf.stringToTerraform(struct.conditionKey),
        condition_type: cdktf.stringToTerraform(struct.conditionType),
        condition_value: cdktf.stringToTerraform(struct.conditionValue),
    };
}
exports.backupBackupSelectionBackupSelectionListOfTagsToTerraform = backupBackupSelectionBackupSelectionListOfTagsToTerraform;
function backupBackupSelectionBackupSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        iam_role_arn: cdktf.stringToTerraform(struct.iamRoleArn),
        list_of_tags: cdktf.listMapper(backupBackupSelectionBackupSelectionListOfTagsToTerraform)(struct.listOfTags),
        resources: cdktf.listMapper(cdktf.stringToTerraform)(struct.resources),
        selection_name: cdktf.stringToTerraform(struct.selectionName),
    };
}
exports.backupBackupSelectionBackupSelectionToTerraform = backupBackupSelectionBackupSelectionToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_selection.html awscc_backup_backup_selection}
*/
class BackupBackupSelection extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_selection.html awscc_backup_backup_selection} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BackupBackupSelectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_backup_backup_selection',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._backupPlanId = config.backupPlanId;
        this._backupSelection = config.backupSelection;
    }
    get backupPlanId() {
        return this.getStringAttribute('backup_plan_id');
    }
    set backupPlanId(value) {
        this._backupPlanId = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupPlanIdInput() {
        return this._backupPlanId;
    }
    get backupSelection() {
        return this.interpolationForAttribute('backup_selection');
    }
    set backupSelection(value) {
        this._backupSelection = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupSelectionInput() {
        return this._backupSelection;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // selection_id - computed: true, optional: false, required: false
    get selectionId() {
        return this.getStringAttribute('selection_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            backup_plan_id: cdktf.stringToTerraform(this._backupPlanId),
            backup_selection: backupBackupSelectionBackupSelectionToTerraform(this._backupSelection),
        };
    }
}
exports.BackupBackupSelection = BackupBackupSelection;
// =================
// STATIC PROPERTIES
// =================
BackupBackupSelection.tfResourceType = "awscc_backup_backup_selection";
//# sourceMappingURL=data:application/json;base64,