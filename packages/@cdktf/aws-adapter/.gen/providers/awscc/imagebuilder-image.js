"use strict";
// https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderImage = exports.imagebuilderImageImageTestsConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function imagebuilderImageImageTestsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        image_tests_enabled: cdktf.booleanToTerraform(struct.imageTestsEnabled),
        timeout_minutes: cdktf.numberToTerraform(struct.timeoutMinutes),
    };
}
exports.imagebuilderImageImageTestsConfigurationToTerraform = imagebuilderImageImageTestsConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image.html awscc_imagebuilder_image}
*/
class ImagebuilderImage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_image.html awscc_imagebuilder_image} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderImageConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_image',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._containerRecipeArn = config.containerRecipeArn;
        this._distributionConfigurationArn = config.distributionConfigurationArn;
        this._enhancedImageMetadataEnabled = config.enhancedImageMetadataEnabled;
        this._imageRecipeArn = config.imageRecipeArn;
        this._imageTestsConfiguration = config.imageTestsConfiguration;
        this._infrastructureConfigurationArn = config.infrastructureConfigurationArn;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get containerRecipeArn() {
        return this.getStringAttribute('container_recipe_arn');
    }
    set containerRecipeArn(value) {
        this._containerRecipeArn = value;
    }
    resetContainerRecipeArn() {
        this._containerRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRecipeArnInput() {
        return this._containerRecipeArn;
    }
    get distributionConfigurationArn() {
        return this.getStringAttribute('distribution_configuration_arn');
    }
    set distributionConfigurationArn(value) {
        this._distributionConfigurationArn = value;
    }
    resetDistributionConfigurationArn() {
        this._distributionConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionConfigurationArnInput() {
        return this._distributionConfigurationArn;
    }
    get enhancedImageMetadataEnabled() {
        return this.getBooleanAttribute('enhanced_image_metadata_enabled');
    }
    set enhancedImageMetadataEnabled(value) {
        this._enhancedImageMetadataEnabled = value;
    }
    resetEnhancedImageMetadataEnabled() {
        this._enhancedImageMetadataEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enhancedImageMetadataEnabledInput() {
        return this._enhancedImageMetadataEnabled;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // image_id - computed: true, optional: false, required: false
    get imageId() {
        return this.getStringAttribute('image_id');
    }
    get imageRecipeArn() {
        return this.getStringAttribute('image_recipe_arn');
    }
    set imageRecipeArn(value) {
        this._imageRecipeArn = value;
    }
    resetImageRecipeArn() {
        this._imageRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageRecipeArnInput() {
        return this._imageRecipeArn;
    }
    get imageTestsConfiguration() {
        return this.interpolationForAttribute('image_tests_configuration');
    }
    set imageTestsConfiguration(value) {
        this._imageTestsConfiguration = value;
    }
    resetImageTestsConfiguration() {
        this._imageTestsConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTestsConfigurationInput() {
        return this._imageTestsConfiguration;
    }
    get infrastructureConfigurationArn() {
        return this.getStringAttribute('infrastructure_configuration_arn');
    }
    set infrastructureConfigurationArn(value) {
        this._infrastructureConfigurationArn = value;
    }
    resetInfrastructureConfigurationArn() {
        this._infrastructureConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infrastructureConfigurationArnInput() {
        return this._infrastructureConfigurationArn;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_recipe_arn: cdktf.stringToTerraform(this._containerRecipeArn),
            distribution_configuration_arn: cdktf.stringToTerraform(this._distributionConfigurationArn),
            enhanced_image_metadata_enabled: cdktf.booleanToTerraform(this._enhancedImageMetadataEnabled),
            image_recipe_arn: cdktf.stringToTerraform(this._imageRecipeArn),
            image_tests_configuration: imagebuilderImageImageTestsConfigurationToTerraform(this._imageTestsConfiguration),
            infrastructure_configuration_arn: cdktf.stringToTerraform(this._infrastructureConfigurationArn),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.ImagebuilderImage = ImagebuilderImage;
// =================
// STATIC PROPERTIES
// =================
ImagebuilderImage.tfResourceType = "awscc_imagebuilder_image";
//# sourceMappingURL=data:application/json;base64,