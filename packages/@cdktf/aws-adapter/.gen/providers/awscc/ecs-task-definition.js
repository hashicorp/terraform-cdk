"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ecs_task_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsTaskDefinition = exports.ecsTaskDefinitionVolumesToTerraform = exports.ecsTaskDefinitionVolumesHostToTerraform = exports.ecsTaskDefinitionVolumesEfsVolumeConfigurationToTerraform = exports.ecsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigToTerraform = exports.ecsTaskDefinitionVolumesDockerVolumeConfigurationToTerraform = exports.ecsTaskDefinitionTagsToTerraform = exports.ecsTaskDefinitionProxyConfigurationToTerraform = exports.ecsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesToTerraform = exports.ecsTaskDefinitionPlacementConstraintsToTerraform = exports.ecsTaskDefinitionInferenceAcceleratorsToTerraform = exports.ecsTaskDefinitionEphemeralStorageToTerraform = exports.ecsTaskDefinitionContainerDefinitionsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsVolumesFromToTerraform = exports.ecsTaskDefinitionContainerDefinitionsUlimitsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsSystemControlsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsSecretsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsResourceRequirementsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsRepositoryCredentialsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsPortMappingsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsMountPointsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLogConfigurationToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersDevicesToTerraform = exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesToTerraform = exports.ecsTaskDefinitionContainerDefinitionsHealthCheckToTerraform = exports.ecsTaskDefinitionContainerDefinitionsFirelensConfigurationToTerraform = exports.ecsTaskDefinitionContainerDefinitionsExtraHostsToTerraform = exports.ecsTaskDefinitionContainerDefinitionsEnvironmentFilesToTerraform = exports.ecsTaskDefinitionContainerDefinitionsEnvironmentToTerraform = exports.ecsTaskDefinitionContainerDefinitionsDependsOnToTerraform = void 0;
const cdktf = require("cdktf");
function ecsTaskDefinitionContainerDefinitionsDependsOnToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        condition: cdktf.stringToTerraform(struct.condition),
        container_name: cdktf.stringToTerraform(struct.containerName),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsDependsOnToTerraform = ecsTaskDefinitionContainerDefinitionsDependsOnToTerraform;
function ecsTaskDefinitionContainerDefinitionsEnvironmentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsEnvironmentToTerraform = ecsTaskDefinitionContainerDefinitionsEnvironmentToTerraform;
function ecsTaskDefinitionContainerDefinitionsEnvironmentFilesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsEnvironmentFilesToTerraform = ecsTaskDefinitionContainerDefinitionsEnvironmentFilesToTerraform;
function ecsTaskDefinitionContainerDefinitionsExtraHostsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hostname: cdktf.stringToTerraform(struct.hostname),
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsExtraHostsToTerraform = ecsTaskDefinitionContainerDefinitionsExtraHostsToTerraform;
function ecsTaskDefinitionContainerDefinitionsFirelensConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.options),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsFirelensConfigurationToTerraform = ecsTaskDefinitionContainerDefinitionsFirelensConfigurationToTerraform;
function ecsTaskDefinitionContainerDefinitionsHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        command: cdktf.listMapper(cdktf.stringToTerraform)(struct.command),
        interval: cdktf.numberToTerraform(struct.interval),
        retries: cdktf.numberToTerraform(struct.retries),
        start_period: cdktf.numberToTerraform(struct.startPeriod),
        timeout: cdktf.numberToTerraform(struct.timeout),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsHealthCheckToTerraform = ecsTaskDefinitionContainerDefinitionsHealthCheckToTerraform;
function ecsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add: cdktf.listMapper(cdktf.stringToTerraform)(struct.add),
        drop: cdktf.listMapper(cdktf.stringToTerraform)(struct.drop),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesToTerraform = ecsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesToTerraform;
function ecsTaskDefinitionContainerDefinitionsLinuxParametersDevicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_path: cdktf.stringToTerraform(struct.containerPath),
        host_path: cdktf.stringToTerraform(struct.hostPath),
        permissions: cdktf.listMapper(cdktf.stringToTerraform)(struct.permissions),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersDevicesToTerraform = ecsTaskDefinitionContainerDefinitionsLinuxParametersDevicesToTerraform;
function ecsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_path: cdktf.stringToTerraform(struct.containerPath),
        mount_options: cdktf.listMapper(cdktf.stringToTerraform)(struct.mountOptions),
        size: cdktf.numberToTerraform(struct.size),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsToTerraform = ecsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsToTerraform;
function ecsTaskDefinitionContainerDefinitionsLinuxParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        capabilities: ecsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesToTerraform(struct.capabilities),
        devices: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsLinuxParametersDevicesToTerraform)(struct.devices),
        init_process_enabled: cdktf.booleanToTerraform(struct.initProcessEnabled),
        max_swap: cdktf.numberToTerraform(struct.maxSwap),
        shared_memory_size: cdktf.numberToTerraform(struct.sharedMemorySize),
        swappiness: cdktf.numberToTerraform(struct.swappiness),
        tmpfs: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsToTerraform)(struct.tmpfs),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLinuxParametersToTerraform = ecsTaskDefinitionContainerDefinitionsLinuxParametersToTerraform;
function ecsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value_from: cdktf.stringToTerraform(struct.valueFrom),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsToTerraform = ecsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsToTerraform;
function ecsTaskDefinitionContainerDefinitionsLogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_driver: cdktf.stringToTerraform(struct.logDriver),
        options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.options),
        secret_options: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsToTerraform)(struct.secretOptions),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsLogConfigurationToTerraform = ecsTaskDefinitionContainerDefinitionsLogConfigurationToTerraform;
function ecsTaskDefinitionContainerDefinitionsMountPointsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_path: cdktf.stringToTerraform(struct.containerPath),
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        source_volume: cdktf.stringToTerraform(struct.sourceVolume),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsMountPointsToTerraform = ecsTaskDefinitionContainerDefinitionsMountPointsToTerraform;
function ecsTaskDefinitionContainerDefinitionsPortMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_port: cdktf.numberToTerraform(struct.containerPort),
        host_port: cdktf.numberToTerraform(struct.hostPort),
        protocol: cdktf.stringToTerraform(struct.protocol),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsPortMappingsToTerraform = ecsTaskDefinitionContainerDefinitionsPortMappingsToTerraform;
function ecsTaskDefinitionContainerDefinitionsRepositoryCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        credentials_parameter: cdktf.stringToTerraform(struct.credentialsParameter),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsRepositoryCredentialsToTerraform = ecsTaskDefinitionContainerDefinitionsRepositoryCredentialsToTerraform;
function ecsTaskDefinitionContainerDefinitionsResourceRequirementsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsResourceRequirementsToTerraform = ecsTaskDefinitionContainerDefinitionsResourceRequirementsToTerraform;
function ecsTaskDefinitionContainerDefinitionsSecretsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value_from: cdktf.stringToTerraform(struct.valueFrom),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsSecretsToTerraform = ecsTaskDefinitionContainerDefinitionsSecretsToTerraform;
function ecsTaskDefinitionContainerDefinitionsSystemControlsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        namespace: cdktf.stringToTerraform(struct.namespace),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsSystemControlsToTerraform = ecsTaskDefinitionContainerDefinitionsSystemControlsToTerraform;
function ecsTaskDefinitionContainerDefinitionsUlimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hard_limit: cdktf.numberToTerraform(struct.hardLimit),
        name: cdktf.stringToTerraform(struct.name),
        soft_limit: cdktf.numberToTerraform(struct.softLimit),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsUlimitsToTerraform = ecsTaskDefinitionContainerDefinitionsUlimitsToTerraform;
function ecsTaskDefinitionContainerDefinitionsVolumesFromToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        source_container: cdktf.stringToTerraform(struct.sourceContainer),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsVolumesFromToTerraform = ecsTaskDefinitionContainerDefinitionsVolumesFromToTerraform;
function ecsTaskDefinitionContainerDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        command: cdktf.listMapper(cdktf.stringToTerraform)(struct.command),
        cpu: cdktf.numberToTerraform(struct.cpu),
        depends_on: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsDependsOnToTerraform)(struct.dependsOn),
        disable_networking: cdktf.booleanToTerraform(struct.disableNetworking),
        dns_search_domains: cdktf.listMapper(cdktf.stringToTerraform)(struct.dnsSearchDomains),
        dns_servers: cdktf.listMapper(cdktf.stringToTerraform)(struct.dnsServers),
        docker_labels: cdktf.hashMapper(cdktf.anyToTerraform)(struct.dockerLabels),
        docker_security_options: cdktf.listMapper(cdktf.stringToTerraform)(struct.dockerSecurityOptions),
        entry_point: cdktf.listMapper(cdktf.stringToTerraform)(struct.entryPoint),
        environment: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsEnvironmentToTerraform)(struct.environment),
        environment_files: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsEnvironmentFilesToTerraform)(struct.environmentFiles),
        essential: cdktf.booleanToTerraform(struct.essential),
        extra_hosts: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsExtraHostsToTerraform)(struct.extraHosts),
        firelens_configuration: ecsTaskDefinitionContainerDefinitionsFirelensConfigurationToTerraform(struct.firelensConfiguration),
        health_check: ecsTaskDefinitionContainerDefinitionsHealthCheckToTerraform(struct.healthCheck),
        hostname: cdktf.stringToTerraform(struct.hostname),
        image: cdktf.stringToTerraform(struct.image),
        interactive: cdktf.booleanToTerraform(struct.interactive),
        links: cdktf.listMapper(cdktf.stringToTerraform)(struct.links),
        linux_parameters: ecsTaskDefinitionContainerDefinitionsLinuxParametersToTerraform(struct.linuxParameters),
        log_configuration: ecsTaskDefinitionContainerDefinitionsLogConfigurationToTerraform(struct.logConfiguration),
        memory: cdktf.numberToTerraform(struct.memory),
        memory_reservation: cdktf.numberToTerraform(struct.memoryReservation),
        mount_points: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsMountPointsToTerraform)(struct.mountPoints),
        name: cdktf.stringToTerraform(struct.name),
        port_mappings: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsPortMappingsToTerraform)(struct.portMappings),
        privileged: cdktf.booleanToTerraform(struct.privileged),
        pseudo_terminal: cdktf.booleanToTerraform(struct.pseudoTerminal),
        readonly_root_filesystem: cdktf.booleanToTerraform(struct.readonlyRootFilesystem),
        repository_credentials: ecsTaskDefinitionContainerDefinitionsRepositoryCredentialsToTerraform(struct.repositoryCredentials),
        resource_requirements: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsResourceRequirementsToTerraform)(struct.resourceRequirements),
        secrets: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsSecretsToTerraform)(struct.secrets),
        start_timeout: cdktf.numberToTerraform(struct.startTimeout),
        stop_timeout: cdktf.numberToTerraform(struct.stopTimeout),
        system_controls: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsSystemControlsToTerraform)(struct.systemControls),
        ulimits: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsUlimitsToTerraform)(struct.ulimits),
        user: cdktf.stringToTerraform(struct.user),
        volumes_from: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsVolumesFromToTerraform)(struct.volumesFrom),
        working_directory: cdktf.stringToTerraform(struct.workingDirectory),
    };
}
exports.ecsTaskDefinitionContainerDefinitionsToTerraform = ecsTaskDefinitionContainerDefinitionsToTerraform;
function ecsTaskDefinitionEphemeralStorageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        size_in_gi_b: cdktf.numberToTerraform(struct.sizeInGiB),
    };
}
exports.ecsTaskDefinitionEphemeralStorageToTerraform = ecsTaskDefinitionEphemeralStorageToTerraform;
function ecsTaskDefinitionInferenceAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        device_type: cdktf.stringToTerraform(struct.deviceType),
    };
}
exports.ecsTaskDefinitionInferenceAcceleratorsToTerraform = ecsTaskDefinitionInferenceAcceleratorsToTerraform;
function ecsTaskDefinitionPlacementConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ecsTaskDefinitionPlacementConstraintsToTerraform = ecsTaskDefinitionPlacementConstraintsToTerraform;
function ecsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesToTerraform = ecsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesToTerraform;
function ecsTaskDefinitionProxyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        proxy_configuration_properties: cdktf.listMapper(ecsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesToTerraform)(struct.proxyConfigurationProperties),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ecsTaskDefinitionProxyConfigurationToTerraform = ecsTaskDefinitionProxyConfigurationToTerraform;
function ecsTaskDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ecsTaskDefinitionTagsToTerraform = ecsTaskDefinitionTagsToTerraform;
function ecsTaskDefinitionVolumesDockerVolumeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        autoprovision: cdktf.booleanToTerraform(struct.autoprovision),
        driver: cdktf.stringToTerraform(struct.driver),
        driver_opts: cdktf.hashMapper(cdktf.anyToTerraform)(struct.driverOpts),
        labels: cdktf.hashMapper(cdktf.anyToTerraform)(struct.labels),
        scope: cdktf.stringToTerraform(struct.scope),
    };
}
exports.ecsTaskDefinitionVolumesDockerVolumeConfigurationToTerraform = ecsTaskDefinitionVolumesDockerVolumeConfigurationToTerraform;
function ecsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_point_id: cdktf.stringToTerraform(struct.accessPointId),
        iam: cdktf.stringToTerraform(struct.iam),
    };
}
exports.ecsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigToTerraform = ecsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigToTerraform;
function ecsTaskDefinitionVolumesEfsVolumeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        authorization_config: ecsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigToTerraform(struct.authorizationConfig),
        filesystem_id: cdktf.stringToTerraform(struct.filesystemId),
        root_directory: cdktf.stringToTerraform(struct.rootDirectory),
        transit_encryption: cdktf.stringToTerraform(struct.transitEncryption),
        transit_encryption_port: cdktf.numberToTerraform(struct.transitEncryptionPort),
    };
}
exports.ecsTaskDefinitionVolumesEfsVolumeConfigurationToTerraform = ecsTaskDefinitionVolumesEfsVolumeConfigurationToTerraform;
function ecsTaskDefinitionVolumesHostToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source_path: cdktf.stringToTerraform(struct.sourcePath),
    };
}
exports.ecsTaskDefinitionVolumesHostToTerraform = ecsTaskDefinitionVolumesHostToTerraform;
function ecsTaskDefinitionVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        docker_volume_configuration: ecsTaskDefinitionVolumesDockerVolumeConfigurationToTerraform(struct.dockerVolumeConfiguration),
        efs_volume_configuration: ecsTaskDefinitionVolumesEfsVolumeConfigurationToTerraform(struct.efsVolumeConfiguration),
        host: ecsTaskDefinitionVolumesHostToTerraform(struct.host),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.ecsTaskDefinitionVolumesToTerraform = ecsTaskDefinitionVolumesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ecs_task_definition.html awscc_ecs_task_definition}
*/
class EcsTaskDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ecs_task_definition.html awscc_ecs_task_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsTaskDefinitionConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_ecs_task_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._containerDefinitions = config.containerDefinitions;
        this._cpu = config.cpu;
        this._ephemeralStorage = config.ephemeralStorage;
        this._executionRoleArn = config.executionRoleArn;
        this._family = config.family;
        this._inferenceAccelerators = config.inferenceAccelerators;
        this._ipcMode = config.ipcMode;
        this._memory = config.memory;
        this._networkMode = config.networkMode;
        this._pidMode = config.pidMode;
        this._placementConstraints = config.placementConstraints;
        this._proxyConfiguration = config.proxyConfiguration;
        this._requiresCompatibilities = config.requiresCompatibilities;
        this._tags = config.tags;
        this._taskRoleArn = config.taskRoleArn;
        this._volumes = config.volumes;
    }
    get containerDefinitions() {
        return this.interpolationForAttribute('container_definitions');
    }
    set containerDefinitions(value) {
        this._containerDefinitions = value;
    }
    resetContainerDefinitions() {
        this._containerDefinitions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerDefinitionsInput() {
        return this._containerDefinitions;
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get ephemeralStorage() {
        return this.interpolationForAttribute('ephemeral_storage');
    }
    set ephemeralStorage(value) {
        this._ephemeralStorage = value;
    }
    resetEphemeralStorage() {
        this._ephemeralStorage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ephemeralStorageInput() {
        return this._ephemeralStorage;
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    resetExecutionRoleArn() {
        this._executionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    get family() {
        return this.getStringAttribute('family');
    }
    set family(value) {
        this._family = value;
    }
    resetFamily() {
        this._family = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get familyInput() {
        return this._family;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get inferenceAccelerators() {
        return this.interpolationForAttribute('inference_accelerators');
    }
    set inferenceAccelerators(value) {
        this._inferenceAccelerators = value;
    }
    resetInferenceAccelerators() {
        this._inferenceAccelerators = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inferenceAcceleratorsInput() {
        return this._inferenceAccelerators;
    }
    get ipcMode() {
        return this.getStringAttribute('ipc_mode');
    }
    set ipcMode(value) {
        this._ipcMode = value;
    }
    resetIpcMode() {
        this._ipcMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipcModeInput() {
        return this._ipcMode;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
    get networkMode() {
        return this.getStringAttribute('network_mode');
    }
    set networkMode(value) {
        this._networkMode = value;
    }
    resetNetworkMode() {
        this._networkMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkModeInput() {
        return this._networkMode;
    }
    get pidMode() {
        return this.getStringAttribute('pid_mode');
    }
    set pidMode(value) {
        this._pidMode = value;
    }
    resetPidMode() {
        this._pidMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pidModeInput() {
        return this._pidMode;
    }
    get placementConstraints() {
        return this.interpolationForAttribute('placement_constraints');
    }
    set placementConstraints(value) {
        this._placementConstraints = value;
    }
    resetPlacementConstraints() {
        this._placementConstraints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementConstraintsInput() {
        return this._placementConstraints;
    }
    get proxyConfiguration() {
        return this.interpolationForAttribute('proxy_configuration');
    }
    set proxyConfiguration(value) {
        this._proxyConfiguration = value;
    }
    resetProxyConfiguration() {
        this._proxyConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyConfigurationInput() {
        return this._proxyConfiguration;
    }
    get requiresCompatibilities() {
        return this.getListAttribute('requires_compatibilities');
    }
    set requiresCompatibilities(value) {
        this._requiresCompatibilities = value;
    }
    resetRequiresCompatibilities() {
        this._requiresCompatibilities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiresCompatibilitiesInput() {
        return this._requiresCompatibilities;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // task_definition_arn - computed: true, optional: false, required: false
    get taskDefinitionArn() {
        return this.getStringAttribute('task_definition_arn');
    }
    get taskRoleArn() {
        return this.getStringAttribute('task_role_arn');
    }
    set taskRoleArn(value) {
        this._taskRoleArn = value;
    }
    resetTaskRoleArn() {
        this._taskRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskRoleArnInput() {
        return this._taskRoleArn;
    }
    get volumes() {
        return this.interpolationForAttribute('volumes');
    }
    set volumes(value) {
        this._volumes = value;
    }
    resetVolumes() {
        this._volumes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesInput() {
        return this._volumes;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_definitions: cdktf.listMapper(ecsTaskDefinitionContainerDefinitionsToTerraform)(this._containerDefinitions),
            cpu: cdktf.stringToTerraform(this._cpu),
            ephemeral_storage: ecsTaskDefinitionEphemeralStorageToTerraform(this._ephemeralStorage),
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            family: cdktf.stringToTerraform(this._family),
            inference_accelerators: cdktf.listMapper(ecsTaskDefinitionInferenceAcceleratorsToTerraform)(this._inferenceAccelerators),
            ipc_mode: cdktf.stringToTerraform(this._ipcMode),
            memory: cdktf.stringToTerraform(this._memory),
            network_mode: cdktf.stringToTerraform(this._networkMode),
            pid_mode: cdktf.stringToTerraform(this._pidMode),
            placement_constraints: cdktf.listMapper(ecsTaskDefinitionPlacementConstraintsToTerraform)(this._placementConstraints),
            proxy_configuration: ecsTaskDefinitionProxyConfigurationToTerraform(this._proxyConfiguration),
            requires_compatibilities: cdktf.listMapper(cdktf.stringToTerraform)(this._requiresCompatibilities),
            tags: cdktf.listMapper(ecsTaskDefinitionTagsToTerraform)(this._tags),
            task_role_arn: cdktf.stringToTerraform(this._taskRoleArn),
            volumes: cdktf.listMapper(ecsTaskDefinitionVolumesToTerraform)(this._volumes),
        };
    }
}
exports.EcsTaskDefinition = EcsTaskDefinition;
// =================
// STATIC PROPERTIES
// =================
EcsTaskDefinition.tfResourceType = "awscc_ecs_task_definition";
//# sourceMappingURL=data:application/json;base64,