"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotcoredeviceadvisor_suite_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotcoredeviceadvisorSuiteDefinition = exports.iotcoredeviceadvisorSuiteDefinitionTagsToTerraform = exports.iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform = exports.iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform = void 0;
const cdktf = require("cdktf");
function iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
        thing_arn: cdktf.stringToTerraform(struct.thingArn),
    };
}
exports.iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform = iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform;
function iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_permission_role_arn: cdktf.stringToTerraform(struct.devicePermissionRoleArn),
        devices: cdktf.listMapper(iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationDevicesToTerraform)(struct.devices),
        intended_for_qualification: cdktf.booleanToTerraform(struct.intendedForQualification),
        root_group: cdktf.stringToTerraform(struct.rootGroup),
        suite_definition_name: cdktf.stringToTerraform(struct.suiteDefinitionName),
    };
}
exports.iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform = iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform;
function iotcoredeviceadvisorSuiteDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotcoredeviceadvisorSuiteDefinitionTagsToTerraform = iotcoredeviceadvisorSuiteDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotcoredeviceadvisor_suite_definition.html awscc_iotcoredeviceadvisor_suite_definition}
*/
class IotcoredeviceadvisorSuiteDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotcoredeviceadvisor_suite_definition.html awscc_iotcoredeviceadvisor_suite_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotcoredeviceadvisorSuiteDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotcoredeviceadvisor_suite_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._suiteDefinitionConfiguration = config.suiteDefinitionConfiguration;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // suite_definition_arn - computed: true, optional: false, required: false
    get suiteDefinitionArn() {
        return this.getStringAttribute('suite_definition_arn');
    }
    get suiteDefinitionConfiguration() {
        return this.interpolationForAttribute('suite_definition_configuration');
    }
    set suiteDefinitionConfiguration(value) {
        this._suiteDefinitionConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get suiteDefinitionConfigurationInput() {
        return this._suiteDefinitionConfiguration;
    }
    // suite_definition_id - computed: true, optional: false, required: false
    get suiteDefinitionId() {
        return this.getStringAttribute('suite_definition_id');
    }
    // suite_definition_version - computed: true, optional: false, required: false
    get suiteDefinitionVersion() {
        return this.getStringAttribute('suite_definition_version');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            suite_definition_configuration: iotcoredeviceadvisorSuiteDefinitionSuiteDefinitionConfigurationToTerraform(this._suiteDefinitionConfiguration),
            tags: cdktf.listMapper(iotcoredeviceadvisorSuiteDefinitionTagsToTerraform)(this._tags),
        };
    }
}
exports.IotcoredeviceadvisorSuiteDefinition = IotcoredeviceadvisorSuiteDefinition;
// =================
// STATIC PROPERTIES
// =================
IotcoredeviceadvisorSuiteDefinition.tfResourceType = "awscc_iotcoredeviceadvisor_suite_definition";
//# sourceMappingURL=data:application/json;base64,