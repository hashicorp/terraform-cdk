"use strict";
// https://www.terraform.io/docs/providers/awscc/d/stepfunctions_state_machine.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccStepfunctionsStateMachine = exports.dataAwsccStepfunctionsStateMachineTracingConfigurationToTerraform = exports.DataAwsccStepfunctionsStateMachineTracingConfiguration = exports.dataAwsccStepfunctionsStateMachineTagsToTerraform = exports.DataAwsccStepfunctionsStateMachineTags = exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationToTerraform = exports.DataAwsccStepfunctionsStateMachineLoggingConfiguration = exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform = exports.DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinations = exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform = exports.DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroup = exports.dataAwsccStepfunctionsStateMachineDefinitionS3LocationToTerraform = exports.DataAwsccStepfunctionsStateMachineDefinitionS3Location = void 0;
const cdktf = require("cdktf");
class DataAwsccStepfunctionsStateMachineDefinitionS3Location extends cdktf.ComplexComputedList {
    // bucket - computed: true, optional: false, required: false
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
}
exports.DataAwsccStepfunctionsStateMachineDefinitionS3Location = DataAwsccStepfunctionsStateMachineDefinitionS3Location;
function dataAwsccStepfunctionsStateMachineDefinitionS3LocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.dataAwsccStepfunctionsStateMachineDefinitionS3LocationToTerraform = dataAwsccStepfunctionsStateMachineDefinitionS3LocationToTerraform;
class DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroup extends cdktf.ComplexComputedList {
    // log_group_arn - computed: true, optional: false, required: false
    get logGroupArn() {
        return this.getStringAttribute('log_group_arn');
    }
}
exports.DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroup = DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroup;
function dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_arn: cdktf.stringToTerraform(struct.logGroupArn),
    };
}
exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform = dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform;
class DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinations extends cdktf.ComplexComputedList {
    // cloudwatch_logs_log_group - computed: true, optional: false, required: false
    get cloudwatchLogsLogGroup() {
        return this.interpolationForAttribute('cloudwatch_logs_log_group');
    }
}
exports.DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinations = DataAwsccStepfunctionsStateMachineLoggingConfigurationDestinations;
function dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logs_log_group: dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform(struct.cloudwatchLogsLogGroup),
    };
}
exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform = dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform;
class DataAwsccStepfunctionsStateMachineLoggingConfiguration extends cdktf.ComplexComputedList {
    // destinations - computed: true, optional: false, required: false
    get destinations() {
        return this.interpolationForAttribute('destinations');
    }
    // include_execution_data - computed: true, optional: false, required: false
    get includeExecutionData() {
        return this.getBooleanAttribute('include_execution_data');
    }
    // level - computed: true, optional: false, required: false
    get level() {
        return this.getStringAttribute('level');
    }
}
exports.DataAwsccStepfunctionsStateMachineLoggingConfiguration = DataAwsccStepfunctionsStateMachineLoggingConfiguration;
function dataAwsccStepfunctionsStateMachineLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destinations: cdktf.listMapper(dataAwsccStepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform)(struct.destinations),
        include_execution_data: cdktf.booleanToTerraform(struct.includeExecutionData),
        level: cdktf.stringToTerraform(struct.level),
    };
}
exports.dataAwsccStepfunctionsStateMachineLoggingConfigurationToTerraform = dataAwsccStepfunctionsStateMachineLoggingConfigurationToTerraform;
class DataAwsccStepfunctionsStateMachineTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccStepfunctionsStateMachineTags = DataAwsccStepfunctionsStateMachineTags;
function dataAwsccStepfunctionsStateMachineTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccStepfunctionsStateMachineTagsToTerraform = dataAwsccStepfunctionsStateMachineTagsToTerraform;
class DataAwsccStepfunctionsStateMachineTracingConfiguration extends cdktf.ComplexComputedList {
    // enabled - computed: true, optional: false, required: false
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
}
exports.DataAwsccStepfunctionsStateMachineTracingConfiguration = DataAwsccStepfunctionsStateMachineTracingConfiguration;
function dataAwsccStepfunctionsStateMachineTracingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.dataAwsccStepfunctionsStateMachineTracingConfigurationToTerraform = dataAwsccStepfunctionsStateMachineTracingConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/stepfunctions_state_machine.html awscc_stepfunctions_state_machine}
*/
class DataAwsccStepfunctionsStateMachine extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/stepfunctions_state_machine.html awscc_stepfunctions_state_machine} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccStepfunctionsStateMachineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_stepfunctions_state_machine',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // definition - computed: true, optional: false, required: false
    definition(key) {
        return new cdktf.StringMap(this, 'definition').lookup(key);
    }
    // definition_s3_location - computed: true, optional: false, required: false
    get definitionS3Location() {
        return this.interpolationForAttribute('definition_s3_location');
    }
    // definition_string - computed: true, optional: false, required: false
    get definitionString() {
        return this.getStringAttribute('definition_string');
    }
    // definition_substitutions - computed: true, optional: false, required: false
    definitionSubstitutions(key) {
        return new cdktf.StringMap(this, 'definition_substitutions').lookup(key);
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // logging_configuration - computed: true, optional: false, required: false
    get loggingConfiguration() {
        return this.interpolationForAttribute('logging_configuration');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // state_machine_name - computed: true, optional: false, required: false
    get stateMachineName() {
        return this.getStringAttribute('state_machine_name');
    }
    // state_machine_type - computed: true, optional: false, required: false
    get stateMachineType() {
        return this.getStringAttribute('state_machine_type');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // tracing_configuration - computed: true, optional: false, required: false
    get tracingConfiguration() {
        return this.interpolationForAttribute('tracing_configuration');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccStepfunctionsStateMachine = DataAwsccStepfunctionsStateMachine;
// =================
// STATIC PROPERTIES
// =================
DataAwsccStepfunctionsStateMachine.tfResourceType = "awscc_stepfunctions_state_machine";
//# sourceMappingURL=data:application/json;base64,