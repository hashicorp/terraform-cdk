"use strict";
// https://www.terraform.io/docs/providers/awscc/r/wafv2_logging_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wafv2LoggingConfiguration = exports.wafv2LoggingConfigurationRedactedFieldsToTerraform = exports.wafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform = exports.wafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform = exports.wafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform = exports.wafv2LoggingConfigurationLoggingFilterToTerraform = exports.wafv2LoggingConfigurationLoggingFilterFiltersToTerraform = exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform = exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform = exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform = void 0;
const cdktf = require("cdktf");
function wafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform = wafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform;
function wafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label_name: cdktf.stringToTerraform(struct.labelName),
    };
}
exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform = wafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform;
function wafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action_condition: wafv2LoggingConfigurationLoggingFilterFiltersConditionsActionConditionToTerraform(struct.actionCondition),
        label_name_condition: wafv2LoggingConfigurationLoggingFilterFiltersConditionsLabelNameConditionToTerraform(struct.labelNameCondition),
    };
}
exports.wafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform = wafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform;
function wafv2LoggingConfigurationLoggingFilterFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        behavior: cdktf.stringToTerraform(struct.behavior),
        conditions: cdktf.listMapper(wafv2LoggingConfigurationLoggingFilterFiltersConditionsToTerraform)(struct.conditions),
        requirement: cdktf.stringToTerraform(struct.requirement),
    };
}
exports.wafv2LoggingConfigurationLoggingFilterFiltersToTerraform = wafv2LoggingConfigurationLoggingFilterFiltersToTerraform;
function wafv2LoggingConfigurationLoggingFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_behavior: cdktf.stringToTerraform(struct.defaultBehavior),
        filters: cdktf.listMapper(wafv2LoggingConfigurationLoggingFilterFiltersToTerraform)(struct.filters),
    };
}
exports.wafv2LoggingConfigurationLoggingFilterToTerraform = wafv2LoggingConfigurationLoggingFilterToTerraform;
function wafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        all: cdktf.hashMapper(cdktf.anyToTerraform)(struct.all),
        included_paths: cdktf.listMapper(cdktf.stringToTerraform)(struct.includedPaths),
    };
}
exports.wafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform = wafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform;
function wafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        invalid_fallback_behavior: cdktf.stringToTerraform(struct.invalidFallbackBehavior),
        match_pattern: wafv2LoggingConfigurationRedactedFieldsJsonBodyMatchPatternToTerraform(struct.matchPattern),
        match_scope: cdktf.stringToTerraform(struct.matchScope),
    };
}
exports.wafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform = wafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform;
function wafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.wafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform = wafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform;
function wafv2LoggingConfigurationRedactedFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        json_body: wafv2LoggingConfigurationRedactedFieldsJsonBodyToTerraform(struct.jsonBody),
        method: cdktf.hashMapper(cdktf.anyToTerraform)(struct.method),
        query_string: cdktf.hashMapper(cdktf.anyToTerraform)(struct.queryString),
        single_header: wafv2LoggingConfigurationRedactedFieldsSingleHeaderToTerraform(struct.singleHeader),
        uri_path: cdktf.hashMapper(cdktf.anyToTerraform)(struct.uriPath),
    };
}
exports.wafv2LoggingConfigurationRedactedFieldsToTerraform = wafv2LoggingConfigurationRedactedFieldsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/wafv2_logging_configuration.html awscc_wafv2_logging_configuration}
*/
class Wafv2LoggingConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/wafv2_logging_configuration.html awscc_wafv2_logging_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Wafv2LoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_wafv2_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._logDestinationConfigs = config.logDestinationConfigs;
        this._loggingFilter = config.loggingFilter;
        this._redactedFields = config.redactedFields;
        this._resourceArn = config.resourceArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logDestinationConfigs() {
        return this.getListAttribute('log_destination_configs');
    }
    set logDestinationConfigs(value) {
        this._logDestinationConfigs = value;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationConfigsInput() {
        return this._logDestinationConfigs;
    }
    get loggingFilter() {
        return this.interpolationForAttribute('logging_filter');
    }
    set loggingFilter(value) {
        this._loggingFilter = value;
    }
    resetLoggingFilter() {
        this._loggingFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingFilterInput() {
        return this._loggingFilter;
    }
    // managed_by_firewall_manager - computed: true, optional: false, required: false
    get managedByFirewallManager() {
        return this.getBooleanAttribute('managed_by_firewall_manager');
    }
    get redactedFields() {
        return this.interpolationForAttribute('redacted_fields');
    }
    set redactedFields(value) {
        this._redactedFields = value;
    }
    resetRedactedFields() {
        this._redactedFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redactedFieldsInput() {
        return this._redactedFields;
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            log_destination_configs: cdktf.listMapper(cdktf.stringToTerraform)(this._logDestinationConfigs),
            logging_filter: wafv2LoggingConfigurationLoggingFilterToTerraform(this._loggingFilter),
            redacted_fields: cdktf.listMapper(wafv2LoggingConfigurationRedactedFieldsToTerraform)(this._redactedFields),
            resource_arn: cdktf.stringToTerraform(this._resourceArn),
        };
    }
}
exports.Wafv2LoggingConfiguration = Wafv2LoggingConfiguration;
// =================
// STATIC PROPERTIES
// =================
Wafv2LoggingConfiguration.tfResourceType = "awscc_wafv2_logging_configuration";
//# sourceMappingURL=data:application/json;base64,