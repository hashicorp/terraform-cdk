"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudtrail_trail.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudtrailTrail = exports.cloudtrailTrailTagsToTerraform = exports.cloudtrailTrailInsightSelectorsToTerraform = exports.cloudtrailTrailEventSelectorsToTerraform = exports.cloudtrailTrailEventSelectorsDataResourcesToTerraform = void 0;
const cdktf = require("cdktf");
function cloudtrailTrailEventSelectorsDataResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.cloudtrailTrailEventSelectorsDataResourcesToTerraform = cloudtrailTrailEventSelectorsDataResourcesToTerraform;
function cloudtrailTrailEventSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_resources: cdktf.listMapper(cloudtrailTrailEventSelectorsDataResourcesToTerraform)(struct.dataResources),
        exclude_management_event_sources: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludeManagementEventSources),
        include_management_events: cdktf.booleanToTerraform(struct.includeManagementEvents),
        read_write_type: cdktf.stringToTerraform(struct.readWriteType),
    };
}
exports.cloudtrailTrailEventSelectorsToTerraform = cloudtrailTrailEventSelectorsToTerraform;
function cloudtrailTrailInsightSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        insight_type: cdktf.stringToTerraform(struct.insightType),
    };
}
exports.cloudtrailTrailInsightSelectorsToTerraform = cloudtrailTrailInsightSelectorsToTerraform;
function cloudtrailTrailTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudtrailTrailTagsToTerraform = cloudtrailTrailTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudtrail_trail.html awscc_cloudtrail_trail}
*/
class CloudtrailTrail extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudtrail_trail.html awscc_cloudtrail_trail} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudtrailTrailConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudtrail_trail',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cloudwatchLogsLogGroupArn = config.cloudwatchLogsLogGroupArn;
        this._cloudwatchLogsRoleArn = config.cloudwatchLogsRoleArn;
        this._enableLogFileValidation = config.enableLogFileValidation;
        this._eventSelectors = config.eventSelectors;
        this._includeGlobalServiceEvents = config.includeGlobalServiceEvents;
        this._insightSelectors = config.insightSelectors;
        this._isLogging = config.isLogging;
        this._isMultiRegionTrail = config.isMultiRegionTrail;
        this._isOrganizationTrail = config.isOrganizationTrail;
        this._kmsKeyId = config.kmsKeyId;
        this._s3BucketName = config.s3BucketName;
        this._s3KeyPrefix = config.s3KeyPrefix;
        this._snsTopicName = config.snsTopicName;
        this._tags = config.tags;
        this._trailName = config.trailName;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get cloudwatchLogsLogGroupArn() {
        return this.getStringAttribute('cloudwatch_logs_log_group_arn');
    }
    set cloudwatchLogsLogGroupArn(value) {
        this._cloudwatchLogsLogGroupArn = value;
    }
    resetCloudwatchLogsLogGroupArn() {
        this._cloudwatchLogsLogGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogsLogGroupArnInput() {
        return this._cloudwatchLogsLogGroupArn;
    }
    get cloudwatchLogsRoleArn() {
        return this.getStringAttribute('cloudwatch_logs_role_arn');
    }
    set cloudwatchLogsRoleArn(value) {
        this._cloudwatchLogsRoleArn = value;
    }
    resetCloudwatchLogsRoleArn() {
        this._cloudwatchLogsRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogsRoleArnInput() {
        return this._cloudwatchLogsRoleArn;
    }
    get enableLogFileValidation() {
        return this.getBooleanAttribute('enable_log_file_validation');
    }
    set enableLogFileValidation(value) {
        this._enableLogFileValidation = value;
    }
    resetEnableLogFileValidation() {
        this._enableLogFileValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableLogFileValidationInput() {
        return this._enableLogFileValidation;
    }
    get eventSelectors() {
        return this.interpolationForAttribute('event_selectors');
    }
    set eventSelectors(value) {
        this._eventSelectors = value;
    }
    resetEventSelectors() {
        this._eventSelectors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventSelectorsInput() {
        return this._eventSelectors;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get includeGlobalServiceEvents() {
        return this.getBooleanAttribute('include_global_service_events');
    }
    set includeGlobalServiceEvents(value) {
        this._includeGlobalServiceEvents = value;
    }
    resetIncludeGlobalServiceEvents() {
        this._includeGlobalServiceEvents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeGlobalServiceEventsInput() {
        return this._includeGlobalServiceEvents;
    }
    get insightSelectors() {
        return this.interpolationForAttribute('insight_selectors');
    }
    set insightSelectors(value) {
        this._insightSelectors = value;
    }
    resetInsightSelectors() {
        this._insightSelectors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insightSelectorsInput() {
        return this._insightSelectors;
    }
    get isLogging() {
        return this.getBooleanAttribute('is_logging');
    }
    set isLogging(value) {
        this._isLogging = value;
    }
    // Temporarily expose input value. Use with caution.
    get isLoggingInput() {
        return this._isLogging;
    }
    get isMultiRegionTrail() {
        return this.getBooleanAttribute('is_multi_region_trail');
    }
    set isMultiRegionTrail(value) {
        this._isMultiRegionTrail = value;
    }
    resetIsMultiRegionTrail() {
        this._isMultiRegionTrail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isMultiRegionTrailInput() {
        return this._isMultiRegionTrail;
    }
    get isOrganizationTrail() {
        return this.getBooleanAttribute('is_organization_trail');
    }
    set isOrganizationTrail(value) {
        this._isOrganizationTrail = value;
    }
    resetIsOrganizationTrail() {
        this._isOrganizationTrail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isOrganizationTrailInput() {
        return this._isOrganizationTrail;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
    set s3KeyPrefix(value) {
        this._s3KeyPrefix = value;
    }
    resetS3KeyPrefix() {
        this._s3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyPrefixInput() {
        return this._s3KeyPrefix;
    }
    // sns_topic_arn - computed: true, optional: false, required: false
    get snsTopicArn() {
        return this.getStringAttribute('sns_topic_arn');
    }
    get snsTopicName() {
        return this.getStringAttribute('sns_topic_name');
    }
    set snsTopicName(value) {
        this._snsTopicName = value;
    }
    resetSnsTopicName() {
        this._snsTopicName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snsTopicNameInput() {
        return this._snsTopicName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get trailName() {
        return this.getStringAttribute('trail_name');
    }
    set trailName(value) {
        this._trailName = value;
    }
    resetTrailName() {
        this._trailName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trailNameInput() {
        return this._trailName;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cloudwatch_logs_log_group_arn: cdktf.stringToTerraform(this._cloudwatchLogsLogGroupArn),
            cloudwatch_logs_role_arn: cdktf.stringToTerraform(this._cloudwatchLogsRoleArn),
            enable_log_file_validation: cdktf.booleanToTerraform(this._enableLogFileValidation),
            event_selectors: cdktf.listMapper(cloudtrailTrailEventSelectorsToTerraform)(this._eventSelectors),
            include_global_service_events: cdktf.booleanToTerraform(this._includeGlobalServiceEvents),
            insight_selectors: cdktf.listMapper(cloudtrailTrailInsightSelectorsToTerraform)(this._insightSelectors),
            is_logging: cdktf.booleanToTerraform(this._isLogging),
            is_multi_region_trail: cdktf.booleanToTerraform(this._isMultiRegionTrail),
            is_organization_trail: cdktf.booleanToTerraform(this._isOrganizationTrail),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            s3_bucket_name: cdktf.stringToTerraform(this._s3BucketName),
            s3_key_prefix: cdktf.stringToTerraform(this._s3KeyPrefix),
            sns_topic_name: cdktf.stringToTerraform(this._snsTopicName),
            tags: cdktf.listMapper(cloudtrailTrailTagsToTerraform)(this._tags),
            trail_name: cdktf.stringToTerraform(this._trailName),
        };
    }
}
exports.CloudtrailTrail = CloudtrailTrail;
// =================
// STATIC PROPERTIES
// =================
CloudtrailTrail.tfResourceType = "awscc_cloudtrail_trail";
//# sourceMappingURL=data:application/json;base64,