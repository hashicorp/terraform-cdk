"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iot_mitigation_action.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotMitigationAction = exports.dataAwsccIotMitigationActionTagsToTerraform = exports.DataAwsccIotMitigationActionTags = exports.dataAwsccIotMitigationActionActionParamsToTerraform = exports.DataAwsccIotMitigationActionActionParams = exports.dataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParams = exports.dataAwsccIotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsUpdateCaCertificateParams = exports.dataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParams = exports.dataAwsccIotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsPublishFindingToSnsParams = exports.dataAwsccIotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsEnableIoTLoggingParams = exports.dataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform = exports.DataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParams = void 0;
const cdktf = require("cdktf");
class DataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParams extends cdktf.ComplexComputedList {
    // override_dynamic_groups - computed: true, optional: false, required: false
    get overrideDynamicGroups() {
        return this.getBooleanAttribute('override_dynamic_groups');
    }
    // thing_group_names - computed: true, optional: false, required: false
    get thingGroupNames() {
        return this.getListAttribute('thing_group_names');
    }
}
exports.DataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParams = DataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParams;
function dataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        override_dynamic_groups: cdktf.booleanToTerraform(struct.overrideDynamicGroups),
        thing_group_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.thingGroupNames),
    };
}
exports.dataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform = dataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform;
class DataAwsccIotMitigationActionActionParamsEnableIoTLoggingParams extends cdktf.ComplexComputedList {
    // log_level - computed: true, optional: false, required: false
    get logLevel() {
        return this.getStringAttribute('log_level');
    }
    // role_arn_for_logging - computed: true, optional: false, required: false
    get roleArnForLogging() {
        return this.getStringAttribute('role_arn_for_logging');
    }
}
exports.DataAwsccIotMitigationActionActionParamsEnableIoTLoggingParams = DataAwsccIotMitigationActionActionParamsEnableIoTLoggingParams;
function dataAwsccIotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_level: cdktf.stringToTerraform(struct.logLevel),
        role_arn_for_logging: cdktf.stringToTerraform(struct.roleArnForLogging),
    };
}
exports.dataAwsccIotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform = dataAwsccIotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform;
class DataAwsccIotMitigationActionActionParamsPublishFindingToSnsParams extends cdktf.ComplexComputedList {
    // topic_arn - computed: true, optional: false, required: false
    get topicArn() {
        return this.getStringAttribute('topic_arn');
    }
}
exports.DataAwsccIotMitigationActionActionParamsPublishFindingToSnsParams = DataAwsccIotMitigationActionActionParamsPublishFindingToSnsParams;
function dataAwsccIotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        topic_arn: cdktf.stringToTerraform(struct.topicArn),
    };
}
exports.dataAwsccIotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform = dataAwsccIotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform;
class DataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParams extends cdktf.ComplexComputedList {
    // template_name - computed: true, optional: false, required: false
    get templateName() {
        return this.getStringAttribute('template_name');
    }
}
exports.DataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParams = DataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParams;
function dataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        template_name: cdktf.stringToTerraform(struct.templateName),
    };
}
exports.dataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform = dataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform;
class DataAwsccIotMitigationActionActionParamsUpdateCaCertificateParams extends cdktf.ComplexComputedList {
    // action - computed: true, optional: false, required: false
    get action() {
        return this.getStringAttribute('action');
    }
}
exports.DataAwsccIotMitigationActionActionParamsUpdateCaCertificateParams = DataAwsccIotMitigationActionActionParamsUpdateCaCertificateParams;
function dataAwsccIotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.dataAwsccIotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform = dataAwsccIotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform;
class DataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParams extends cdktf.ComplexComputedList {
    // action - computed: true, optional: false, required: false
    get action() {
        return this.getStringAttribute('action');
    }
}
exports.DataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParams = DataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParams;
function dataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.dataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform = dataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform;
class DataAwsccIotMitigationActionActionParams extends cdktf.ComplexComputedList {
    // add_things_to_thing_group_params - computed: true, optional: false, required: false
    get addThingsToThingGroupParams() {
        return this.interpolationForAttribute('add_things_to_thing_group_params');
    }
    // enable_io_t_logging_params - computed: true, optional: false, required: false
    get enableIoTLoggingParams() {
        return this.interpolationForAttribute('enable_io_t_logging_params');
    }
    // publish_finding_to_sns_params - computed: true, optional: false, required: false
    get publishFindingToSnsParams() {
        return this.interpolationForAttribute('publish_finding_to_sns_params');
    }
    // replace_default_policy_version_params - computed: true, optional: false, required: false
    get replaceDefaultPolicyVersionParams() {
        return this.interpolationForAttribute('replace_default_policy_version_params');
    }
    // update_ca_certificate_params - computed: true, optional: false, required: false
    get updateCaCertificateParams() {
        return this.interpolationForAttribute('update_ca_certificate_params');
    }
    // update_device_certificate_params - computed: true, optional: false, required: false
    get updateDeviceCertificateParams() {
        return this.interpolationForAttribute('update_device_certificate_params');
    }
}
exports.DataAwsccIotMitigationActionActionParams = DataAwsccIotMitigationActionActionParams;
function dataAwsccIotMitigationActionActionParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add_things_to_thing_group_params: dataAwsccIotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform(struct.addThingsToThingGroupParams),
        enable_io_t_logging_params: dataAwsccIotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform(struct.enableIoTLoggingParams),
        publish_finding_to_sns_params: dataAwsccIotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform(struct.publishFindingToSnsParams),
        replace_default_policy_version_params: dataAwsccIotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform(struct.replaceDefaultPolicyVersionParams),
        update_ca_certificate_params: dataAwsccIotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform(struct.updateCaCertificateParams),
        update_device_certificate_params: dataAwsccIotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform(struct.updateDeviceCertificateParams),
    };
}
exports.dataAwsccIotMitigationActionActionParamsToTerraform = dataAwsccIotMitigationActionActionParamsToTerraform;
class DataAwsccIotMitigationActionTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotMitigationActionTags = DataAwsccIotMitigationActionTags;
function dataAwsccIotMitigationActionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotMitigationActionTagsToTerraform = dataAwsccIotMitigationActionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iot_mitigation_action.html awscc_iot_mitigation_action}
*/
class DataAwsccIotMitigationAction extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iot_mitigation_action.html awscc_iot_mitigation_action} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotMitigationActionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_mitigation_action',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // action_name - computed: true, optional: false, required: false
    get actionName() {
        return this.getStringAttribute('action_name');
    }
    // action_params - computed: true, optional: false, required: false
    get actionParams() {
        return this.interpolationForAttribute('action_params');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // mitigation_action_arn - computed: true, optional: false, required: false
    get mitigationActionArn() {
        return this.getStringAttribute('mitigation_action_arn');
    }
    // mitigation_action_id - computed: true, optional: false, required: false
    get mitigationActionId() {
        return this.getStringAttribute('mitigation_action_id');
    }
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotMitigationAction = DataAwsccIotMitigationAction;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotMitigationAction.tfResourceType = "awscc_iot_mitigation_action";
//# sourceMappingURL=data:application/json;base64,