"use strict";
// https://www.terraform.io/docs/providers/awscc/r/appflow_flow.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppflowFlow = exports.appflowFlowTriggerConfigToTerraform = exports.appflowFlowTriggerConfigTriggerPropertiesToTerraform = exports.appflowFlowTasksToTerraform = exports.appflowFlowTasksTaskPropertiesToTerraform = exports.appflowFlowTasksConnectorOperatorToTerraform = exports.appflowFlowTagsToTerraform = exports.appflowFlowSourceFlowConfigToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform = exports.appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform = exports.appflowFlowDestinationFlowConfigListToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3ToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesLookoutMetricsToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeToTerraform = exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform = void 0;
const cdktf = require("cdktf");
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_error: cdktf.booleanToTerraform(struct.failOnFirstError),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        error_handling_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesLookoutMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesLookoutMetricsToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesLookoutMetricsToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_error: cdktf.booleanToTerraform(struct.failOnFirstError),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        error_handling_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        intermediate_bucket_name: cdktf.stringToTerraform(struct.intermediateBucketName),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aggregation_type: cdktf.stringToTerraform(struct.aggregationType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        prefix_format: cdktf.stringToTerraform(struct.prefixFormat),
        prefix_type: cdktf.stringToTerraform(struct.prefixType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aggregation_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform(struct.aggregationConfig),
        file_type: cdktf.stringToTerraform(struct.fileType),
        prefix_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform(struct.prefixConfig),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        s3_output_format_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform(struct.s3OutputFormatConfig),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3ToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3ToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_error: cdktf.booleanToTerraform(struct.failOnFirstError),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        error_handling_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.idFieldNames),
        object: cdktf.stringToTerraform(struct.object),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_error: cdktf.booleanToTerraform(struct.failOnFirstError),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        error_handling_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        intermediate_bucket_name: cdktf.stringToTerraform(struct.intermediateBucketName),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aggregation_type: cdktf.stringToTerraform(struct.aggregationType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        prefix_format: cdktf.stringToTerraform(struct.prefixFormat),
        prefix_type: cdktf.stringToTerraform(struct.prefixType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aggregation_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform(struct.aggregationConfig),
        file_type: cdktf.stringToTerraform(struct.fileType),
        prefix_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform(struct.prefixConfig),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        s3_output_format_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform(struct.s3OutputFormatConfig),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_error: cdktf.booleanToTerraform(struct.failOnFirstError),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        error_handling_config: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.idFieldNames),
        object: cdktf.stringToTerraform(struct.object),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskToTerraform;
function appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_bridge: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesEventBridgeToTerraform(struct.eventBridge),
        lookout_metrics: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesLookoutMetricsToTerraform(struct.lookoutMetrics),
        redshift: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesRedshiftToTerraform(struct.redshift),
        s3: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesS3ToTerraform(struct.s3),
        salesforce: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSalesforceToTerraform(struct.salesforce),
        snowflake: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesSnowflakeToTerraform(struct.snowflake),
        upsolver: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesUpsolverToTerraform(struct.upsolver),
        zendesk: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesToTerraform = appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesToTerraform;
function appflowFlowDestinationFlowConfigListToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_profile_name: cdktf.stringToTerraform(struct.connectorProfileName),
        connector_type: cdktf.stringToTerraform(struct.connectorType),
        destination_connector_properties: appflowFlowDestinationFlowConfigListDestinationConnectorPropertiesToTerraform(struct.destinationConnectorProperties),
    };
}
exports.appflowFlowDestinationFlowConfigListToTerraform = appflowFlowDestinationFlowConfigListToTerraform;
function appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        datetime_type_field_name: cdktf.stringToTerraform(struct.datetimeTypeFieldName),
    };
}
exports.appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform = appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_dynamic_field_update: cdktf.booleanToTerraform(struct.enableDynamicFieldUpdate),
        include_deleted_records: cdktf.booleanToTerraform(struct.includeDeletedRecords),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform;
function appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amplitude: appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform(struct.amplitude),
        datadog: appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform(struct.datadog),
        dynatrace: appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform(struct.dynatrace),
        google_analytics: appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform(struct.googleAnalytics),
        infor_nexus: appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform(struct.inforNexus),
        marketo: appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct.marketo),
        s3: appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct.s3),
        salesforce: appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct.salesforce),
        service_now: appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct.serviceNow),
        singular: appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform(struct.singular),
        slack: appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform(struct.slack),
        trendmicro: appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform(struct.trendmicro),
        veeva: appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform(struct.veeva),
        zendesk: appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform;
function appflowFlowSourceFlowConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_profile_name: cdktf.stringToTerraform(struct.connectorProfileName),
        connector_type: cdktf.stringToTerraform(struct.connectorType),
        incremental_pull_config: appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform(struct.incrementalPullConfig),
        source_connector_properties: appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform(struct.sourceConnectorProperties),
    };
}
exports.appflowFlowSourceFlowConfigToTerraform = appflowFlowSourceFlowConfigToTerraform;
function appflowFlowTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.appflowFlowTagsToTerraform = appflowFlowTagsToTerraform;
function appflowFlowTasksConnectorOperatorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amplitude: cdktf.stringToTerraform(struct.amplitude),
        datadog: cdktf.stringToTerraform(struct.datadog),
        dynatrace: cdktf.stringToTerraform(struct.dynatrace),
        google_analytics: cdktf.stringToTerraform(struct.googleAnalytics),
        infor_nexus: cdktf.stringToTerraform(struct.inforNexus),
        marketo: cdktf.stringToTerraform(struct.marketo),
        s3: cdktf.stringToTerraform(struct.s3),
        salesforce: cdktf.stringToTerraform(struct.salesforce),
        service_now: cdktf.stringToTerraform(struct.serviceNow),
        singular: cdktf.stringToTerraform(struct.singular),
        slack: cdktf.stringToTerraform(struct.slack),
        trendmicro: cdktf.stringToTerraform(struct.trendmicro),
        veeva: cdktf.stringToTerraform(struct.veeva),
        zendesk: cdktf.stringToTerraform(struct.zendesk),
    };
}
exports.appflowFlowTasksConnectorOperatorToTerraform = appflowFlowTasksConnectorOperatorToTerraform;
function appflowFlowTasksTaskPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.appflowFlowTasksTaskPropertiesToTerraform = appflowFlowTasksTaskPropertiesToTerraform;
function appflowFlowTasksToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_operator: appflowFlowTasksConnectorOperatorToTerraform(struct.connectorOperator),
        destination_field: cdktf.stringToTerraform(struct.destinationField),
        source_fields: cdktf.listMapper(cdktf.stringToTerraform)(struct.sourceFields),
        task_properties: cdktf.listMapper(appflowFlowTasksTaskPropertiesToTerraform)(struct.taskProperties),
        task_type: cdktf.stringToTerraform(struct.taskType),
    };
}
exports.appflowFlowTasksToTerraform = appflowFlowTasksToTerraform;
function appflowFlowTriggerConfigTriggerPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_pull_mode: cdktf.stringToTerraform(struct.dataPullMode),
        schedule_end_time: cdktf.numberToTerraform(struct.scheduleEndTime),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        schedule_start_time: cdktf.numberToTerraform(struct.scheduleStartTime),
        time_zone: cdktf.stringToTerraform(struct.timeZone),
    };
}
exports.appflowFlowTriggerConfigTriggerPropertiesToTerraform = appflowFlowTriggerConfigTriggerPropertiesToTerraform;
function appflowFlowTriggerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        trigger_properties: appflowFlowTriggerConfigTriggerPropertiesToTerraform(struct.triggerProperties),
        trigger_type: cdktf.stringToTerraform(struct.triggerType),
    };
}
exports.appflowFlowTriggerConfigToTerraform = appflowFlowTriggerConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/appflow_flow.html awscc_appflow_flow}
*/
class AppflowFlow extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/appflow_flow.html awscc_appflow_flow} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppflowFlowConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_appflow_flow',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._destinationFlowConfigList = config.destinationFlowConfigList;
        this._flowName = config.flowName;
        this._kmsArn = config.kmsArn;
        this._sourceFlowConfig = config.sourceFlowConfig;
        this._tags = config.tags;
        this._tasks = config.tasks;
        this._triggerConfig = config.triggerConfig;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get destinationFlowConfigList() {
        return this.interpolationForAttribute('destination_flow_config_list');
    }
    set destinationFlowConfigList(value) {
        this._destinationFlowConfigList = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationFlowConfigListInput() {
        return this._destinationFlowConfigList;
    }
    // flow_arn - computed: true, optional: false, required: false
    get flowArn() {
        return this.getStringAttribute('flow_arn');
    }
    get flowName() {
        return this.getStringAttribute('flow_name');
    }
    set flowName(value) {
        this._flowName = value;
    }
    // Temporarily expose input value. Use with caution.
    get flowNameInput() {
        return this._flowName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsArn() {
        return this.getStringAttribute('kms_arn');
    }
    set kmsArn(value) {
        this._kmsArn = value;
    }
    resetKmsArn() {
        this._kmsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsArnInput() {
        return this._kmsArn;
    }
    get sourceFlowConfig() {
        return this.interpolationForAttribute('source_flow_config');
    }
    set sourceFlowConfig(value) {
        this._sourceFlowConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFlowConfigInput() {
        return this._sourceFlowConfig;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tasks() {
        return this.interpolationForAttribute('tasks');
    }
    set tasks(value) {
        this._tasks = value;
    }
    // Temporarily expose input value. Use with caution.
    get tasksInput() {
        return this._tasks;
    }
    get triggerConfig() {
        return this.interpolationForAttribute('trigger_config');
    }
    set triggerConfig(value) {
        this._triggerConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggerConfigInput() {
        return this._triggerConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            destination_flow_config_list: cdktf.listMapper(appflowFlowDestinationFlowConfigListToTerraform)(this._destinationFlowConfigList),
            flow_name: cdktf.stringToTerraform(this._flowName),
            kms_arn: cdktf.stringToTerraform(this._kmsArn),
            source_flow_config: appflowFlowSourceFlowConfigToTerraform(this._sourceFlowConfig),
            tags: cdktf.listMapper(appflowFlowTagsToTerraform)(this._tags),
            tasks: cdktf.listMapper(appflowFlowTasksToTerraform)(this._tasks),
            trigger_config: appflowFlowTriggerConfigToTerraform(this._triggerConfig),
        };
    }
}
exports.AppflowFlow = AppflowFlow;
// =================
// STATIC PROPERTIES
// =================
AppflowFlow.tfResourceType = "awscc_appflow_flow";
//# sourceMappingURL=data:application/json;base64,