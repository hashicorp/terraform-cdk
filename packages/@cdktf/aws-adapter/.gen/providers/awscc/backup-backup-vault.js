"use strict";
// https://www.terraform.io/docs/providers/awscc/r/backup_backup_vault.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupBackupVault = exports.backupBackupVaultNotificationsToTerraform = void 0;
const cdktf = require("cdktf");
function backupBackupVaultNotificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        backup_vault_events: cdktf.listMapper(cdktf.stringToTerraform)(struct.backupVaultEvents),
        sns_topic_arn: cdktf.stringToTerraform(struct.snsTopicArn),
    };
}
exports.backupBackupVaultNotificationsToTerraform = backupBackupVaultNotificationsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_vault.html awscc_backup_backup_vault}
*/
class BackupBackupVault extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/backup_backup_vault.html awscc_backup_backup_vault} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BackupBackupVaultConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_backup_backup_vault',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accessPolicy = config.accessPolicy;
        this._backupVaultName = config.backupVaultName;
        this._backupVaultTags = config.backupVaultTags;
        this._encryptionKeyArn = config.encryptionKeyArn;
        this._notifications = config.notifications;
    }
    get accessPolicy() {
        return this.getStringAttribute('access_policy');
    }
    set accessPolicy(value) {
        this._accessPolicy = value;
    }
    resetAccessPolicy() {
        this._accessPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessPolicyInput() {
        return this._accessPolicy;
    }
    // backup_vault_arn - computed: true, optional: false, required: false
    get backupVaultArn() {
        return this.getStringAttribute('backup_vault_arn');
    }
    get backupVaultName() {
        return this.getStringAttribute('backup_vault_name');
    }
    set backupVaultName(value) {
        this._backupVaultName = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupVaultNameInput() {
        return this._backupVaultName;
    }
    get backupVaultTags() {
        return this.interpolationForAttribute('backup_vault_tags');
    }
    set backupVaultTags(value) {
        this._backupVaultTags = value;
    }
    resetBackupVaultTags() {
        this._backupVaultTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupVaultTagsInput() {
        return this._backupVaultTags;
    }
    get encryptionKeyArn() {
        return this.getStringAttribute('encryption_key_arn');
    }
    set encryptionKeyArn(value) {
        this._encryptionKeyArn = value;
    }
    resetEncryptionKeyArn() {
        this._encryptionKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyArnInput() {
        return this._encryptionKeyArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get notifications() {
        return this.interpolationForAttribute('notifications');
    }
    set notifications(value) {
        this._notifications = value;
    }
    resetNotifications() {
        this._notifications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationsInput() {
        return this._notifications;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_policy: cdktf.stringToTerraform(this._accessPolicy),
            backup_vault_name: cdktf.stringToTerraform(this._backupVaultName),
            backup_vault_tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._backupVaultTags),
            encryption_key_arn: cdktf.stringToTerraform(this._encryptionKeyArn),
            notifications: backupBackupVaultNotificationsToTerraform(this._notifications),
        };
    }
}
exports.BackupBackupVault = BackupBackupVault;
// =================
// STATIC PROPERTIES
// =================
BackupBackupVault.tfResourceType = "awscc_backup_backup_vault";
//# sourceMappingURL=data:application/json;base64,