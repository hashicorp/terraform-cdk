"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sso_instance_access_control_attribute_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsoInstanceAccessControlAttributeConfiguration = exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform = exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = exports.ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = exports.ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = void 0;
const cdktf = require("cdktf");
function ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.listMapper(cdktf.stringToTerraform)(struct.source),
    };
}
exports.ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform;
function ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct.value),
    };
}
exports.ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform;
function ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.listMapper(cdktf.stringToTerraform)(struct.source),
    };
}
exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform = ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform;
function ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesValueToTerraform(struct.value),
    };
}
exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform = ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform;
function ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_control_attributes: cdktf.listMapper(ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform)(struct.accessControlAttributes),
    };
}
exports.ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform = ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sso_instance_access_control_attribute_configuration.html awscc_sso_instance_access_control_attribute_configuration}
*/
class SsoInstanceAccessControlAttributeConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sso_instance_access_control_attribute_configuration.html awscc_sso_instance_access_control_attribute_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsoInstanceAccessControlAttributeConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sso_instance_access_control_attribute_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accessControlAttributes = config.accessControlAttributes;
        this._instanceAccessControlAttributeConfiguration = config.instanceAccessControlAttributeConfiguration;
        this._instanceArn = config.instanceArn;
    }
    get accessControlAttributes() {
        return this.interpolationForAttribute('access_control_attributes');
    }
    set accessControlAttributes(value) {
        this._accessControlAttributes = value;
    }
    resetAccessControlAttributes() {
        this._accessControlAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlAttributesInput() {
        return this._accessControlAttributes;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceAccessControlAttributeConfiguration() {
        return this.interpolationForAttribute('instance_access_control_attribute_configuration');
    }
    set instanceAccessControlAttributeConfiguration(value) {
        this._instanceAccessControlAttributeConfiguration = value;
    }
    resetInstanceAccessControlAttributeConfiguration() {
        this._instanceAccessControlAttributeConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceAccessControlAttributeConfigurationInput() {
        return this._instanceAccessControlAttributeConfiguration;
    }
    get instanceArn() {
        return this.getStringAttribute('instance_arn');
    }
    set instanceArn(value) {
        this._instanceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceArnInput() {
        return this._instanceArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_control_attributes: cdktf.listMapper(ssoInstanceAccessControlAttributeConfigurationAccessControlAttributesToTerraform)(this._accessControlAttributes),
            instance_access_control_attribute_configuration: ssoInstanceAccessControlAttributeConfigurationInstanceAccessControlAttributeConfigurationToTerraform(this._instanceAccessControlAttributeConfiguration),
            instance_arn: cdktf.stringToTerraform(this._instanceArn),
        };
    }
}
exports.SsoInstanceAccessControlAttributeConfiguration = SsoInstanceAccessControlAttributeConfiguration;
// =================
// STATIC PROPERTIES
// =================
SsoInstanceAccessControlAttributeConfiguration.tfResourceType = "awscc_sso_instance_access_control_attribute_configuration";
//# sourceMappingURL=data:application/json;base64,