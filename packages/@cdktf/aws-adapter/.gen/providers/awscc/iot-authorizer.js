"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_authorizer.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotAuthorizer = exports.iotAuthorizerTagsToTerraform = void 0;
const cdktf = require("cdktf");
function iotAuthorizerTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotAuthorizerTagsToTerraform = iotAuthorizerTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_authorizer.html awscc_iot_authorizer}
*/
class IotAuthorizer extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_authorizer.html awscc_iot_authorizer} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotAuthorizerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_authorizer',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authorizerFunctionArn = config.authorizerFunctionArn;
        this._authorizerName = config.authorizerName;
        this._signingDisabled = config.signingDisabled;
        this._status = config.status;
        this._tags = config.tags;
        this._tokenKeyName = config.tokenKeyName;
        this._tokenSigningPublicKeys = config.tokenSigningPublicKeys;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authorizerFunctionArn() {
        return this.getStringAttribute('authorizer_function_arn');
    }
    set authorizerFunctionArn(value) {
        this._authorizerFunctionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerFunctionArnInput() {
        return this._authorizerFunctionArn;
    }
    get authorizerName() {
        return this.getStringAttribute('authorizer_name');
    }
    set authorizerName(value) {
        this._authorizerName = value;
    }
    resetAuthorizerName() {
        this._authorizerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerNameInput() {
        return this._authorizerName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get signingDisabled() {
        return this.getBooleanAttribute('signing_disabled');
    }
    set signingDisabled(value) {
        this._signingDisabled = value;
    }
    resetSigningDisabled() {
        this._signingDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signingDisabledInput() {
        return this._signingDisabled;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tokenKeyName() {
        return this.getStringAttribute('token_key_name');
    }
    set tokenKeyName(value) {
        this._tokenKeyName = value;
    }
    resetTokenKeyName() {
        this._tokenKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenKeyNameInput() {
        return this._tokenKeyName;
    }
    get tokenSigningPublicKeys() {
        return this.interpolationForAttribute('token_signing_public_keys');
    }
    set tokenSigningPublicKeys(value) {
        this._tokenSigningPublicKeys = value;
    }
    resetTokenSigningPublicKeys() {
        this._tokenSigningPublicKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenSigningPublicKeysInput() {
        return this._tokenSigningPublicKeys;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorizer_function_arn: cdktf.stringToTerraform(this._authorizerFunctionArn),
            authorizer_name: cdktf.stringToTerraform(this._authorizerName),
            signing_disabled: cdktf.booleanToTerraform(this._signingDisabled),
            status: cdktf.stringToTerraform(this._status),
            tags: cdktf.listMapper(iotAuthorizerTagsToTerraform)(this._tags),
            token_key_name: cdktf.stringToTerraform(this._tokenKeyName),
            token_signing_public_keys: cdktf.hashMapper(cdktf.anyToTerraform)(this._tokenSigningPublicKeys),
        };
    }
}
exports.IotAuthorizer = IotAuthorizer;
// =================
// STATIC PROPERTIES
// =================
IotAuthorizer.tfResourceType = "awscc_iot_authorizer";
//# sourceMappingURL=data:application/json;base64,