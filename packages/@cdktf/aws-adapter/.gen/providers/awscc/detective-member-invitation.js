"use strict";
// https://www.terraform.io/docs/providers/awscc/r/detective_member_invitation.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectiveMemberInvitation = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/detective_member_invitation.html awscc_detective_member_invitation}
*/
class DetectiveMemberInvitation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/detective_member_invitation.html awscc_detective_member_invitation} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DetectiveMemberInvitationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_detective_member_invitation',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._disableEmailNotification = config.disableEmailNotification;
        this._graphArn = config.graphArn;
        this._memberEmailAddress = config.memberEmailAddress;
        this._memberId = config.memberId;
        this._message = config.message;
    }
    get disableEmailNotification() {
        return this.getBooleanAttribute('disable_email_notification');
    }
    set disableEmailNotification(value) {
        this._disableEmailNotification = value;
    }
    resetDisableEmailNotification() {
        this._disableEmailNotification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableEmailNotificationInput() {
        return this._disableEmailNotification;
    }
    get graphArn() {
        return this.getStringAttribute('graph_arn');
    }
    set graphArn(value) {
        this._graphArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get graphArnInput() {
        return this._graphArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get memberEmailAddress() {
        return this.getStringAttribute('member_email_address');
    }
    set memberEmailAddress(value) {
        this._memberEmailAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get memberEmailAddressInput() {
        return this._memberEmailAddress;
    }
    get memberId() {
        return this.getStringAttribute('member_id');
    }
    set memberId(value) {
        this._memberId = value;
    }
    // Temporarily expose input value. Use with caution.
    get memberIdInput() {
        return this._memberId;
    }
    get message() {
        return this.getStringAttribute('message');
    }
    set message(value) {
        this._message = value;
    }
    resetMessage() {
        this._message = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            disable_email_notification: cdktf.booleanToTerraform(this._disableEmailNotification),
            graph_arn: cdktf.stringToTerraform(this._graphArn),
            member_email_address: cdktf.stringToTerraform(this._memberEmailAddress),
            member_id: cdktf.stringToTerraform(this._memberId),
            message: cdktf.stringToTerraform(this._message),
        };
    }
}
exports.DetectiveMemberInvitation = DetectiveMemberInvitation;
// =================
// STATIC PROPERTIES
// =================
DetectiveMemberInvitation.tfResourceType = "awscc_detective_member_invitation";
//# sourceMappingURL=data:application/json;base64,