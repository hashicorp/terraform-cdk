"use strict";
// https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_endpoint.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsDbProxyEndpoint = exports.rdsDbProxyEndpointTagsToTerraform = void 0;
const cdktf = require("cdktf");
function rdsDbProxyEndpointTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.rdsDbProxyEndpointTagsToTerraform = rdsDbProxyEndpointTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_endpoint.html awscc_rds_db_proxy_endpoint}
*/
class RdsDbProxyEndpoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/rds_db_proxy_endpoint.html awscc_rds_db_proxy_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RdsDbProxyEndpointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_rds_db_proxy_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._dbProxyEndpointName = config.dbProxyEndpointName;
        this._dbProxyName = config.dbProxyName;
        this._tags = config.tags;
        this._targetRole = config.targetRole;
        this._vpcSecurityGroupIds = config.vpcSecurityGroupIds;
        this._vpcSubnetIds = config.vpcSubnetIds;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // db_proxy_endpoint_arn - computed: true, optional: false, required: false
    get dbProxyEndpointArn() {
        return this.getStringAttribute('db_proxy_endpoint_arn');
    }
    get dbProxyEndpointName() {
        return this.getStringAttribute('db_proxy_endpoint_name');
    }
    set dbProxyEndpointName(value) {
        this._dbProxyEndpointName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbProxyEndpointNameInput() {
        return this._dbProxyEndpointName;
    }
    get dbProxyName() {
        return this.getStringAttribute('db_proxy_name');
    }
    set dbProxyName(value) {
        this._dbProxyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbProxyNameInput() {
        return this._dbProxyName;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // is_default - computed: true, optional: false, required: false
    get isDefault() {
        return this.getBooleanAttribute('is_default');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targetRole() {
        return this.getStringAttribute('target_role');
    }
    set targetRole(value) {
        this._targetRole = value;
    }
    resetTargetRole() {
        this._targetRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetRoleInput() {
        return this._targetRole;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    get vpcSecurityGroupIds() {
        return this.getListAttribute('vpc_security_group_ids');
    }
    set vpcSecurityGroupIds(value) {
        this._vpcSecurityGroupIds = value;
    }
    resetVpcSecurityGroupIds() {
        this._vpcSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSecurityGroupIdsInput() {
        return this._vpcSecurityGroupIds;
    }
    get vpcSubnetIds() {
        return this.getListAttribute('vpc_subnet_ids');
    }
    set vpcSubnetIds(value) {
        this._vpcSubnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSubnetIdsInput() {
        return this._vpcSubnetIds;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            db_proxy_endpoint_name: cdktf.stringToTerraform(this._dbProxyEndpointName),
            db_proxy_name: cdktf.stringToTerraform(this._dbProxyName),
            tags: cdktf.listMapper(rdsDbProxyEndpointTagsToTerraform)(this._tags),
            target_role: cdktf.stringToTerraform(this._targetRole),
            vpc_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._vpcSecurityGroupIds),
            vpc_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(this._vpcSubnetIds),
        };
    }
}
exports.RdsDbProxyEndpoint = RdsDbProxyEndpoint;
// =================
// STATIC PROPERTIES
// =================
RdsDbProxyEndpoint.tfResourceType = "awscc_rds_db_proxy_endpoint";
//# sourceMappingURL=data:application/json;base64,