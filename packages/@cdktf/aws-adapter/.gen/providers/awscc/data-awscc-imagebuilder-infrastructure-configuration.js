"use strict";
// https://www.terraform.io/docs/providers/awscc/d/imagebuilder_infrastructure_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccImagebuilderInfrastructureConfiguration = exports.dataAwsccImagebuilderInfrastructureConfigurationLoggingToTerraform = exports.DataAwsccImagebuilderInfrastructureConfigurationLogging = exports.dataAwsccImagebuilderInfrastructureConfigurationLoggingS3LogsToTerraform = exports.DataAwsccImagebuilderInfrastructureConfigurationLoggingS3Logs = void 0;
const cdktf = require("cdktf");
class DataAwsccImagebuilderInfrastructureConfigurationLoggingS3Logs extends cdktf.ComplexComputedList {
    // s3_bucket_name - computed: true, optional: false, required: false
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    // s3_key_prefix - computed: true, optional: false, required: false
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
}
exports.DataAwsccImagebuilderInfrastructureConfigurationLoggingS3Logs = DataAwsccImagebuilderInfrastructureConfigurationLoggingS3Logs;
function dataAwsccImagebuilderInfrastructureConfigurationLoggingS3LogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_key_prefix: cdktf.stringToTerraform(struct.s3KeyPrefix),
    };
}
exports.dataAwsccImagebuilderInfrastructureConfigurationLoggingS3LogsToTerraform = dataAwsccImagebuilderInfrastructureConfigurationLoggingS3LogsToTerraform;
class DataAwsccImagebuilderInfrastructureConfigurationLogging extends cdktf.ComplexComputedList {
    // s3_logs - computed: true, optional: false, required: false
    get s3Logs() {
        return this.interpolationForAttribute('s3_logs');
    }
}
exports.DataAwsccImagebuilderInfrastructureConfigurationLogging = DataAwsccImagebuilderInfrastructureConfigurationLogging;
function dataAwsccImagebuilderInfrastructureConfigurationLoggingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_logs: dataAwsccImagebuilderInfrastructureConfigurationLoggingS3LogsToTerraform(struct.s3Logs),
    };
}
exports.dataAwsccImagebuilderInfrastructureConfigurationLoggingToTerraform = dataAwsccImagebuilderInfrastructureConfigurationLoggingToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_infrastructure_configuration.html awscc_imagebuilder_infrastructure_configuration}
*/
class DataAwsccImagebuilderInfrastructureConfiguration extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_infrastructure_configuration.html awscc_imagebuilder_infrastructure_configuration} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccImagebuilderInfrastructureConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_infrastructure_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_profile_name - computed: true, optional: false, required: false
    get instanceProfileName() {
        return this.getStringAttribute('instance_profile_name');
    }
    // instance_types - computed: true, optional: false, required: false
    get instanceTypes() {
        return this.getListAttribute('instance_types');
    }
    // key_pair - computed: true, optional: false, required: false
    get keyPair() {
        return this.getStringAttribute('key_pair');
    }
    // logging - computed: true, optional: false, required: false
    get logging() {
        return this.interpolationForAttribute('logging');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // resource_tags - computed: true, optional: false, required: false
    resourceTags(key) {
        return new cdktf.StringMap(this, 'resource_tags').lookup(key);
    }
    // security_group_ids - computed: true, optional: false, required: false
    get securityGroupIds() {
        return this.getListAttribute('security_group_ids');
    }
    // sns_topic_arn - computed: true, optional: false, required: false
    get snsTopicArn() {
        return this.getStringAttribute('sns_topic_arn');
    }
    // subnet_id - computed: true, optional: false, required: false
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    // tags - computed: true, optional: false, required: false
    tags(key) {
        return new cdktf.StringMap(this, 'tags').lookup(key);
    }
    // terminate_instance_on_failure - computed: true, optional: false, required: false
    get terminateInstanceOnFailure() {
        return this.getBooleanAttribute('terminate_instance_on_failure');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccImagebuilderInfrastructureConfiguration = DataAwsccImagebuilderInfrastructureConfiguration;
// =================
// STATIC PROPERTIES
// =================
DataAwsccImagebuilderInfrastructureConfiguration.tfResourceType = "awscc_imagebuilder_infrastructure_configuration";
//# sourceMappingURL=data:application/json;base64,