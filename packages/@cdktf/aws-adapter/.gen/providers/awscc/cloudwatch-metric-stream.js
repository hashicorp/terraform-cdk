"use strict";
// https://www.terraform.io/docs/providers/awscc/r/cloudwatch_metric_stream.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudwatchMetricStream = exports.cloudwatchMetricStreamTagsToTerraform = exports.cloudwatchMetricStreamIncludeFiltersToTerraform = exports.cloudwatchMetricStreamExcludeFiltersToTerraform = void 0;
const cdktf = require("cdktf");
function cloudwatchMetricStreamExcludeFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.cloudwatchMetricStreamExcludeFiltersToTerraform = cloudwatchMetricStreamExcludeFiltersToTerraform;
function cloudwatchMetricStreamIncludeFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.cloudwatchMetricStreamIncludeFiltersToTerraform = cloudwatchMetricStreamIncludeFiltersToTerraform;
function cloudwatchMetricStreamTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudwatchMetricStreamTagsToTerraform = cloudwatchMetricStreamTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/cloudwatch_metric_stream.html awscc_cloudwatch_metric_stream}
*/
class CloudwatchMetricStream extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/cloudwatch_metric_stream.html awscc_cloudwatch_metric_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudwatchMetricStreamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_cloudwatch_metric_stream',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._excludeFilters = config.excludeFilters;
        this._firehoseArn = config.firehoseArn;
        this._includeFilters = config.includeFilters;
        this._name = config.name;
        this._outputFormat = config.outputFormat;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // creation_date - computed: true, optional: false, required: false
    get creationDate() {
        return this.getStringAttribute('creation_date');
    }
    get excludeFilters() {
        return this.interpolationForAttribute('exclude_filters');
    }
    set excludeFilters(value) {
        this._excludeFilters = value;
    }
    resetExcludeFilters() {
        this._excludeFilters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeFiltersInput() {
        return this._excludeFilters;
    }
    get firehoseArn() {
        return this.getStringAttribute('firehose_arn');
    }
    set firehoseArn(value) {
        this._firehoseArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firehoseArnInput() {
        return this._firehoseArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get includeFilters() {
        return this.interpolationForAttribute('include_filters');
    }
    set includeFilters(value) {
        this._includeFilters = value;
    }
    resetIncludeFilters() {
        this._includeFilters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeFiltersInput() {
        return this._includeFilters;
    }
    // last_update_date - computed: true, optional: false, required: false
    get lastUpdateDate() {
        return this.getStringAttribute('last_update_date');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get outputFormat() {
        return this.getStringAttribute('output_format');
    }
    set outputFormat(value) {
        this._outputFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatInput() {
        return this._outputFormat;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            exclude_filters: cdktf.listMapper(cloudwatchMetricStreamExcludeFiltersToTerraform)(this._excludeFilters),
            firehose_arn: cdktf.stringToTerraform(this._firehoseArn),
            include_filters: cdktf.listMapper(cloudwatchMetricStreamIncludeFiltersToTerraform)(this._includeFilters),
            name: cdktf.stringToTerraform(this._name),
            output_format: cdktf.stringToTerraform(this._outputFormat),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(cloudwatchMetricStreamTagsToTerraform)(this._tags),
        };
    }
}
exports.CloudwatchMetricStream = CloudwatchMetricStream;
// =================
// STATIC PROPERTIES
// =================
CloudwatchMetricStream.tfResourceType = "awscc_cloudwatch_metric_stream";
//# sourceMappingURL=data:application/json;base64,