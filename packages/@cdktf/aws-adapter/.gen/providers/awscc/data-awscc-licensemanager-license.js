"use strict";
// https://www.terraform.io/docs/providers/awscc/d/licensemanager_license.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccLicensemanagerLicense = exports.dataAwsccLicensemanagerLicenseValidityToTerraform = exports.DataAwsccLicensemanagerLicenseValidity = exports.dataAwsccLicensemanagerLicenseLicenseMetadataToTerraform = exports.DataAwsccLicensemanagerLicenseLicenseMetadata = exports.dataAwsccLicensemanagerLicenseIssuerToTerraform = exports.DataAwsccLicensemanagerLicenseIssuer = exports.dataAwsccLicensemanagerLicenseEntitlementsToTerraform = exports.DataAwsccLicensemanagerLicenseEntitlements = exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationToTerraform = exports.DataAwsccLicensemanagerLicenseConsumptionConfiguration = exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform = exports.DataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfiguration = exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform = exports.DataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfiguration = void 0;
const cdktf = require("cdktf");
class DataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfiguration extends cdktf.ComplexComputedList {
    // allow_early_check_in - computed: true, optional: false, required: false
    get allowEarlyCheckIn() {
        return this.getBooleanAttribute('allow_early_check_in');
    }
    // max_time_to_live_in_minutes - computed: true, optional: false, required: false
    get maxTimeToLiveInMinutes() {
        return this.getNumberAttribute('max_time_to_live_in_minutes');
    }
}
exports.DataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfiguration = DataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfiguration;
function dataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_early_check_in: cdktf.booleanToTerraform(struct.allowEarlyCheckIn),
        max_time_to_live_in_minutes: cdktf.numberToTerraform(struct.maxTimeToLiveInMinutes),
    };
}
exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform = dataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform;
class DataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfiguration extends cdktf.ComplexComputedList {
    // max_time_to_live_in_minutes - computed: true, optional: false, required: false
    get maxTimeToLiveInMinutes() {
        return this.getNumberAttribute('max_time_to_live_in_minutes');
    }
}
exports.DataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfiguration = DataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfiguration;
function dataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_time_to_live_in_minutes: cdktf.numberToTerraform(struct.maxTimeToLiveInMinutes),
    };
}
exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform = dataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform;
class DataAwsccLicensemanagerLicenseConsumptionConfiguration extends cdktf.ComplexComputedList {
    // borrow_configuration - computed: true, optional: false, required: false
    get borrowConfiguration() {
        return this.interpolationForAttribute('borrow_configuration');
    }
    // provisional_configuration - computed: true, optional: false, required: false
    get provisionalConfiguration() {
        return this.interpolationForAttribute('provisional_configuration');
    }
    // renew_type - computed: true, optional: false, required: false
    get renewType() {
        return this.getStringAttribute('renew_type');
    }
}
exports.DataAwsccLicensemanagerLicenseConsumptionConfiguration = DataAwsccLicensemanagerLicenseConsumptionConfiguration;
function dataAwsccLicensemanagerLicenseConsumptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        borrow_configuration: dataAwsccLicensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform(struct.borrowConfiguration),
        provisional_configuration: dataAwsccLicensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform(struct.provisionalConfiguration),
        renew_type: cdktf.stringToTerraform(struct.renewType),
    };
}
exports.dataAwsccLicensemanagerLicenseConsumptionConfigurationToTerraform = dataAwsccLicensemanagerLicenseConsumptionConfigurationToTerraform;
class DataAwsccLicensemanagerLicenseEntitlements extends cdktf.ComplexComputedList {
    // allow_check_in - computed: true, optional: false, required: false
    get allowCheckIn() {
        return this.getBooleanAttribute('allow_check_in');
    }
    // max_count - computed: true, optional: false, required: false
    get maxCount() {
        return this.getNumberAttribute('max_count');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // overage - computed: true, optional: false, required: false
    get overage() {
        return this.getBooleanAttribute('overage');
    }
    // unit - computed: true, optional: false, required: false
    get unit() {
        return this.getStringAttribute('unit');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccLicensemanagerLicenseEntitlements = DataAwsccLicensemanagerLicenseEntitlements;
function dataAwsccLicensemanagerLicenseEntitlementsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_check_in: cdktf.booleanToTerraform(struct.allowCheckIn),
        max_count: cdktf.numberToTerraform(struct.maxCount),
        name: cdktf.stringToTerraform(struct.name),
        overage: cdktf.booleanToTerraform(struct.overage),
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccLicensemanagerLicenseEntitlementsToTerraform = dataAwsccLicensemanagerLicenseEntitlementsToTerraform;
class DataAwsccLicensemanagerLicenseIssuer extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // sign_key - computed: true, optional: false, required: false
    get signKey() {
        return this.getStringAttribute('sign_key');
    }
}
exports.DataAwsccLicensemanagerLicenseIssuer = DataAwsccLicensemanagerLicenseIssuer;
function dataAwsccLicensemanagerLicenseIssuerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        sign_key: cdktf.stringToTerraform(struct.signKey),
    };
}
exports.dataAwsccLicensemanagerLicenseIssuerToTerraform = dataAwsccLicensemanagerLicenseIssuerToTerraform;
class DataAwsccLicensemanagerLicenseLicenseMetadata extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccLicensemanagerLicenseLicenseMetadata = DataAwsccLicensemanagerLicenseLicenseMetadata;
function dataAwsccLicensemanagerLicenseLicenseMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccLicensemanagerLicenseLicenseMetadataToTerraform = dataAwsccLicensemanagerLicenseLicenseMetadataToTerraform;
class DataAwsccLicensemanagerLicenseValidity extends cdktf.ComplexComputedList {
    // begin - computed: true, optional: false, required: false
    get begin() {
        return this.getStringAttribute('begin');
    }
    // end - computed: true, optional: false, required: false
    get end() {
        return this.getStringAttribute('end');
    }
}
exports.DataAwsccLicensemanagerLicenseValidity = DataAwsccLicensemanagerLicenseValidity;
function dataAwsccLicensemanagerLicenseValidityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        begin: cdktf.stringToTerraform(struct.begin),
        end: cdktf.stringToTerraform(struct.end),
    };
}
exports.dataAwsccLicensemanagerLicenseValidityToTerraform = dataAwsccLicensemanagerLicenseValidityToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/licensemanager_license.html awscc_licensemanager_license}
*/
class DataAwsccLicensemanagerLicense extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/licensemanager_license.html awscc_licensemanager_license} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccLicensemanagerLicenseConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_licensemanager_license',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // beneficiary - computed: true, optional: false, required: false
    get beneficiary() {
        return this.getStringAttribute('beneficiary');
    }
    // consumption_configuration - computed: true, optional: false, required: false
    get consumptionConfiguration() {
        return this.interpolationForAttribute('consumption_configuration');
    }
    // entitlements - computed: true, optional: false, required: false
    get entitlements() {
        return this.interpolationForAttribute('entitlements');
    }
    // home_region - computed: true, optional: false, required: false
    get homeRegion() {
        return this.getStringAttribute('home_region');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // issuer - computed: true, optional: false, required: false
    get issuer() {
        return this.interpolationForAttribute('issuer');
    }
    // license_arn - computed: true, optional: false, required: false
    get licenseArn() {
        return this.getStringAttribute('license_arn');
    }
    // license_metadata - computed: true, optional: false, required: false
    get licenseMetadata() {
        return this.interpolationForAttribute('license_metadata');
    }
    // license_name - computed: true, optional: false, required: false
    get licenseName() {
        return this.getStringAttribute('license_name');
    }
    // product_name - computed: true, optional: false, required: false
    get productName() {
        return this.getStringAttribute('product_name');
    }
    // product_sku - computed: true, optional: false, required: false
    get productSku() {
        return this.getStringAttribute('product_sku');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // validity - computed: true, optional: false, required: false
    get validity() {
        return this.interpolationForAttribute('validity');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccLicensemanagerLicense = DataAwsccLicensemanagerLicense;
// =================
// STATIC PROPERTIES
// =================
DataAwsccLicensemanagerLicense.tfResourceType = "awscc_licensemanager_license";
//# sourceMappingURL=data:application/json;base64,