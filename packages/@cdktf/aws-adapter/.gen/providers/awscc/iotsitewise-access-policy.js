"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotsitewise_access_policy.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotsitewiseAccessPolicy = exports.iotsitewiseAccessPolicyAccessPolicyResourceToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyIdentityToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform = exports.iotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform = void 0;
const cdktf = require("cdktf");
function iotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform = iotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform;
function iotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform = iotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform;
function iotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform = iotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform;
function iotsitewiseAccessPolicyAccessPolicyIdentityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        iam_role: iotsitewiseAccessPolicyAccessPolicyIdentityIamRoleToTerraform(struct.iamRole),
        iam_user: iotsitewiseAccessPolicyAccessPolicyIdentityIamUserToTerraform(struct.iamUser),
        user: iotsitewiseAccessPolicyAccessPolicyIdentityUserToTerraform(struct.user),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyIdentityToTerraform = iotsitewiseAccessPolicyAccessPolicyIdentityToTerraform;
function iotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform = iotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform;
function iotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform = iotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform;
function iotsitewiseAccessPolicyAccessPolicyResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        portal: iotsitewiseAccessPolicyAccessPolicyResourcePortalToTerraform(struct.portal),
        project: iotsitewiseAccessPolicyAccessPolicyResourceProjectToTerraform(struct.project),
    };
}
exports.iotsitewiseAccessPolicyAccessPolicyResourceToTerraform = iotsitewiseAccessPolicyAccessPolicyResourceToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_access_policy.html awscc_iotsitewise_access_policy}
*/
class IotsitewiseAccessPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_access_policy.html awscc_iotsitewise_access_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotsitewiseAccessPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_access_policy',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accessPolicyIdentity = config.accessPolicyIdentity;
        this._accessPolicyPermission = config.accessPolicyPermission;
        this._accessPolicyResource = config.accessPolicyResource;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // access_policy_arn - computed: true, optional: false, required: false
    get accessPolicyArn() {
        return this.getStringAttribute('access_policy_arn');
    }
    // access_policy_id - computed: true, optional: false, required: false
    get accessPolicyId() {
        return this.getStringAttribute('access_policy_id');
    }
    get accessPolicyIdentity() {
        return this.interpolationForAttribute('access_policy_identity');
    }
    set accessPolicyIdentity(value) {
        this._accessPolicyIdentity = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessPolicyIdentityInput() {
        return this._accessPolicyIdentity;
    }
    get accessPolicyPermission() {
        return this.getStringAttribute('access_policy_permission');
    }
    set accessPolicyPermission(value) {
        this._accessPolicyPermission = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessPolicyPermissionInput() {
        return this._accessPolicyPermission;
    }
    get accessPolicyResource() {
        return this.interpolationForAttribute('access_policy_resource');
    }
    set accessPolicyResource(value) {
        this._accessPolicyResource = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessPolicyResourceInput() {
        return this._accessPolicyResource;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_policy_identity: iotsitewiseAccessPolicyAccessPolicyIdentityToTerraform(this._accessPolicyIdentity),
            access_policy_permission: cdktf.stringToTerraform(this._accessPolicyPermission),
            access_policy_resource: iotsitewiseAccessPolicyAccessPolicyResourceToTerraform(this._accessPolicyResource),
        };
    }
}
exports.IotsitewiseAccessPolicy = IotsitewiseAccessPolicy;
// =================
// STATIC PROPERTIES
// =================
IotsitewiseAccessPolicy.tfResourceType = "awscc_iotsitewise_access_policy";
//# sourceMappingURL=data:application/json;base64,