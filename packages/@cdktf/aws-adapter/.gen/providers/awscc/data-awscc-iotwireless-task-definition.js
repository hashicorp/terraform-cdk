"use strict";
// https://www.terraform.io/docs/providers/awscc/d/iotwireless_task_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccIotwirelessTaskDefinition = exports.dataAwsccIotwirelessTaskDefinitionUpdateToTerraform = exports.DataAwsccIotwirelessTaskDefinitionUpdate = exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanToTerraform = exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWan = exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform = exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersion = exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform = exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersion = exports.dataAwsccIotwirelessTaskDefinitionTagsToTerraform = exports.DataAwsccIotwirelessTaskDefinitionTags = exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform = exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntry = exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform = exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersion = exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform = exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersion = void 0;
const cdktf = require("cdktf");
class DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersion extends cdktf.ComplexComputedList {
    // model - computed: true, optional: false, required: false
    get model() {
        return this.getStringAttribute('model');
    }
    // package_version - computed: true, optional: false, required: false
    get packageVersion() {
        return this.getStringAttribute('package_version');
    }
    // station - computed: true, optional: false, required: false
    get station() {
        return this.getStringAttribute('station');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersion = DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersion;
function dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform = dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform;
class DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersion extends cdktf.ComplexComputedList {
    // model - computed: true, optional: false, required: false
    get model() {
        return this.getStringAttribute('model');
    }
    // package_version - computed: true, optional: false, required: false
    get packageVersion() {
        return this.getStringAttribute('package_version');
    }
    // station - computed: true, optional: false, required: false
    get station() {
        return this.getStringAttribute('station');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersion = DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersion;
function dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform = dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform;
class DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntry extends cdktf.ComplexComputedList {
    // current_version - computed: true, optional: false, required: false
    get currentVersion() {
        return this.interpolationForAttribute('current_version');
    }
    // update_version - computed: true, optional: false, required: false
    get updateVersion() {
        return this.interpolationForAttribute('update_version');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntry = DataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntry;
function dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        current_version: dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryCurrentVersionToTerraform(struct.currentVersion),
        update_version: dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryUpdateVersionToTerraform(struct.updateVersion),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform = dataAwsccIotwirelessTaskDefinitionLoRaWanUpdateGatewayTaskEntryToTerraform;
class DataAwsccIotwirelessTaskDefinitionTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionTags = DataAwsccIotwirelessTaskDefinitionTags;
function dataAwsccIotwirelessTaskDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionTagsToTerraform = dataAwsccIotwirelessTaskDefinitionTagsToTerraform;
class DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersion extends cdktf.ComplexComputedList {
    // model - computed: true, optional: false, required: false
    get model() {
        return this.getStringAttribute('model');
    }
    // package_version - computed: true, optional: false, required: false
    get packageVersion() {
        return this.getStringAttribute('package_version');
    }
    // station - computed: true, optional: false, required: false
    get station() {
        return this.getStringAttribute('station');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersion = DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersion;
function dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform = dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform;
class DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersion extends cdktf.ComplexComputedList {
    // model - computed: true, optional: false, required: false
    get model() {
        return this.getStringAttribute('model');
    }
    // package_version - computed: true, optional: false, required: false
    get packageVersion() {
        return this.getStringAttribute('package_version');
    }
    // station - computed: true, optional: false, required: false
    get station() {
        return this.getStringAttribute('station');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersion = DataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersion;
function dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        model: cdktf.stringToTerraform(struct.model),
        package_version: cdktf.stringToTerraform(struct.packageVersion),
        station: cdktf.stringToTerraform(struct.station),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform = dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform;
class DataAwsccIotwirelessTaskDefinitionUpdateLoRaWan extends cdktf.ComplexComputedList {
    // current_version - computed: true, optional: false, required: false
    get currentVersion() {
        return this.interpolationForAttribute('current_version');
    }
    // sig_key_crc - computed: true, optional: false, required: false
    get sigKeyCrc() {
        return this.getNumberAttribute('sig_key_crc');
    }
    // update_signature - computed: true, optional: false, required: false
    get updateSignature() {
        return this.getStringAttribute('update_signature');
    }
    // update_version - computed: true, optional: false, required: false
    get updateVersion() {
        return this.interpolationForAttribute('update_version');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionUpdateLoRaWan = DataAwsccIotwirelessTaskDefinitionUpdateLoRaWan;
function dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        current_version: dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanCurrentVersionToTerraform(struct.currentVersion),
        sig_key_crc: cdktf.numberToTerraform(struct.sigKeyCrc),
        update_signature: cdktf.stringToTerraform(struct.updateSignature),
        update_version: dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanUpdateVersionToTerraform(struct.updateVersion),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanToTerraform = dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanToTerraform;
class DataAwsccIotwirelessTaskDefinitionUpdate extends cdktf.ComplexComputedList {
    // lo_ra_wan - computed: true, optional: false, required: false
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    // update_data_role - computed: true, optional: false, required: false
    get updateDataRole() {
        return this.getStringAttribute('update_data_role');
    }
    // update_data_source - computed: true, optional: false, required: false
    get updateDataSource() {
        return this.getStringAttribute('update_data_source');
    }
}
exports.DataAwsccIotwirelessTaskDefinitionUpdate = DataAwsccIotwirelessTaskDefinitionUpdate;
function dataAwsccIotwirelessTaskDefinitionUpdateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        lo_ra_wan: dataAwsccIotwirelessTaskDefinitionUpdateLoRaWanToTerraform(struct.loRaWan),
        update_data_role: cdktf.stringToTerraform(struct.updateDataRole),
        update_data_source: cdktf.stringToTerraform(struct.updateDataSource),
    };
}
exports.dataAwsccIotwirelessTaskDefinitionUpdateToTerraform = dataAwsccIotwirelessTaskDefinitionUpdateToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_task_definition.html awscc_iotwireless_task_definition}
*/
class DataAwsccIotwirelessTaskDefinition extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/iotwireless_task_definition.html awscc_iotwireless_task_definition} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccIotwirelessTaskDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_task_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // auto_create_tasks - computed: true, optional: false, required: false
    get autoCreateTasks() {
        return this.getBooleanAttribute('auto_create_tasks');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // lo_ra_wan_update_gateway_task_entry - computed: true, optional: false, required: false
    get loRaWanUpdateGatewayTaskEntry() {
        return this.interpolationForAttribute('lo_ra_wan_update_gateway_task_entry');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // task_definition_type - computed: true, optional: false, required: false
    get taskDefinitionType() {
        return this.getStringAttribute('task_definition_type');
    }
    // update - computed: true, optional: false, required: false
    get update() {
        return this.interpolationForAttribute('update');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccIotwirelessTaskDefinition = DataAwsccIotwirelessTaskDefinition;
// =================
// STATIC PROPERTIES
// =================
DataAwsccIotwirelessTaskDefinition.tfResourceType = "awscc_iotwireless_task_definition";
//# sourceMappingURL=data:application/json;base64,