"use strict";
// https://www.terraform.io/docs/providers/awscc/r/codestarconnections_connection.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodestarconnectionsConnection = exports.codestarconnectionsConnectionTagsToTerraform = void 0;
const cdktf = require("cdktf");
function codestarconnectionsConnectionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.codestarconnectionsConnectionTagsToTerraform = codestarconnectionsConnectionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/codestarconnections_connection.html awscc_codestarconnections_connection}
*/
class CodestarconnectionsConnection extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/codestarconnections_connection.html awscc_codestarconnections_connection} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CodestarconnectionsConnectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_codestarconnections_connection',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._connectionName = config.connectionName;
        this._hostArn = config.hostArn;
        this._providerType = config.providerType;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // connection_arn - computed: true, optional: false, required: false
    get connectionArn() {
        return this.getStringAttribute('connection_arn');
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    // connection_status - computed: true, optional: false, required: false
    get connectionStatus() {
        return this.getStringAttribute('connection_status');
    }
    get hostArn() {
        return this.getStringAttribute('host_arn');
    }
    set hostArn(value) {
        this._hostArn = value;
    }
    resetHostArn() {
        this._hostArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostArnInput() {
        return this._hostArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // owner_account_id - computed: true, optional: false, required: false
    get ownerAccountId() {
        return this.getStringAttribute('owner_account_id');
    }
    get providerType() {
        return this.getStringAttribute('provider_type');
    }
    set providerType(value) {
        this._providerType = value;
    }
    resetProviderType() {
        this._providerType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get providerTypeInput() {
        return this._providerType;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_name: cdktf.stringToTerraform(this._connectionName),
            host_arn: cdktf.stringToTerraform(this._hostArn),
            provider_type: cdktf.stringToTerraform(this._providerType),
            tags: cdktf.listMapper(codestarconnectionsConnectionTagsToTerraform)(this._tags),
        };
    }
}
exports.CodestarconnectionsConnection = CodestarconnectionsConnection;
// =================
// STATIC PROPERTIES
// =================
CodestarconnectionsConnection.tfResourceType = "awscc_codestarconnections_connection";
//# sourceMappingURL=data:application/json;base64,