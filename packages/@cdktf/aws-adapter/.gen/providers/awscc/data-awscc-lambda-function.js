"use strict";
// https://www.terraform.io/docs/providers/awscc/d/lambda_function.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccLambdaFunction = exports.dataAwsccLambdaFunctionVpcConfigToTerraform = exports.DataAwsccLambdaFunctionVpcConfig = exports.dataAwsccLambdaFunctionTracingConfigToTerraform = exports.DataAwsccLambdaFunctionTracingConfig = exports.dataAwsccLambdaFunctionTagsToTerraform = exports.DataAwsccLambdaFunctionTags = exports.dataAwsccLambdaFunctionImageConfigToTerraform = exports.DataAwsccLambdaFunctionImageConfig = exports.dataAwsccLambdaFunctionFileSystemConfigsToTerraform = exports.DataAwsccLambdaFunctionFileSystemConfigs = exports.dataAwsccLambdaFunctionEnvironmentToTerraform = exports.DataAwsccLambdaFunctionEnvironment = exports.dataAwsccLambdaFunctionDeadLetterConfigToTerraform = exports.DataAwsccLambdaFunctionDeadLetterConfig = exports.dataAwsccLambdaFunctionCodeToTerraform = exports.DataAwsccLambdaFunctionCode = void 0;
const cdktf = require("cdktf");
class DataAwsccLambdaFunctionCode extends cdktf.ComplexComputedList {
    // image_uri - computed: true, optional: false, required: false
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    // s3_bucket - computed: true, optional: false, required: false
    get s3Bucket() {
        return this.getStringAttribute('s3_bucket');
    }
    // s3_key - computed: true, optional: false, required: false
    get s3Key() {
        return this.getStringAttribute('s3_key');
    }
    // s3_object_version - computed: true, optional: false, required: false
    get s3ObjectVersion() {
        return this.getStringAttribute('s3_object_version');
    }
    // zip_file - computed: true, optional: false, required: false
    get zipFile() {
        return this.getStringAttribute('zip_file');
    }
}
exports.DataAwsccLambdaFunctionCode = DataAwsccLambdaFunctionCode;
function dataAwsccLambdaFunctionCodeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        s3_bucket: cdktf.stringToTerraform(struct.s3Bucket),
        s3_key: cdktf.stringToTerraform(struct.s3Key),
        s3_object_version: cdktf.stringToTerraform(struct.s3ObjectVersion),
        zip_file: cdktf.stringToTerraform(struct.zipFile),
    };
}
exports.dataAwsccLambdaFunctionCodeToTerraform = dataAwsccLambdaFunctionCodeToTerraform;
class DataAwsccLambdaFunctionDeadLetterConfig extends cdktf.ComplexComputedList {
    // target_arn - computed: true, optional: false, required: false
    get targetArn() {
        return this.getStringAttribute('target_arn');
    }
}
exports.DataAwsccLambdaFunctionDeadLetterConfig = DataAwsccLambdaFunctionDeadLetterConfig;
function dataAwsccLambdaFunctionDeadLetterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.dataAwsccLambdaFunctionDeadLetterConfigToTerraform = dataAwsccLambdaFunctionDeadLetterConfigToTerraform;
class DataAwsccLambdaFunctionEnvironment extends cdktf.ComplexComputedList {
    // variables - computed: true, optional: false, required: false
    get variables() {
        return this.interpolationForAttribute('variables');
    }
}
exports.DataAwsccLambdaFunctionEnvironment = DataAwsccLambdaFunctionEnvironment;
function dataAwsccLambdaFunctionEnvironmentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.variables),
    };
}
exports.dataAwsccLambdaFunctionEnvironmentToTerraform = dataAwsccLambdaFunctionEnvironmentToTerraform;
class DataAwsccLambdaFunctionFileSystemConfigs extends cdktf.ComplexComputedList {
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // local_mount_path - computed: true, optional: false, required: false
    get localMountPath() {
        return this.getStringAttribute('local_mount_path');
    }
}
exports.DataAwsccLambdaFunctionFileSystemConfigs = DataAwsccLambdaFunctionFileSystemConfigs;
function dataAwsccLambdaFunctionFileSystemConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        local_mount_path: cdktf.stringToTerraform(struct.localMountPath),
    };
}
exports.dataAwsccLambdaFunctionFileSystemConfigsToTerraform = dataAwsccLambdaFunctionFileSystemConfigsToTerraform;
class DataAwsccLambdaFunctionImageConfig extends cdktf.ComplexComputedList {
    // command - computed: true, optional: false, required: false
    get command() {
        return this.getListAttribute('command');
    }
    // entry_point - computed: true, optional: false, required: false
    get entryPoint() {
        return this.getListAttribute('entry_point');
    }
    // working_directory - computed: true, optional: false, required: false
    get workingDirectory() {
        return this.getStringAttribute('working_directory');
    }
}
exports.DataAwsccLambdaFunctionImageConfig = DataAwsccLambdaFunctionImageConfig;
function dataAwsccLambdaFunctionImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        command: cdktf.listMapper(cdktf.stringToTerraform)(struct.command),
        entry_point: cdktf.listMapper(cdktf.stringToTerraform)(struct.entryPoint),
        working_directory: cdktf.stringToTerraform(struct.workingDirectory),
    };
}
exports.dataAwsccLambdaFunctionImageConfigToTerraform = dataAwsccLambdaFunctionImageConfigToTerraform;
class DataAwsccLambdaFunctionTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccLambdaFunctionTags = DataAwsccLambdaFunctionTags;
function dataAwsccLambdaFunctionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccLambdaFunctionTagsToTerraform = dataAwsccLambdaFunctionTagsToTerraform;
class DataAwsccLambdaFunctionTracingConfig extends cdktf.ComplexComputedList {
    // mode - computed: true, optional: false, required: false
    get mode() {
        return this.getStringAttribute('mode');
    }
}
exports.DataAwsccLambdaFunctionTracingConfig = DataAwsccLambdaFunctionTracingConfig;
function dataAwsccLambdaFunctionTracingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.dataAwsccLambdaFunctionTracingConfigToTerraform = dataAwsccLambdaFunctionTracingConfigToTerraform;
class DataAwsccLambdaFunctionVpcConfig extends cdktf.ComplexComputedList {
    // security_group_ids - computed: true, optional: false, required: false
    get securityGroupIds() {
        return this.getListAttribute('security_group_ids');
    }
    // subnet_ids - computed: true, optional: false, required: false
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
}
exports.DataAwsccLambdaFunctionVpcConfig = DataAwsccLambdaFunctionVpcConfig;
function dataAwsccLambdaFunctionVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
exports.dataAwsccLambdaFunctionVpcConfigToTerraform = dataAwsccLambdaFunctionVpcConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/lambda_function.html awscc_lambda_function}
*/
class DataAwsccLambdaFunction extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/lambda_function.html awscc_lambda_function} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccLambdaFunctionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_lambda_function',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // code - computed: true, optional: false, required: false
    get code() {
        return this.interpolationForAttribute('code');
    }
    // code_signing_config_arn - computed: true, optional: false, required: false
    get codeSigningConfigArn() {
        return this.getStringAttribute('code_signing_config_arn');
    }
    // dead_letter_config - computed: true, optional: false, required: false
    get deadLetterConfig() {
        return this.interpolationForAttribute('dead_letter_config');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // environment - computed: true, optional: false, required: false
    get environment() {
        return this.interpolationForAttribute('environment');
    }
    // file_system_configs - computed: true, optional: false, required: false
    get fileSystemConfigs() {
        return this.interpolationForAttribute('file_system_configs');
    }
    // function_name - computed: true, optional: false, required: false
    get functionName() {
        return this.getStringAttribute('function_name');
    }
    // handler - computed: true, optional: false, required: false
    get handler() {
        return this.getStringAttribute('handler');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // image_config - computed: true, optional: false, required: false
    get imageConfig() {
        return this.interpolationForAttribute('image_config');
    }
    // kms_key_arn - computed: true, optional: false, required: false
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    // layers - computed: true, optional: false, required: false
    get layers() {
        return this.getListAttribute('layers');
    }
    // memory_size - computed: true, optional: false, required: false
    get memorySize() {
        return this.getNumberAttribute('memory_size');
    }
    // package_type - computed: true, optional: false, required: false
    get packageType() {
        return this.getStringAttribute('package_type');
    }
    // reserved_concurrent_executions - computed: true, optional: false, required: false
    get reservedConcurrentExecutions() {
        return this.getNumberAttribute('reserved_concurrent_executions');
    }
    // role - computed: true, optional: false, required: false
    get role() {
        return this.getStringAttribute('role');
    }
    // runtime - computed: true, optional: false, required: false
    get runtime() {
        return this.getStringAttribute('runtime');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // timeout - computed: true, optional: false, required: false
    get timeout() {
        return this.getNumberAttribute('timeout');
    }
    // tracing_config - computed: true, optional: false, required: false
    get tracingConfig() {
        return this.interpolationForAttribute('tracing_config');
    }
    // vpc_config - computed: true, optional: false, required: false
    get vpcConfig() {
        return this.interpolationForAttribute('vpc_config');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccLambdaFunction = DataAwsccLambdaFunction;
// =================
// STATIC PROPERTIES
// =================
DataAwsccLambdaFunction.tfResourceType = "awscc_lambda_function";
//# sourceMappingURL=data:application/json;base64,