"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotevents_detector_model.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform = void 0;
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform = void 0;
exports.IoteventsDetectorModel = exports.ioteventsDetectorModelTagsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform = exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform = void 0;
const cdktf = require("cdktf");
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSnsToTerraform(struct.sns),
        sqs: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterEventsToTerraform)(struct.events),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSnsToTerraform(struct.sns),
        sqs: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnExitEventsToTerraform)(struct.events),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSnsToTerraform(struct.sns),
        sqs: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2PayloadToTerraform(struct.payload),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hash_key_field: cdktf.stringToTerraform(struct.hashKeyField),
        hash_key_type: cdktf.stringToTerraform(struct.hashKeyType),
        hash_key_value: cdktf.stringToTerraform(struct.hashKeyValue),
        operation: cdktf.stringToTerraform(struct.operation),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbPayloadToTerraform(struct.payload),
        payload_field: cdktf.stringToTerraform(struct.payloadField),
        range_key_field: cdktf.stringToTerraform(struct.rangeKeyField),
        range_key_type: cdktf.stringToTerraform(struct.rangeKeyType),
        range_key_value: cdktf.stringToTerraform(struct.rangeKeyValue),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream_name: cdktf.stringToTerraform(struct.deliveryStreamName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehosePayloadToTerraform(struct.payload),
        separator: cdktf.stringToTerraform(struct.separator),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_name: cdktf.stringToTerraform(struct.inputName),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        offset_in_nanos: cdktf.stringToTerraform(struct.offsetInNanos),
        time_in_seconds: cdktf.stringToTerraform(struct.timeInSeconds),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        boolean_value: cdktf.stringToTerraform(struct.booleanValue),
        double_value: cdktf.stringToTerraform(struct.doubleValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        quality: cdktf.stringToTerraform(struct.quality),
        timestamp: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueTimestampToTerraform(struct.timestamp),
        value: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueValueToTerraform(struct.value),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        asset_id: cdktf.stringToTerraform(struct.assetId),
        entry_id: cdktf.stringToTerraform(struct.entryId),
        property_alias: cdktf.stringToTerraform(struct.propertyAlias),
        property_id: cdktf.stringToTerraform(struct.propertyId),
        property_value: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWisePropertyValueToTerraform(struct.propertyValue),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mqtt_topic: cdktf.stringToTerraform(struct.mqttTopic),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaPayloadToTerraform(struct.payload),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        duration_expression: cdktf.stringToTerraform(struct.durationExpression),
        seconds: cdktf.numberToTerraform(struct.seconds),
        timer_name: cdktf.stringToTerraform(struct.timerName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
        variable_name: cdktf.stringToTerraform(struct.variableName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsPayloadToTerraform(struct.payload),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_expression: cdktf.stringToTerraform(struct.contentExpression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsPayloadToTerraform(struct.payload),
        queue_url: cdktf.stringToTerraform(struct.queueUrl),
        use_base_64: cdktf.booleanToTerraform(struct.useBase64),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clear_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsClearTimerToTerraform(struct.clearTimer),
        dynamo_d_bv_2: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDBv2ToTerraform(struct.dynamoDBv2),
        dynamo_db: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsDynamoDbToTerraform(struct.dynamoDb),
        firehose: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsFirehoseToTerraform(struct.firehose),
        iot_events: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotEventsToTerraform(struct.iotEvents),
        iot_site_wise: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotSiteWiseToTerraform(struct.iotSiteWise),
        iot_topic_publish: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsIotTopicPublishToTerraform(struct.iotTopicPublish),
        lambda: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsLambdaToTerraform(struct.lambda),
        reset_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsResetTimerToTerraform(struct.resetTimer),
        set_timer: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetTimerToTerraform(struct.setTimer),
        set_variable: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSetVariableToTerraform(struct.setVariable),
        sns: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSnsToTerraform(struct.sns),
        sqs: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsSqsToTerraform(struct.sqs),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsActionsToTerraform)(struct.actions),
        condition: cdktf.stringToTerraform(struct.condition),
        event_name: cdktf.stringToTerraform(struct.eventName),
        next_state: cdktf.stringToTerraform(struct.nextState),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnInputEventsToTerraform)(struct.events),
        transition_events: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesOnInputTransitionEventsToTerraform)(struct.transitionEvents),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionStatesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        on_enter: ioteventsDetectorModelDetectorModelDefinitionStatesOnEnterToTerraform(struct.onEnter),
        on_exit: ioteventsDetectorModelDetectorModelDefinitionStatesOnExitToTerraform(struct.onExit),
        on_input: ioteventsDetectorModelDetectorModelDefinitionStatesOnInputToTerraform(struct.onInput),
        state_name: cdktf.stringToTerraform(struct.stateName),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionStatesToTerraform = ioteventsDetectorModelDetectorModelDefinitionStatesToTerraform;
function ioteventsDetectorModelDetectorModelDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        initial_state_name: cdktf.stringToTerraform(struct.initialStateName),
        states: cdktf.listMapper(ioteventsDetectorModelDetectorModelDefinitionStatesToTerraform)(struct.states),
    };
}
exports.ioteventsDetectorModelDetectorModelDefinitionToTerraform = ioteventsDetectorModelDetectorModelDefinitionToTerraform;
function ioteventsDetectorModelTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ioteventsDetectorModelTagsToTerraform = ioteventsDetectorModelTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotevents_detector_model.html awscc_iotevents_detector_model}
*/
class IoteventsDetectorModel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotevents_detector_model.html awscc_iotevents_detector_model} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IoteventsDetectorModelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotevents_detector_model',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._detectorModelDefinition = config.detectorModelDefinition;
        this._detectorModelDescription = config.detectorModelDescription;
        this._detectorModelName = config.detectorModelName;
        this._evaluationMethod = config.evaluationMethod;
        this._key = config.key;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
    }
    get detectorModelDefinition() {
        return this.interpolationForAttribute('detector_model_definition');
    }
    set detectorModelDefinition(value) {
        this._detectorModelDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get detectorModelDefinitionInput() {
        return this._detectorModelDefinition;
    }
    get detectorModelDescription() {
        return this.getStringAttribute('detector_model_description');
    }
    set detectorModelDescription(value) {
        this._detectorModelDescription = value;
    }
    resetDetectorModelDescription() {
        this._detectorModelDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detectorModelDescriptionInput() {
        return this._detectorModelDescription;
    }
    get detectorModelName() {
        return this.getStringAttribute('detector_model_name');
    }
    set detectorModelName(value) {
        this._detectorModelName = value;
    }
    resetDetectorModelName() {
        this._detectorModelName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detectorModelNameInput() {
        return this._detectorModelName;
    }
    get evaluationMethod() {
        return this.getStringAttribute('evaluation_method');
    }
    set evaluationMethod(value) {
        this._evaluationMethod = value;
    }
    resetEvaluationMethod() {
        this._evaluationMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationMethodInput() {
        return this._evaluationMethod;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            detector_model_definition: ioteventsDetectorModelDetectorModelDefinitionToTerraform(this._detectorModelDefinition),
            detector_model_description: cdktf.stringToTerraform(this._detectorModelDescription),
            detector_model_name: cdktf.stringToTerraform(this._detectorModelName),
            evaluation_method: cdktf.stringToTerraform(this._evaluationMethod),
            key: cdktf.stringToTerraform(this._key),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(ioteventsDetectorModelTagsToTerraform)(this._tags),
        };
    }
}
exports.IoteventsDetectorModel = IoteventsDetectorModel;
// =================
// STATIC PROPERTIES
// =================
IoteventsDetectorModel.tfResourceType = "awscc_iotevents_detector_model";
//# sourceMappingURL=data:application/json;base64,