"use strict";
// https://www.terraform.io/docs/providers/awscc/r/licensemanager_license.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicensemanagerLicense = exports.licensemanagerLicenseValidityToTerraform = exports.licensemanagerLicenseLicenseMetadataToTerraform = exports.licensemanagerLicenseIssuerToTerraform = exports.licensemanagerLicenseEntitlementsToTerraform = exports.licensemanagerLicenseConsumptionConfigurationToTerraform = exports.licensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform = exports.licensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function licensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_early_check_in: cdktf.booleanToTerraform(struct.allowEarlyCheckIn),
        max_time_to_live_in_minutes: cdktf.numberToTerraform(struct.maxTimeToLiveInMinutes),
    };
}
exports.licensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform = licensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform;
function licensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_time_to_live_in_minutes: cdktf.numberToTerraform(struct.maxTimeToLiveInMinutes),
    };
}
exports.licensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform = licensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform;
function licensemanagerLicenseConsumptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        borrow_configuration: licensemanagerLicenseConsumptionConfigurationBorrowConfigurationToTerraform(struct.borrowConfiguration),
        provisional_configuration: licensemanagerLicenseConsumptionConfigurationProvisionalConfigurationToTerraform(struct.provisionalConfiguration),
        renew_type: cdktf.stringToTerraform(struct.renewType),
    };
}
exports.licensemanagerLicenseConsumptionConfigurationToTerraform = licensemanagerLicenseConsumptionConfigurationToTerraform;
function licensemanagerLicenseEntitlementsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_check_in: cdktf.booleanToTerraform(struct.allowCheckIn),
        max_count: cdktf.numberToTerraform(struct.maxCount),
        name: cdktf.stringToTerraform(struct.name),
        overage: cdktf.booleanToTerraform(struct.overage),
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.licensemanagerLicenseEntitlementsToTerraform = licensemanagerLicenseEntitlementsToTerraform;
function licensemanagerLicenseIssuerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        sign_key: cdktf.stringToTerraform(struct.signKey),
    };
}
exports.licensemanagerLicenseIssuerToTerraform = licensemanagerLicenseIssuerToTerraform;
function licensemanagerLicenseLicenseMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.licensemanagerLicenseLicenseMetadataToTerraform = licensemanagerLicenseLicenseMetadataToTerraform;
function licensemanagerLicenseValidityToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        begin: cdktf.stringToTerraform(struct.begin),
        end: cdktf.stringToTerraform(struct.end),
    };
}
exports.licensemanagerLicenseValidityToTerraform = licensemanagerLicenseValidityToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/licensemanager_license.html awscc_licensemanager_license}
*/
class LicensemanagerLicense extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/licensemanager_license.html awscc_licensemanager_license} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LicensemanagerLicenseConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_licensemanager_license',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._beneficiary = config.beneficiary;
        this._consumptionConfiguration = config.consumptionConfiguration;
        this._entitlements = config.entitlements;
        this._homeRegion = config.homeRegion;
        this._issuer = config.issuer;
        this._licenseMetadata = config.licenseMetadata;
        this._licenseName = config.licenseName;
        this._productName = config.productName;
        this._productSku = config.productSku;
        this._status = config.status;
        this._validity = config.validity;
    }
    get beneficiary() {
        return this.getStringAttribute('beneficiary');
    }
    set beneficiary(value) {
        this._beneficiary = value;
    }
    resetBeneficiary() {
        this._beneficiary = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get beneficiaryInput() {
        return this._beneficiary;
    }
    get consumptionConfiguration() {
        return this.interpolationForAttribute('consumption_configuration');
    }
    set consumptionConfiguration(value) {
        this._consumptionConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumptionConfigurationInput() {
        return this._consumptionConfiguration;
    }
    get entitlements() {
        return this.interpolationForAttribute('entitlements');
    }
    set entitlements(value) {
        this._entitlements = value;
    }
    // Temporarily expose input value. Use with caution.
    get entitlementsInput() {
        return this._entitlements;
    }
    get homeRegion() {
        return this.getStringAttribute('home_region');
    }
    set homeRegion(value) {
        this._homeRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get homeRegionInput() {
        return this._homeRegion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get issuer() {
        return this.interpolationForAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
    // license_arn - computed: true, optional: false, required: false
    get licenseArn() {
        return this.getStringAttribute('license_arn');
    }
    get licenseMetadata() {
        return this.interpolationForAttribute('license_metadata');
    }
    set licenseMetadata(value) {
        this._licenseMetadata = value;
    }
    resetLicenseMetadata() {
        this._licenseMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseMetadataInput() {
        return this._licenseMetadata;
    }
    get licenseName() {
        return this.getStringAttribute('license_name');
    }
    set licenseName(value) {
        this._licenseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get licenseNameInput() {
        return this._licenseName;
    }
    get productName() {
        return this.getStringAttribute('product_name');
    }
    set productName(value) {
        this._productName = value;
    }
    // Temporarily expose input value. Use with caution.
    get productNameInput() {
        return this._productName;
    }
    get productSku() {
        return this.getStringAttribute('product_sku');
    }
    set productSku(value) {
        this._productSku = value;
    }
    resetProductSku() {
        this._productSku = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get productSkuInput() {
        return this._productSku;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get validity() {
        return this.interpolationForAttribute('validity');
    }
    set validity(value) {
        this._validity = value;
    }
    // Temporarily expose input value. Use with caution.
    get validityInput() {
        return this._validity;
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            beneficiary: cdktf.stringToTerraform(this._beneficiary),
            consumption_configuration: licensemanagerLicenseConsumptionConfigurationToTerraform(this._consumptionConfiguration),
            entitlements: cdktf.listMapper(licensemanagerLicenseEntitlementsToTerraform)(this._entitlements),
            home_region: cdktf.stringToTerraform(this._homeRegion),
            issuer: licensemanagerLicenseIssuerToTerraform(this._issuer),
            license_metadata: cdktf.listMapper(licensemanagerLicenseLicenseMetadataToTerraform)(this._licenseMetadata),
            license_name: cdktf.stringToTerraform(this._licenseName),
            product_name: cdktf.stringToTerraform(this._productName),
            product_sku: cdktf.stringToTerraform(this._productSku),
            status: cdktf.stringToTerraform(this._status),
            validity: licensemanagerLicenseValidityToTerraform(this._validity),
        };
    }
}
exports.LicensemanagerLicense = LicensemanagerLicense;
// =================
// STATIC PROPERTIES
// =================
LicensemanagerLicense.tfResourceType = "awscc_licensemanager_license";
//# sourceMappingURL=data:application/json;base64,