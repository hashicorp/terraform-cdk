"use strict";
// https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NimblestudioStudio = exports.nimblestudioStudioStudioEncryptionConfigurationToTerraform = void 0;
const cdktf = require("cdktf");
function nimblestudioStudioStudioEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key_arn: cdktf.stringToTerraform(struct.keyArn),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.nimblestudioStudioStudioEncryptionConfigurationToTerraform = nimblestudioStudioStudioEncryptionConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio.html awscc_nimblestudio_studio}
*/
class NimblestudioStudio extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/nimblestudio_studio.html awscc_nimblestudio_studio} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NimblestudioStudioConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_nimblestudio_studio',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._adminRoleArn = config.adminRoleArn;
        this._displayName = config.displayName;
        this._studioEncryptionConfiguration = config.studioEncryptionConfiguration;
        this._studioName = config.studioName;
        this._tags = config.tags;
        this._userRoleArn = config.userRoleArn;
    }
    get adminRoleArn() {
        return this.getStringAttribute('admin_role_arn');
    }
    set adminRoleArn(value) {
        this._adminRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get adminRoleArnInput() {
        return this._adminRoleArn;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    // home_region - computed: true, optional: false, required: false
    get homeRegion() {
        return this.getStringAttribute('home_region');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // sso_client_id - computed: true, optional: false, required: false
    get ssoClientId() {
        return this.getStringAttribute('sso_client_id');
    }
    get studioEncryptionConfiguration() {
        return this.interpolationForAttribute('studio_encryption_configuration');
    }
    set studioEncryptionConfiguration(value) {
        this._studioEncryptionConfiguration = value;
    }
    resetStudioEncryptionConfiguration() {
        this._studioEncryptionConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get studioEncryptionConfigurationInput() {
        return this._studioEncryptionConfiguration;
    }
    // studio_id - computed: true, optional: false, required: false
    get studioId() {
        return this.getStringAttribute('studio_id');
    }
    get studioName() {
        return this.getStringAttribute('studio_name');
    }
    set studioName(value) {
        this._studioName = value;
    }
    // Temporarily expose input value. Use with caution.
    get studioNameInput() {
        return this._studioName;
    }
    // studio_url - computed: true, optional: false, required: false
    get studioUrl() {
        return this.getStringAttribute('studio_url');
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get userRoleArn() {
        return this.getStringAttribute('user_role_arn');
    }
    set userRoleArn(value) {
        this._userRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get userRoleArnInput() {
        return this._userRoleArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            admin_role_arn: cdktf.stringToTerraform(this._adminRoleArn),
            display_name: cdktf.stringToTerraform(this._displayName),
            studio_encryption_configuration: nimblestudioStudioStudioEncryptionConfigurationToTerraform(this._studioEncryptionConfiguration),
            studio_name: cdktf.stringToTerraform(this._studioName),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            user_role_arn: cdktf.stringToTerraform(this._userRoleArn),
        };
    }
}
exports.NimblestudioStudio = NimblestudioStudio;
// =================
// STATIC PROPERTIES
// =================
NimblestudioStudio.tfResourceType = "awscc_nimblestudio_studio";
//# sourceMappingURL=data:application/json;base64,