"use strict";
// https://www.terraform.io/docs/providers/awscc/r/s3objectlambda_access_point.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3ObjectlambdaAccessPoint = exports.s3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform = exports.S3ObjectlambdaAccessPointPublicAccessBlockConfiguration = exports.s3ObjectlambdaAccessPointPolicyStatusToTerraform = exports.S3ObjectlambdaAccessPointPolicyStatus = exports.s3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform = exports.s3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform = void 0;
const cdktf = require("cdktf");
function s3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        content_transformation: cdktf.hashMapper(cdktf.anyToTerraform)(struct.contentTransformation),
    };
}
exports.s3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform = s3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform;
function s3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allowed_features: cdktf.listMapper(cdktf.stringToTerraform)(struct.allowedFeatures),
        cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.cloudwatchMetricsEnabled),
        supporting_access_point: cdktf.stringToTerraform(struct.supportingAccessPoint),
        transformation_configurations: cdktf.listMapper(s3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform)(struct.transformationConfigurations),
    };
}
exports.s3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform = s3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform;
class S3ObjectlambdaAccessPointPolicyStatus extends cdktf.ComplexComputedList {
    get isPublic() {
        return this.getBooleanAttribute('is_public');
    }
    set isPublic(value) {
        this._isPublic = value;
    }
    resetIsPublic() {
        this._isPublic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isPublicInput() {
        return this._isPublic;
    }
}
exports.S3ObjectlambdaAccessPointPolicyStatus = S3ObjectlambdaAccessPointPolicyStatus;
function s3ObjectlambdaAccessPointPolicyStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_public: cdktf.booleanToTerraform(struct.isPublic),
    };
}
exports.s3ObjectlambdaAccessPointPolicyStatusToTerraform = s3ObjectlambdaAccessPointPolicyStatusToTerraform;
class S3ObjectlambdaAccessPointPublicAccessBlockConfiguration extends cdktf.ComplexComputedList {
    get blockPublicAcls() {
        return this.getBooleanAttribute('block_public_acls');
    }
    set blockPublicAcls(value) {
        this._blockPublicAcls = value;
    }
    resetBlockPublicAcls() {
        this._blockPublicAcls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockPublicAclsInput() {
        return this._blockPublicAcls;
    }
    get blockPublicPolicy() {
        return this.getBooleanAttribute('block_public_policy');
    }
    set blockPublicPolicy(value) {
        this._blockPublicPolicy = value;
    }
    resetBlockPublicPolicy() {
        this._blockPublicPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockPublicPolicyInput() {
        return this._blockPublicPolicy;
    }
    get ignorePublicAcls() {
        return this.getBooleanAttribute('ignore_public_acls');
    }
    set ignorePublicAcls(value) {
        this._ignorePublicAcls = value;
    }
    resetIgnorePublicAcls() {
        this._ignorePublicAcls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignorePublicAclsInput() {
        return this._ignorePublicAcls;
    }
    get restrictPublicBuckets() {
        return this.getBooleanAttribute('restrict_public_buckets');
    }
    set restrictPublicBuckets(value) {
        this._restrictPublicBuckets = value;
    }
    resetRestrictPublicBuckets() {
        this._restrictPublicBuckets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictPublicBucketsInput() {
        return this._restrictPublicBuckets;
    }
}
exports.S3ObjectlambdaAccessPointPublicAccessBlockConfiguration = S3ObjectlambdaAccessPointPublicAccessBlockConfiguration;
function s3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_public_acls: cdktf.booleanToTerraform(struct.blockPublicAcls),
        block_public_policy: cdktf.booleanToTerraform(struct.blockPublicPolicy),
        ignore_public_acls: cdktf.booleanToTerraform(struct.ignorePublicAcls),
        restrict_public_buckets: cdktf.booleanToTerraform(struct.restrictPublicBuckets),
    };
}
exports.s3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform = s3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/s3objectlambda_access_point.html awscc_s3objectlambda_access_point}
*/
class S3ObjectlambdaAccessPoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/s3objectlambda_access_point.html awscc_s3objectlambda_access_point} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3ObjectlambdaAccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3objectlambda_access_point',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._objectLambdaConfiguration = config.objectLambdaConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // creation_date - computed: true, optional: false, required: false
    get creationDate() {
        return this.getStringAttribute('creation_date');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get objectLambdaConfiguration() {
        return this.interpolationForAttribute('object_lambda_configuration');
    }
    set objectLambdaConfiguration(value) {
        this._objectLambdaConfiguration = value;
    }
    resetObjectLambdaConfiguration() {
        this._objectLambdaConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectLambdaConfigurationInput() {
        return this._objectLambdaConfiguration;
    }
    // policy_status - computed: true, optional: false, required: false
    get policyStatus() {
        return this.interpolationForAttribute('policy_status');
    }
    // public_access_block_configuration - computed: true, optional: false, required: false
    get publicAccessBlockConfiguration() {
        return this.interpolationForAttribute('public_access_block_configuration');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            object_lambda_configuration: s3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform(this._objectLambdaConfiguration),
        };
    }
}
exports.S3ObjectlambdaAccessPoint = S3ObjectlambdaAccessPoint;
// =================
// STATIC PROPERTIES
// =================
S3ObjectlambdaAccessPoint.tfResourceType = "awscc_s3objectlambda_access_point";
//# sourceMappingURL=data:application/json;base64,