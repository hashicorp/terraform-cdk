"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_recovery_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53RecoveryreadinessRecoveryGroup = exports.route53RecoveryreadinessRecoveryGroupTagsToTerraform = void 0;
const cdktf = require("cdktf");
function route53RecoveryreadinessRecoveryGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.listMapper(cdktf.stringToTerraform)(struct.value),
    };
}
exports.route53RecoveryreadinessRecoveryGroupTagsToTerraform = route53RecoveryreadinessRecoveryGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_recovery_group.html awscc_route53recoveryreadiness_recovery_group}
*/
class Route53RecoveryreadinessRecoveryGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_recovery_group.html awscc_route53recoveryreadiness_recovery_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53RecoveryreadinessRecoveryGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoveryreadiness_recovery_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cells = config.cells;
        this._recoveryGroupName = config.recoveryGroupName;
        this._tags = config.tags;
    }
    get cells() {
        return this.getListAttribute('cells');
    }
    set cells(value) {
        this._cells = value;
    }
    resetCells() {
        this._cells = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cellsInput() {
        return this._cells;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // recovery_group_arn - computed: true, optional: false, required: false
    get recoveryGroupArn() {
        return this.getStringAttribute('recovery_group_arn');
    }
    get recoveryGroupName() {
        return this.getStringAttribute('recovery_group_name');
    }
    set recoveryGroupName(value) {
        this._recoveryGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get recoveryGroupNameInput() {
        return this._recoveryGroupName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cells: cdktf.listMapper(cdktf.stringToTerraform)(this._cells),
            recovery_group_name: cdktf.stringToTerraform(this._recoveryGroupName),
            tags: cdktf.listMapper(route53RecoveryreadinessRecoveryGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.Route53RecoveryreadinessRecoveryGroup = Route53RecoveryreadinessRecoveryGroup;
// =================
// STATIC PROPERTIES
// =================
Route53RecoveryreadinessRecoveryGroup.tfResourceType = "awscc_route53recoveryreadiness_recovery_group";
//# sourceMappingURL=data:application/json;base64,