"use strict";
// https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_listener.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalacceleratorListener = exports.globalacceleratorListenerPortRangesToTerraform = void 0;
const cdktf = require("cdktf");
function globalacceleratorListenerPortRangesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.globalacceleratorListenerPortRangesToTerraform = globalacceleratorListenerPortRangesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_listener.html awscc_globalaccelerator_listener}
*/
class GlobalacceleratorListener extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/globalaccelerator_listener.html awscc_globalaccelerator_listener} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlobalacceleratorListenerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_globalaccelerator_listener',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._acceleratorArn = config.acceleratorArn;
        this._clientAffinity = config.clientAffinity;
        this._portRanges = config.portRanges;
        this._protocol = config.protocol;
    }
    get acceleratorArn() {
        return this.getStringAttribute('accelerator_arn');
    }
    set acceleratorArn(value) {
        this._acceleratorArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorArnInput() {
        return this._acceleratorArn;
    }
    get clientAffinity() {
        return this.getStringAttribute('client_affinity');
    }
    set clientAffinity(value) {
        this._clientAffinity = value;
    }
    resetClientAffinity() {
        this._clientAffinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAffinityInput() {
        return this._clientAffinity;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // listener_arn - computed: true, optional: false, required: false
    get listenerArn() {
        return this.getStringAttribute('listener_arn');
    }
    get portRanges() {
        return this.interpolationForAttribute('port_ranges');
    }
    set portRanges(value) {
        this._portRanges = value;
    }
    // Temporarily expose input value. Use with caution.
    get portRangesInput() {
        return this._portRanges;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            accelerator_arn: cdktf.stringToTerraform(this._acceleratorArn),
            client_affinity: cdktf.stringToTerraform(this._clientAffinity),
            port_ranges: cdktf.listMapper(globalacceleratorListenerPortRangesToTerraform)(this._portRanges),
            protocol: cdktf.stringToTerraform(this._protocol),
        };
    }
}
exports.GlobalacceleratorListener = GlobalacceleratorListener;
// =================
// STATIC PROPERTIES
// =================
GlobalacceleratorListener.tfResourceType = "awscc_globalaccelerator_listener";
//# sourceMappingURL=data:application/json;base64,