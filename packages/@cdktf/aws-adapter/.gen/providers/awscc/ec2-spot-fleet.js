"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_spot_fleet.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2SpotFleet = exports.ec2SpotFleetSpotFleetRequestConfigDataToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesCapacityRebalanceToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroupsToTerraform = exports.Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroups = exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersToTerraform = exports.Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancers = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsOverridesToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsTagsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsSecurityGroupsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsPlacementToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesPrivateIpAddressesToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesIpv6AddressesToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsMonitoringToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsIamInstanceProfileToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsToTerraform = exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsEbsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsEbsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        snapshot_id: cdktf.stringToTerraform(struct.snapshotId),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsEbsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsEbsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        ebs: ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsEbsToTerraform(struct.ebs),
        no_device: cdktf.stringToTerraform(struct.noDevice),
        virtual_name: cdktf.stringToTerraform(struct.virtualName),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsIamInstanceProfileToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsIamInstanceProfileToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsIamInstanceProfileToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsMonitoringToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsMonitoringToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesIpv6AddressesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        ipv_6_address: cdktf.stringToTerraform(struct.ipv6Address),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesIpv6AddressesToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesIpv6AddressesToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesPrivateIpAddressesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        primary: cdktf.booleanToTerraform(struct.primary),
        private_ip_address: cdktf.stringToTerraform(struct.privateIpAddress),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesPrivateIpAddressesToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesPrivateIpAddressesToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        associate_public_ip_address: cdktf.booleanToTerraform(struct.associatePublicIpAddress),
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        description: cdktf.stringToTerraform(struct.description),
        device_index: cdktf.numberToTerraform(struct.deviceIndex),
        groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.groups),
        ipv_6_address_count: cdktf.numberToTerraform(struct.ipv6AddressCount),
        ipv_6_addresses: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesIpv6AddressesToTerraform)(struct.ipv6Addresses),
        network_interface_id: cdktf.stringToTerraform(struct.networkInterfaceId),
        private_ip_addresses: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesPrivateIpAddressesToTerraform)(struct.privateIpAddresses),
        secondary_private_ip_address_count: cdktf.numberToTerraform(struct.secondaryPrivateIpAddressCount),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsPlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        group_name: cdktf.stringToTerraform(struct.groupName),
        tenancy: cdktf.stringToTerraform(struct.tenancy),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsPlacementToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsPlacementToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsSecurityGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        group_id: cdktf.stringToTerraform(struct.groupId),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsSecurityGroupsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsSecurityGroupsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsTagsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsTagsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        resource_type: cdktf.stringToTerraform(struct.resourceType),
        tags: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsTagsToTerraform)(struct.tags),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_device_mappings: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsBlockDeviceMappingsToTerraform)(struct.blockDeviceMappings),
        ebs_optimized: cdktf.booleanToTerraform(struct.ebsOptimized),
        iam_instance_profile: ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsIamInstanceProfileToTerraform(struct.iamInstanceProfile),
        image_id: cdktf.stringToTerraform(struct.imageId),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        kernel_id: cdktf.stringToTerraform(struct.kernelId),
        key_name: cdktf.stringToTerraform(struct.keyName),
        monitoring: ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsMonitoringToTerraform(struct.monitoring),
        network_interfaces: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsNetworkInterfacesToTerraform)(struct.networkInterfaces),
        placement: ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsPlacementToTerraform(struct.placement),
        ramdisk_id: cdktf.stringToTerraform(struct.ramdiskId),
        security_groups: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsSecurityGroupsToTerraform)(struct.securityGroups),
        spot_price: cdktf.stringToTerraform(struct.spotPrice),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        tag_specifications: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsTagSpecificationsToTerraform)(struct.tagSpecifications),
        user_data: cdktf.stringToTerraform(struct.userData),
        weighted_capacity: cdktf.numberToTerraform(struct.weightedCapacity),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        launch_template_name: cdktf.stringToTerraform(struct.launchTemplateName),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        spot_price: cdktf.stringToTerraform(struct.spotPrice),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        weighted_capacity: cdktf.numberToTerraform(struct.weightedCapacity),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsOverridesToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsOverridesToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        launch_template_specification: ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsLaunchTemplateSpecificationToTerraform(struct.launchTemplateSpecification),
        overrides: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsOverridesToTerraform)(struct.overrides),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsToTerraform;
class Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancers extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: true
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancers = Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancers;
function ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        classic_load_balancers: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersToTerraform)(struct.classicLoadBalancers),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigToTerraform;
class Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroups extends cdktf.ComplexComputedList {
    // arn - computed: true, optional: false, required: true
    get arn() {
        return this.getStringAttribute('arn');
    }
}
exports.Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroups = Ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroups;
function ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroupsToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroupsToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target_groups: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigTargetGroupsToTerraform)(struct.targetGroups),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        classic_load_balancers_config: ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigClassicLoadBalancersConfigToTerraform(struct.classicLoadBalancersConfig),
        target_groups_config: ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigTargetGroupsConfigToTerraform(struct.targetGroupsConfig),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigToTerraform = ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesCapacityRebalanceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replacement_strategy: cdktf.stringToTerraform(struct.replacementStrategy),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesCapacityRebalanceToTerraform = ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesCapacityRebalanceToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        capacity_rebalance: ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesCapacityRebalanceToTerraform(struct.capacityRebalance),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesToTerraform = ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesToTerraform;
function ec2SpotFleetSpotFleetRequestConfigDataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        context: cdktf.stringToTerraform(struct.context),
        excess_capacity_termination_policy: cdktf.stringToTerraform(struct.excessCapacityTerminationPolicy),
        iam_fleet_role: cdktf.stringToTerraform(struct.iamFleetRole),
        instance_interruption_behavior: cdktf.stringToTerraform(struct.instanceInterruptionBehavior),
        instance_pools_to_use_count: cdktf.numberToTerraform(struct.instancePoolsToUseCount),
        launch_specifications: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchSpecificationsToTerraform)(struct.launchSpecifications),
        launch_template_configs: cdktf.listMapper(ec2SpotFleetSpotFleetRequestConfigDataLaunchTemplateConfigsToTerraform)(struct.launchTemplateConfigs),
        load_balancers_config: ec2SpotFleetSpotFleetRequestConfigDataLoadBalancersConfigToTerraform(struct.loadBalancersConfig),
        on_demand_allocation_strategy: cdktf.stringToTerraform(struct.onDemandAllocationStrategy),
        on_demand_max_total_price: cdktf.stringToTerraform(struct.onDemandMaxTotalPrice),
        on_demand_target_capacity: cdktf.numberToTerraform(struct.onDemandTargetCapacity),
        replace_unhealthy_instances: cdktf.booleanToTerraform(struct.replaceUnhealthyInstances),
        spot_maintenance_strategies: ec2SpotFleetSpotFleetRequestConfigDataSpotMaintenanceStrategiesToTerraform(struct.spotMaintenanceStrategies),
        spot_max_total_price: cdktf.stringToTerraform(struct.spotMaxTotalPrice),
        spot_price: cdktf.stringToTerraform(struct.spotPrice),
        target_capacity: cdktf.numberToTerraform(struct.targetCapacity),
        terminate_instances_with_expiration: cdktf.booleanToTerraform(struct.terminateInstancesWithExpiration),
        type: cdktf.stringToTerraform(struct.type),
        valid_from: cdktf.stringToTerraform(struct.validFrom),
        valid_until: cdktf.stringToTerraform(struct.validUntil),
    };
}
exports.ec2SpotFleetSpotFleetRequestConfigDataToTerraform = ec2SpotFleetSpotFleetRequestConfigDataToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_spot_fleet.html awscc_ec2_spot_fleet}
*/
class Ec2SpotFleet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_spot_fleet.html awscc_ec2_spot_fleet} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2SpotFleetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_spot_fleet',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._spotFleetRequestConfigData = config.spotFleetRequestConfigData;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get spotFleetRequestConfigData() {
        return this.interpolationForAttribute('spot_fleet_request_config_data');
    }
    set spotFleetRequestConfigData(value) {
        this._spotFleetRequestConfigData = value;
    }
    // Temporarily expose input value. Use with caution.
    get spotFleetRequestConfigDataInput() {
        return this._spotFleetRequestConfigData;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            spot_fleet_request_config_data: ec2SpotFleetSpotFleetRequestConfigDataToTerraform(this._spotFleetRequestConfigData),
        };
    }
}
exports.Ec2SpotFleet = Ec2SpotFleet;
// =================
// STATIC PROPERTIES
// =================
Ec2SpotFleet.tfResourceType = "awscc_ec2_spot_fleet";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLXNwb3QtZmxlZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlYzItc3BvdC1mbGVldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0VBQXNFO0FBQ3RFLDJDQUEyQzs7O0FBRzNDLCtCQUErQjtBQXFDL0IsU0FBZ0IsMkZBQTJGLENBQUMsTUFBeUY7SUFDbk0sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxxQkFBcUIsRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTyxDQUFDLG1CQUFtQixDQUFDO1FBQzVFLFNBQVMsRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTyxDQUFDLFNBQVMsQ0FBQztRQUN0RCxJQUFJLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxJQUFJLENBQUM7UUFDM0MsV0FBVyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3hELFdBQVcsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLFVBQVUsQ0FBQztRQUN4RCxXQUFXLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxVQUFVLENBQUM7S0FDekQsQ0FBQTtBQUNILENBQUM7QUFWRCxrTUFVQztBQXFCRCxTQUFnQix3RkFBd0YsQ0FBQyxNQUFzRjtJQUM3TCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLFdBQVcsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLFVBQVUsQ0FBQztRQUN4RCxHQUFHLEVBQUUsMkZBQTJGLENBQUMsTUFBTyxDQUFDLEdBQUcsQ0FBQztRQUM3RyxTQUFTLEVBQUUsS0FBSyxDQUFD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QUF5QixDQUFDLGdDQUFnQyxDQUFRLENBQUM7SUFDakYsQ0FBQztJQUNELElBQVcsMEJBQTBCLENBQUMsS0FBNkM7UUFDakYsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztJQUMzQyxDQUFDO0lBQ0Qsb0RBQW9EO0lBQ3BELElBQVcsK0JBQStCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFBO0lBQ3pDLENBQUM7SUFFRCxZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7SUFFRixvQkFBb0I7UUFDNUIsT0FBTztZQUNMLDhCQUE4QixFQUFFLGlEQUFpRCxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQztTQUNwSCxDQUFDO0lBQ0osQ0FBQzs7QUE5REgsb0NBK0RDO0FBN0RDLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ0csMkJBQWMsR0FBVyxzQkFBc0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWxcbi8vIGdlbmVyYXRlZCBmcm9tIHRlcnJhZm9ybSByZXNvdXJjZSBzY2hlbWFcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGt0ZiBmcm9tICdjZGt0Zic7XG5cbi8vIENvbmZpZ3VyYXRpb25cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3Nwb3RfZmxlZXRfcmVxdWVzdF9jb25maWdfZGF0YSBFYzJTcG90RmxlZXQjc3BvdF9mbGVldF9yZXF1ZXN0X2NvbmZpZ19kYXRhfVxuICAqL1xuICByZWFkb25seSBzcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YTogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGE7XG59XG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNCbG9ja0RldmljZU1hcHBpbmdzRWJzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2RlbGV0ZV9vbl90ZXJtaW5hdGlvbiBFYzJTcG90RmxlZXQjZGVsZXRlX29uX3Rlcm1pbmF0aW9ufVxuICAqL1xuICByZWFkb25seSBkZWxldGVPblRlcm1pbmF0aW9uPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjZW5jcnlwdGVkIEVjMlNwb3RGbGVldCNlbmNyeXB0ZWR9XG4gICovXG4gIHJlYWRvbmx5IGVuY3J5cHRlZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2lvcHMgRWMyU3BvdEZsZWV0I2lvcHN9XG4gICovXG4gIHJlYWRvbmx5IGlvcHM/OiBudW1iZXI7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzbmFwc2hvdF9pZCBFYzJTcG90RmxlZXQjc25hcHNob3RfaWR9XG4gICovXG4gIHJlYWRvbmx5IHNuYXBzaG90SWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN2b2x1bWVfc2l6ZSBFYzJTcG90RmxlZXQjdm9sdW1lX3NpemV9XG4gICovXG4gIHJlYWRvbmx5IHZvbHVtZVNpemU/OiBudW1iZXI7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN2b2x1bWVfdHlwZSBFYzJTcG90RmxlZXQjdm9sdW1lX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IHZvbHVtZVR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zQmxvY2tEZXZpY2VNYXBwaW5nc0Vic1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNCbG9ja0RldmljZU1hcHBpbmdzRWJzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbjogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuZGVsZXRlT25UZXJtaW5hdGlvbiksXG4gICAgZW5jcnlwdGVkOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5lbmNyeXB0ZWQpLFxuICAgIGlvcHM6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuaW9wcyksXG4gICAgc25hcHNob3RfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc25hcHNob3RJZCksXG4gICAgdm9sdW1lX3NpemU6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEudm9sdW1lU2l6ZSksXG4gICAgdm9sdW1lX3R5cGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudm9sdW1lVHlwZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zQmxvY2tEZXZpY2VNYXBwaW5ncyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNkZXZpY2VfbmFtZSBFYzJTcG90RmxlZXQjZGV2aWNlX25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGRldmljZU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2VicyBFYzJTcG90RmxlZXQjZWJzfVxuICAqL1xuICByZWFkb25seSBlYnM/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zQmxvY2tEZXZpY2VNYXBwaW5nc0VicztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI25vX2RldmljZSBFYzJTcG90RmxlZXQjbm9fZGV2aWNlfVxuICAqL1xuICByZWFkb25seSBub0RldmljZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3ZpcnR1YWxfbmFtZSBFYzJTcG90RmxlZXQjdmlydHVhbF9uYW1lfVxuICAqL1xuICByZWFkb25seSB2aXJ0dWFsTmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNCbG9ja0RldmljZU1hcHBpbmdzVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc0Jsb2NrRGV2aWNlTWFwcGluZ3MpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgZGV2aWNlX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGV2aWNlTmFtZSksXG4gICAgZWJzOiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zQmxvY2tEZXZpY2VNYXBwaW5nc0Vic1RvVGVycmFmb3JtKHN0cnVjdCEuZWJzKSxcbiAgICBub19kZXZpY2U6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubm9EZXZpY2UpLFxuICAgIHZpcnR1YWxfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS52aXJ0dWFsTmFtZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zSWFtSW5zdGFuY2VQcm9maWxlIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2FybiBFYzJTcG90RmxlZXQjYXJufVxuICAqL1xuICByZWFkb25seSBhcm4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zSWFtSW5zdGFuY2VQcm9maWxlVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc0lhbUluc3RhbmNlUHJvZmlsZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcm46IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXJuKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNNb25pdG9yaW5nIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2VuYWJsZWQgRWMyU3BvdEZsZWV0I2VuYWJsZWR9XG4gICovXG4gIHJlYWRvbmx5IGVuYWJsZWQ/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTW9uaXRvcmluZ1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNNb25pdG9yaW5nKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGVuYWJsZWQ6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmVuYWJsZWQpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzSXB2NkFkZHJlc3NlcyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNpcHZfNl9hZGRyZXNzIEVjMlNwb3RGbGVldCNpcHZfNl9hZGRyZXNzfVxuICAqL1xuICByZWFkb25seSBpcHY2QWRkcmVzczogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzSXB2NkFkZHJlc3Nlc1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNOZXR3b3JrSW50ZXJmYWNlc0lwdjZBZGRyZXNzZXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgaXB2XzZfYWRkcmVzczogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pcHY2QWRkcmVzcyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNQcml2YXRlSXBBZGRyZXNzZXMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjcHJpbWFyeSBFYzJTcG90RmxlZXQjcHJpbWFyeX1cbiAgKi9cbiAgcmVhZG9ubHkgcHJpbWFyeT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3ByaXZhdGVfaXBfYWRkcmVzcyBFYzJTcG90RmxlZXQjcHJpdmF0ZV9pcF9hZGRyZXNzfVxuICAqL1xuICByZWFkb25seSBwcml2YXRlSXBBZGRyZXNzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNQcml2YXRlSXBBZGRyZXNzZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNQcml2YXRlSXBBZGRyZXNzZXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgcHJpbWFyeTogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEucHJpbWFyeSksXG4gICAgcHJpdmF0ZV9pcF9hZGRyZXNzOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnByaXZhdGVJcEFkZHJlc3MpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2Fzc29jaWF0ZV9wdWJsaWNfaXBfYWRkcmVzcyBFYzJTcG90RmxlZXQjYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzfVxuICAqL1xuICByZWFkb25seSBhc3NvY2lhdGVQdWJsaWNJcEFkZHJlc3M/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNkZWxldGVfb25fdGVybWluYXRpb24gRWMyU3BvdEZsZWV0I2RlbGV0ZV9vbl90ZXJtaW5hdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgZGVsZXRlT25UZXJtaW5hdGlvbj86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2Rlc2NyaXB0aW9uIEVjMlNwb3RGbGVldCNkZXNjcmlwdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNkZXZpY2VfaW5kZXggRWMyU3BvdEZsZWV0I2RldmljZV9pbmRleH1cbiAgKi9cbiAgcmVhZG9ubHkgZGV2aWNlSW5kZXg/OiBudW1iZXI7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNncm91cHMgRWMyU3BvdEZsZWV0I2dyb3Vwc31cbiAgKi9cbiAgcmVhZG9ubHkgZ3JvdXBzPzogc3RyaW5nW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNpcHZfNl9hZGRyZXNzX2NvdW50IEVjMlNwb3RGbGVldCNpcHZfNl9hZGRyZXNzX2NvdW50fVxuICAqL1xuICByZWFkb25seSBpcHY2QWRkcmVzc0NvdW50PzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjaXB2XzZfYWRkcmVzc2VzIEVjMlNwb3RGbGVldCNpcHZfNl9hZGRyZXNzZXN9XG4gICovXG4gIHJlYWRvbmx5IGlwdjZBZGRyZXNzZXM/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNJcHY2QWRkcmVzc2VzW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNuZXR3b3JrX2ludGVyZmFjZV9pZCBFYzJTcG90RmxlZXQjbmV0d29ya19pbnRlcmZhY2VfaWR9XG4gICovXG4gIHJlYWRvbmx5IG5ldHdvcmtJbnRlcmZhY2VJZD86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3ByaXZhdGVfaXBfYWRkcmVzc2VzIEVjMlNwb3RGbGVldCNwcml2YXRlX2lwX2FkZHJlc3Nlc31cbiAgKi9cbiAgcmVhZG9ubHkgcHJpdmF0ZUlwQWRkcmVzc2VzPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzUHJpdmF0ZUlwQWRkcmVzc2VzW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzZWNvbmRhcnlfcHJpdmF0ZV9pcF9hZGRyZXNzX2NvdW50IEVjMlNwb3RGbGVldCNzZWNvbmRhcnlfcHJpdmF0ZV9pcF9hZGRyZXNzX2NvdW50fVxuICAqL1xuICByZWFkb25seSBzZWNvbmRhcnlQcml2YXRlSXBBZGRyZXNzQ291bnQ/OiBudW1iZXI7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzdWJuZXRfaWQgRWMyU3BvdEZsZWV0I3N1Ym5ldF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgc3VibmV0SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5hc3NvY2lhdGVQdWJsaWNJcEFkZHJlc3MpLFxuICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbjogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuZGVsZXRlT25UZXJtaW5hdGlvbiksXG4gICAgZGVzY3JpcHRpb246IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGVzY3JpcHRpb24pLFxuICAgIGRldmljZV9pbmRleDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5kZXZpY2VJbmRleCksXG4gICAgZ3JvdXBzOiBjZGt0Zi5saXN0TWFwcGVyKGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKShzdHJ1Y3QhLmdyb3VwcyksXG4gICAgaXB2XzZfYWRkcmVzc19jb3VudDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5pcHY2QWRkcmVzc0NvdW50KSxcbiAgICBpcHZfNl9hZGRyZXNzZXM6IGNka3RmLmxpc3RNYXBwZXIoZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzSXB2NkFkZHJlc3Nlc1RvVGVycmFmb3JtKShzdHJ1Y3QhLmlwdjZBZGRyZXNzZXMpLFxuICAgIG5ldHdvcmtfaW50ZXJmYWNlX2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm5ldHdvcmtJbnRlcmZhY2VJZCksXG4gICAgcHJpdmF0ZV9pcF9hZGRyZXNzZXM6IGNka3RmLmxpc3RNYXBwZXIoZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc05ldHdvcmtJbnRlcmZhY2VzUHJpdmF0ZUlwQWRkcmVzc2VzVG9UZXJyYWZvcm0pKHN0cnVjdCEucHJpdmF0ZUlwQWRkcmVzc2VzKSxcbiAgICBzZWNvbmRhcnlfcHJpdmF0ZV9pcF9hZGRyZXNzX2NvdW50OiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NDb3VudCksXG4gICAgc3VibmV0X2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnN1Ym5ldElkKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNQbGFjZW1lbnQge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjYXZhaWxhYmlsaXR5X3pvbmUgRWMyU3BvdEZsZWV0I2F2YWlsYWJpbGl0eV96b25lfVxuICAqL1xuICByZWFkb25seSBhdmFpbGFiaWxpdHlab25lPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjZ3JvdXBfbmFtZSBFYzJTcG90RmxlZXQjZ3JvdXBfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgZ3JvdXBOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdGVuYW5jeSBFYzJTcG90RmxlZXQjdGVuYW5jeX1cbiAgKi9cbiAgcmVhZG9ubHkgdGVuYW5jeT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNQbGFjZW1lbnRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zUGxhY2VtZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGF2YWlsYWJpbGl0eV96b25lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmF2YWlsYWJpbGl0eVpvbmUpLFxuICAgIGdyb3VwX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZ3JvdXBOYW1lKSxcbiAgICB0ZW5hbmN5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRlbmFuY3kpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1NlY3VyaXR5R3JvdXBzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2dyb3VwX2lkIEVjMlNwb3RGbGVldCNncm91cF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgZ3JvdXBJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1NlY3VyaXR5R3JvdXBzVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1NlY3VyaXR5R3JvdXBzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGdyb3VwX2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmdyb3VwSWQpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1RhZ1NwZWNpZmljYXRpb25zVGFncyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNrZXkgRWMyU3BvdEZsZWV0I2tleX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN2YWx1ZSBFYzJTcG90RmxlZXQjdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zVGFnU3BlY2lmaWNhdGlvbnNUYWdzVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1RhZ1NwZWNpZmljYXRpb25zVGFncyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEua2V5KSxcbiAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS52YWx1ZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zVGFnU3BlY2lmaWNhdGlvbnMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjcmVzb3VyY2VfdHlwZSBFYzJTcG90RmxlZXQjcmVzb3VyY2VfdHlwZX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVzb3VyY2VUeXBlPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdGFncyBFYzJTcG90RmxlZXQjdGFnc31cbiAgKi9cbiAgcmVhZG9ubHkgdGFncz86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNUYWdTcGVjaWZpY2F0aW9uc1RhZ3NbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNUYWdTcGVjaWZpY2F0aW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNUYWdTcGVjaWZpY2F0aW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICByZXNvdXJjZV90eXBlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlc291cmNlVHlwZSksXG4gICAgdGFnczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zVGFnU3BlY2lmaWNhdGlvbnNUYWdzVG9UZXJyYWZvcm0pKHN0cnVjdCEudGFncyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2Jsb2NrX2RldmljZV9tYXBwaW5ncyBFYzJTcG90RmxlZXQjYmxvY2tfZGV2aWNlX21hcHBpbmdzfVxuICAqL1xuICByZWFkb25seSBibG9ja0RldmljZU1hcHBpbmdzPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc0Jsb2NrRGV2aWNlTWFwcGluZ3NbXTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2Vic19vcHRpbWl6ZWQgRWMyU3BvdEZsZWV0I2Vic19vcHRpbWl6ZWR9XG4gICovXG4gIHJlYWRvbmx5IGVic09wdGltaXplZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2lhbV9pbnN0YW5jZV9wcm9maWxlIEVjMlNwb3RGbGVldCNpYW1faW5zdGFuY2VfcHJvZmlsZX1cbiAgKi9cbiAgcmVhZG9ubHkgaWFtSW5zdGFuY2VQcm9maWxlPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc0lhbUluc3RhbmNlUHJvZmlsZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2ltYWdlX2lkIEVjMlNwb3RGbGVldCNpbWFnZV9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgaW1hZ2VJZDogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjaW5zdGFuY2VfdHlwZSBFYzJTcG90RmxlZXQjaW5zdGFuY2VfdHlwZX1cbiAgKi9cbiAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNrZXJuZWxfaWQgRWMyU3BvdEZsZWV0I2tlcm5lbF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkga2VybmVsSWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNrZXlfbmFtZSBFYzJTcG90RmxlZXQja2V5X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGtleU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNtb25pdG9yaW5nIEVjMlNwb3RGbGVldCNtb25pdG9yaW5nfVxuICAqL1xuICByZWFkb25seSBtb25pdG9yaW5nPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc01vbml0b3Jpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNuZXR3b3JrX2ludGVyZmFjZXMgRWMyU3BvdEZsZWV0I25ldHdvcmtfaW50ZXJmYWNlc31cbiAgKi9cbiAgcmVhZG9ubHkgbmV0d29ya0ludGVyZmFjZXM/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNbXTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3BsYWNlbWVudCBFYzJTcG90RmxlZXQjcGxhY2VtZW50fVxuICAqL1xuICByZWFkb25seSBwbGFjZW1lbnQ/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zUGxhY2VtZW50O1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjcmFtZGlza19pZCBFYzJTcG90RmxlZXQjcmFtZGlza19pZH1cbiAgKi9cbiAgcmVhZG9ubHkgcmFtZGlza0lkPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjc2VjdXJpdHlfZ3JvdXBzIEVjMlNwb3RGbGVldCNzZWN1cml0eV9ncm91cHN9XG4gICovXG4gIHJlYWRvbmx5IHNlY3VyaXR5R3JvdXBzPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1NlY3VyaXR5R3JvdXBzW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzcG90X3ByaWNlIEVjMlNwb3RGbGVldCNzcG90X3ByaWNlfVxuICAqL1xuICByZWFkb25seSBzcG90UHJpY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzdWJuZXRfaWQgRWMyU3BvdEZsZWV0I3N1Ym5ldF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgc3VibmV0SWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN0YWdfc3BlY2lmaWNhdGlvbnMgRWMyU3BvdEZsZWV0I3RhZ19zcGVjaWZpY2F0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgdGFnU3BlY2lmaWNhdGlvbnM/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zVGFnU3BlY2lmaWNhdGlvbnNbXTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3VzZXJfZGF0YSBFYzJTcG90RmxlZXQjdXNlcl9kYXRhfVxuICAqL1xuICByZWFkb25seSB1c2VyRGF0YT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3dlaWdodGVkX2NhcGFjaXR5IEVjMlNwb3RGbGVldCN3ZWlnaHRlZF9jYXBhY2l0eX1cbiAgKi9cbiAgcmVhZG9ubHkgd2VpZ2h0ZWRDYXBhY2l0eT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGJsb2NrX2RldmljZV9tYXBwaW5nczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zQmxvY2tEZXZpY2VNYXBwaW5nc1RvVGVycmFmb3JtKShzdHJ1Y3QhLmJsb2NrRGV2aWNlTWFwcGluZ3MpLFxuICAgIGVic19vcHRpbWl6ZWQ6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmVic09wdGltaXplZCksXG4gICAgaWFtX2luc3RhbmNlX3Byb2ZpbGU6IGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNJYW1JbnN0YW5jZVByb2ZpbGVUb1RlcnJhZm9ybShzdHJ1Y3QhLmlhbUluc3RhbmNlUHJvZmlsZSksXG4gICAgaW1hZ2VfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW1hZ2VJZCksXG4gICAgaW5zdGFuY2VfdHlwZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVR5cGUpLFxuICAgIGtlcm5lbF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5rZXJuZWxJZCksXG4gICAga2V5X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEua2V5TmFtZSksXG4gICAgbW9uaXRvcmluZzogZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc01vbml0b3JpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm1vbml0b3JpbmcpLFxuICAgIG5ldHdvcmtfaW50ZXJmYWNlczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zTmV0d29ya0ludGVyZmFjZXNUb1RlcnJhZm9ybSkoc3RydWN0IS5uZXR3b3JrSW50ZXJmYWNlcyksXG4gICAgcGxhY2VtZW50OiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zUGxhY2VtZW50VG9UZXJyYWZvcm0oc3RydWN0IS5wbGFjZW1lbnQpLFxuICAgIHJhbWRpc2tfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucmFtZGlza0lkKSxcbiAgICBzZWN1cml0eV9ncm91cHM6IGNka3RmLmxpc3RNYXBwZXIoZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hTcGVjaWZpY2F0aW9uc1NlY3VyaXR5R3JvdXBzVG9UZXJyYWZvcm0pKHN0cnVjdCEuc2VjdXJpdHlHcm91cHMpLFxuICAgIHNwb3RfcHJpY2U6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3BvdFByaWNlKSxcbiAgICBzdWJuZXRfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3VibmV0SWQpLFxuICAgIHRhZ19zcGVjaWZpY2F0aW9uczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zVGFnU3BlY2lmaWNhdGlvbnNUb1RlcnJhZm9ybSkoc3RydWN0IS50YWdTcGVjaWZpY2F0aW9ucyksXG4gICAgdXNlcl9kYXRhOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnVzZXJEYXRhKSxcbiAgICB3ZWlnaHRlZF9jYXBhY2l0eTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS53ZWlnaHRlZENhcGFjaXR5KSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzTGF1bmNoVGVtcGxhdGVTcGVjaWZpY2F0aW9uIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2xhdW5jaF90ZW1wbGF0ZV9pZCBFYzJTcG90RmxlZXQjbGF1bmNoX3RlbXBsYXRlX2lkfVxuICAqL1xuICByZWFkb25seSBsYXVuY2hUZW1wbGF0ZUlkPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjbGF1bmNoX3RlbXBsYXRlX25hbWUgRWMyU3BvdEZsZWV0I2xhdW5jaF90ZW1wbGF0ZV9uYW1lfVxuICAqL1xuICByZWFkb25seSBsYXVuY2hUZW1wbGF0ZU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN2ZXJzaW9uIEVjMlNwb3RGbGVldCN2ZXJzaW9ufVxuICAqL1xuICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFRlbXBsYXRlQ29uZmlnc0xhdW5jaFRlbXBsYXRlU3BlY2lmaWNhdGlvblRvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzTGF1bmNoVGVtcGxhdGVTcGVjaWZpY2F0aW9uKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGxhdW5jaF90ZW1wbGF0ZV9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5sYXVuY2hUZW1wbGF0ZUlkKSxcbiAgICBsYXVuY2hfdGVtcGxhdGVfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5sYXVuY2hUZW1wbGF0ZU5hbWUpLFxuICAgIHZlcnNpb246IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudmVyc2lvbiksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFRlbXBsYXRlQ29uZmlnc092ZXJyaWRlcyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNhdmFpbGFiaWxpdHlfem9uZSBFYzJTcG90RmxlZXQjYXZhaWxhYmlsaXR5X3pvbmV9XG4gICovXG4gIHJlYWRvbmx5IGF2YWlsYWJpbGl0eVpvbmU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNpbnN0YW5jZV90eXBlIEVjMlNwb3RGbGVldCNpbnN0YW5jZV90eXBlfVxuICAqL1xuICByZWFkb25seSBpbnN0YW5jZVR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzcG90X3ByaWNlIEVjMlNwb3RGbGVldCNzcG90X3ByaWNlfVxuICAqL1xuICByZWFkb25seSBzcG90UHJpY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzdWJuZXRfaWQgRWMyU3BvdEZsZWV0I3N1Ym5ldF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgc3VibmV0SWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN3ZWlnaHRlZF9jYXBhY2l0eSBFYzJTcG90RmxlZXQjd2VpZ2h0ZWRfY2FwYWNpdHl9XG4gICovXG4gIHJlYWRvbmx5IHdlaWdodGVkQ2FwYWNpdHk/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFRlbXBsYXRlQ29uZmlnc092ZXJyaWRlc1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzT3ZlcnJpZGVzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGF2YWlsYWJpbGl0eV96b25lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmF2YWlsYWJpbGl0eVpvbmUpLFxuICAgIGluc3RhbmNlX3R5cGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW5zdGFuY2VUeXBlKSxcbiAgICBzcG90X3ByaWNlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnNwb3RQcmljZSksXG4gICAgc3VibmV0X2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnN1Ym5ldElkKSxcbiAgICB3ZWlnaHRlZF9jYXBhY2l0eTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS53ZWlnaHRlZENhcGFjaXR5KSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2xhdW5jaF90ZW1wbGF0ZV9zcGVjaWZpY2F0aW9uIEVjMlNwb3RGbGVldCNsYXVuY2hfdGVtcGxhdGVfc3BlY2lmaWNhdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgbGF1bmNoVGVtcGxhdGVTcGVjaWZpY2F0aW9uPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hUZW1wbGF0ZUNvbmZpZ3NMYXVuY2hUZW1wbGF0ZVNwZWNpZmljYXRpb247XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNvdmVycmlkZXMgRWMyU3BvdEZsZWV0I292ZXJyaWRlc31cbiAgKi9cbiAgcmVhZG9ubHkgb3ZlcnJpZGVzPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hUZW1wbGF0ZUNvbmZpZ3NPdmVycmlkZXNbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hUZW1wbGF0ZUNvbmZpZ3MpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgbGF1bmNoX3RlbXBsYXRlX3NwZWNpZmljYXRpb246IGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzTGF1bmNoVGVtcGxhdGVTcGVjaWZpY2F0aW9uVG9UZXJyYWZvcm0oc3RydWN0IS5sYXVuY2hUZW1wbGF0ZVNwZWNpZmljYXRpb24pLFxuICAgIG92ZXJyaWRlczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFRlbXBsYXRlQ29uZmlnc092ZXJyaWRlc1RvVGVycmFmb3JtKShzdHJ1Y3QhLm92ZXJyaWRlcyksXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzQ29uZmlnQ2xhc3NpY0xvYWRCYWxhbmNlcnMgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4Q29tcHV0ZWRMaXN0IHtcblxuICAvLyBuYW1lIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHVibGljIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbmFtZScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdDbGFzc2ljTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMb2FkQmFsYW5jZXJzQ29uZmlnQ2xhc3NpY0xvYWRCYWxhbmNlcnNDb25maWdDbGFzc2ljTG9hZEJhbGFuY2Vycyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMb2FkQmFsYW5jZXJzQ29uZmlnQ2xhc3NpY0xvYWRCYWxhbmNlcnNDb25maWcge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjY2xhc3NpY19sb2FkX2JhbGFuY2VycyBFYzJTcG90RmxlZXQjY2xhc3NpY19sb2FkX2JhbGFuY2Vyc31cbiAgKi9cbiAgcmVhZG9ubHkgY2xhc3NpY0xvYWRCYWxhbmNlcnM6IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzQ29uZmlnQ2xhc3NpY0xvYWRCYWxhbmNlcnNbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMb2FkQmFsYW5jZXJzQ29uZmlnQ2xhc3NpY0xvYWRCYWxhbmNlcnNDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgY2xhc3NpY19sb2FkX2JhbGFuY2VyczogY2RrdGYubGlzdE1hcHBlcihlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdDbGFzc2ljTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzVG9UZXJyYWZvcm0pKHN0cnVjdCEuY2xhc3NpY0xvYWRCYWxhbmNlcnMpLFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWdUYXJnZXRHcm91cHMgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4Q29tcHV0ZWRMaXN0IHtcblxuICAvLyBhcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwdWJsaWMgZ2V0IGFybigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2FybicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWdUYXJnZXRHcm91cHNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWdUYXJnZXRHcm91cHMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYXJuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFybiksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWcge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdGFyZ2V0X2dyb3VwcyBFYzJTcG90RmxlZXQjdGFyZ2V0X2dyb3Vwc31cbiAgKi9cbiAgcmVhZG9ubHkgdGFyZ2V0R3JvdXBzOiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWdUYXJnZXRHcm91cHNbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ1RhcmdldEdyb3Vwc0NvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdD86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ1RhcmdldEdyb3Vwc0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICB0YXJnZXRfZ3JvdXBzOiBjZGt0Zi5saXN0TWFwcGVyKGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ1RhcmdldEdyb3Vwc0NvbmZpZ1RhcmdldEdyb3Vwc1RvVGVycmFmb3JtKShzdHJ1Y3QhLnRhcmdldEdyb3VwcyksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWcge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjY2xhc3NpY19sb2FkX2JhbGFuY2Vyc19jb25maWcgRWMyU3BvdEZsZWV0I2NsYXNzaWNfbG9hZF9iYWxhbmNlcnNfY29uZmlnfVxuICAqL1xuICByZWFkb25seSBjbGFzc2ljTG9hZEJhbGFuY2Vyc0NvbmZpZz86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzQ29uZmlnO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdGFyZ2V0X2dyb3Vwc19jb25maWcgRWMyU3BvdEZsZWV0I3RhcmdldF9ncm91cHNfY29uZmlnfVxuICAqL1xuICByZWFkb25seSB0YXJnZXRHcm91cHNDb25maWc/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUYXJnZXRHcm91cHNDb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxvYWRCYWxhbmNlcnNDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgY2xhc3NpY19sb2FkX2JhbGFuY2Vyc19jb25maWc6IGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ0NsYXNzaWNMb2FkQmFsYW5jZXJzQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0IS5jbGFzc2ljTG9hZEJhbGFuY2Vyc0NvbmZpZyksXG4gICAgdGFyZ2V0X2dyb3Vwc19jb25maWc6IGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZ1RhcmdldEdyb3Vwc0NvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdCEudGFyZ2V0R3JvdXBzQ29uZmlnKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhU3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llc0NhcGFjaXR5UmViYWxhbmNlIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3JlcGxhY2VtZW50X3N0cmF0ZWd5IEVjMlNwb3RGbGVldCNyZXBsYWNlbWVudF9zdHJhdGVneX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVwbGFjZW1lbnRTdHJhdGVneT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhU3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llc0NhcGFjaXR5UmViYWxhbmNlVG9UZXJyYWZvcm0oc3RydWN0PzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFTcG90TWFpbnRlbmFuY2VTdHJhdGVnaWVzQ2FwYWNpdHlSZWJhbGFuY2UpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZW1lbnRfc3RyYXRlZ3k6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVwbGFjZW1lbnRTdHJhdGVneSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YVNwb3RNYWludGVuYW5jZVN0cmF0ZWdpZXMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjY2FwYWNpdHlfcmViYWxhbmNlIEVjMlNwb3RGbGVldCNjYXBhY2l0eV9yZWJhbGFuY2V9XG4gICovXG4gIHJlYWRvbmx5IGNhcGFjaXR5UmViYWxhbmNlPzogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFTcG90TWFpbnRlbmFuY2VTdHJhdGVnaWVzQ2FwYWNpdHlSZWJhbGFuY2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YVNwb3RNYWludGVuYW5jZVN0cmF0ZWdpZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YVNwb3RNYWludGVuYW5jZVN0cmF0ZWdpZXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgY2FwYWNpdHlfcmViYWxhbmNlOiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YVNwb3RNYWludGVuYW5jZVN0cmF0ZWdpZXNDYXBhY2l0eVJlYmFsYW5jZVRvVGVycmFmb3JtKHN0cnVjdCEuY2FwYWNpdHlSZWJhbGFuY2UpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGEge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjYWxsb2NhdGlvbl9zdHJhdGVneSBFYzJTcG90RmxlZXQjYWxsb2NhdGlvbl9zdHJhdGVneX1cbiAgKi9cbiAgcmVhZG9ubHkgYWxsb2NhdGlvblN0cmF0ZWd5Pzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjY29udGV4dCBFYzJTcG90RmxlZXQjY29udGV4dH1cbiAgKi9cbiAgcmVhZG9ubHkgY29udGV4dD86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI2V4Y2Vzc19jYXBhY2l0eV90ZXJtaW5hdGlvbl9wb2xpY3kgRWMyU3BvdEZsZWV0I2V4Y2Vzc19jYXBhY2l0eV90ZXJtaW5hdGlvbl9wb2xpY3l9XG4gICovXG4gIHJlYWRvbmx5IGV4Y2Vzc0NhcGFjaXR5VGVybWluYXRpb25Qb2xpY3k/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNpYW1fZmxlZXRfcm9sZSBFYzJTcG90RmxlZXQjaWFtX2ZsZWV0X3JvbGV9XG4gICovXG4gIHJlYWRvbmx5IGlhbUZsZWV0Um9sZTogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjaW5zdGFuY2VfaW50ZXJydXB0aW9uX2JlaGF2aW9yIEVjMlNwb3RGbGVldCNpbnN0YW5jZV9pbnRlcnJ1cHRpb25fYmVoYXZpb3J9XG4gICovXG4gIHJlYWRvbmx5IGluc3RhbmNlSW50ZXJydXB0aW9uQmVoYXZpb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNpbnN0YW5jZV9wb29sc190b191c2VfY291bnQgRWMyU3BvdEZsZWV0I2luc3RhbmNlX3Bvb2xzX3RvX3VzZV9jb3VudH1cbiAgKi9cbiAgcmVhZG9ubHkgaW5zdGFuY2VQb29sc1RvVXNlQ291bnQ/OiBudW1iZXI7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNsYXVuY2hfc3BlY2lmaWNhdGlvbnMgRWMyU3BvdEZsZWV0I2xhdW5jaF9zcGVjaWZpY2F0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgbGF1bmNoU3BlY2lmaWNhdGlvbnM/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YUxhdW5jaFNwZWNpZmljYXRpb25zW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNsYXVuY2hfdGVtcGxhdGVfY29uZmlncyBFYzJTcG90RmxlZXQjbGF1bmNoX3RlbXBsYXRlX2NvbmZpZ3N9XG4gICovXG4gIHJlYWRvbmx5IGxhdW5jaFRlbXBsYXRlQ29uZmlncz86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoVGVtcGxhdGVDb25maWdzW107XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNsb2FkX2JhbGFuY2Vyc19jb25maWcgRWMyU3BvdEZsZWV0I2xvYWRfYmFsYW5jZXJzX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgbG9hZEJhbGFuY2Vyc0NvbmZpZz86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTG9hZEJhbGFuY2Vyc0NvbmZpZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI29uX2RlbWFuZF9hbGxvY2F0aW9uX3N0cmF0ZWd5IEVjMlNwb3RGbGVldCNvbl9kZW1hbmRfYWxsb2NhdGlvbl9zdHJhdGVneX1cbiAgKi9cbiAgcmVhZG9ubHkgb25EZW1hbmRBbGxvY2F0aW9uU3RyYXRlZ3k/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNvbl9kZW1hbmRfbWF4X3RvdGFsX3ByaWNlIEVjMlNwb3RGbGVldCNvbl9kZW1hbmRfbWF4X3RvdGFsX3ByaWNlfVxuICAqL1xuICByZWFkb25seSBvbkRlbWFuZE1heFRvdGFsUHJpY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNvbl9kZW1hbmRfdGFyZ2V0X2NhcGFjaXR5IEVjMlNwb3RGbGVldCNvbl9kZW1hbmRfdGFyZ2V0X2NhcGFjaXR5fVxuICAqL1xuICByZWFkb25seSBvbkRlbWFuZFRhcmdldENhcGFjaXR5PzogbnVtYmVyO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjcmVwbGFjZV91bmhlYWx0aHlfaW5zdGFuY2VzIEVjMlNwb3RGbGVldCNyZXBsYWNlX3VuaGVhbHRoeV9pbnN0YW5jZXN9XG4gICovXG4gIHJlYWRvbmx5IHJlcGxhY2VVbmhlYWx0aHlJbnN0YW5jZXM/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzcG90X21haW50ZW5hbmNlX3N0cmF0ZWdpZXMgRWMyU3BvdEZsZWV0I3Nwb3RfbWFpbnRlbmFuY2Vfc3RyYXRlZ2llc31cbiAgKi9cbiAgcmVhZG9ubHkgc3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llcz86IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhU3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llcztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3Nwb3RfbWF4X3RvdGFsX3ByaWNlIEVjMlNwb3RGbGVldCNzcG90X21heF90b3RhbF9wcmljZX1cbiAgKi9cbiAgcmVhZG9ubHkgc3BvdE1heFRvdGFsUHJpY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCNzcG90X3ByaWNlIEVjMlNwb3RGbGVldCNzcG90X3ByaWNlfVxuICAqL1xuICByZWFkb25seSBzcG90UHJpY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN0YXJnZXRfY2FwYWNpdHkgRWMyU3BvdEZsZWV0I3RhcmdldF9jYXBhY2l0eX1cbiAgKi9cbiAgcmVhZG9ubHkgdGFyZ2V0Q2FwYWNpdHk6IG51bWJlcjtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sI3Rlcm1pbmF0ZV9pbnN0YW5jZXNfd2l0aF9leHBpcmF0aW9uIEVjMlNwb3RGbGVldCN0ZXJtaW5hdGVfaW5zdGFuY2VzX3dpdGhfZXhwaXJhdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgdGVybWluYXRlSW5zdGFuY2VzV2l0aEV4cGlyYXRpb24/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvZWMyX3Nwb3RfZmxlZXQuaHRtbCN0eXBlIEVjMlNwb3RGbGVldCN0eXBlfVxuICAqL1xuICByZWFkb25seSB0eXBlPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdmFsaWRfZnJvbSBFYzJTcG90RmxlZXQjdmFsaWRfZnJvbX1cbiAgKi9cbiAgcmVhZG9ubHkgdmFsaWRGcm9tPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2VjMl9zcG90X2ZsZWV0Lmh0bWwjdmFsaWRfdW50aWwgRWMyU3BvdEZsZWV0I3ZhbGlkX3VudGlsfVxuICAqL1xuICByZWFkb25seSB2YWxpZFVudGlsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBFYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhbGxvY2F0aW9uX3N0cmF0ZWd5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFsbG9jYXRpb25TdHJhdGVneSksXG4gICAgY29udGV4dDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jb250ZXh0KSxcbiAgICBleGNlc3NfY2FwYWNpdHlfdGVybWluYXRpb25fcG9saWN5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmV4Y2Vzc0NhcGFjaXR5VGVybWluYXRpb25Qb2xpY3kpLFxuICAgIGlhbV9mbGVldF9yb2xlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmlhbUZsZWV0Um9sZSksXG4gICAgaW5zdGFuY2VfaW50ZXJydXB0aW9uX2JlaGF2aW9yOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmluc3RhbmNlSW50ZXJydXB0aW9uQmVoYXZpb3IpLFxuICAgIGluc3RhbmNlX3Bvb2xzX3RvX3VzZV9jb3VudDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVBvb2xzVG9Vc2VDb3VudCksXG4gICAgbGF1bmNoX3NwZWNpZmljYXRpb25zOiBjZGt0Zi5saXN0TWFwcGVyKGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhTGF1bmNoU3BlY2lmaWNhdGlvbnNUb1RlcnJhZm9ybSkoc3RydWN0IS5sYXVuY2hTcGVjaWZpY2F0aW9ucyksXG4gICAgbGF1bmNoX3RlbXBsYXRlX2NvbmZpZ3M6IGNka3RmLmxpc3RNYXBwZXIoZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMYXVuY2hUZW1wbGF0ZUNvbmZpZ3NUb1RlcnJhZm9ybSkoc3RydWN0IS5sYXVuY2hUZW1wbGF0ZUNvbmZpZ3MpLFxuICAgIGxvYWRfYmFsYW5jZXJzX2NvbmZpZzogZWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFMb2FkQmFsYW5jZXJzQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0IS5sb2FkQmFsYW5jZXJzQ29uZmlnKSxcbiAgICBvbl9kZW1hbmRfYWxsb2NhdGlvbl9zdHJhdGVneTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5vbkRlbWFuZEFsbG9jYXRpb25TdHJhdGVneSksXG4gICAgb25fZGVtYW5kX21heF90b3RhbF9wcmljZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5vbkRlbWFuZE1heFRvdGFsUHJpY2UpLFxuICAgIG9uX2RlbWFuZF90YXJnZXRfY2FwYWNpdHk6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEub25EZW1hbmRUYXJnZXRDYXBhY2l0eSksXG4gICAgcmVwbGFjZV91bmhlYWx0aHlfaW5zdGFuY2VzOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5yZXBsYWNlVW5oZWFsdGh5SW5zdGFuY2VzKSxcbiAgICBzcG90X21haW50ZW5hbmNlX3N0cmF0ZWdpZXM6IGVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhU3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llc1RvVGVycmFmb3JtKHN0cnVjdCEuc3BvdE1haW50ZW5hbmNlU3RyYXRlZ2llcyksXG4gICAgc3BvdF9tYXhfdG90YWxfcHJpY2U6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3BvdE1heFRvdGFsUHJpY2UpLFxuICAgIHNwb3RfcHJpY2U6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3BvdFByaWNlKSxcbiAgICB0YXJnZXRfY2FwYWNpdHk6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEudGFyZ2V0Q2FwYWNpdHkpLFxuICAgIHRlcm1pbmF0ZV9pbnN0YW5jZXNfd2l0aF9leHBpcmF0aW9uOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS50ZXJtaW5hdGVJbnN0YW5jZXNXaXRoRXhwaXJhdGlvbiksXG4gICAgdHlwZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS50eXBlKSxcbiAgICB2YWxpZF9mcm9tOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnZhbGlkRnJvbSksXG4gICAgdmFsaWRfdW50aWw6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudmFsaWRVbnRpbCksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sIGF3c2NjX2VjMl9zcG90X2ZsZWV0fVxuKi9cbmV4cG9ydCBjbGFzcyBFYzJTcG90RmxlZXQgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19lYzJfc3BvdF9mbGVldFwiO1xuXG4gIC8vID09PT09PT09PT09XG4gIC8vIElOSVRJQUxJWkVSXG4gIC8vID09PT09PT09PT09XG5cbiAgLyoqXG4gICogQ3JlYXRlIGEgbmV3IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9lYzJfc3BvdF9mbGVldC5odG1sIGF3c2NjX2VjMl9zcG90X2ZsZWV0fSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBFYzJTcG90RmxlZXRDb25maWdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogRWMyU3BvdEZsZWV0Q29uZmlnKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICB0ZXJyYWZvcm1SZXNvdXJjZVR5cGU6ICdhd3NjY19lYzJfc3BvdF9mbGVldCcsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX3Nwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhID0gY29uZmlnLnNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhO1xuICB9XG5cbiAgLy8gPT09PT09PT09PVxuICAvLyBBVFRSSUJVVEVTXG4gIC8vID09PT09PT09PT1cblxuICAvLyBpZCAtIGNvbXB1dGVkOiB0cnVlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiBmYWxzZVxuICBwdWJsaWMgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaWQnKTtcbiAgfVxuXG4gIC8vIHNwb3RfZmxlZXRfcmVxdWVzdF9jb25maWdfZGF0YSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9zcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YTogRWMyU3BvdEZsZWV0U3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGE7XG4gIHB1YmxpYyBnZXQgc3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnc3BvdF9mbGVldF9yZXF1ZXN0X2NvbmZpZ19kYXRhJykgYXMgYW55O1xuICB9XG4gIHB1YmxpYyBzZXQgc3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGEodmFsdWU6IEVjMlNwb3RGbGVldFNwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhKSB7XG4gICAgdGhpcy5fc3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGEgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgc3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3BvdEZsZWV0UmVxdWVzdENvbmZpZ0RhdGFcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3BvdF9mbGVldF9yZXF1ZXN0X2NvbmZpZ19kYXRhOiBlYzJTcG90RmxlZXRTcG90RmxlZXRSZXF1ZXN0Q29uZmlnRGF0YVRvVGVycmFmb3JtKHRoaXMuX3Nwb3RGbGVldFJlcXVlc3RDb25maWdEYXRhKSxcbiAgICB9O1xuICB9XG59XG4iXX0=