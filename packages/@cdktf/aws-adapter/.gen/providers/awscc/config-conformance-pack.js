"use strict";
// https://www.terraform.io/docs/providers/awscc/r/config_conformance_pack.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigConformancePack = exports.configConformancePackConformancePackInputParametersToTerraform = void 0;
const cdktf = require("cdktf");
function configConformancePackConformancePackInputParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.configConformancePackConformancePackInputParametersToTerraform = configConformancePackConformancePackInputParametersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/config_conformance_pack.html awscc_config_conformance_pack}
*/
class ConfigConformancePack extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/config_conformance_pack.html awscc_config_conformance_pack} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigConformancePackConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_config_conformance_pack',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._conformancePackInputParameters = config.conformancePackInputParameters;
        this._conformancePackName = config.conformancePackName;
        this._deliveryS3Bucket = config.deliveryS3Bucket;
        this._deliveryS3KeyPrefix = config.deliveryS3KeyPrefix;
        this._templateBody = config.templateBody;
        this._templateS3Uri = config.templateS3Uri;
    }
    get conformancePackInputParameters() {
        return this.interpolationForAttribute('conformance_pack_input_parameters');
    }
    set conformancePackInputParameters(value) {
        this._conformancePackInputParameters = value;
    }
    resetConformancePackInputParameters() {
        this._conformancePackInputParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conformancePackInputParametersInput() {
        return this._conformancePackInputParameters;
    }
    get conformancePackName() {
        return this.getStringAttribute('conformance_pack_name');
    }
    set conformancePackName(value) {
        this._conformancePackName = value;
    }
    // Temporarily expose input value. Use with caution.
    get conformancePackNameInput() {
        return this._conformancePackName;
    }
    get deliveryS3Bucket() {
        return this.getStringAttribute('delivery_s3_bucket');
    }
    set deliveryS3Bucket(value) {
        this._deliveryS3Bucket = value;
    }
    resetDeliveryS3Bucket() {
        this._deliveryS3Bucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryS3BucketInput() {
        return this._deliveryS3Bucket;
    }
    get deliveryS3KeyPrefix() {
        return this.getStringAttribute('delivery_s3_key_prefix');
    }
    set deliveryS3KeyPrefix(value) {
        this._deliveryS3KeyPrefix = value;
    }
    resetDeliveryS3KeyPrefix() {
        this._deliveryS3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryS3KeyPrefixInput() {
        return this._deliveryS3KeyPrefix;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get templateBody() {
        return this.getStringAttribute('template_body');
    }
    set templateBody(value) {
        this._templateBody = value;
    }
    resetTemplateBody() {
        this._templateBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateBodyInput() {
        return this._templateBody;
    }
    get templateS3Uri() {
        return this.getStringAttribute('template_s3_uri');
    }
    set templateS3Uri(value) {
        this._templateS3Uri = value;
    }
    resetTemplateS3Uri() {
        this._templateS3Uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateS3UriInput() {
        return this._templateS3Uri;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            conformance_pack_input_parameters: cdktf.listMapper(configConformancePackConformancePackInputParametersToTerraform)(this._conformancePackInputParameters),
            conformance_pack_name: cdktf.stringToTerraform(this._conformancePackName),
            delivery_s3_bucket: cdktf.stringToTerraform(this._deliveryS3Bucket),
            delivery_s3_key_prefix: cdktf.stringToTerraform(this._deliveryS3KeyPrefix),
            template_body: cdktf.stringToTerraform(this._templateBody),
            template_s3_uri: cdktf.stringToTerraform(this._templateS3Uri),
        };
    }
}
exports.ConfigConformancePack = ConfigConformancePack;
// =================
// STATIC PROPERTIES
// =================
ConfigConformancePack.tfResourceType = "awscc_config_conformance_pack";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLWNvbmZvcm1hbmNlLXBhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25maWctY29uZm9ybWFuY2UtcGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0VBQStFO0FBQy9FLDJDQUEyQzs7O0FBRzNDLCtCQUErQjtBQXlEL0IsU0FBZ0IsOERBQThELENBQUMsTUFBNEQ7SUFDekksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxjQUFjLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxhQUFhLENBQUM7UUFDOUQsZUFBZSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsY0FBYyxDQUFDO0tBQ2pFLENBQUE7QUFDSCxDQUFDO0FBTkQsd0lBTUM7QUFHRDs7RUFFRTtBQUNGLE1BQWEscUJBQXNCLFNBQVEsS0FBSyxDQUFDLGlCQUFpQjtJQU9oRSxjQUFjO0lBQ2QsY0FBYztJQUNkLGNBQWM7SUFFZDs7Ozs7O01BTUU7SUFDRixZQUFtQixLQUFnQixFQUFFLEVBQVUsRUFBRSxNQUFtQztRQUNsRixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLHFCQUFxQixFQUFFLCtCQUErQjtZQUN0RCwwQkFBMEIsRUFBRTtnQkFDMUIsWUFBWSxFQUFFLE9BQU87YUFDdEI7WUFDRCxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7WUFDekIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1lBQzNCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLCtCQUErQixHQUFHLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztRQUM3RSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFD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RyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUNNLGtCQUFrQjtRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztJQUNsQyxDQUFDO0lBQ0Qsb0RBQW9EO0lBQ3BELElBQVcsa0JBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBRUYsb0JBQW9CO1FBQzVCLE9BQU87WUFDTCxpQ0FBaUMsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLDhEQUE4RCxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO1lBQ3pKLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7WUFDekUsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztZQUNuRSxzQkFBc0IsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1lBQzFFLGFBQWEsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUMxRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7U0FDOUQsQ0FBQztJQUNKLENBQUM7O0FBeEpILHNEQXlKQztBQXZKQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNHLG9DQUFjLEdBQVcsK0JBQStCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sXG4vLyBnZW5lcmF0ZWQgZnJvbSB0ZXJyYWZvcm0gcmVzb3VyY2Ugc2NoZW1hXG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY2RrdGYgZnJvbSAnY2RrdGYnO1xuXG4vLyBDb25maWd1cmF0aW9uXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZmlnIGV4dGVuZHMgY2RrdGYuVGVycmFmb3JtTWV0YUFyZ3VtZW50cyB7XG4gIC8qKlxuICAqIEEgbGlzdCBvZiBDb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlciBvYmplY3RzLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvY29uZmlnX2NvbmZvcm1hbmNlX3BhY2suaHRtbCNjb25mb3JtYW5jZV9wYWNrX2lucHV0X3BhcmFtZXRlcnMgQ29uZmlnQ29uZm9ybWFuY2VQYWNrI2NvbmZvcm1hbmNlX3BhY2tfaW5wdXRfcGFyYW1ldGVyc31cbiAgKi9cbiAgcmVhZG9ubHkgY29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzPzogQ29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzW107XG4gIC8qKlxuICAqIE5hbWUgb2YgdGhlIGNvbmZvcm1hbmNlIHBhY2sgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCBhcyB0aGUgdW5pcXVlIGlkZW50aWZpZXIuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI2NvbmZvcm1hbmNlX3BhY2tfbmFtZSBDb25maWdDb25mb3JtYW5jZVBhY2sjY29uZm9ybWFuY2VfcGFja19uYW1lfVxuICAqL1xuICByZWFkb25seSBjb25mb3JtYW5jZVBhY2tOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAqIEFXUyBDb25maWcgc3RvcmVzIGludGVybWVkaWF0ZSBmaWxlcyB3aGlsZSBwcm9jZXNzaW5nIGNvbmZvcm1hbmNlIHBhY2sgdGVtcGxhdGUuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI2RlbGl2ZXJ5X3MzX2J1Y2tldCBDb25maWdDb25mb3JtYW5jZVBhY2sjZGVsaXZlcnlfczNfYnVja2V0fVxuICAqL1xuICByZWFkb25seSBkZWxpdmVyeVMzQnVja2V0Pzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgcHJlZml4IGZvciBkZWxpdmVyeSBTMyBidWNrZXQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI2RlbGl2ZXJ5X3MzX2tleV9wcmVmaXggQ29uZmlnQ29uZm9ybWFuY2VQYWNrI2RlbGl2ZXJ5X3MzX2tleV9wcmVmaXh9XG4gICovXG4gIHJlYWRvbmx5IGRlbGl2ZXJ5UzNLZXlQcmVmaXg/OiBzdHJpbmc7XG4gIC8qKlxuICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgZnVsbCBjb25mb3JtYW5jZSBwYWNrIHRlbXBsYXRlIGJvZHkuIFlvdSBjYW4gb25seSBzcGVjaWZ5IG9uZSBvZiB0aGUgdGVtcGxhdGUgYm9keSBvciB0ZW1wbGF0ZSBTM1VyaSBmaWVsZHMuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI3RlbXBsYXRlX2JvZHkgQ29uZmlnQ29uZm9ybWFuY2VQYWNrI3RlbXBsYXRlX2JvZHl9XG4gICovXG4gIHJlYWRvbmx5IHRlbXBsYXRlQm9keT86IHN0cmluZztcbiAgLyoqXG4gICogTG9jYXRpb24gb2YgZmlsZSBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBib2R5IHdoaWNoIHBvaW50cyB0byB0aGUgY29uZm9ybWFuY2UgcGFjayB0ZW1wbGF0ZSB0aGF0IGlzIGxvY2F0ZWQgaW4gYW4gQW1hem9uIFMzIGJ1Y2tldC4gWW91IGNhbiBvbmx5IHNwZWNpZnkgb25lIG9mIHRoZSB0ZW1wbGF0ZSBib2R5IG9yIHRlbXBsYXRlIFMzVXJpIGZpZWxkcy5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2NvbmZpZ19jb25mb3JtYW5jZV9wYWNrLmh0bWwjdGVtcGxhdGVfczNfdXJpIENvbmZpZ0NvbmZvcm1hbmNlUGFjayN0ZW1wbGF0ZV9zM191cml9XG4gICovXG4gIHJlYWRvbmx5IHRlbXBsYXRlUzNVcmk/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ0NvbmZvcm1hbmNlUGFja0NvbmZvcm1hbmNlUGFja0lucHV0UGFyYW1ldGVycyB7XG4gIC8qKlxuICAqIEtleSBwYXJ0IG9mIGtleS12YWx1ZSBwYWlyIHdpdGggdmFsdWUgYmVpbmcgcGFyYW1ldGVyIHZhbHVlXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI3BhcmFtZXRlcl9uYW1lIENvbmZpZ0NvbmZvcm1hbmNlUGFjayNwYXJhbWV0ZXJfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgcGFyYW1ldGVyTmFtZTogc3RyaW5nO1xuICAvKipcbiAgKiBWYWx1ZSBwYXJ0IG9mIGtleS12YWx1ZSBwYWlyIHdpdGgga2V5IGJlaW5nIHBhcmFtZXRlciBOYW1lXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sI3BhcmFtZXRlcl92YWx1ZSBDb25maWdDb25mb3JtYW5jZVBhY2sjcGFyYW1ldGVyX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBwYXJhbWV0ZXJWYWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzVG9UZXJyYWZvcm0oc3RydWN0PzogQ29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIHBhcmFtZXRlcl9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBhcmFtZXRlck5hbWUpLFxuICAgIHBhcmFtZXRlcl92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5wYXJhbWV0ZXJWYWx1ZSksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sIGF3c2NjX2NvbmZpZ19jb25mb3JtYW5jZV9wYWNrfVxuKi9cbmV4cG9ydCBjbGFzcyBDb25maWdDb25mb3JtYW5jZVBhY2sgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19jb25maWdfY29uZm9ybWFuY2VfcGFja1wiO1xuXG4gIC8vID09PT09PT09PT09XG4gIC8vIElOSVRJQUxJWkVSXG4gIC8vID09PT09PT09PT09XG5cbiAgLyoqXG4gICogQ3JlYXRlIGEgbmV3IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9jb25maWdfY29uZm9ybWFuY2VfcGFjay5odG1sIGF3c2NjX2NvbmZpZ19jb25mb3JtYW5jZV9wYWNrfSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWdDb25mb3JtYW5jZVBhY2tDb25maWdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogQ29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZmlnKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICB0ZXJyYWZvcm1SZXNvdXJjZVR5cGU6ICdhd3NjY19jb25maWdfY29uZm9ybWFuY2VfcGFjaycsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2NvbmZvcm1hbmNlUGFja0lucHV0UGFyYW1ldGVycyA9IGNvbmZpZy5jb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnM7XG4gICAgdGhpcy5fY29uZm9ybWFuY2VQYWNrTmFtZSA9IGNvbmZpZy5jb25mb3JtYW5jZVBhY2tOYW1lO1xuICAgIHRoaXMuX2RlbGl2ZXJ5UzNCdWNrZXQgPSBjb25maWcuZGVsaXZlcnlTM0J1Y2tldDtcbiAgICB0aGlzLl9kZWxpdmVyeVMzS2V5UHJlZml4ID0gY29uZmlnLmRlbGl2ZXJ5UzNLZXlQcmVmaXg7XG4gICAgdGhpcy5fdGVtcGxhdGVCb2R5ID0gY29uZmlnLnRlbXBsYXRlQm9keTtcbiAgICB0aGlzLl90ZW1wbGF0ZVMzVXJpID0gY29uZmlnLnRlbXBsYXRlUzNVcmk7XG4gIH1cblxuICAvLyA9PT09PT09PT09XG4gIC8vIEFUVFJJQlVURVNcbiAgLy8gPT09PT09PT09PVxuXG4gIC8vIGNvbmZvcm1hbmNlX3BhY2tfaW5wdXRfcGFyYW1ldGVycyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnM/OiBDb25maWdDb25mb3JtYW5jZVBhY2tDb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnNbXTtcbiAgcHVibGljIGdldCBjb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSgnY29uZm9ybWFuY2VfcGFja19pbnB1dF9wYXJhbWV0ZXJzJykgYXMgYW55O1xuICB9XG4gIHB1YmxpYyBzZXQgY29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzKHZhbHVlOiBDb25maWdDb25mb3JtYW5jZVBhY2tDb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnNbXSApIHtcbiAgICB0aGlzLl9jb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnMoKSB7XG4gICAgdGhpcy5fY29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb25mb3JtYW5jZVBhY2tJbnB1dFBhcmFtZXRlcnNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzXG4gIH1cblxuICAvLyBjb25mb3JtYW5jZV9wYWNrX25hbWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfY29uZm9ybWFuY2VQYWNrTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGNvbmZvcm1hbmNlUGFja05hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjb25mb3JtYW5jZV9wYWNrX25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNvbmZvcm1hbmNlUGFja05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbmZvcm1hbmNlUGFja05hbWUgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY29uZm9ybWFuY2VQYWNrTmFtZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25mb3JtYW5jZVBhY2tOYW1lXG4gIH1cblxuICAvLyBkZWxpdmVyeV9zM19idWNrZXQgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGVsaXZlcnlTM0J1Y2tldD86IHN0cmluZztcbiAgcHVibGljIGdldCBkZWxpdmVyeVMzQnVja2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGVsaXZlcnlfczNfYnVja2V0Jyk7XG4gIH1cbiAgcHVibGljIHNldCBkZWxpdmVyeVMzQnVja2V0KHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fZGVsaXZlcnlTM0J1Y2tldCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERlbGl2ZXJ5UzNCdWNrZXQoKSB7XG4gICAgdGhpcy5fZGVsaXZlcnlTM0J1Y2tldCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGVsaXZlcnlTM0J1Y2tldElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWxpdmVyeVMzQnVja2V0XG4gIH1cblxuICAvLyBkZWxpdmVyeV9zM19rZXlfcHJlZml4IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RlbGl2ZXJ5UzNLZXlQcmVmaXg/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgZGVsaXZlcnlTM0tleVByZWZpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2RlbGl2ZXJ5X3MzX2tleV9wcmVmaXgnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRlbGl2ZXJ5UzNLZXlQcmVmaXgodmFsdWU6IHN0cmluZyApIHtcbiAgICB0aGlzLl9kZWxpdmVyeVMzS2V5UHJlZml4ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RGVsaXZlcnlTM0tleVByZWZpeCgpIHtcbiAgICB0aGlzLl9kZWxpdmVyeVMzS2V5UHJlZml4ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkZWxpdmVyeVMzS2V5UHJlZml4SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGl2ZXJ5UzNLZXlQcmVmaXhcbiAgfVxuXG4gIC8vIGlkIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdpZCcpO1xuICB9XG5cbiAgLy8gdGVtcGxhdGVfYm9keSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90ZW1wbGF0ZUJvZHk/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgdGVtcGxhdGVCb2R5KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgndGVtcGxhdGVfYm9keScpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGVtcGxhdGVCb2R5KHZhbHVlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5fdGVtcGxhdGVCb2R5ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VGVtcGxhdGVCb2R5KCkge1xuICAgIHRoaXMuX3RlbXBsYXRlQm9keSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGVtcGxhdGVCb2R5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlQm9keVxuICB9XG5cbiAgLy8gdGVtcGxhdGVfczNfdXJpIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RlbXBsYXRlUzNVcmk/OiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgdGVtcGxhdGVTM1VyaSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3RlbXBsYXRlX3MzX3VyaScpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGVtcGxhdGVTM1VyaSh2YWx1ZTogc3RyaW5nICkge1xuICAgIHRoaXMuX3RlbXBsYXRlUzNVcmkgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUZW1wbGF0ZVMzVXJpKCkge1xuICAgIHRoaXMuX3RlbXBsYXRlUzNVcmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRlbXBsYXRlUzNVcmlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVTM1VyaVxuICB9XG5cbiAgLy8gPT09PT09PT09XG4gIC8vIFNZTlRIRVNJU1xuICAvLyA9PT09PT09PT1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB7XG4gICAgICBjb25mb3JtYW5jZV9wYWNrX2lucHV0X3BhcmFtZXRlcnM6IGNka3RmLmxpc3RNYXBwZXIoY29uZmlnQ29uZm9ybWFuY2VQYWNrQ29uZm9ybWFuY2VQYWNrSW5wdXRQYXJhbWV0ZXJzVG9UZXJyYWZvcm0pKHRoaXMuX2NvbmZvcm1hbmNlUGFja0lucHV0UGFyYW1ldGVycyksXG4gICAgICBjb25mb3JtYW5jZV9wYWNrX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX2NvbmZvcm1hbmNlUGFja05hbWUpLFxuICAgICAgZGVsaXZlcnlfczNfYnVja2V0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9kZWxpdmVyeVMzQnVja2V0KSxcbiAgICAgIGRlbGl2ZXJ5X3MzX2tleV9wcmVmaXg6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX2RlbGl2ZXJ5UzNLZXlQcmVmaXgpLFxuICAgICAgdGVtcGxhdGVfYm9keTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fdGVtcGxhdGVCb2R5KSxcbiAgICAgIHRlbXBsYXRlX3MzX3VyaTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fdGVtcGxhdGVTM1VyaSksXG4gICAgfTtcbiAgfVxufVxuIl19