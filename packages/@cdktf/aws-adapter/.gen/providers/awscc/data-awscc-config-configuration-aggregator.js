"use strict";
// https://www.terraform.io/docs/providers/awscc/d/config_configuration_aggregator.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccConfigConfigurationAggregator = exports.dataAwsccConfigConfigurationAggregatorTagsToTerraform = exports.DataAwsccConfigConfigurationAggregatorTags = exports.dataAwsccConfigConfigurationAggregatorOrganizationAggregationSourceToTerraform = exports.DataAwsccConfigConfigurationAggregatorOrganizationAggregationSource = exports.dataAwsccConfigConfigurationAggregatorAccountAggregationSourcesToTerraform = exports.DataAwsccConfigConfigurationAggregatorAccountAggregationSources = void 0;
const cdktf = require("cdktf");
class DataAwsccConfigConfigurationAggregatorAccountAggregationSources extends cdktf.ComplexComputedList {
    // account_ids - computed: true, optional: false, required: false
    get accountIds() {
        return this.getListAttribute('account_ids');
    }
    // all_aws_regions - computed: true, optional: false, required: false
    get allAwsRegions() {
        return this.getBooleanAttribute('all_aws_regions');
    }
    // aws_regions - computed: true, optional: false, required: false
    get awsRegions() {
        return this.getListAttribute('aws_regions');
    }
}
exports.DataAwsccConfigConfigurationAggregatorAccountAggregationSources = DataAwsccConfigConfigurationAggregatorAccountAggregationSources;
function dataAwsccConfigConfigurationAggregatorAccountAggregationSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.accountIds),
        all_aws_regions: cdktf.booleanToTerraform(struct.allAwsRegions),
        aws_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.awsRegions),
    };
}
exports.dataAwsccConfigConfigurationAggregatorAccountAggregationSourcesToTerraform = dataAwsccConfigConfigurationAggregatorAccountAggregationSourcesToTerraform;
class DataAwsccConfigConfigurationAggregatorOrganizationAggregationSource extends cdktf.ComplexComputedList {
    // all_aws_regions - computed: true, optional: false, required: false
    get allAwsRegions() {
        return this.getBooleanAttribute('all_aws_regions');
    }
    // aws_regions - computed: true, optional: false, required: false
    get awsRegions() {
        return this.getListAttribute('aws_regions');
    }
    // role_arn - computed: true, optional: false, required: false
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
}
exports.DataAwsccConfigConfigurationAggregatorOrganizationAggregationSource = DataAwsccConfigConfigurationAggregatorOrganizationAggregationSource;
function dataAwsccConfigConfigurationAggregatorOrganizationAggregationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        all_aws_regions: cdktf.booleanToTerraform(struct.allAwsRegions),
        aws_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.awsRegions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.dataAwsccConfigConfigurationAggregatorOrganizationAggregationSourceToTerraform = dataAwsccConfigConfigurationAggregatorOrganizationAggregationSourceToTerraform;
class DataAwsccConfigConfigurationAggregatorTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccConfigConfigurationAggregatorTags = DataAwsccConfigConfigurationAggregatorTags;
function dataAwsccConfigConfigurationAggregatorTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccConfigConfigurationAggregatorTagsToTerraform = dataAwsccConfigConfigurationAggregatorTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/config_configuration_aggregator.html awscc_config_configuration_aggregator}
*/
class DataAwsccConfigConfigurationAggregator extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/config_configuration_aggregator.html awscc_config_configuration_aggregator} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccConfigConfigurationAggregatorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_config_configuration_aggregator',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // account_aggregation_sources - computed: true, optional: false, required: false
    get accountAggregationSources() {
        return this.interpolationForAttribute('account_aggregation_sources');
    }
    // configuration_aggregator_arn - computed: true, optional: false, required: false
    get configurationAggregatorArn() {
        return this.getStringAttribute('configuration_aggregator_arn');
    }
    // configuration_aggregator_name - computed: true, optional: false, required: false
    get configurationAggregatorName() {
        return this.getStringAttribute('configuration_aggregator_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // organization_aggregation_source - computed: true, optional: false, required: false
    get organizationAggregationSource() {
        return this.interpolationForAttribute('organization_aggregation_source');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccConfigConfigurationAggregator = DataAwsccConfigConfigurationAggregator;
// =================
// STATIC PROPERTIES
// =================
DataAwsccConfigConfigurationAggregator.tfResourceType = "awscc_config_configuration_aggregator";
//# sourceMappingURL=data:application/json;base64,