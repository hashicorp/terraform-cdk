"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_multicast_domain.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2TransitGatewayMulticastDomain = exports.ec2TransitGatewayMulticastDomainTagsToTerraform = exports.ec2TransitGatewayMulticastDomainOptionsToTerraform = void 0;
const cdktf = require("cdktf");
function ec2TransitGatewayMulticastDomainOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auto_accept_shared_associations: cdktf.stringToTerraform(struct.autoAcceptSharedAssociations),
        igmpv_2_support: cdktf.stringToTerraform(struct.igmpv2Support),
        static_sources_support: cdktf.stringToTerraform(struct.staticSourcesSupport),
    };
}
exports.ec2TransitGatewayMulticastDomainOptionsToTerraform = ec2TransitGatewayMulticastDomainOptionsToTerraform;
function ec2TransitGatewayMulticastDomainTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2TransitGatewayMulticastDomainTagsToTerraform = ec2TransitGatewayMulticastDomainTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_multicast_domain.html awscc_ec2_transit_gateway_multicast_domain}
*/
class Ec2TransitGatewayMulticastDomain extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_multicast_domain.html awscc_ec2_transit_gateway_multicast_domain} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2TransitGatewayMulticastDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_transit_gateway_multicast_domain',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._options = config.options;
        this._tags = config.tags;
        this._transitGatewayId = config.transitGatewayId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get options() {
        return this.interpolationForAttribute('options');
    }
    set options(value) {
        this._options = value;
    }
    resetOptions() {
        this._options = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionsInput() {
        return this._options;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get transitGatewayId() {
        return this.getStringAttribute('transit_gateway_id');
    }
    set transitGatewayId(value) {
        this._transitGatewayId = value;
    }
    // Temporarily expose input value. Use with caution.
    get transitGatewayIdInput() {
        return this._transitGatewayId;
    }
    // transit_gateway_multicast_domain_arn - computed: true, optional: false, required: false
    get transitGatewayMulticastDomainArn() {
        return this.getStringAttribute('transit_gateway_multicast_domain_arn');
    }
    // transit_gateway_multicast_domain_id - computed: true, optional: false, required: false
    get transitGatewayMulticastDomainId() {
        return this.getStringAttribute('transit_gateway_multicast_domain_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            options: ec2TransitGatewayMulticastDomainOptionsToTerraform(this._options),
            tags: cdktf.listMapper(ec2TransitGatewayMulticastDomainTagsToTerraform)(this._tags),
            transit_gateway_id: cdktf.stringToTerraform(this._transitGatewayId),
        };
    }
}
exports.Ec2TransitGatewayMulticastDomain = Ec2TransitGatewayMulticastDomain;
// =================
// STATIC PROPERTIES
// =================
Ec2TransitGatewayMulticastDomain.tfResourceType = "awscc_ec2_transit_gateway_multicast_domain";
//# sourceMappingURL=data:application/json;base64,