"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53resolver_firewall_rule_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53ResolverFirewallRuleGroup = exports.route53ResolverFirewallRuleGroupTagsToTerraform = exports.route53ResolverFirewallRuleGroupFirewallRulesToTerraform = void 0;
const cdktf = require("cdktf");
function route53ResolverFirewallRuleGroupFirewallRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        block_override_dns_type: cdktf.stringToTerraform(struct.blockOverrideDnsType),
        block_override_domain: cdktf.stringToTerraform(struct.blockOverrideDomain),
        block_override_ttl: cdktf.numberToTerraform(struct.blockOverrideTtl),
        block_response: cdktf.stringToTerraform(struct.blockResponse),
        firewall_domain_list_id: cdktf.stringToTerraform(struct.firewallDomainListId),
        priority: cdktf.numberToTerraform(struct.priority),
    };
}
exports.route53ResolverFirewallRuleGroupFirewallRulesToTerraform = route53ResolverFirewallRuleGroupFirewallRulesToTerraform;
function route53ResolverFirewallRuleGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.route53ResolverFirewallRuleGroupTagsToTerraform = route53ResolverFirewallRuleGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53resolver_firewall_rule_group.html awscc_route53resolver_firewall_rule_group}
*/
class Route53ResolverFirewallRuleGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53resolver_firewall_rule_group.html awscc_route53resolver_firewall_rule_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53ResolverFirewallRuleGroupConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53resolver_firewall_rule_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._firewallRules = config.firewallRules;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // creator_request_id - computed: true, optional: false, required: false
    get creatorRequestId() {
        return this.getStringAttribute('creator_request_id');
    }
    get firewallRules() {
        return this.interpolationForAttribute('firewall_rules');
    }
    set firewallRules(value) {
        this._firewallRules = value;
    }
    resetFirewallRules() {
        this._firewallRules = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firewallRulesInput() {
        return this._firewallRules;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // modification_time - computed: true, optional: false, required: false
    get modificationTime() {
        return this.getStringAttribute('modification_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    // rule_count - computed: true, optional: false, required: false
    get ruleCount() {
        return this.getNumberAttribute('rule_count');
    }
    // share_status - computed: true, optional: false, required: false
    get shareStatus() {
        return this.getStringAttribute('share_status');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // status_message - computed: true, optional: false, required: false
    get statusMessage() {
        return this.getStringAttribute('status_message');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            firewall_rules: cdktf.listMapper(route53ResolverFirewallRuleGroupFirewallRulesToTerraform)(this._firewallRules),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(route53ResolverFirewallRuleGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.Route53ResolverFirewallRuleGroup = Route53ResolverFirewallRuleGroup;
// =================
// STATIC PROPERTIES
// =================
Route53ResolverFirewallRuleGroup.tfResourceType = "awscc_route53resolver_firewall_rule_group";
//# sourceMappingURL=data:application/json;base64,