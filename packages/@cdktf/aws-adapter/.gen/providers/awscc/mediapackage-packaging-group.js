"use strict";
// https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_group.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediapackagePackagingGroup = exports.mediapackagePackagingGroupTagsToTerraform = exports.mediapackagePackagingGroupEgressAccessLogsToTerraform = exports.mediapackagePackagingGroupAuthorizationToTerraform = void 0;
const cdktf = require("cdktf");
function mediapackagePackagingGroupAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cdn_identifier_secret: cdktf.stringToTerraform(struct.cdnIdentifierSecret),
        secrets_role_arn: cdktf.stringToTerraform(struct.secretsRoleArn),
    };
}
exports.mediapackagePackagingGroupAuthorizationToTerraform = mediapackagePackagingGroupAuthorizationToTerraform;
function mediapackagePackagingGroupEgressAccessLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
    };
}
exports.mediapackagePackagingGroupEgressAccessLogsToTerraform = mediapackagePackagingGroupEgressAccessLogsToTerraform;
function mediapackagePackagingGroupTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.mediapackagePackagingGroupTagsToTerraform = mediapackagePackagingGroupTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_group.html awscc_mediapackage_packaging_group}
*/
class MediapackagePackagingGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/mediapackage_packaging_group.html awscc_mediapackage_packaging_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MediapackagePackagingGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_mediapackage_packaging_group',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authorization = config.authorization;
        this._egressAccessLogs = config.egressAccessLogs;
        this._id = config.id;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authorization() {
        return this.interpolationForAttribute('authorization');
    }
    set authorization(value) {
        this._authorization = value;
    }
    resetAuthorization() {
        this._authorization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationInput() {
        return this._authorization;
    }
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    get egressAccessLogs() {
        return this.interpolationForAttribute('egress_access_logs');
    }
    set egressAccessLogs(value) {
        this._egressAccessLogs = value;
    }
    resetEgressAccessLogs() {
        this._egressAccessLogs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressAccessLogsInput() {
        return this._egressAccessLogs;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorization: mediapackagePackagingGroupAuthorizationToTerraform(this._authorization),
            egress_access_logs: mediapackagePackagingGroupEgressAccessLogsToTerraform(this._egressAccessLogs),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.listMapper(mediapackagePackagingGroupTagsToTerraform)(this._tags),
        };
    }
}
exports.MediapackagePackagingGroup = MediapackagePackagingGroup;
// =================
// STATIC PROPERTIES
// =================
MediapackagePackagingGroup.tfResourceType = "awscc_mediapackage_packaging_group";
//# sourceMappingURL=data:application/json;base64,