"use strict";
// https://www.terraform.io/docs/providers/awscc/r/signer_signing_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerSigningProfile = exports.signerSigningProfileTagsToTerraform = exports.signerSigningProfileSignatureValidityPeriodToTerraform = void 0;
const cdktf = require("cdktf");
function signerSigningProfileSignatureValidityPeriodToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.signerSigningProfileSignatureValidityPeriodToTerraform = signerSigningProfileSignatureValidityPeriodToTerraform;
function signerSigningProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.signerSigningProfileTagsToTerraform = signerSigningProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/signer_signing_profile.html awscc_signer_signing_profile}
*/
class SignerSigningProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/signer_signing_profile.html awscc_signer_signing_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SignerSigningProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_signer_signing_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._platformId = config.platformId;
        this._signatureValidityPeriod = config.signatureValidityPeriod;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get platformId() {
        return this.getStringAttribute('platform_id');
    }
    set platformId(value) {
        this._platformId = value;
    }
    // Temporarily expose input value. Use with caution.
    get platformIdInput() {
        return this._platformId;
    }
    // profile_name - computed: true, optional: false, required: false
    get profileName() {
        return this.getStringAttribute('profile_name');
    }
    // profile_version - computed: true, optional: false, required: false
    get profileVersion() {
        return this.getStringAttribute('profile_version');
    }
    // profile_version_arn - computed: true, optional: false, required: false
    get profileVersionArn() {
        return this.getStringAttribute('profile_version_arn');
    }
    get signatureValidityPeriod() {
        return this.interpolationForAttribute('signature_validity_period');
    }
    set signatureValidityPeriod(value) {
        this._signatureValidityPeriod = value;
    }
    resetSignatureValidityPeriod() {
        this._signatureValidityPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signatureValidityPeriodInput() {
        return this._signatureValidityPeriod;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            platform_id: cdktf.stringToTerraform(this._platformId),
            signature_validity_period: signerSigningProfileSignatureValidityPeriodToTerraform(this._signatureValidityPeriod),
            tags: cdktf.listMapper(signerSigningProfileTagsToTerraform)(this._tags),
        };
    }
}
exports.SignerSigningProfile = SignerSigningProfile;
// =================
// STATIC PROPERTIES
// =================
SignerSigningProfile.tfResourceType = "awscc_signer_signing_profile";
//# sourceMappingURL=data:application/json;base64,