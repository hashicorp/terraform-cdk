"use strict";
// https://www.terraform.io/docs/providers/awscc/r/applicationinsights_application.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationinsightsApplication = exports.applicationinsightsApplicationTagsToTerraform = exports.applicationinsightsApplicationLogPatternSetsToTerraform = exports.applicationinsightsApplicationLogPatternSetsLogPatternsToTerraform = exports.applicationinsightsApplicationCustomComponentsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsWindowsEventsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsLogsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsWindowsEventsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsLogsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmsToTerraform = exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform = void 0;
const cdktf = require("cdktf");
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metric_name: cdktf.stringToTerraform(struct.alarmMetricName),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_name: cdktf.stringToTerraform(struct.alarmName),
        severity: cdktf.stringToTerraform(struct.severity),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host_port: cdktf.stringToTerraform(struct.hostPort),
        jmxurl: cdktf.stringToTerraform(struct.jmxurl),
        prometheus_port: cdktf.stringToTerraform(struct.prometheusPort),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_path: cdktf.stringToTerraform(struct.logPath),
        log_type: cdktf.stringToTerraform(struct.logType),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsLogsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsLogsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsWindowsEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_levels: cdktf.listMapper(cdktf.stringToTerraform)(struct.eventLevels),
        event_name: cdktf.stringToTerraform(struct.eventName),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsWindowsEventsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsWindowsEventsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metrics: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform)(struct.alarmMetrics),
        alarms: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsAlarmsToTerraform)(struct.alarms),
        jmx_prometheus_exporter: applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform(struct.jmxPrometheusExporter),
        logs: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsLogsToTerraform)(struct.logs),
        windows_events: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsWindowsEventsToTerraform)(struct.windowsEvents),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metric_name: cdktf.stringToTerraform(struct.alarmMetricName),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_path: cdktf.stringToTerraform(struct.logPath),
        log_type: cdktf.stringToTerraform(struct.logType),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_levels: cdktf.listMapper(cdktf.stringToTerraform)(struct.eventLevels),
        event_name: cdktf.stringToTerraform(struct.eventName),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metrics: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform)(struct.alarmMetrics),
        logs: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform)(struct.logs),
        windows_events: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform)(struct.windowsEvents),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sub_component_configuration_details: applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform(struct.subComponentConfigurationDetails),
        sub_component_type: cdktf.stringToTerraform(struct.subComponentType),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        configuration_details: applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationConfigurationDetailsToTerraform(struct.configurationDetails),
        sub_component_type_configurations: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationSubComponentTypeConfigurationsToTerraform)(struct.subComponentTypeConfigurations),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationToTerraform = applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metric_name: cdktf.stringToTerraform(struct.alarmMetricName),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_name: cdktf.stringToTerraform(struct.alarmName),
        severity: cdktf.stringToTerraform(struct.severity),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host_port: cdktf.stringToTerraform(struct.hostPort),
        jmxurl: cdktf.stringToTerraform(struct.jmxurl),
        prometheus_port: cdktf.stringToTerraform(struct.prometheusPort),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_path: cdktf.stringToTerraform(struct.logPath),
        log_type: cdktf.stringToTerraform(struct.logType),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsLogsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsLogsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsWindowsEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_levels: cdktf.listMapper(cdktf.stringToTerraform)(struct.eventLevels),
        event_name: cdktf.stringToTerraform(struct.eventName),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsWindowsEventsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsWindowsEventsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metrics: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmMetricsToTerraform)(struct.alarmMetrics),
        alarms: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsAlarmsToTerraform)(struct.alarms),
        jmx_prometheus_exporter: applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsJmxPrometheusExporterToTerraform(struct.jmxPrometheusExporter),
        logs: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsLogsToTerraform)(struct.logs),
        windows_events: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsWindowsEventsToTerraform)(struct.windowsEvents),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metric_name: cdktf.stringToTerraform(struct.alarmMetricName),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_path: cdktf.stringToTerraform(struct.logPath),
        log_type: cdktf.stringToTerraform(struct.logType),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        event_levels: cdktf.listMapper(cdktf.stringToTerraform)(struct.eventLevels),
        event_name: cdktf.stringToTerraform(struct.eventName),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        pattern_set: cdktf.stringToTerraform(struct.patternSet),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alarm_metrics: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsAlarmMetricsToTerraform)(struct.alarmMetrics),
        logs: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsLogsToTerraform)(struct.logs),
        windows_events: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsWindowsEventsToTerraform)(struct.windowsEvents),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sub_component_configuration_details: applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsSubComponentConfigurationDetailsToTerraform(struct.subComponentConfigurationDetails),
        sub_component_type: cdktf.stringToTerraform(struct.subComponentType),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        configuration_details: applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationConfigurationDetailsToTerraform(struct.configurationDetails),
        sub_component_type_configurations: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationSubComponentTypeConfigurationsToTerraform)(struct.subComponentTypeConfigurations),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationToTerraform = applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationToTerraform;
function applicationinsightsApplicationComponentMonitoringSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_arn: cdktf.stringToTerraform(struct.componentArn),
        component_configuration_mode: cdktf.stringToTerraform(struct.componentConfigurationMode),
        component_name: cdktf.stringToTerraform(struct.componentName),
        custom_component_configuration: applicationinsightsApplicationComponentMonitoringSettingsCustomComponentConfigurationToTerraform(struct.customComponentConfiguration),
        default_overwrite_component_configuration: applicationinsightsApplicationComponentMonitoringSettingsDefaultOverwriteComponentConfigurationToTerraform(struct.defaultOverwriteComponentConfiguration),
        tier: cdktf.stringToTerraform(struct.tier),
    };
}
exports.applicationinsightsApplicationComponentMonitoringSettingsToTerraform = applicationinsightsApplicationComponentMonitoringSettingsToTerraform;
function applicationinsightsApplicationCustomComponentsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_name: cdktf.stringToTerraform(struct.componentName),
        resource_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.resourceList),
    };
}
exports.applicationinsightsApplicationCustomComponentsToTerraform = applicationinsightsApplicationCustomComponentsToTerraform;
function applicationinsightsApplicationLogPatternSetsLogPatternsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        pattern: cdktf.stringToTerraform(struct.pattern),
        pattern_name: cdktf.stringToTerraform(struct.patternName),
        rank: cdktf.numberToTerraform(struct.rank),
    };
}
exports.applicationinsightsApplicationLogPatternSetsLogPatternsToTerraform = applicationinsightsApplicationLogPatternSetsLogPatternsToTerraform;
function applicationinsightsApplicationLogPatternSetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_patterns: cdktf.listMapper(applicationinsightsApplicationLogPatternSetsLogPatternsToTerraform)(struct.logPatterns),
        pattern_set_name: cdktf.stringToTerraform(struct.patternSetName),
    };
}
exports.applicationinsightsApplicationLogPatternSetsToTerraform = applicationinsightsApplicationLogPatternSetsToTerraform;
function applicationinsightsApplicationTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.applicationinsightsApplicationTagsToTerraform = applicationinsightsApplicationTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/applicationinsights_application.html awscc_applicationinsights_application}
*/
class ApplicationinsightsApplication extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/applicationinsights_application.html awscc_applicationinsights_application} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApplicationinsightsApplicationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_applicationinsights_application',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoConfigurationEnabled = config.autoConfigurationEnabled;
        this._componentMonitoringSettings = config.componentMonitoringSettings;
        this._customComponents = config.customComponents;
        this._cweMonitorEnabled = config.cweMonitorEnabled;
        this._logPatternSets = config.logPatternSets;
        this._opsCenterEnabled = config.opsCenterEnabled;
        this._opsItemSnsTopicArn = config.opsItemSnsTopicArn;
        this._resourceGroupName = config.resourceGroupName;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // application_arn - computed: true, optional: false, required: false
    get applicationArn() {
        return this.getStringAttribute('application_arn');
    }
    get autoConfigurationEnabled() {
        return this.getBooleanAttribute('auto_configuration_enabled');
    }
    set autoConfigurationEnabled(value) {
        this._autoConfigurationEnabled = value;
    }
    resetAutoConfigurationEnabled() {
        this._autoConfigurationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoConfigurationEnabledInput() {
        return this._autoConfigurationEnabled;
    }
    get componentMonitoringSettings() {
        return this.interpolationForAttribute('component_monitoring_settings');
    }
    set componentMonitoringSettings(value) {
        this._componentMonitoringSettings = value;
    }
    resetComponentMonitoringSettings() {
        this._componentMonitoringSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get componentMonitoringSettingsInput() {
        return this._componentMonitoringSettings;
    }
    get customComponents() {
        return this.interpolationForAttribute('custom_components');
    }
    set customComponents(value) {
        this._customComponents = value;
    }
    resetCustomComponents() {
        this._customComponents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customComponentsInput() {
        return this._customComponents;
    }
    get cweMonitorEnabled() {
        return this.getBooleanAttribute('cwe_monitor_enabled');
    }
    set cweMonitorEnabled(value) {
        this._cweMonitorEnabled = value;
    }
    resetCweMonitorEnabled() {
        this._cweMonitorEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cweMonitorEnabledInput() {
        return this._cweMonitorEnabled;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logPatternSets() {
        return this.interpolationForAttribute('log_pattern_sets');
    }
    set logPatternSets(value) {
        this._logPatternSets = value;
    }
    resetLogPatternSets() {
        this._logPatternSets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logPatternSetsInput() {
        return this._logPatternSets;
    }
    get opsCenterEnabled() {
        return this.getBooleanAttribute('ops_center_enabled');
    }
    set opsCenterEnabled(value) {
        this._opsCenterEnabled = value;
    }
    resetOpsCenterEnabled() {
        this._opsCenterEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get opsCenterEnabledInput() {
        return this._opsCenterEnabled;
    }
    get opsItemSnsTopicArn() {
        return this.getStringAttribute('ops_item_sns_topic_arn');
    }
    set opsItemSnsTopicArn(value) {
        this._opsItemSnsTopicArn = value;
    }
    resetOpsItemSnsTopicArn() {
        this._opsItemSnsTopicArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get opsItemSnsTopicArnInput() {
        return this._opsItemSnsTopicArn;
    }
    get resourceGroupName() {
        return this.getStringAttribute('resource_group_name');
    }
    set resourceGroupName(value) {
        this._resourceGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupNameInput() {
        return this._resourceGroupName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_configuration_enabled: cdktf.booleanToTerraform(this._autoConfigurationEnabled),
            component_monitoring_settings: cdktf.listMapper(applicationinsightsApplicationComponentMonitoringSettingsToTerraform)(this._componentMonitoringSettings),
            custom_components: cdktf.listMapper(applicationinsightsApplicationCustomComponentsToTerraform)(this._customComponents),
            cwe_monitor_enabled: cdktf.booleanToTerraform(this._cweMonitorEnabled),
            log_pattern_sets: cdktf.listMapper(applicationinsightsApplicationLogPatternSetsToTerraform)(this._logPatternSets),
            ops_center_enabled: cdktf.booleanToTerraform(this._opsCenterEnabled),
            ops_item_sns_topic_arn: cdktf.stringToTerraform(this._opsItemSnsTopicArn),
            resource_group_name: cdktf.stringToTerraform(this._resourceGroupName),
            tags: cdktf.listMapper(applicationinsightsApplicationTagsToTerraform)(this._tags),
        };
    }
}
exports.ApplicationinsightsApplication = ApplicationinsightsApplication;
// =================
// STATIC PROPERTIES
// =================
ApplicationinsightsApplication.tfResourceType = "awscc_applicationinsights_application";
//# sourceMappingURL=data:application/json;base64,