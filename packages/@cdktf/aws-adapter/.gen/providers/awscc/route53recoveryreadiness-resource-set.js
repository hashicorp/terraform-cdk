"use strict";
// https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_resource_set.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53RecoveryreadinessResourceSet = exports.route53RecoveryreadinessResourceSetTagsToTerraform = exports.route53RecoveryreadinessResourceSetResourcesToTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = void 0;
const cdktf = require("cdktf");
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        nlb_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct.nlbResource),
        r53_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct.r53Resource),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        hosted_zone_arn: cdktf.stringToTerraform(struct.hostedZoneArn),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
        record_type: cdktf.stringToTerraform(struct.recordType),
        target_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct.targetResource),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_id: cdktf.stringToTerraform(struct.componentId),
        dns_target_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct.dnsTargetResource),
        readiness_scopes: cdktf.listMapper(cdktf.stringToTerraform)(struct.readinessScopes),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesToTerraform = route53RecoveryreadinessResourceSetResourcesToTerraform;
function route53RecoveryreadinessResourceSetTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.listMapper(cdktf.stringToTerraform)(struct.value),
    };
}
exports.route53RecoveryreadinessResourceSetTagsToTerraform = route53RecoveryreadinessResourceSetTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_resource_set.html awscc_route53recoveryreadiness_resource_set}
*/
class Route53RecoveryreadinessResourceSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/route53recoveryreadiness_resource_set.html awscc_route53recoveryreadiness_resource_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53RecoveryreadinessResourceSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_route53recoveryreadiness_resource_set',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._resourceSetName = config.resourceSetName;
        this._resourceSetType = config.resourceSetType;
        this._resources = config.resources;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // resource_set_arn - computed: true, optional: false, required: false
    get resourceSetArn() {
        return this.getStringAttribute('resource_set_arn');
    }
    get resourceSetName() {
        return this.getStringAttribute('resource_set_name');
    }
    set resourceSetName(value) {
        this._resourceSetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceSetNameInput() {
        return this._resourceSetName;
    }
    get resourceSetType() {
        return this.getStringAttribute('resource_set_type');
    }
    set resourceSetType(value) {
        this._resourceSetType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceSetTypeInput() {
        return this._resourceSetType;
    }
    get resources() {
        return this.interpolationForAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            resource_set_name: cdktf.stringToTerraform(this._resourceSetName),
            resource_set_type: cdktf.stringToTerraform(this._resourceSetType),
            resources: cdktf.listMapper(route53RecoveryreadinessResourceSetResourcesToTerraform)(this._resources),
            tags: cdktf.listMapper(route53RecoveryreadinessResourceSetTagsToTerraform)(this._tags),
        };
    }
}
exports.Route53RecoveryreadinessResourceSet = Route53RecoveryreadinessResourceSet;
// =================
// STATIC PROPERTIES
// =================
Route53RecoveryreadinessResourceSet.tfResourceType = "awscc_route53recoveryreadiness_resource_set";
//# sourceMappingURL=data:application/json;base64,