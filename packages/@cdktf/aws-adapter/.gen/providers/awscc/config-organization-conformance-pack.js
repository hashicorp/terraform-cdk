"use strict";
// https://www.terraform.io/docs/providers/awscc/r/config_organization_conformance_pack.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigOrganizationConformancePack = exports.configOrganizationConformancePackConformancePackInputParametersToTerraform = void 0;
const cdktf = require("cdktf");
function configOrganizationConformancePackConformancePackInputParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.configOrganizationConformancePackConformancePackInputParametersToTerraform = configOrganizationConformancePackConformancePackInputParametersToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/config_organization_conformance_pack.html awscc_config_organization_conformance_pack}
*/
class ConfigOrganizationConformancePack extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/config_organization_conformance_pack.html awscc_config_organization_conformance_pack} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigOrganizationConformancePackConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_config_organization_conformance_pack',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._conformancePackInputParameters = config.conformancePackInputParameters;
        this._deliveryS3Bucket = config.deliveryS3Bucket;
        this._deliveryS3KeyPrefix = config.deliveryS3KeyPrefix;
        this._excludedAccounts = config.excludedAccounts;
        this._organizationConformancePackName = config.organizationConformancePackName;
        this._templateBody = config.templateBody;
        this._templateS3Uri = config.templateS3Uri;
    }
    get conformancePackInputParameters() {
        return this.interpolationForAttribute('conformance_pack_input_parameters');
    }
    set conformancePackInputParameters(value) {
        this._conformancePackInputParameters = value;
    }
    resetConformancePackInputParameters() {
        this._conformancePackInputParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conformancePackInputParametersInput() {
        return this._conformancePackInputParameters;
    }
    get deliveryS3Bucket() {
        return this.getStringAttribute('delivery_s3_bucket');
    }
    set deliveryS3Bucket(value) {
        this._deliveryS3Bucket = value;
    }
    resetDeliveryS3Bucket() {
        this._deliveryS3Bucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryS3BucketInput() {
        return this._deliveryS3Bucket;
    }
    get deliveryS3KeyPrefix() {
        return this.getStringAttribute('delivery_s3_key_prefix');
    }
    set deliveryS3KeyPrefix(value) {
        this._deliveryS3KeyPrefix = value;
    }
    resetDeliveryS3KeyPrefix() {
        this._deliveryS3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryS3KeyPrefixInput() {
        return this._deliveryS3KeyPrefix;
    }
    get excludedAccounts() {
        return this.getListAttribute('excluded_accounts');
    }
    set excludedAccounts(value) {
        this._excludedAccounts = value;
    }
    resetExcludedAccounts() {
        this._excludedAccounts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedAccountsInput() {
        return this._excludedAccounts;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get organizationConformancePackName() {
        return this.getStringAttribute('organization_conformance_pack_name');
    }
    set organizationConformancePackName(value) {
        this._organizationConformancePackName = value;
    }
    // Temporarily expose input value. Use with caution.
    get organizationConformancePackNameInput() {
        return this._organizationConformancePackName;
    }
    get templateBody() {
        return this.getStringAttribute('template_body');
    }
    set templateBody(value) {
        this._templateBody = value;
    }
    resetTemplateBody() {
        this._templateBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateBodyInput() {
        return this._templateBody;
    }
    get templateS3Uri() {
        return this.getStringAttribute('template_s3_uri');
    }
    set templateS3Uri(value) {
        this._templateS3Uri = value;
    }
    resetTemplateS3Uri() {
        this._templateS3Uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateS3UriInput() {
        return this._templateS3Uri;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            conformance_pack_input_parameters: cdktf.listMapper(configOrganizationConformancePackConformancePackInputParametersToTerraform)(this._conformancePackInputParameters),
            delivery_s3_bucket: cdktf.stringToTerraform(this._deliveryS3Bucket),
            delivery_s3_key_prefix: cdktf.stringToTerraform(this._deliveryS3KeyPrefix),
            excluded_accounts: cdktf.listMapper(cdktf.stringToTerraform)(this._excludedAccounts),
            organization_conformance_pack_name: cdktf.stringToTerraform(this._organizationConformancePackName),
            template_body: cdktf.stringToTerraform(this._templateBody),
            template_s3_uri: cdktf.stringToTerraform(this._templateS3Uri),
        };
    }
}
exports.ConfigOrganizationConformancePack = ConfigOrganizationConformancePack;
// =================
// STATIC PROPERTIES
// =================
ConfigOrganizationConformancePack.tfResourceType = "awscc_config_organization_conformance_pack";
//# sourceMappingURL=data:application/json;base64,