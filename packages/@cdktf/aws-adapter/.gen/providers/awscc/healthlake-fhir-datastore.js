"use strict";
// https://www.terraform.io/docs/providers/awscc/r/healthlake_fhir_datastore.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthlakeFhirDatastore = exports.healthlakeFhirDatastoreTagsToTerraform = exports.healthlakeFhirDatastoreSseConfigurationToTerraform = exports.healthlakeFhirDatastoreSseConfigurationKmsEncryptionConfigToTerraform = exports.HealthlakeFhirDatastoreSseConfigurationKmsEncryptionConfig = exports.healthlakeFhirDatastorePreloadDataConfigToTerraform = exports.healthlakeFhirDatastoreCreatedAtToTerraform = exports.HealthlakeFhirDatastoreCreatedAt = void 0;
const cdktf = require("cdktf");
class HealthlakeFhirDatastoreCreatedAt extends cdktf.ComplexComputedList {
    // nanos - computed: true, optional: false, required: true
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    // seconds - computed: true, optional: false, required: true
    get seconds() {
        return this.getStringAttribute('seconds');
    }
}
exports.HealthlakeFhirDatastoreCreatedAt = HealthlakeFhirDatastoreCreatedAt;
function healthlakeFhirDatastoreCreatedAtToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.healthlakeFhirDatastoreCreatedAtToTerraform = healthlakeFhirDatastoreCreatedAtToTerraform;
function healthlakeFhirDatastorePreloadDataConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        preload_data_type: cdktf.stringToTerraform(struct.preloadDataType),
    };
}
exports.healthlakeFhirDatastorePreloadDataConfigToTerraform = healthlakeFhirDatastorePreloadDataConfigToTerraform;
class HealthlakeFhirDatastoreSseConfigurationKmsEncryptionConfig extends cdktf.ComplexComputedList {
    // cmk_type - computed: true, optional: false, required: true
    get cmkType() {
        return this.getStringAttribute('cmk_type');
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
}
exports.HealthlakeFhirDatastoreSseConfigurationKmsEncryptionConfig = HealthlakeFhirDatastoreSseConfigurationKmsEncryptionConfig;
function healthlakeFhirDatastoreSseConfigurationKmsEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cmk_type: cdktf.stringToTerraform(struct.cmkType),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
    };
}
exports.healthlakeFhirDatastoreSseConfigurationKmsEncryptionConfigToTerraform = healthlakeFhirDatastoreSseConfigurationKmsEncryptionConfigToTerraform;
function healthlakeFhirDatastoreSseConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_encryption_config: healthlakeFhirDatastoreSseConfigurationKmsEncryptionConfigToTerraform(struct.kmsEncryptionConfig),
    };
}
exports.healthlakeFhirDatastoreSseConfigurationToTerraform = healthlakeFhirDatastoreSseConfigurationToTerraform;
function healthlakeFhirDatastoreTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.healthlakeFhirDatastoreTagsToTerraform = healthlakeFhirDatastoreTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/healthlake_fhir_datastore.html awscc_healthlake_fhir_datastore}
*/
class HealthlakeFhirDatastore extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/healthlake_fhir_datastore.html awscc_healthlake_fhir_datastore} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options HealthlakeFhirDatastoreConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_healthlake_fhir_datastore',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._datastoreName = config.datastoreName;
        this._datastoreTypeVersion = config.datastoreTypeVersion;
        this._preloadDataConfig = config.preloadDataConfig;
        this._sseConfiguration = config.sseConfiguration;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.interpolationForAttribute('created_at');
    }
    // datastore_arn - computed: true, optional: false, required: false
    get datastoreArn() {
        return this.getStringAttribute('datastore_arn');
    }
    // datastore_endpoint - computed: true, optional: false, required: false
    get datastoreEndpoint() {
        return this.getStringAttribute('datastore_endpoint');
    }
    // datastore_id - computed: true, optional: false, required: false
    get datastoreId() {
        return this.getStringAttribute('datastore_id');
    }
    get datastoreName() {
        return this.getStringAttribute('datastore_name');
    }
    set datastoreName(value) {
        this._datastoreName = value;
    }
    resetDatastoreName() {
        this._datastoreName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datastoreNameInput() {
        return this._datastoreName;
    }
    // datastore_status - computed: true, optional: false, required: false
    get datastoreStatus() {
        return this.getStringAttribute('datastore_status');
    }
    get datastoreTypeVersion() {
        return this.getStringAttribute('datastore_type_version');
    }
    set datastoreTypeVersion(value) {
        this._datastoreTypeVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get datastoreTypeVersionInput() {
        return this._datastoreTypeVersion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get preloadDataConfig() {
        return this.interpolationForAttribute('preload_data_config');
    }
    set preloadDataConfig(value) {
        this._preloadDataConfig = value;
    }
    resetPreloadDataConfig() {
        this._preloadDataConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preloadDataConfigInput() {
        return this._preloadDataConfig;
    }
    get sseConfiguration() {
        return this.interpolationForAttribute('sse_configuration');
    }
    set sseConfiguration(value) {
        this._sseConfiguration = value;
    }
    resetSseConfiguration() {
        this._sseConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sseConfigurationInput() {
        return this._sseConfiguration;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            datastore_name: cdktf.stringToTerraform(this._datastoreName),
            datastore_type_version: cdktf.stringToTerraform(this._datastoreTypeVersion),
            preload_data_config: healthlakeFhirDatastorePreloadDataConfigToTerraform(this._preloadDataConfig),
            sse_configuration: healthlakeFhirDatastoreSseConfigurationToTerraform(this._sseConfiguration),
            tags: cdktf.listMapper(healthlakeFhirDatastoreTagsToTerraform)(this._tags),
        };
    }
}
exports.HealthlakeFhirDatastore = HealthlakeFhirDatastore;
// =================
// STATIC PROPERTIES
// =================
HealthlakeFhirDatastore.tfResourceType = "awscc_healthlake_fhir_datastore";
//# sourceMappingURL=data:application/json;base64,