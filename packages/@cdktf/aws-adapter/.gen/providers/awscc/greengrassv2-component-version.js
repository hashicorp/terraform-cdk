"use strict";
// https://www.terraform.io/docs/providers/awscc/r/greengrassv2_component_version.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Greengrassv2ComponentVersion = exports.greengrassv2ComponentVersionLambdaFunctionToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentPlatformsToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsVolumesToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsDevicesToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersEventSourcesToTerraform = exports.greengrassv2ComponentVersionLambdaFunctionComponentDependenciesToTerraform = void 0;
const cdktf = require("cdktf");
function greengrassv2ComponentVersionLambdaFunctionComponentDependenciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dependency_type: cdktf.stringToTerraform(struct.dependencyType),
        version_requirement: cdktf.stringToTerraform(struct.versionRequirement),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentDependenciesToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentDependenciesToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersEventSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        topic: cdktf.stringToTerraform(struct.topic),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersEventSourcesToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersEventSourcesToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsDevicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add_group_owner: cdktf.booleanToTerraform(struct.addGroupOwner),
        path: cdktf.stringToTerraform(struct.path),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsDevicesToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsDevicesToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add_group_owner: cdktf.booleanToTerraform(struct.addGroupOwner),
        destination_path: cdktf.stringToTerraform(struct.destinationPath),
        permission: cdktf.stringToTerraform(struct.permission),
        source_path: cdktf.stringToTerraform(struct.sourcePath),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsVolumesToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsVolumesToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        devices: cdktf.listMapper(greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsDevicesToTerraform)(struct.devices),
        memory_size_in_kb: cdktf.numberToTerraform(struct.memorySizeInKb),
        mount_ro_sysfs: cdktf.booleanToTerraform(struct.mountRoSysfs),
        volumes: cdktf.listMapper(greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsVolumesToTerraform)(struct.volumes),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_params: greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsContainerParamsToTerraform(struct.containerParams),
        isolation_mode: cdktf.stringToTerraform(struct.isolationMode),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        environment_variables: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environmentVariables),
        event_sources: cdktf.listMapper(greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersEventSourcesToTerraform)(struct.eventSources),
        exec_args: cdktf.listMapper(cdktf.stringToTerraform)(struct.execArgs),
        input_payload_encoding_type: cdktf.stringToTerraform(struct.inputPayloadEncodingType),
        linux_process_params: greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersLinuxProcessParamsToTerraform(struct.linuxProcessParams),
        max_idle_time_in_seconds: cdktf.numberToTerraform(struct.maxIdleTimeInSeconds),
        max_instances_count: cdktf.numberToTerraform(struct.maxInstancesCount),
        max_queue_size: cdktf.numberToTerraform(struct.maxQueueSize),
        pinned: cdktf.booleanToTerraform(struct.pinned),
        status_timeout_in_seconds: cdktf.numberToTerraform(struct.statusTimeoutInSeconds),
        timeout_in_seconds: cdktf.numberToTerraform(struct.timeoutInSeconds),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersToTerraform;
function greengrassv2ComponentVersionLambdaFunctionComponentPlatformsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attributes: cdktf.hashMapper(cdktf.anyToTerraform)(struct.attributes),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionComponentPlatformsToTerraform = greengrassv2ComponentVersionLambdaFunctionComponentPlatformsToTerraform;
function greengrassv2ComponentVersionLambdaFunctionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_dependencies: cdktf.hashMapper(cdktf.anyToTerraform)(struct.componentDependencies),
        component_lambda_parameters: greengrassv2ComponentVersionLambdaFunctionComponentLambdaParametersToTerraform(struct.componentLambdaParameters),
        component_name: cdktf.stringToTerraform(struct.componentName),
        component_platforms: cdktf.listMapper(greengrassv2ComponentVersionLambdaFunctionComponentPlatformsToTerraform)(struct.componentPlatforms),
        component_version: cdktf.stringToTerraform(struct.componentVersion),
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
    };
}
exports.greengrassv2ComponentVersionLambdaFunctionToTerraform = greengrassv2ComponentVersionLambdaFunctionToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/greengrassv2_component_version.html awscc_greengrassv2_component_version}
*/
class Greengrassv2ComponentVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/greengrassv2_component_version.html awscc_greengrassv2_component_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Greengrassv2ComponentVersionConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_greengrassv2_component_version',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._inlineRecipe = config.inlineRecipe;
        this._lambdaFunction = config.lambdaFunction;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // component_name - computed: true, optional: false, required: false
    get componentName() {
        return this.getStringAttribute('component_name');
    }
    // component_version - computed: true, optional: false, required: false
    get componentVersion() {
        return this.getStringAttribute('component_version');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get inlineRecipe() {
        return this.getStringAttribute('inline_recipe');
    }
    set inlineRecipe(value) {
        this._inlineRecipe = value;
    }
    resetInlineRecipe() {
        this._inlineRecipe = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inlineRecipeInput() {
        return this._inlineRecipe;
    }
    get lambdaFunction() {
        return this.interpolationForAttribute('lambda_function');
    }
    set lambdaFunction(value) {
        this._lambdaFunction = value;
    }
    resetLambdaFunction() {
        this._lambdaFunction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionInput() {
        return this._lambdaFunction;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            inline_recipe: cdktf.stringToTerraform(this._inlineRecipe),
            lambda_function: greengrassv2ComponentVersionLambdaFunctionToTerraform(this._lambdaFunction),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
        };
    }
}
exports.Greengrassv2ComponentVersion = Greengrassv2ComponentVersion;
// =================
// STATIC PROPERTIES
// =================
Greengrassv2ComponentVersion.tfResourceType = "awscc_greengrassv2_component_version";
//# sourceMappingURL=data:application/json;base64,