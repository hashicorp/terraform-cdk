"use strict";
// https://www.terraform.io/docs/providers/awscc/r/emrcontainers_virtual_cluster.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrcontainersVirtualCluster = exports.emrcontainersVirtualClusterTagsToTerraform = exports.emrcontainersVirtualClusterContainerProviderToTerraform = exports.emrcontainersVirtualClusterContainerProviderInfoToTerraform = exports.emrcontainersVirtualClusterContainerProviderInfoEksInfoToTerraform = void 0;
const cdktf = require("cdktf");
function emrcontainersVirtualClusterContainerProviderInfoEksInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.emrcontainersVirtualClusterContainerProviderInfoEksInfoToTerraform = emrcontainersVirtualClusterContainerProviderInfoEksInfoToTerraform;
function emrcontainersVirtualClusterContainerProviderInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        eks_info: emrcontainersVirtualClusterContainerProviderInfoEksInfoToTerraform(struct.eksInfo),
    };
}
exports.emrcontainersVirtualClusterContainerProviderInfoToTerraform = emrcontainersVirtualClusterContainerProviderInfoToTerraform;
function emrcontainersVirtualClusterContainerProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        info: emrcontainersVirtualClusterContainerProviderInfoToTerraform(struct.info),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.emrcontainersVirtualClusterContainerProviderToTerraform = emrcontainersVirtualClusterContainerProviderToTerraform;
function emrcontainersVirtualClusterTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.emrcontainersVirtualClusterTagsToTerraform = emrcontainersVirtualClusterTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/emrcontainers_virtual_cluster.html awscc_emrcontainers_virtual_cluster}
*/
class EmrcontainersVirtualCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/emrcontainers_virtual_cluster.html awscc_emrcontainers_virtual_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EmrcontainersVirtualClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_emrcontainers_virtual_cluster',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._containerProvider = config.containerProvider;
        this._name = config.name;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get containerProvider() {
        return this.interpolationForAttribute('container_provider');
    }
    set containerProvider(value) {
        this._containerProvider = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerProviderInput() {
        return this._containerProvider;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_provider: emrcontainersVirtualClusterContainerProviderToTerraform(this._containerProvider),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(emrcontainersVirtualClusterTagsToTerraform)(this._tags),
        };
    }
}
exports.EmrcontainersVirtualCluster = EmrcontainersVirtualCluster;
// =================
// STATIC PROPERTIES
// =================
EmrcontainersVirtualCluster.tfResourceType = "awscc_emrcontainers_virtual_cluster";
//# sourceMappingURL=data:application/json;base64,