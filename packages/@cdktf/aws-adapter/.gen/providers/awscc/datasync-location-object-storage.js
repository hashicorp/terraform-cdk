"use strict";
// https://www.terraform.io/docs/providers/awscc/r/datasync_location_object_storage.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasyncLocationObjectStorage = exports.datasyncLocationObjectStorageTagsToTerraform = void 0;
const cdktf = require("cdktf");
function datasyncLocationObjectStorageTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.datasyncLocationObjectStorageTagsToTerraform = datasyncLocationObjectStorageTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_object_storage.html awscc_datasync_location_object_storage}
*/
class DatasyncLocationObjectStorage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/datasync_location_object_storage.html awscc_datasync_location_object_storage} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatasyncLocationObjectStorageConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_datasync_location_object_storage',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accessKey = config.accessKey;
        this._agentArns = config.agentArns;
        this._bucketName = config.bucketName;
        this._secretKey = config.secretKey;
        this._serverHostname = config.serverHostname;
        this._serverPort = config.serverPort;
        this._serverProtocol = config.serverProtocol;
        this._subdirectory = config.subdirectory;
        this._tags = config.tags;
    }
    get accessKey() {
        return this.getStringAttribute('access_key');
    }
    set accessKey(value) {
        this._accessKey = value;
    }
    resetAccessKey() {
        this._accessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyInput() {
        return this._accessKey;
    }
    get agentArns() {
        return this.getListAttribute('agent_arns');
    }
    set agentArns(value) {
        this._agentArns = value;
    }
    // Temporarily expose input value. Use with caution.
    get agentArnsInput() {
        return this._agentArns;
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // location_arn - computed: true, optional: false, required: false
    get locationArn() {
        return this.getStringAttribute('location_arn');
    }
    // location_uri - computed: true, optional: false, required: false
    get locationUri() {
        return this.getStringAttribute('location_uri');
    }
    get secretKey() {
        return this.getStringAttribute('secret_key');
    }
    set secretKey(value) {
        this._secretKey = value;
    }
    resetSecretKey() {
        this._secretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretKeyInput() {
        return this._secretKey;
    }
    get serverHostname() {
        return this.getStringAttribute('server_hostname');
    }
    set serverHostname(value) {
        this._serverHostname = value;
    }
    // Temporarily expose input value. Use with caution.
    get serverHostnameInput() {
        return this._serverHostname;
    }
    get serverPort() {
        return this.getNumberAttribute('server_port');
    }
    set serverPort(value) {
        this._serverPort = value;
    }
    resetServerPort() {
        this._serverPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverPortInput() {
        return this._serverPort;
    }
    get serverProtocol() {
        return this.getStringAttribute('server_protocol');
    }
    set serverProtocol(value) {
        this._serverProtocol = value;
    }
    resetServerProtocol() {
        this._serverProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverProtocolInput() {
        return this._serverProtocol;
    }
    get subdirectory() {
        return this.getStringAttribute('subdirectory');
    }
    set subdirectory(value) {
        this._subdirectory = value;
    }
    resetSubdirectory() {
        this._subdirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subdirectoryInput() {
        return this._subdirectory;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_key: cdktf.stringToTerraform(this._accessKey),
            agent_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._agentArns),
            bucket_name: cdktf.stringToTerraform(this._bucketName),
            secret_key: cdktf.stringToTerraform(this._secretKey),
            server_hostname: cdktf.stringToTerraform(this._serverHostname),
            server_port: cdktf.numberToTerraform(this._serverPort),
            server_protocol: cdktf.stringToTerraform(this._serverProtocol),
            subdirectory: cdktf.stringToTerraform(this._subdirectory),
            tags: cdktf.listMapper(datasyncLocationObjectStorageTagsToTerraform)(this._tags),
        };
    }
}
exports.DatasyncLocationObjectStorage = DatasyncLocationObjectStorage;
// =================
// STATIC PROPERTIES
// =================
DatasyncLocationObjectStorage.tfResourceType = "awscc_datasync_location_object_storage";
//# sourceMappingURL=data:application/json;base64,