"use strict";
// https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_quality_job_definition.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerModelQualityJobDefinition = exports.sagemakerModelQualityJobDefinitionTagsToTerraform = exports.sagemakerModelQualityJobDefinitionStoppingConditionToTerraform = exports.sagemakerModelQualityJobDefinitionNetworkConfigToTerraform = exports.sagemakerModelQualityJobDefinitionNetworkConfigVpcConfigToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobInputToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobInputGroundTruthS3InputToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityJobInputEndpointInputToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityBaselineConfigToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityBaselineConfigConstraintsResourceToTerraform = exports.sagemakerModelQualityJobDefinitionModelQualityAppSpecificationToTerraform = exports.sagemakerModelQualityJobDefinitionJobResourcesToTerraform = exports.sagemakerModelQualityJobDefinitionJobResourcesClusterConfigToTerraform = void 0;
const cdktf = require("cdktf");
function sagemakerModelQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerModelQualityJobDefinitionJobResourcesClusterConfigToTerraform = sagemakerModelQualityJobDefinitionJobResourcesClusterConfigToTerraform;
function sagemakerModelQualityJobDefinitionJobResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_config: sagemakerModelQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerModelQualityJobDefinitionJobResourcesToTerraform = sagemakerModelQualityJobDefinitionJobResourcesToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_arguments: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerArguments),
        container_entrypoint: cdktf.listMapper(cdktf.stringToTerraform)(struct.containerEntrypoint),
        environment: cdktf.hashMapper(cdktf.anyToTerraform)(struct.environment),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        post_analytics_processor_source_uri: cdktf.stringToTerraform(struct.postAnalyticsProcessorSourceUri),
        problem_type: cdktf.stringToTerraform(struct.problemType),
        record_preprocessor_source_uri: cdktf.stringToTerraform(struct.recordPreprocessorSourceUri),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityAppSpecificationToTerraform = sagemakerModelQualityJobDefinitionModelQualityAppSpecificationToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityBaselineConfigConstraintsResourceToTerraform = sagemakerModelQualityJobDefinitionModelQualityBaselineConfigConstraintsResourceToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        baselining_job_name: cdktf.stringToTerraform(struct.baseliningJobName),
        constraints_resource: sagemakerModelQualityJobDefinitionModelQualityBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityBaselineConfigToTerraform = sagemakerModelQualityJobDefinitionModelQualityBaselineConfigToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobInputEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        end_time_offset: cdktf.stringToTerraform(struct.endTimeOffset),
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        inference_attribute: cdktf.stringToTerraform(struct.inferenceAttribute),
        local_path: cdktf.stringToTerraform(struct.localPath),
        probability_attribute: cdktf.stringToTerraform(struct.probabilityAttribute),
        probability_threshold_attribute: cdktf.numberToTerraform(struct.probabilityThresholdAttribute),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
        start_time_offset: cdktf.stringToTerraform(struct.startTimeOffset),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobInputEndpointInputToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobInputEndpointInputToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobInputGroundTruthS3InputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobInputGroundTruthS3InputToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobInputGroundTruthS3InputToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobInputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_input: sagemakerModelQualityJobDefinitionModelQualityJobInputEndpointInputToTerraform(struct.endpointInput),
        ground_truth_s3_input: sagemakerModelQualityJobDefinitionModelQualityJobInputGroundTruthS3InputToTerraform(struct.groundTruthS3Input),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobInputToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobInputToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_output: sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsToTerraform;
function sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: cdktf.listMapper(sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigMonitoringOutputsToTerraform)(struct.monitoringOutputs),
    };
}
exports.sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigToTerraform = sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigToTerraform;
function sagemakerModelQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
exports.sagemakerModelQualityJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerModelQualityJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerModelQualityJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerModelQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerModelQualityJobDefinitionNetworkConfigToTerraform = sagemakerModelQualityJobDefinitionNetworkConfigToTerraform;
function sagemakerModelQualityJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerModelQualityJobDefinitionStoppingConditionToTerraform = sagemakerModelQualityJobDefinitionStoppingConditionToTerraform;
function sagemakerModelQualityJobDefinitionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sagemakerModelQualityJobDefinitionTagsToTerraform = sagemakerModelQualityJobDefinitionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_quality_job_definition.html awscc_sagemaker_model_quality_job_definition}
*/
class SagemakerModelQualityJobDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/sagemaker_model_quality_job_definition.html awscc_sagemaker_model_quality_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerModelQualityJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_model_quality_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._jobDefinitionName = config.jobDefinitionName;
        this._jobResources = config.jobResources;
        this._modelQualityAppSpecification = config.modelQualityAppSpecification;
        this._modelQualityBaselineConfig = config.modelQualityBaselineConfig;
        this._modelQualityJobInput = config.modelQualityJobInput;
        this._modelQualityJobOutputConfig = config.modelQualityJobOutputConfig;
        this._networkConfig = config.networkConfig;
        this._roleArn = config.roleArn;
        this._stoppingCondition = config.stoppingCondition;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // job_definition_arn - computed: true, optional: false, required: false
    get jobDefinitionArn() {
        return this.getStringAttribute('job_definition_arn');
    }
    get jobDefinitionName() {
        return this.getStringAttribute('job_definition_name');
    }
    set jobDefinitionName(value) {
        this._jobDefinitionName = value;
    }
    resetJobDefinitionName() {
        this._jobDefinitionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobDefinitionNameInput() {
        return this._jobDefinitionName;
    }
    get jobResources() {
        return this.interpolationForAttribute('job_resources');
    }
    set jobResources(value) {
        this._jobResources = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobResourcesInput() {
        return this._jobResources;
    }
    get modelQualityAppSpecification() {
        return this.interpolationForAttribute('model_quality_app_specification');
    }
    set modelQualityAppSpecification(value) {
        this._modelQualityAppSpecification = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelQualityAppSpecificationInput() {
        return this._modelQualityAppSpecification;
    }
    get modelQualityBaselineConfig() {
        return this.interpolationForAttribute('model_quality_baseline_config');
    }
    set modelQualityBaselineConfig(value) {
        this._modelQualityBaselineConfig = value;
    }
    resetModelQualityBaselineConfig() {
        this._modelQualityBaselineConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelQualityBaselineConfigInput() {
        return this._modelQualityBaselineConfig;
    }
    get modelQualityJobInput() {
        return this.interpolationForAttribute('model_quality_job_input');
    }
    set modelQualityJobInput(value) {
        this._modelQualityJobInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelQualityJobInputInput() {
        return this._modelQualityJobInput;
    }
    get modelQualityJobOutputConfig() {
        return this.interpolationForAttribute('model_quality_job_output_config');
    }
    set modelQualityJobOutputConfig(value) {
        this._modelQualityJobOutputConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelQualityJobOutputConfigInput() {
        return this._modelQualityJobOutputConfig;
    }
    get networkConfig() {
        return this.interpolationForAttribute('network_config');
    }
    set networkConfig(value) {
        this._networkConfig = value;
    }
    resetNetworkConfig() {
        this._networkConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stoppingCondition() {
        return this.interpolationForAttribute('stopping_condition');
    }
    set stoppingCondition(value) {
        this._stoppingCondition = value;
    }
    resetStoppingCondition() {
        this._stoppingCondition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stoppingConditionInput() {
        return this._stoppingCondition;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            job_definition_name: cdktf.stringToTerraform(this._jobDefinitionName),
            job_resources: sagemakerModelQualityJobDefinitionJobResourcesToTerraform(this._jobResources),
            model_quality_app_specification: sagemakerModelQualityJobDefinitionModelQualityAppSpecificationToTerraform(this._modelQualityAppSpecification),
            model_quality_baseline_config: sagemakerModelQualityJobDefinitionModelQualityBaselineConfigToTerraform(this._modelQualityBaselineConfig),
            model_quality_job_input: sagemakerModelQualityJobDefinitionModelQualityJobInputToTerraform(this._modelQualityJobInput),
            model_quality_job_output_config: sagemakerModelQualityJobDefinitionModelQualityJobOutputConfigToTerraform(this._modelQualityJobOutputConfig),
            network_config: sagemakerModelQualityJobDefinitionNetworkConfigToTerraform(this._networkConfig),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            stopping_condition: sagemakerModelQualityJobDefinitionStoppingConditionToTerraform(this._stoppingCondition),
            tags: cdktf.listMapper(sagemakerModelQualityJobDefinitionTagsToTerraform)(this._tags),
        };
    }
}
exports.SagemakerModelQualityJobDefinition = SagemakerModelQualityJobDefinition;
// =================
// STATIC PROPERTIES
// =================
SagemakerModelQualityJobDefinition.tfResourceType = "awscc_sagemaker_model_quality_job_definition";
//# sourceMappingURL=data:application/json;base64,