"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_mitigation_action.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotMitigationAction = exports.iotMitigationActionTagsToTerraform = exports.iotMitigationActionActionParamsToTerraform = exports.iotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform = exports.iotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform = exports.iotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform = exports.iotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform = exports.iotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform = exports.iotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform = void 0;
const cdktf = require("cdktf");
function iotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        override_dynamic_groups: cdktf.booleanToTerraform(struct.overrideDynamicGroups),
        thing_group_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.thingGroupNames),
    };
}
exports.iotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform = iotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform;
function iotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_level: cdktf.stringToTerraform(struct.logLevel),
        role_arn_for_logging: cdktf.stringToTerraform(struct.roleArnForLogging),
    };
}
exports.iotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform = iotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform;
function iotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        topic_arn: cdktf.stringToTerraform(struct.topicArn),
    };
}
exports.iotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform = iotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform;
function iotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        template_name: cdktf.stringToTerraform(struct.templateName),
    };
}
exports.iotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform = iotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform;
function iotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.iotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform = iotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform;
function iotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
    };
}
exports.iotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform = iotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform;
function iotMitigationActionActionParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add_things_to_thing_group_params: iotMitigationActionActionParamsAddThingsToThingGroupParamsToTerraform(struct.addThingsToThingGroupParams),
        enable_io_t_logging_params: iotMitigationActionActionParamsEnableIoTLoggingParamsToTerraform(struct.enableIoTLoggingParams),
        publish_finding_to_sns_params: iotMitigationActionActionParamsPublishFindingToSnsParamsToTerraform(struct.publishFindingToSnsParams),
        replace_default_policy_version_params: iotMitigationActionActionParamsReplaceDefaultPolicyVersionParamsToTerraform(struct.replaceDefaultPolicyVersionParams),
        update_ca_certificate_params: iotMitigationActionActionParamsUpdateCaCertificateParamsToTerraform(struct.updateCaCertificateParams),
        update_device_certificate_params: iotMitigationActionActionParamsUpdateDeviceCertificateParamsToTerraform(struct.updateDeviceCertificateParams),
    };
}
exports.iotMitigationActionActionParamsToTerraform = iotMitigationActionActionParamsToTerraform;
function iotMitigationActionTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotMitigationActionTagsToTerraform = iotMitigationActionTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_mitigation_action.html awscc_iot_mitigation_action}
*/
class IotMitigationAction extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_mitigation_action.html awscc_iot_mitigation_action} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotMitigationActionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_mitigation_action',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._actionName = config.actionName;
        this._actionParams = config.actionParams;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
    }
    get actionName() {
        return this.getStringAttribute('action_name');
    }
    set actionName(value) {
        this._actionName = value;
    }
    resetActionName() {
        this._actionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionNameInput() {
        return this._actionName;
    }
    get actionParams() {
        return this.interpolationForAttribute('action_params');
    }
    set actionParams(value) {
        this._actionParams = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionParamsInput() {
        return this._actionParams;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // mitigation_action_arn - computed: true, optional: false, required: false
    get mitigationActionArn() {
        return this.getStringAttribute('mitigation_action_arn');
    }
    // mitigation_action_id - computed: true, optional: false, required: false
    get mitigationActionId() {
        return this.getStringAttribute('mitigation_action_id');
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            action_name: cdktf.stringToTerraform(this._actionName),
            action_params: iotMitigationActionActionParamsToTerraform(this._actionParams),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.listMapper(iotMitigationActionTagsToTerraform)(this._tags),
        };
    }
}
exports.IotMitigationAction = IotMitigationAction;
// =================
// STATIC PROPERTIES
// =================
IotMitigationAction.tfResourceType = "awscc_iot_mitigation_action";
//# sourceMappingURL=data:application/json;base64,