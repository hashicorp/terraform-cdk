"use strict";
// https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_recipe.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccImagebuilderImageRecipe = exports.dataAwsccImagebuilderImageRecipeComponentsToTerraform = exports.DataAwsccImagebuilderImageRecipeComponents = exports.dataAwsccImagebuilderImageRecipeComponentsParametersToTerraform = exports.DataAwsccImagebuilderImageRecipeComponentsParameters = exports.dataAwsccImagebuilderImageRecipeBlockDeviceMappingsToTerraform = exports.DataAwsccImagebuilderImageRecipeBlockDeviceMappings = exports.dataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbsToTerraform = exports.DataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbs = exports.dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationToTerraform = exports.DataAwsccImagebuilderImageRecipeAdditionalInstanceConfiguration = exports.dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgentToTerraform = exports.DataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgent = void 0;
const cdktf = require("cdktf");
class DataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgent extends cdktf.ComplexComputedList {
    // uninstall_after_build - computed: true, optional: false, required: false
    get uninstallAfterBuild() {
        return this.getBooleanAttribute('uninstall_after_build');
    }
}
exports.DataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgent = DataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgent;
function dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        uninstall_after_build: cdktf.booleanToTerraform(struct.uninstallAfterBuild),
    };
}
exports.dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgentToTerraform = dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgentToTerraform;
class DataAwsccImagebuilderImageRecipeAdditionalInstanceConfiguration extends cdktf.ComplexComputedList {
    // systems_manager_agent - computed: true, optional: false, required: false
    get systemsManagerAgent() {
        return this.interpolationForAttribute('systems_manager_agent');
    }
    // user_data_override - computed: true, optional: false, required: false
    get userDataOverride() {
        return this.getStringAttribute('user_data_override');
    }
}
exports.DataAwsccImagebuilderImageRecipeAdditionalInstanceConfiguration = DataAwsccImagebuilderImageRecipeAdditionalInstanceConfiguration;
function dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        systems_manager_agent: dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationSystemsManagerAgentToTerraform(struct.systemsManagerAgent),
        user_data_override: cdktf.stringToTerraform(struct.userDataOverride),
    };
}
exports.dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationToTerraform = dataAwsccImagebuilderImageRecipeAdditionalInstanceConfigurationToTerraform;
class DataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbs extends cdktf.ComplexComputedList {
    // delete_on_termination - computed: true, optional: false, required: false
    get deleteOnTermination() {
        return this.getBooleanAttribute('delete_on_termination');
    }
    // encrypted - computed: true, optional: false, required: false
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    // iops - computed: true, optional: false, required: false
    get iops() {
        return this.getNumberAttribute('iops');
    }
    // kms_key_id - computed: true, optional: false, required: false
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    // snapshot_id - computed: true, optional: false, required: false
    get snapshotId() {
        return this.getStringAttribute('snapshot_id');
    }
    // volume_size - computed: true, optional: false, required: false
    get volumeSize() {
        return this.getNumberAttribute('volume_size');
    }
    // volume_type - computed: true, optional: false, required: false
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
}
exports.DataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbs = DataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbs;
function dataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        snapshot_id: cdktf.stringToTerraform(struct.snapshotId),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.dataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbsToTerraform = dataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbsToTerraform;
class DataAwsccImagebuilderImageRecipeBlockDeviceMappings extends cdktf.ComplexComputedList {
    // device_name - computed: true, optional: false, required: false
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    // ebs - computed: true, optional: false, required: false
    get ebs() {
        return this.interpolationForAttribute('ebs');
    }
    // no_device - computed: true, optional: false, required: false
    get noDevice() {
        return this.getStringAttribute('no_device');
    }
    // virtual_name - computed: true, optional: false, required: false
    get virtualName() {
        return this.getStringAttribute('virtual_name');
    }
}
exports.DataAwsccImagebuilderImageRecipeBlockDeviceMappings = DataAwsccImagebuilderImageRecipeBlockDeviceMappings;
function dataAwsccImagebuilderImageRecipeBlockDeviceMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        ebs: dataAwsccImagebuilderImageRecipeBlockDeviceMappingsEbsToTerraform(struct.ebs),
        no_device: cdktf.stringToTerraform(struct.noDevice),
        virtual_name: cdktf.stringToTerraform(struct.virtualName),
    };
}
exports.dataAwsccImagebuilderImageRecipeBlockDeviceMappingsToTerraform = dataAwsccImagebuilderImageRecipeBlockDeviceMappingsToTerraform;
class DataAwsccImagebuilderImageRecipeComponentsParameters extends cdktf.ComplexComputedList {
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getListAttribute('value');
    }
}
exports.DataAwsccImagebuilderImageRecipeComponentsParameters = DataAwsccImagebuilderImageRecipeComponentsParameters;
function dataAwsccImagebuilderImageRecipeComponentsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.listMapper(cdktf.stringToTerraform)(struct.value),
    };
}
exports.dataAwsccImagebuilderImageRecipeComponentsParametersToTerraform = dataAwsccImagebuilderImageRecipeComponentsParametersToTerraform;
class DataAwsccImagebuilderImageRecipeComponents extends cdktf.ComplexComputedList {
    // component_arn - computed: true, optional: false, required: false
    get componentArn() {
        return this.getStringAttribute('component_arn');
    }
    // parameters - computed: true, optional: false, required: false
    get parameters() {
        return this.interpolationForAttribute('parameters');
    }
}
exports.DataAwsccImagebuilderImageRecipeComponents = DataAwsccImagebuilderImageRecipeComponents;
function dataAwsccImagebuilderImageRecipeComponentsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_arn: cdktf.stringToTerraform(struct.componentArn),
        parameters: cdktf.listMapper(dataAwsccImagebuilderImageRecipeComponentsParametersToTerraform)(struct.parameters),
    };
}
exports.dataAwsccImagebuilderImageRecipeComponentsToTerraform = dataAwsccImagebuilderImageRecipeComponentsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_recipe.html awscc_imagebuilder_image_recipe}
*/
class DataAwsccImagebuilderImageRecipe extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/imagebuilder_image_recipe.html awscc_imagebuilder_image_recipe} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccImagebuilderImageRecipeConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_image_recipe',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // additional_instance_configuration - computed: true, optional: false, required: false
    get additionalInstanceConfiguration() {
        return this.interpolationForAttribute('additional_instance_configuration');
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // block_device_mappings - computed: true, optional: false, required: false
    get blockDeviceMappings() {
        return this.interpolationForAttribute('block_device_mappings');
    }
    // components - computed: true, optional: false, required: false
    get components() {
        return this.interpolationForAttribute('components');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // parent_image - computed: true, optional: false, required: false
    get parentImage() {
        return this.getStringAttribute('parent_image');
    }
    // tags - computed: true, optional: false, required: false
    tags(key) {
        return new cdktf.StringMap(this, 'tags').lookup(key);
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    // working_directory - computed: true, optional: false, required: false
    get workingDirectory() {
        return this.getStringAttribute('working_directory');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccImagebuilderImageRecipe = DataAwsccImagebuilderImageRecipe;
// =================
// STATIC PROPERTIES
// =================
DataAwsccImagebuilderImageRecipe.tfResourceType = "awscc_imagebuilder_image_recipe";
//# sourceMappingURL=data:application/json;base64,