"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_peering_attachment.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2TransitGatewayPeeringAttachment = exports.ec2TransitGatewayPeeringAttachmentTagsToTerraform = exports.ec2TransitGatewayPeeringAttachmentStatusToTerraform = exports.Ec2TransitGatewayPeeringAttachmentStatus = void 0;
const cdktf = require("cdktf");
class Ec2TransitGatewayPeeringAttachmentStatus extends cdktf.ComplexComputedList {
    get code() {
        return this.getStringAttribute('code');
    }
    set code(value) {
        this._code = value;
    }
    resetCode() {
        this._code = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeInput() {
        return this._code;
    }
    get message() {
        return this.getStringAttribute('message');
    }
    set message(value) {
        this._message = value;
    }
    resetMessage() {
        this._message = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message;
    }
}
exports.Ec2TransitGatewayPeeringAttachmentStatus = Ec2TransitGatewayPeeringAttachmentStatus;
function ec2TransitGatewayPeeringAttachmentStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        code: cdktf.stringToTerraform(struct.code),
        message: cdktf.stringToTerraform(struct.message),
    };
}
exports.ec2TransitGatewayPeeringAttachmentStatusToTerraform = ec2TransitGatewayPeeringAttachmentStatusToTerraform;
function ec2TransitGatewayPeeringAttachmentTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2TransitGatewayPeeringAttachmentTagsToTerraform = ec2TransitGatewayPeeringAttachmentTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_peering_attachment.html awscc_ec2_transit_gateway_peering_attachment}
*/
class Ec2TransitGatewayPeeringAttachment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_transit_gateway_peering_attachment.html awscc_ec2_transit_gateway_peering_attachment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2TransitGatewayPeeringAttachmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_transit_gateway_peering_attachment',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._peerAccountId = config.peerAccountId;
        this._peerRegion = config.peerRegion;
        this._peerTransitGatewayId = config.peerTransitGatewayId;
        this._tags = config.tags;
        this._transitGatewayId = config.transitGatewayId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get peerAccountId() {
        return this.getStringAttribute('peer_account_id');
    }
    set peerAccountId(value) {
        this._peerAccountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get peerAccountIdInput() {
        return this._peerAccountId;
    }
    get peerRegion() {
        return this.getStringAttribute('peer_region');
    }
    set peerRegion(value) {
        this._peerRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get peerRegionInput() {
        return this._peerRegion;
    }
    get peerTransitGatewayId() {
        return this.getStringAttribute('peer_transit_gateway_id');
    }
    set peerTransitGatewayId(value) {
        this._peerTransitGatewayId = value;
    }
    // Temporarily expose input value. Use with caution.
    get peerTransitGatewayIdInput() {
        return this._peerTransitGatewayId;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.interpolationForAttribute('status');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // transit_gateway_attachment_id - computed: true, optional: false, required: false
    get transitGatewayAttachmentId() {
        return this.getStringAttribute('transit_gateway_attachment_id');
    }
    get transitGatewayId() {
        return this.getStringAttribute('transit_gateway_id');
    }
    set transitGatewayId(value) {
        this._transitGatewayId = value;
    }
    // Temporarily expose input value. Use with caution.
    get transitGatewayIdInput() {
        return this._transitGatewayId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            peer_account_id: cdktf.stringToTerraform(this._peerAccountId),
            peer_region: cdktf.stringToTerraform(this._peerRegion),
            peer_transit_gateway_id: cdktf.stringToTerraform(this._peerTransitGatewayId),
            tags: cdktf.listMapper(ec2TransitGatewayPeeringAttachmentTagsToTerraform)(this._tags),
            transit_gateway_id: cdktf.stringToTerraform(this._transitGatewayId),
        };
    }
}
exports.Ec2TransitGatewayPeeringAttachment = Ec2TransitGatewayPeeringAttachment;
// =================
// STATIC PROPERTIES
// =================
Ec2TransitGatewayPeeringAttachment.tfResourceType = "awscc_ec2_transit_gateway_peering_attachment";
//# sourceMappingURL=data:application/json;base64,