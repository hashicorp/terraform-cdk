"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset_model.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotsitewiseAssetModel = exports.iotsitewiseAssetModelTagsToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesValueToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowTumblingToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesValueToTerraform = exports.iotsitewiseAssetModelAssetModelPropertiesTypeAttributeToTerraform = exports.iotsitewiseAssetModelAssetModelHierarchiesToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesValueToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowTumblingToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesValueToTerraform = exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeAttributeToTerraform = void 0;
const cdktf = require("cdktf");
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeAttributeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_value: cdktf.stringToTerraform(struct.defaultValue),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeAttributeToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeAttributeToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hierarchy_logical_id: cdktf.stringToTerraform(struct.hierarchyLogicalId),
        property_logical_id: cdktf.stringToTerraform(struct.propertyLogicalId),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesValueToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesValueToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesValueToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowTumblingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.stringToTerraform(struct.interval),
        offset: cdktf.stringToTerraform(struct.offset),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowTumblingToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowTumblingToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        tumbling: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowTumblingToTerraform(struct.tumbling),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        variables: cdktf.listMapper(iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricVariablesToTerraform)(struct.variables),
        window: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricWindowToTerraform(struct.window),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hierarchy_logical_id: cdktf.stringToTerraform(struct.hierarchyLogicalId),
        property_logical_id: cdktf.stringToTerraform(struct.propertyLogicalId),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesValueToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesValueToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesValueToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        variables: cdktf.listMapper(iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformVariablesToTerraform)(struct.variables),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeAttributeToTerraform(struct.attribute),
        metric: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeMetricToTerraform(struct.metric),
        transform: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeTransformToTerraform(struct.transform),
        type_name: cdktf.stringToTerraform(struct.typeName),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_type: cdktf.stringToTerraform(struct.dataType),
        data_type_spec: cdktf.stringToTerraform(struct.dataTypeSpec),
        logical_id: cdktf.stringToTerraform(struct.logicalId),
        name: cdktf.stringToTerraform(struct.name),
        type: iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesTypeToTerraform(struct.type),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesToTerraform;
function iotsitewiseAssetModelAssetModelCompositeModelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        composite_model_properties: cdktf.listMapper(iotsitewiseAssetModelAssetModelCompositeModelsCompositeModelPropertiesToTerraform)(struct.compositeModelProperties),
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.iotsitewiseAssetModelAssetModelCompositeModelsToTerraform = iotsitewiseAssetModelAssetModelCompositeModelsToTerraform;
function iotsitewiseAssetModelAssetModelHierarchiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        child_asset_model_id: cdktf.stringToTerraform(struct.childAssetModelId),
        logical_id: cdktf.stringToTerraform(struct.logicalId),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.iotsitewiseAssetModelAssetModelHierarchiesToTerraform = iotsitewiseAssetModelAssetModelHierarchiesToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeAttributeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_value: cdktf.stringToTerraform(struct.defaultValue),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeAttributeToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeAttributeToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hierarchy_logical_id: cdktf.stringToTerraform(struct.hierarchyLogicalId),
        property_logical_id: cdktf.stringToTerraform(struct.propertyLogicalId),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesValueToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesValueToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesValueToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowTumblingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.stringToTerraform(struct.interval),
        offset: cdktf.stringToTerraform(struct.offset),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowTumblingToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowTumblingToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        tumbling: iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowTumblingToTerraform(struct.tumbling),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeMetricToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        variables: cdktf.listMapper(iotsitewiseAssetModelAssetModelPropertiesTypeMetricVariablesToTerraform)(struct.variables),
        window: iotsitewiseAssetModelAssetModelPropertiesTypeMetricWindowToTerraform(struct.window),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeMetricToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeMetricToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hierarchy_logical_id: cdktf.stringToTerraform(struct.hierarchyLogicalId),
        property_logical_id: cdktf.stringToTerraform(struct.propertyLogicalId),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesValueToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesValueToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesValueToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeTransformToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        variables: cdktf.listMapper(iotsitewiseAssetModelAssetModelPropertiesTypeTransformVariablesToTerraform)(struct.variables),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeTransformToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeTransformToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute: iotsitewiseAssetModelAssetModelPropertiesTypeAttributeToTerraform(struct.attribute),
        metric: iotsitewiseAssetModelAssetModelPropertiesTypeMetricToTerraform(struct.metric),
        transform: iotsitewiseAssetModelAssetModelPropertiesTypeTransformToTerraform(struct.transform),
        type_name: cdktf.stringToTerraform(struct.typeName),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesTypeToTerraform = iotsitewiseAssetModelAssetModelPropertiesTypeToTerraform;
function iotsitewiseAssetModelAssetModelPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_type: cdktf.stringToTerraform(struct.dataType),
        data_type_spec: cdktf.stringToTerraform(struct.dataTypeSpec),
        logical_id: cdktf.stringToTerraform(struct.logicalId),
        name: cdktf.stringToTerraform(struct.name),
        type: iotsitewiseAssetModelAssetModelPropertiesTypeToTerraform(struct.type),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
exports.iotsitewiseAssetModelAssetModelPropertiesToTerraform = iotsitewiseAssetModelAssetModelPropertiesToTerraform;
function iotsitewiseAssetModelTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotsitewiseAssetModelTagsToTerraform = iotsitewiseAssetModelTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset_model.html awscc_iotsitewise_asset_model}
*/
class IotsitewiseAssetModel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotsitewise_asset_model.html awscc_iotsitewise_asset_model} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotsitewiseAssetModelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotsitewise_asset_model',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._assetModelCompositeModels = config.assetModelCompositeModels;
        this._assetModelDescription = config.assetModelDescription;
        this._assetModelHierarchies = config.assetModelHierarchies;
        this._assetModelName = config.assetModelName;
        this._assetModelProperties = config.assetModelProperties;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // asset_model_arn - computed: true, optional: false, required: false
    get assetModelArn() {
        return this.getStringAttribute('asset_model_arn');
    }
    get assetModelCompositeModels() {
        return this.interpolationForAttribute('asset_model_composite_models');
    }
    set assetModelCompositeModels(value) {
        this._assetModelCompositeModels = value;
    }
    resetAssetModelCompositeModels() {
        this._assetModelCompositeModels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelCompositeModelsInput() {
        return this._assetModelCompositeModels;
    }
    get assetModelDescription() {
        return this.getStringAttribute('asset_model_description');
    }
    set assetModelDescription(value) {
        this._assetModelDescription = value;
    }
    resetAssetModelDescription() {
        this._assetModelDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelDescriptionInput() {
        return this._assetModelDescription;
    }
    get assetModelHierarchies() {
        return this.interpolationForAttribute('asset_model_hierarchies');
    }
    set assetModelHierarchies(value) {
        this._assetModelHierarchies = value;
    }
    resetAssetModelHierarchies() {
        this._assetModelHierarchies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelHierarchiesInput() {
        return this._assetModelHierarchies;
    }
    // asset_model_id - computed: true, optional: false, required: false
    get assetModelId() {
        return this.getStringAttribute('asset_model_id');
    }
    get assetModelName() {
        return this.getStringAttribute('asset_model_name');
    }
    set assetModelName(value) {
        this._assetModelName = value;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelNameInput() {
        return this._assetModelName;
    }
    get assetModelProperties() {
        return this.interpolationForAttribute('asset_model_properties');
    }
    set assetModelProperties(value) {
        this._assetModelProperties = value;
    }
    resetAssetModelProperties() {
        this._assetModelProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assetModelPropertiesInput() {
        return this._assetModelProperties;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            asset_model_composite_models: cdktf.listMapper(iotsitewiseAssetModelAssetModelCompositeModelsToTerraform)(this._assetModelCompositeModels),
            asset_model_description: cdktf.stringToTerraform(this._assetModelDescription),
            asset_model_hierarchies: cdktf.listMapper(iotsitewiseAssetModelAssetModelHierarchiesToTerraform)(this._assetModelHierarchies),
            asset_model_name: cdktf.stringToTerraform(this._assetModelName),
            asset_model_properties: cdktf.listMapper(iotsitewiseAssetModelAssetModelPropertiesToTerraform)(this._assetModelProperties),
            tags: cdktf.listMapper(iotsitewiseAssetModelTagsToTerraform)(this._tags),
        };
    }
}
exports.IotsitewiseAssetModel = IotsitewiseAssetModel;
// =================
// STATIC PROPERTIES
// =================
IotsitewiseAssetModel.tfResourceType = "awscc_iotsitewise_asset_model";
//# sourceMappingURL=data:application/json;base64,