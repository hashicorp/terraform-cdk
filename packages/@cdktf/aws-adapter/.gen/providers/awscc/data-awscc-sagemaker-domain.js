"use strict";
// https://www.terraform.io/docs/providers/awscc/d/sagemaker_domain.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccSagemakerDomain = exports.dataAwsccSagemakerDomainTagsToTerraform = exports.DataAwsccSagemakerDomainTags = exports.dataAwsccSagemakerDomainDefaultUserSettingsToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettings = exports.dataAwsccSagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsSharingSettings = exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettings = exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec = exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImages = exports.dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettings = exports.dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec = void 0;
const cdktf = require("cdktf");
class DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec extends cdktf.ComplexComputedList {
    // instance_type - computed: true, optional: false, required: false
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    // sage_maker_image_arn - computed: true, optional: false, required: false
    get sageMakerImageArn() {
        return this.getStringAttribute('sage_maker_image_arn');
    }
    // sage_maker_image_version_arn - computed: true, optional: false, required: false
    get sageMakerImageVersionArn() {
        return this.getStringAttribute('sage_maker_image_version_arn');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec = DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec;
function dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettings extends cdktf.ComplexComputedList {
    // default_resource_spec - computed: true, optional: false, required: false
    get defaultResourceSpec() {
        return this.interpolationForAttribute('default_resource_spec');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettings = DataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettings;
function dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImages extends cdktf.ComplexComputedList {
    // app_image_config_name - computed: true, optional: false, required: false
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    // image_name - computed: true, optional: false, required: false
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    // image_version_number - computed: true, optional: false, required: false
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImages = DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImages;
function dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec extends cdktf.ComplexComputedList {
    // instance_type - computed: true, optional: false, required: false
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    // sage_maker_image_arn - computed: true, optional: false, required: false
    get sageMakerImageArn() {
        return this.getStringAttribute('sage_maker_image_arn');
    }
    // sage_maker_image_version_arn - computed: true, optional: false, required: false
    get sageMakerImageVersionArn() {
        return this.getStringAttribute('sage_maker_image_version_arn');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec = DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec;
function dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sage_maker_image_arn: cdktf.stringToTerraform(struct.sageMakerImageArn),
        sage_maker_image_version_arn: cdktf.stringToTerraform(struct.sageMakerImageVersionArn),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettings extends cdktf.ComplexComputedList {
    // custom_images - computed: true, optional: false, required: false
    get customImages() {
        return this.interpolationForAttribute('custom_images');
    }
    // default_resource_spec - computed: true, optional: false, required: false
    get defaultResourceSpec() {
        return this.interpolationForAttribute('default_resource_spec');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettings = DataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettings;
function dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_images: cdktf.listMapper(dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImagesToTerraform)(struct.customImages),
        default_resource_spec: dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettingsSharingSettings extends cdktf.ComplexComputedList {
    // notebook_output_option - computed: true, optional: false, required: false
    get notebookOutputOption() {
        return this.getStringAttribute('notebook_output_option');
    }
    // s3_kms_key_id - computed: true, optional: false, required: false
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    // s3_output_path - computed: true, optional: false, required: false
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettingsSharingSettings = DataAwsccSagemakerDomainDefaultUserSettingsSharingSettings;
function dataAwsccSagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsSharingSettingsToTerraform;
class DataAwsccSagemakerDomainDefaultUserSettings extends cdktf.ComplexComputedList {
    // execution_role - computed: true, optional: false, required: false
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    // jupyter_server_app_settings - computed: true, optional: false, required: false
    get jupyterServerAppSettings() {
        return this.interpolationForAttribute('jupyter_server_app_settings');
    }
    // kernel_gateway_app_settings - computed: true, optional: false, required: false
    get kernelGatewayAppSettings() {
        return this.interpolationForAttribute('kernel_gateway_app_settings');
    }
    // security_groups - computed: true, optional: false, required: false
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    // sharing_settings - computed: true, optional: false, required: false
    get sharingSettings() {
        return this.interpolationForAttribute('sharing_settings');
    }
}
exports.DataAwsccSagemakerDomainDefaultUserSettings = DataAwsccSagemakerDomainDefaultUserSettings;
function dataAwsccSagemakerDomainDefaultUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        jupyter_server_app_settings: dataAwsccSagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: dataAwsccSagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        sharing_settings: dataAwsccSagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
    };
}
exports.dataAwsccSagemakerDomainDefaultUserSettingsToTerraform = dataAwsccSagemakerDomainDefaultUserSettingsToTerraform;
class DataAwsccSagemakerDomainTags extends cdktf.ComplexComputedList {
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.DataAwsccSagemakerDomainTags = DataAwsccSagemakerDomainTags;
function dataAwsccSagemakerDomainTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsccSagemakerDomainTagsToTerraform = dataAwsccSagemakerDomainTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_domain.html awscc_sagemaker_domain}
*/
class DataAwsccSagemakerDomain extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/sagemaker_domain.html awscc_sagemaker_domain} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccSagemakerDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_sagemaker_domain',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // app_network_access_type - computed: true, optional: false, required: false
    get appNetworkAccessType() {
        return this.getStringAttribute('app_network_access_type');
    }
    // auth_mode - computed: true, optional: false, required: false
    get authMode() {
        return this.getStringAttribute('auth_mode');
    }
    // default_user_settings - computed: true, optional: false, required: false
    get defaultUserSettings() {
        return this.interpolationForAttribute('default_user_settings');
    }
    // domain_arn - computed: true, optional: false, required: false
    get domainArn() {
        return this.getStringAttribute('domain_arn');
    }
    // domain_id - computed: true, optional: false, required: false
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    // home_efs_file_system_id - computed: true, optional: false, required: false
    get homeEfsFileSystemId() {
        return this.getStringAttribute('home_efs_file_system_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // kms_key_id - computed: true, optional: false, required: false
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    // single_sign_on_managed_application_instance_id - computed: true, optional: false, required: false
    get singleSignOnManagedApplicationInstanceId() {
        return this.getStringAttribute('single_sign_on_managed_application_instance_id');
    }
    // subnet_ids - computed: true, optional: false, required: false
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccSagemakerDomain = DataAwsccSagemakerDomain;
// =================
// STATIC PROPERTIES
// =================
DataAwsccSagemakerDomain.tfResourceType = "awscc_sagemaker_domain";
//# sourceMappingURL=data:application/json;base64,