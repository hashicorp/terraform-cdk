"use strict";
// https://www.terraform.io/docs/providers/awscc/d/devopsguru_resource_collection.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccDevopsguruResourceCollection = exports.dataAwsccDevopsguruResourceCollectionResourceCollectionFilterToTerraform = exports.DataAwsccDevopsguruResourceCollectionResourceCollectionFilter = exports.dataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformationToTerraform = exports.DataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformation = void 0;
const cdktf = require("cdktf");
class DataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformation extends cdktf.ComplexComputedList {
    // stack_names - computed: true, optional: false, required: false
    get stackNames() {
        return this.getListAttribute('stack_names');
    }
}
exports.DataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformation = DataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformation;
function dataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        stack_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.stackNames),
    };
}
exports.dataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformationToTerraform = dataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformationToTerraform;
class DataAwsccDevopsguruResourceCollectionResourceCollectionFilter extends cdktf.ComplexComputedList {
    // cloudformation - computed: true, optional: false, required: false
    get cloudformation() {
        return this.interpolationForAttribute('cloudformation');
    }
}
exports.DataAwsccDevopsguruResourceCollectionResourceCollectionFilter = DataAwsccDevopsguruResourceCollectionResourceCollectionFilter;
function dataAwsccDevopsguruResourceCollectionResourceCollectionFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudformation: dataAwsccDevopsguruResourceCollectionResourceCollectionFilterCloudformationToTerraform(struct.cloudformation),
    };
}
exports.dataAwsccDevopsguruResourceCollectionResourceCollectionFilterToTerraform = dataAwsccDevopsguruResourceCollectionResourceCollectionFilterToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/devopsguru_resource_collection.html awscc_devopsguru_resource_collection}
*/
class DataAwsccDevopsguruResourceCollection extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/devopsguru_resource_collection.html awscc_devopsguru_resource_collection} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccDevopsguruResourceCollectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_devopsguru_resource_collection',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // resource_collection_filter - computed: true, optional: false, required: false
    get resourceCollectionFilter() {
        return this.interpolationForAttribute('resource_collection_filter');
    }
    // resource_collection_type - computed: true, optional: false, required: false
    get resourceCollectionType() {
        return this.getStringAttribute('resource_collection_type');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccDevopsguruResourceCollection = DataAwsccDevopsguruResourceCollection;
// =================
// STATIC PROPERTIES
// =================
DataAwsccDevopsguruResourceCollection.tfResourceType = "awscc_devopsguru_resource_collection";
//# sourceMappingURL=data:application/json;base64,