"use strict";
// https://www.terraform.io/docs/providers/awscc/d/nimblestudio_launch_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccNimblestudioLaunchProfile = exports.dataAwsccNimblestudioLaunchProfileStreamConfigurationToTerraform = exports.DataAwsccNimblestudioLaunchProfileStreamConfiguration = void 0;
const cdktf = require("cdktf");
class DataAwsccNimblestudioLaunchProfileStreamConfiguration extends cdktf.ComplexComputedList {
    // clipboard_mode - computed: true, optional: false, required: false
    get clipboardMode() {
        return this.getStringAttribute('clipboard_mode');
    }
    // ec_2_instance_types - computed: true, optional: false, required: false
    get ec2InstanceTypes() {
        return this.getListAttribute('ec_2_instance_types');
    }
    // max_session_length_in_minutes - computed: true, optional: false, required: false
    get maxSessionLengthInMinutes() {
        return this.getNumberAttribute('max_session_length_in_minutes');
    }
    // streaming_image_ids - computed: true, optional: false, required: false
    get streamingImageIds() {
        return this.getListAttribute('streaming_image_ids');
    }
}
exports.DataAwsccNimblestudioLaunchProfileStreamConfiguration = DataAwsccNimblestudioLaunchProfileStreamConfiguration;
function dataAwsccNimblestudioLaunchProfileStreamConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        clipboard_mode: cdktf.stringToTerraform(struct.clipboardMode),
        ec_2_instance_types: cdktf.listMapper(cdktf.stringToTerraform)(struct.ec2InstanceTypes),
        max_session_length_in_minutes: cdktf.numberToTerraform(struct.maxSessionLengthInMinutes),
        streaming_image_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.streamingImageIds),
    };
}
exports.dataAwsccNimblestudioLaunchProfileStreamConfigurationToTerraform = dataAwsccNimblestudioLaunchProfileStreamConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/nimblestudio_launch_profile.html awscc_nimblestudio_launch_profile}
*/
class DataAwsccNimblestudioLaunchProfile extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/nimblestudio_launch_profile.html awscc_nimblestudio_launch_profile} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccNimblestudioLaunchProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_nimblestudio_launch_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // ec_2_subnet_ids - computed: true, optional: false, required: false
    get ec2SubnetIds() {
        return this.getListAttribute('ec_2_subnet_ids');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // launch_profile_id - computed: true, optional: false, required: false
    get launchProfileId() {
        return this.getStringAttribute('launch_profile_id');
    }
    // launch_profile_protocol_versions - computed: true, optional: false, required: false
    get launchProfileProtocolVersions() {
        return this.getListAttribute('launch_profile_protocol_versions');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // stream_configuration - computed: true, optional: false, required: false
    get streamConfiguration() {
        return this.interpolationForAttribute('stream_configuration');
    }
    // studio_component_ids - computed: true, optional: false, required: false
    get studioComponentIds() {
        return this.getListAttribute('studio_component_ids');
    }
    // studio_id - computed: true, optional: false, required: false
    get studioId() {
        return this.getStringAttribute('studio_id');
    }
    // tags - computed: true, optional: false, required: false
    tags(key) {
        return new cdktf.StringMap(this, 'tags').lookup(key);
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccNimblestudioLaunchProfile = DataAwsccNimblestudioLaunchProfile;
// =================
// STATIC PROPERTIES
// =================
DataAwsccNimblestudioLaunchProfile.tfResourceType = "awscc_nimblestudio_launch_profile";
//# sourceMappingURL=data:application/json;base64,