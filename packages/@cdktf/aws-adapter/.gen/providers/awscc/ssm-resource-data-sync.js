"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ssm_resource_data_sync.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmResourceDataSync = exports.ssmResourceDataSyncSyncSourceToTerraform = exports.ssmResourceDataSyncSyncSourceAwsOrganizationsSourceToTerraform = exports.ssmResourceDataSyncS3DestinationToTerraform = void 0;
const cdktf = require("cdktf");
function ssmResourceDataSyncS3DestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        bucket_region: cdktf.stringToTerraform(struct.bucketRegion),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        sync_format: cdktf.stringToTerraform(struct.syncFormat),
    };
}
exports.ssmResourceDataSyncS3DestinationToTerraform = ssmResourceDataSyncS3DestinationToTerraform;
function ssmResourceDataSyncSyncSourceAwsOrganizationsSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        organization_source_type: cdktf.stringToTerraform(struct.organizationSourceType),
        organizational_units: cdktf.listMapper(cdktf.stringToTerraform)(struct.organizationalUnits),
    };
}
exports.ssmResourceDataSyncSyncSourceAwsOrganizationsSourceToTerraform = ssmResourceDataSyncSyncSourceAwsOrganizationsSourceToTerraform;
function ssmResourceDataSyncSyncSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aws_organizations_source: ssmResourceDataSyncSyncSourceAwsOrganizationsSourceToTerraform(struct.awsOrganizationsSource),
        include_future_regions: cdktf.booleanToTerraform(struct.includeFutureRegions),
        source_regions: cdktf.listMapper(cdktf.stringToTerraform)(struct.sourceRegions),
        source_type: cdktf.stringToTerraform(struct.sourceType),
    };
}
exports.ssmResourceDataSyncSyncSourceToTerraform = ssmResourceDataSyncSyncSourceToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ssm_resource_data_sync.html awscc_ssm_resource_data_sync}
*/
class SsmResourceDataSync extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ssm_resource_data_sync.html awscc_ssm_resource_data_sync} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmResourceDataSyncConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ssm_resource_data_sync',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._bucketName = config.bucketName;
        this._bucketPrefix = config.bucketPrefix;
        this._bucketRegion = config.bucketRegion;
        this._kmsKeyArn = config.kmsKeyArn;
        this._s3Destination = config.s3Destination;
        this._syncFormat = config.syncFormat;
        this._syncName = config.syncName;
        this._syncSource = config.syncSource;
        this._syncType = config.syncType;
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get bucketRegion() {
        return this.getStringAttribute('bucket_region');
    }
    set bucketRegion(value) {
        this._bucketRegion = value;
    }
    resetBucketRegion() {
        this._bucketRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketRegionInput() {
        return this._bucketRegion;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get s3Destination() {
        return this.interpolationForAttribute('s3_destination');
    }
    set s3Destination(value) {
        this._s3Destination = value;
    }
    resetS3Destination() {
        this._s3Destination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3DestinationInput() {
        return this._s3Destination;
    }
    get syncFormat() {
        return this.getStringAttribute('sync_format');
    }
    set syncFormat(value) {
        this._syncFormat = value;
    }
    resetSyncFormat() {
        this._syncFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncFormatInput() {
        return this._syncFormat;
    }
    get syncName() {
        return this.getStringAttribute('sync_name');
    }
    set syncName(value) {
        this._syncName = value;
    }
    // Temporarily expose input value. Use with caution.
    get syncNameInput() {
        return this._syncName;
    }
    get syncSource() {
        return this.interpolationForAttribute('sync_source');
    }
    set syncSource(value) {
        this._syncSource = value;
    }
    resetSyncSource() {
        this._syncSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncSourceInput() {
        return this._syncSource;
    }
    get syncType() {
        return this.getStringAttribute('sync_type');
    }
    set syncType(value) {
        this._syncType = value;
    }
    resetSyncType() {
        this._syncType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncTypeInput() {
        return this._syncType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket_name: cdktf.stringToTerraform(this._bucketName),
            bucket_prefix: cdktf.stringToTerraform(this._bucketPrefix),
            bucket_region: cdktf.stringToTerraform(this._bucketRegion),
            kms_key_arn: cdktf.stringToTerraform(this._kmsKeyArn),
            s3_destination: ssmResourceDataSyncS3DestinationToTerraform(this._s3Destination),
            sync_format: cdktf.stringToTerraform(this._syncFormat),
            sync_name: cdktf.stringToTerraform(this._syncName),
            sync_source: ssmResourceDataSyncSyncSourceToTerraform(this._syncSource),
            sync_type: cdktf.stringToTerraform(this._syncType),
        };
    }
}
exports.SsmResourceDataSync = SsmResourceDataSync;
// =================
// STATIC PROPERTIES
// =================
SsmResourceDataSync.tfResourceType = "awscc_ssm_resource_data_sync";
//# sourceMappingURL=data:application/json;base64,