"use strict";
// https://www.terraform.io/docs/providers/awscc/d/backup_backup_plan.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccBackupBackupPlan = exports.dataAwsccBackupBackupPlanBackupPlanToTerraform = exports.DataAwsccBackupBackupPlanBackupPlan = exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleToTerraform = exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRule = exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform = exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycle = exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform = exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActions = exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform = exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycle = exports.dataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform = exports.DataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettings = void 0;
const cdktf = require("cdktf");
class DataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettings extends cdktf.ComplexComputedList {
    // backup_options - computed: true, optional: false, required: false
    get backupOptions() {
        return this.interpolationForAttribute('backup_options');
    }
    // resource_type - computed: true, optional: false, required: false
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettings = DataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettings;
function dataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        backup_options: cdktf.hashMapper(cdktf.stringToTerraform)(struct.backupOptions),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform = dataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform;
class DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycle extends cdktf.ComplexComputedList {
    // delete_after_days - computed: true, optional: false, required: false
    get deleteAfterDays() {
        return this.getNumberAttribute('delete_after_days');
    }
    // move_to_cold_storage_after_days - computed: true, optional: false, required: false
    get moveToColdStorageAfterDays() {
        return this.getNumberAttribute('move_to_cold_storage_after_days');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycle = DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycle;
function dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_after_days: cdktf.numberToTerraform(struct.deleteAfterDays),
        move_to_cold_storage_after_days: cdktf.numberToTerraform(struct.moveToColdStorageAfterDays),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform = dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform;
class DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActions extends cdktf.ComplexComputedList {
    // destination_backup_vault_arn - computed: true, optional: false, required: false
    get destinationBackupVaultArn() {
        return this.getStringAttribute('destination_backup_vault_arn');
    }
    // lifecycle - computed: true, optional: false, required: false
    get lifecycle() {
        return this.interpolationForAttribute('lifecycle');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActions = DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActions;
function dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination_backup_vault_arn: cdktf.stringToTerraform(struct.destinationBackupVaultArn),
        lifecycle: dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsLifecycleToTerraform(struct.lifecycle),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform = dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform;
class DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycle extends cdktf.ComplexComputedList {
    // delete_after_days - computed: true, optional: false, required: false
    get deleteAfterDays() {
        return this.getNumberAttribute('delete_after_days');
    }
    // move_to_cold_storage_after_days - computed: true, optional: false, required: false
    get moveToColdStorageAfterDays() {
        return this.getNumberAttribute('move_to_cold_storage_after_days');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycle = DataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycle;
function dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_after_days: cdktf.numberToTerraform(struct.deleteAfterDays),
        move_to_cold_storage_after_days: cdktf.numberToTerraform(struct.moveToColdStorageAfterDays),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform = dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform;
class DataAwsccBackupBackupPlanBackupPlanBackupPlanRule extends cdktf.ComplexComputedList {
    // completion_window_minutes - computed: true, optional: false, required: false
    get completionWindowMinutes() {
        return this.getNumberAttribute('completion_window_minutes');
    }
    // copy_actions - computed: true, optional: false, required: false
    get copyActions() {
        return this.interpolationForAttribute('copy_actions');
    }
    // enable_continuous_backup - computed: true, optional: false, required: false
    get enableContinuousBackup() {
        return this.getBooleanAttribute('enable_continuous_backup');
    }
    // lifecycle - computed: true, optional: false, required: false
    get lifecycle() {
        return this.interpolationForAttribute('lifecycle');
    }
    // recovery_point_tags - computed: true, optional: false, required: false
    get recoveryPointTags() {
        return this.interpolationForAttribute('recovery_point_tags');
    }
    // rule_name - computed: true, optional: false, required: false
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    // schedule_expression - computed: true, optional: false, required: false
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    // start_window_minutes - computed: true, optional: false, required: false
    get startWindowMinutes() {
        return this.getNumberAttribute('start_window_minutes');
    }
    // target_backup_vault - computed: true, optional: false, required: false
    get targetBackupVault() {
        return this.getStringAttribute('target_backup_vault');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlanBackupPlanRule = DataAwsccBackupBackupPlanBackupPlanBackupPlanRule;
function dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        completion_window_minutes: cdktf.numberToTerraform(struct.completionWindowMinutes),
        copy_actions: cdktf.listMapper(dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleCopyActionsToTerraform)(struct.copyActions),
        enable_continuous_backup: cdktf.booleanToTerraform(struct.enableContinuousBackup),
        lifecycle: dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleLifecycleToTerraform(struct.lifecycle),
        recovery_point_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.recoveryPointTags),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        start_window_minutes: cdktf.numberToTerraform(struct.startWindowMinutes),
        target_backup_vault: cdktf.stringToTerraform(struct.targetBackupVault),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleToTerraform = dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleToTerraform;
class DataAwsccBackupBackupPlanBackupPlan extends cdktf.ComplexComputedList {
    // advanced_backup_settings - computed: true, optional: false, required: false
    get advancedBackupSettings() {
        return this.interpolationForAttribute('advanced_backup_settings');
    }
    // backup_plan_name - computed: true, optional: false, required: false
    get backupPlanName() {
        return this.getStringAttribute('backup_plan_name');
    }
    // backup_plan_rule - computed: true, optional: false, required: false
    get backupPlanRule() {
        return this.interpolationForAttribute('backup_plan_rule');
    }
}
exports.DataAwsccBackupBackupPlanBackupPlan = DataAwsccBackupBackupPlanBackupPlan;
function dataAwsccBackupBackupPlanBackupPlanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        advanced_backup_settings: cdktf.listMapper(dataAwsccBackupBackupPlanBackupPlanAdvancedBackupSettingsToTerraform)(struct.advancedBackupSettings),
        backup_plan_name: cdktf.stringToTerraform(struct.backupPlanName),
        backup_plan_rule: cdktf.listMapper(dataAwsccBackupBackupPlanBackupPlanBackupPlanRuleToTerraform)(struct.backupPlanRule),
    };
}
exports.dataAwsccBackupBackupPlanBackupPlanToTerraform = dataAwsccBackupBackupPlanBackupPlanToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/backup_backup_plan.html awscc_backup_backup_plan}
*/
class DataAwsccBackupBackupPlan extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/backup_backup_plan.html awscc_backup_backup_plan} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccBackupBackupPlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_backup_backup_plan',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // backup_plan - computed: true, optional: false, required: false
    get backupPlan() {
        return this.interpolationForAttribute('backup_plan');
    }
    // backup_plan_arn - computed: true, optional: false, required: false
    get backupPlanArn() {
        return this.getStringAttribute('backup_plan_arn');
    }
    // backup_plan_id - computed: true, optional: false, required: false
    get backupPlanId() {
        return this.getStringAttribute('backup_plan_id');
    }
    // backup_plan_tags - computed: true, optional: false, required: false
    backupPlanTags(key) {
        return new cdktf.StringMap(this, 'backup_plan_tags').lookup(key);
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // version_id - computed: true, optional: false, required: false
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccBackupBackupPlan = DataAwsccBackupBackupPlan;
// =================
// STATIC PROPERTIES
// =================
DataAwsccBackupBackupPlan.tfResourceType = "awscc_backup_backup_plan";
//# sourceMappingURL=data:application/json;base64,