"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_account_audit_configuration.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotAccountAuditConfiguration = exports.iotAccountAuditConfigurationAuditNotificationTargetConfigurationsToTerraform = exports.iotAccountAuditConfigurationAuditNotificationTargetConfigurationsSnsToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsUnauthenticatedCognitoRoleOverlyPermissiveCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsRevokedDeviceCertificateStillActiveCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsRevokedCaCertificateStillActiveCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsLoggingDisabledCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasOverlyPermissiveCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasAllowsAccessToUnusedServicesCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotPolicyOverlyPermissiveCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateSharedCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateKeyQualityCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateExpiringCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsConflictingClientIdsCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateKeyQualityCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateExpiringCheckToTerraform = exports.iotAccountAuditConfigurationAuditCheckConfigurationsAuthenticatedCognitoRoleOverlyPermissiveCheckToTerraform = void 0;
const cdktf = require("cdktf");
function iotAccountAuditConfigurationAuditCheckConfigurationsAuthenticatedCognitoRoleOverlyPermissiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsAuthenticatedCognitoRoleOverlyPermissiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsAuthenticatedCognitoRoleOverlyPermissiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateExpiringCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateExpiringCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateExpiringCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateKeyQualityCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateKeyQualityCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateKeyQualityCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsConflictingClientIdsCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsConflictingClientIdsCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsConflictingClientIdsCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateExpiringCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateExpiringCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateExpiringCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateKeyQualityCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateKeyQualityCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateKeyQualityCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateSharedCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateSharedCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateSharedCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsIotPolicyOverlyPermissiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotPolicyOverlyPermissiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsIotPolicyOverlyPermissiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasAllowsAccessToUnusedServicesCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasAllowsAccessToUnusedServicesCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasAllowsAccessToUnusedServicesCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasOverlyPermissiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasOverlyPermissiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasOverlyPermissiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsLoggingDisabledCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsLoggingDisabledCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsLoggingDisabledCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsRevokedCaCertificateStillActiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsRevokedCaCertificateStillActiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsRevokedCaCertificateStillActiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsRevokedDeviceCertificateStillActiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsRevokedDeviceCertificateStillActiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsRevokedDeviceCertificateStillActiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsUnauthenticatedCognitoRoleOverlyPermissiveCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsUnauthenticatedCognitoRoleOverlyPermissiveCheckToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsUnauthenticatedCognitoRoleOverlyPermissiveCheckToTerraform;
function iotAccountAuditConfigurationAuditCheckConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        authenticated_cognito_role_overly_permissive_check: iotAccountAuditConfigurationAuditCheckConfigurationsAuthenticatedCognitoRoleOverlyPermissiveCheckToTerraform(struct.authenticatedCognitoRoleOverlyPermissiveCheck),
        ca_certificate_expiring_check: iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateExpiringCheckToTerraform(struct.caCertificateExpiringCheck),
        ca_certificate_key_quality_check: iotAccountAuditConfigurationAuditCheckConfigurationsCaCertificateKeyQualityCheckToTerraform(struct.caCertificateKeyQualityCheck),
        conflicting_client_ids_check: iotAccountAuditConfigurationAuditCheckConfigurationsConflictingClientIdsCheckToTerraform(struct.conflictingClientIdsCheck),
        device_certificate_expiring_check: iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateExpiringCheckToTerraform(struct.deviceCertificateExpiringCheck),
        device_certificate_key_quality_check: iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateKeyQualityCheckToTerraform(struct.deviceCertificateKeyQualityCheck),
        device_certificate_shared_check: iotAccountAuditConfigurationAuditCheckConfigurationsDeviceCertificateSharedCheckToTerraform(struct.deviceCertificateSharedCheck),
        iot_policy_overly_permissive_check: iotAccountAuditConfigurationAuditCheckConfigurationsIotPolicyOverlyPermissiveCheckToTerraform(struct.iotPolicyOverlyPermissiveCheck),
        iot_role_alias_allows_access_to_unused_services_check: iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasAllowsAccessToUnusedServicesCheckToTerraform(struct.iotRoleAliasAllowsAccessToUnusedServicesCheck),
        iot_role_alias_overly_permissive_check: iotAccountAuditConfigurationAuditCheckConfigurationsIotRoleAliasOverlyPermissiveCheckToTerraform(struct.iotRoleAliasOverlyPermissiveCheck),
        logging_disabled_check: iotAccountAuditConfigurationAuditCheckConfigurationsLoggingDisabledCheckToTerraform(struct.loggingDisabledCheck),
        revoked_ca_certificate_still_active_check: iotAccountAuditConfigurationAuditCheckConfigurationsRevokedCaCertificateStillActiveCheckToTerraform(struct.revokedCaCertificateStillActiveCheck),
        revoked_device_certificate_still_active_check: iotAccountAuditConfigurationAuditCheckConfigurationsRevokedDeviceCertificateStillActiveCheckToTerraform(struct.revokedDeviceCertificateStillActiveCheck),
        unauthenticated_cognito_role_overly_permissive_check: iotAccountAuditConfigurationAuditCheckConfigurationsUnauthenticatedCognitoRoleOverlyPermissiveCheckToTerraform(struct.unauthenticatedCognitoRoleOverlyPermissiveCheck),
    };
}
exports.iotAccountAuditConfigurationAuditCheckConfigurationsToTerraform = iotAccountAuditConfigurationAuditCheckConfigurationsToTerraform;
function iotAccountAuditConfigurationAuditNotificationTargetConfigurationsSnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.iotAccountAuditConfigurationAuditNotificationTargetConfigurationsSnsToTerraform = iotAccountAuditConfigurationAuditNotificationTargetConfigurationsSnsToTerraform;
function iotAccountAuditConfigurationAuditNotificationTargetConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sns: iotAccountAuditConfigurationAuditNotificationTargetConfigurationsSnsToTerraform(struct.sns),
    };
}
exports.iotAccountAuditConfigurationAuditNotificationTargetConfigurationsToTerraform = iotAccountAuditConfigurationAuditNotificationTargetConfigurationsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_account_audit_configuration.html awscc_iot_account_audit_configuration}
*/
class IotAccountAuditConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_account_audit_configuration.html awscc_iot_account_audit_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotAccountAuditConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_account_audit_configuration',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accountId = config.accountId;
        this._auditCheckConfigurations = config.auditCheckConfigurations;
        this._auditNotificationTargetConfigurations = config.auditNotificationTargetConfigurations;
        this._roleArn = config.roleArn;
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    get auditCheckConfigurations() {
        return this.interpolationForAttribute('audit_check_configurations');
    }
    set auditCheckConfigurations(value) {
        this._auditCheckConfigurations = value;
    }
    // Temporarily expose input value. Use with caution.
    get auditCheckConfigurationsInput() {
        return this._auditCheckConfigurations;
    }
    get auditNotificationTargetConfigurations() {
        return this.interpolationForAttribute('audit_notification_target_configurations');
    }
    set auditNotificationTargetConfigurations(value) {
        this._auditNotificationTargetConfigurations = value;
    }
    resetAuditNotificationTargetConfigurations() {
        this._auditNotificationTargetConfigurations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditNotificationTargetConfigurationsInput() {
        return this._auditNotificationTargetConfigurations;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_id: cdktf.stringToTerraform(this._accountId),
            audit_check_configurations: iotAccountAuditConfigurationAuditCheckConfigurationsToTerraform(this._auditCheckConfigurations),
            audit_notification_target_configurations: iotAccountAuditConfigurationAuditNotificationTargetConfigurationsToTerraform(this._auditNotificationTargetConfigurations),
            role_arn: cdktf.stringToTerraform(this._roleArn),
        };
    }
}
exports.IotAccountAuditConfiguration = IotAccountAuditConfiguration;
// =================
// STATIC PROPERTIES
// =================
IotAccountAuditConfiguration.tfResourceType = "awscc_iot_account_audit_configuration";
//# sourceMappingURL=data:application/json;base64,