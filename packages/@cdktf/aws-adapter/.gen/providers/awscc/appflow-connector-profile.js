"use strict";
// https://www.terraform.io/docs/providers/awscc/r/appflow_connector_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppflowConnectorProfile = exports.appflowConnectorProfileConnectorProfileConfigToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskConnectorOAuthRequestToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackConnectorOAuthRequestToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceConnectorOAuthRequestToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoConnectorOAuthRequestToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsConnectorOAuthRequestToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform = void 0;
const cdktf = require("cdktf");
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
        secret_key: cdktf.stringToTerraform(struct.secretKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
        application_key: cdktf.stringToTerraform(struct.applicationKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_token: cdktf.stringToTerraform(struct.apiToken),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsConnectorOAuthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsConnectorOAuthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsConnectorOAuthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        connector_o_auth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsConnectorOAuthRequestToTerraform(struct.connectorOAuthRequest),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_key_id: cdktf.stringToTerraform(struct.accessKeyId),
        datakey: cdktf.stringToTerraform(struct.datakey),
        secret_access_key: cdktf.stringToTerraform(struct.secretAccessKey),
        user_id: cdktf.stringToTerraform(struct.userId),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoConnectorOAuthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoConnectorOAuthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoConnectorOAuthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        connector_o_auth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoConnectorOAuthRequestToTerraform(struct.connectorOAuthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceConnectorOAuthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceConnectorOAuthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceConnectorOAuthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_credentials_arn: cdktf.stringToTerraform(struct.clientCredentialsArn),
        connector_o_auth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceConnectorOAuthRequestToTerraform(struct.connectorOAuthRequest),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackConnectorOAuthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackConnectorOAuthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackConnectorOAuthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        connector_o_auth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackConnectorOAuthRequestToTerraform(struct.connectorOAuthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        api_secret_key: cdktf.stringToTerraform(struct.apiSecretKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskConnectorOAuthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskConnectorOAuthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskConnectorOAuthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        connector_o_auth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskConnectorOAuthRequestToTerraform(struct.connectorOAuthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        amplitude: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform(struct.amplitude),
        datadog: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform(struct.datadog),
        dynatrace: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform(struct.dynatrace),
        google_analytics: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform(struct.googleAnalytics),
        infor_nexus: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform(struct.inforNexus),
        marketo: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform(struct.marketo),
        redshift: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform(struct.redshift),
        salesforce: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform(struct.salesforce),
        service_now: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform(struct.serviceNow),
        singular: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform(struct.singular),
        slack: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform(struct.slack),
        snowflake: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform(struct.snowflake),
        trendmicro: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform(struct.trendmicro),
        veeva: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform(struct.veeva),
        zendesk: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        database_url: cdktf.stringToTerraform(struct.databaseUrl),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
        is_sandbox_environment: cdktf.booleanToTerraform(struct.isSandboxEnvironment),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account_name: cdktf.stringToTerraform(struct.accountName),
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        private_link_service_name: cdktf.stringToTerraform(struct.privateLinkServiceName),
        region: cdktf.stringToTerraform(struct.region),
        stage: cdktf.stringToTerraform(struct.stage),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        datadog: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform(struct.datadog),
        dynatrace: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform(struct.dynatrace),
        infor_nexus: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform(struct.inforNexus),
        marketo: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform(struct.marketo),
        redshift: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform(struct.redshift),
        salesforce: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform(struct.salesforce),
        service_now: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform(struct.serviceNow),
        slack: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform(struct.slack),
        snowflake: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform(struct.snowflake),
        veeva: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform(struct.veeva),
        zendesk: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform;
function appflowConnectorProfileConnectorProfileConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        connector_profile_credentials: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform(struct.connectorProfileCredentials),
        connector_profile_properties: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform(struct.connectorProfileProperties),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigToTerraform = appflowConnectorProfileConnectorProfileConfigToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/appflow_connector_profile.html awscc_appflow_connector_profile}
*/
class AppflowConnectorProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/appflow_connector_profile.html awscc_appflow_connector_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppflowConnectorProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_appflow_connector_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._connectionMode = config.connectionMode;
        this._connectorProfileConfig = config.connectorProfileConfig;
        this._connectorProfileName = config.connectorProfileName;
        this._connectorType = config.connectorType;
        this._kmsArn = config.kmsArn;
    }
    get connectionMode() {
        return this.getStringAttribute('connection_mode');
    }
    set connectionMode(value) {
        this._connectionMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionModeInput() {
        return this._connectionMode;
    }
    // connector_profile_arn - computed: true, optional: false, required: false
    get connectorProfileArn() {
        return this.getStringAttribute('connector_profile_arn');
    }
    get connectorProfileConfig() {
        return this.interpolationForAttribute('connector_profile_config');
    }
    set connectorProfileConfig(value) {
        this._connectorProfileConfig = value;
    }
    resetConnectorProfileConfig() {
        this._connectorProfileConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileConfigInput() {
        return this._connectorProfileConfig;
    }
    get connectorProfileName() {
        return this.getStringAttribute('connector_profile_name');
    }
    set connectorProfileName(value) {
        this._connectorProfileName = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileNameInput() {
        return this._connectorProfileName;
    }
    get connectorType() {
        return this.getStringAttribute('connector_type');
    }
    set connectorType(value) {
        this._connectorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorTypeInput() {
        return this._connectorType;
    }
    // credentials_arn - computed: true, optional: false, required: false
    get credentialsArn() {
        return this.getStringAttribute('credentials_arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kmsArn() {
        return this.getStringAttribute('kms_arn');
    }
    set kmsArn(value) {
        this._kmsArn = value;
    }
    resetKmsArn() {
        this._kmsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsArnInput() {
        return this._kmsArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_mode: cdktf.stringToTerraform(this._connectionMode),
            connector_profile_config: appflowConnectorProfileConnectorProfileConfigToTerraform(this._connectorProfileConfig),
            connector_profile_name: cdktf.stringToTerraform(this._connectorProfileName),
            connector_type: cdktf.stringToTerraform(this._connectorType),
            kms_arn: cdktf.stringToTerraform(this._kmsArn),
        };
    }
}
exports.AppflowConnectorProfile = AppflowConnectorProfile;
// =================
// STATIC PROPERTIES
// =================
AppflowConnectorProfile.tfResourceType = "awscc_appflow_connector_profile";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZmxvdy1jb25uZWN0b3ItcHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcGZsb3ctY29ubmVjdG9yLXByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlGQUFpRjtBQUNqRiwyQ0FBMkM7OztBQUczQywrQkFBK0I7QUE2Qy9CLFNBQWdCLDRGQUE0RixDQUFDLE1BQTBGO0lBQ3JNLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUNqRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsTUFBTSxDQUFDO1FBQ2hELFVBQVUsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLFNBQVMsQ0FBQztLQUN2RCxDQUFBO0FBQ0gsQ0FBQztBQU5ELG9NQU1DO0FBYUQsU0FBZ0IsMEZBQTBGLENBQUMsTUFBd0Y7SUFDak0sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFBRSxPQUFPLE1BQU0sQ0FBQztLQUFFO0lBQ2pELE9BQU87UUFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU8sQ0FBQyxNQUFNLENBQUM7UUFDaEQsZUFBZSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFPLENBQUMsY0FBYyxDQUFDO0tBQ2pFLENBQUE7QUFDSCxDQUFDO0FBTkQsZ01BTUM7QUFTRCxTQUFnQiw0RkFBNEYsQ0FBQyxNQUEwRjtJQUNyTSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUFFLE9BQU8sTUFBTSxDQUFDO0tBQUU7SUFDakQsT0FBTztRQUNMLFNBQVMsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTyxDQUFDLFFBQVEsQ0FBQztLQUNyRCxDQUFBO0FBQ0gsQ0FBQztBQUxE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N0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUNNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQztJQUNELG9EQUFvRDtJQUNwRCxJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7SUFFRixvQkFBb0I7UUFDNUIsT0FBTztZQUNMLGVBQWUsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUM5RCx3QkFBd0IsRUFBRSx3REFBd0QsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7WUFDaEgsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztZQUMzRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDNUQsT0FBTyxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQy9DLENBQUM7SUFDSixDQUFDOztBQTFJSCwwREEySUM7QUF6SUMsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDRyxzQ0FBYyxHQUFXLGlDQUFpQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sXG4vLyBnZW5lcmF0ZWQgZnJvbSB0ZXJyYWZvcm0gcmVzb3VyY2Ugc2NoZW1hXG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY2RrdGYgZnJvbSAnY2RrdGYnO1xuXG4vLyBDb25maWd1cmF0aW9uXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogTW9kZSBpbiB3aGljaCBkYXRhIHRyYW5zZmVyIHNob3VsZCBiZSBlbmFibGVkLiBQcml2YXRlIGNvbm5lY3Rpb24gbW9kZSBpcyBjdXJyZW50bHkgZW5hYmxlZCBmb3IgU2FsZXNmb3JjZSwgU25vd2ZsYWtlLCBUcmVuZG1pY3JvIGFuZCBTaW5ndWxhclxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rpb25fbW9kZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjb25uZWN0aW9uX21vZGV9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3Rpb25Nb2RlOiBzdHJpbmc7XG4gIC8qKlxuICAqIENvbm5lY3RvciBzcGVjaWZpYyBjb25maWd1cmF0aW9ucyBuZWVkZWQgdG8gY3JlYXRlIGNvbm5lY3RvciBwcm9maWxlXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY29ubmVjdG9yX3Byb2ZpbGVfY29uZmlnIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2Nvbm5lY3Rvcl9wcm9maWxlX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgY29ubmVjdG9yUHJvZmlsZUNvbmZpZz86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZztcbiAgLyoqXG4gICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHJpZXZlIGluIGEgc2luZ2xlIGJhdGNoLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9wcm9maWxlX25hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY29ubmVjdG9yX3Byb2ZpbGVfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgY29ubmVjdG9yUHJvZmlsZU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY29ubmVjdG9yX3R5cGUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY29ubmVjdG9yX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3RvclR5cGU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIEFSTiBvZiB0aGUgQVdTIEtleSBNYW5hZ2VtZW50IFNlcnZpY2UgKEFXUyBLTVMpIGtleSB0aGF0J3MgdXNlZCB0byBlbmNyeXB0IHlvdXIgZnVuY3Rpb24ncyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIElmIGl0J3Mgbm90IHByb3ZpZGVkLCBBV1MgTGFtYmRhIHVzZXMgYSBkZWZhdWx0IHNlcnZpY2Uga2V5LlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2ttc19hcm4gQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUja21zX2Fybn1cbiAgKi9cbiAgcmVhZG9ubHkga21zQXJuPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNBbXBsaXR1ZGUge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNhcGlfa2V5IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FwaV9rZXl9XG4gICovXG4gIHJlYWRvbmx5IGFwaUtleTogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzZWNyZXRfa2V5IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3NlY3JldF9rZXl9XG4gICovXG4gIHJlYWRvbmx5IHNlY3JldEtleTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzQW1wbGl0dWRlVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzQW1wbGl0dWRlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFwaV9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBpS2V5KSxcbiAgICBzZWNyZXRfa2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlY3JldEtleSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNEYXRhZG9nIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYXBpX2tleSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhcGlfa2V5fVxuICAqL1xuICByZWFkb25seSBhcGlLZXk6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYXBwbGljYXRpb25fa2V5IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FwcGxpY2F0aW9uX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgYXBwbGljYXRpb25LZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0RhdGFkb2dUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNEYXRhZG9nKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFwaV9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBpS2V5KSxcbiAgICBhcHBsaWNhdGlvbl9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBwbGljYXRpb25LZXkpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzRHluYXRyYWNlIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYXBpX3Rva2VuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FwaV90b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgYXBpVG9rZW46IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0R5bmF0cmFjZVRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0R5bmF0cmFjZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcGlfdG9rZW46IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBpVG9rZW4pLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzR29vZ2xlQW5hbHl0aWNzQ29ubmVjdG9yT0F1dGhSZXF1ZXN0IHtcbiAgLyoqXG4gICogVGhlIGNvZGUgcHJvdmlkZWQgYnkgdGhlIGNvbm5lY3RvciB3aGVuIGl0IGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQgdmlhIHRoZSBjb25uZWN0ZWQgYXBwLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2F1dGhfY29kZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhdXRoX2NvZGV9XG4gICovXG4gIHJlYWRvbmx5IGF1dGhDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgVVJMIHRvIHdoaWNoIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2ZXIgcmVkaXJlY3RzIHRoZSBicm93c2VyIGFmdGVyIGF1dGhvcml6YXRpb24gaGFzIGJlZW5cbmdyYW50ZWQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVkaXJlY3RfdXJpIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JlZGlyZWN0X3VyaX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNHb29nbGVBbmFseXRpY3NDb25uZWN0b3JPQXV0aFJlcXVlc3RUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNHb29nbGVBbmFseXRpY3NDb25uZWN0b3JPQXV0aFJlcXVlc3QpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYXV0aF9jb2RlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmF1dGhDb2RlKSxcbiAgICByZWRpcmVjdF91cmk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVkaXJlY3RVcmkpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzR29vZ2xlQW5hbHl0aWNzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYWNjZXNzX3Rva2VuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FjY2Vzc190b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9pZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjbGllbnRfaWR9XG4gICovXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9zZWNyZXQgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY2xpZW50X3NlY3JldH1cbiAgKi9cbiAgcmVhZG9ubHkgY2xpZW50U2VjcmV0OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3R9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3Rvck9BdXRoUmVxdWVzdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0dvb2dsZUFuYWx5dGljc0Nvbm5lY3Rvck9BdXRoUmVxdWVzdDtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVmcmVzaF90b2tlbiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNyZWZyZXNoX3Rva2VufVxuICAqL1xuICByZWFkb25seSByZWZyZXNoVG9rZW4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNHb29nbGVBbmFseXRpY3NUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNHb29nbGVBbmFseXRpY3MpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYWNjZXNzX3Rva2VuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFjY2Vzc1Rva2VuKSxcbiAgICBjbGllbnRfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY2xpZW50SWQpLFxuICAgIGNsaWVudF9zZWNyZXQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY2xpZW50U2VjcmV0KSxcbiAgICBjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3Q6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0dvb2dsZUFuYWx5dGljc0Nvbm5lY3Rvck9BdXRoUmVxdWVzdFRvVGVycmFmb3JtKHN0cnVjdCEuY29ubmVjdG9yT0F1dGhSZXF1ZXN0KSxcbiAgICByZWZyZXNoX3Rva2VuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZnJlc2hUb2tlbiksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNJbmZvck5leHVzIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYWNjZXNzX2tleV9pZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhY2Nlc3Nfa2V5X2lkfVxuICAqL1xuICByZWFkb25seSBhY2Nlc3NLZXlJZDogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNkYXRha2V5IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2RhdGFrZXl9XG4gICovXG4gIHJlYWRvbmx5IGRhdGFrZXk6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjc2VjcmV0X2FjY2Vzc19rZXkgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjc2VjcmV0X2FjY2Vzc19rZXl9XG4gICovXG4gIHJlYWRvbmx5IHNlY3JldEFjY2Vzc0tleTogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCN1c2VyX2lkIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3VzZXJfaWR9XG4gICovXG4gIHJlYWRvbmx5IHVzZXJJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzSW5mb3JOZXh1c1RvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0luZm9yTmV4dXMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYWNjZXNzX2tleV9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hY2Nlc3NLZXlJZCksXG4gICAgZGF0YWtleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kYXRha2V5KSxcbiAgICBzZWNyZXRfYWNjZXNzX2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zZWNyZXRBY2Nlc3NLZXkpLFxuICAgIHVzZXJfaWQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudXNlcklkKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc01hcmtldG9Db25uZWN0b3JPQXV0aFJlcXVlc3Qge1xuICAvKipcbiAgKiBUaGUgY29kZSBwcm92aWRlZCBieSB0aGUgY29ubmVjdG9yIHdoZW4gaXQgaGFzIGJlZW4gYXV0aGVudGljYXRlZCB2aWEgdGhlIGNvbm5lY3RlZCBhcHAuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYXV0aF9jb2RlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2F1dGhfY29kZX1cbiAgKi9cbiAgcmVhZG9ubHkgYXV0aENvZGU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIFRoZSBVUkwgdG8gd2hpY2ggdGhlIGF1dGhlbnRpY2F0aW9uIHNlcnZlciByZWRpcmVjdHMgdGhlIGJyb3dzZXIgYWZ0ZXIgYXV0aG9yaXphdGlvbiBoYXMgYmVlblxuZ3JhbnRlZC5cbiAgKiBcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNyZWRpcmVjdF91cmkgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjcmVkaXJlY3RfdXJpfVxuICAqL1xuICByZWFkb25seSByZWRpcmVjdFVyaT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc01hcmtldG9Db25uZWN0b3JPQXV0aFJlcXVlc3RUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNNYXJrZXRvQ29ubmVjdG9yT0F1dGhSZXF1ZXN0KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGF1dGhfY29kZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hdXRoQ29kZSksXG4gICAgcmVkaXJlY3RfdXJpOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZGlyZWN0VXJpKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc01hcmtldG8ge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNhY2Nlc3NfdG9rZW4gQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjYWNjZXNzX3Rva2VufVxuICAqL1xuICByZWFkb25seSBhY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY2xpZW50X2lkIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2NsaWVudF9pZH1cbiAgKi9cbiAgcmVhZG9ubHkgY2xpZW50SWQ6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY2xpZW50X3NlY3JldCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjbGllbnRfc2VjcmV0fVxuICAqL1xuICByZWFkb25seSBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY29ubmVjdG9yX29fYXV0aF9yZXF1ZXN0IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2Nvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdH1cbiAgKi9cbiAgcmVhZG9ubHkgY29ubmVjdG9yT0F1dGhSZXF1ZXN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzTWFya2V0b0Nvbm5lY3Rvck9BdXRoUmVxdWVzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc01hcmtldG9Ub1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNNYXJrZXRvKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFjY2Vzc190b2tlbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hY2Nlc3NUb2tlbiksXG4gICAgY2xpZW50X2lkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNsaWVudElkKSxcbiAgICBjbGllbnRfc2VjcmV0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNsaWVudFNlY3JldCksXG4gICAgY29ubmVjdG9yX29fYXV0aF9yZXF1ZXN0OiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNNYXJrZXRvQ29ubmVjdG9yT0F1dGhSZXF1ZXN0VG9UZXJyYWZvcm0oc3RydWN0IS5jb25uZWN0b3JPQXV0aFJlcXVlc3QpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzUmVkc2hpZnQge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNwYXNzd29yZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNwYXNzd29yZH1cbiAgKi9cbiAgcmVhZG9ubHkgcGFzc3dvcmQ6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdXNlcm5hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjdXNlcm5hbWV9XG4gICovXG4gIHJlYWRvbmx5IHVzZXJuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNSZWRzaGlmdFRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1JlZHNoaWZ0KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIHBhc3N3b3JkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBhc3N3b3JkKSxcbiAgICB1c2VybmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS51c2VybmFtZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTYWxlc2ZvcmNlQ29ubmVjdG9yT0F1dGhSZXF1ZXN0IHtcbiAgLyoqXG4gICogVGhlIGNvZGUgcHJvdmlkZWQgYnkgdGhlIGNvbm5lY3RvciB3aGVuIGl0IGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQgdmlhIHRoZSBjb25uZWN0ZWQgYXBwLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2F1dGhfY29kZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhdXRoX2NvZGV9XG4gICovXG4gIHJlYWRvbmx5IGF1dGhDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgVVJMIHRvIHdoaWNoIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2ZXIgcmVkaXJlY3RzIHRoZSBicm93c2VyIGFmdGVyIGF1dGhvcml6YXRpb24gaGFzIGJlZW5cbmdyYW50ZWQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVkaXJlY3RfdXJpIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JlZGlyZWN0X3VyaX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTYWxlc2ZvcmNlQ29ubmVjdG9yT0F1dGhSZXF1ZXN0VG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2FsZXNmb3JjZUNvbm5lY3Rvck9BdXRoUmVxdWVzdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhdXRoX2NvZGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXV0aENvZGUpLFxuICAgIHJlZGlyZWN0X3VyaTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZWRpcmVjdFVyaSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTYWxlc2ZvcmNlIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYWNjZXNzX3Rva2VuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FjY2Vzc190b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9jcmVkZW50aWFsc19hcm4gQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY2xpZW50X2NyZWRlbnRpYWxzX2Fybn1cbiAgKi9cbiAgcmVhZG9ubHkgY2xpZW50Q3JlZGVudGlhbHNBcm4/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3R9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3Rvck9BdXRoUmVxdWVzdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NhbGVzZm9yY2VDb25uZWN0b3JPQXV0aFJlcXVlc3Q7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3JlZnJlc2hfdG9rZW4gQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjcmVmcmVzaF90b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgcmVmcmVzaFRva2VuPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2FsZXNmb3JjZVRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NhbGVzZm9yY2UpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYWNjZXNzX3Rva2VuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmFjY2Vzc1Rva2VuKSxcbiAgICBjbGllbnRfY3JlZGVudGlhbHNfYXJuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNsaWVudENyZWRlbnRpYWxzQXJuKSxcbiAgICBjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3Q6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NhbGVzZm9yY2VDb25uZWN0b3JPQXV0aFJlcXVlc3RUb1RlcnJhZm9ybShzdHJ1Y3QhLmNvbm5lY3Rvck9BdXRoUmVxdWVzdCksXG4gICAgcmVmcmVzaF90b2tlbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZWZyZXNoVG9rZW4pLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2VydmljZU5vdyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3Bhc3N3b3JkIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3Bhc3N3b3JkfVxuICAqL1xuICByZWFkb25seSBwYXNzd29yZDogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCN1c2VybmFtZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSN1c2VybmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NlcnZpY2VOb3dUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTZXJ2aWNlTm93KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIHBhc3N3b3JkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBhc3N3b3JkKSxcbiAgICB1c2VybmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS51c2VybmFtZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTaW5ndWxhciB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2FwaV9rZXkgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjYXBpX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgYXBpS2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTaW5ndWxhclRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1Npbmd1bGFyKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFwaV9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXBpS2V5KSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NsYWNrQ29ubmVjdG9yT0F1dGhSZXF1ZXN0IHtcbiAgLyoqXG4gICogVGhlIGNvZGUgcHJvdmlkZWQgYnkgdGhlIGNvbm5lY3RvciB3aGVuIGl0IGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQgdmlhIHRoZSBjb25uZWN0ZWQgYXBwLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2F1dGhfY29kZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhdXRoX2NvZGV9XG4gICovXG4gIHJlYWRvbmx5IGF1dGhDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgVVJMIHRvIHdoaWNoIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2ZXIgcmVkaXJlY3RzIHRoZSBicm93c2VyIGFmdGVyIGF1dGhvcml6YXRpb24gaGFzIGJlZW5cbmdyYW50ZWQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVkaXJlY3RfdXJpIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JlZGlyZWN0X3VyaX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbGFja0Nvbm5lY3Rvck9BdXRoUmVxdWVzdFRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NsYWNrQ29ubmVjdG9yT0F1dGhSZXF1ZXN0KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGF1dGhfY29kZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hdXRoQ29kZSksXG4gICAgcmVkaXJlY3RfdXJpOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZGlyZWN0VXJpKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NsYWNrIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYWNjZXNzX3Rva2VuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FjY2Vzc190b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9pZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjbGllbnRfaWR9XG4gICovXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9zZWNyZXQgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY2xpZW50X3NlY3JldH1cbiAgKi9cbiAgcmVhZG9ubHkgY2xpZW50U2VjcmV0OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3R9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3Rvck9BdXRoUmVxdWVzdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NsYWNrQ29ubmVjdG9yT0F1dGhSZXF1ZXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2xhY2tUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbGFjayk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhY2Nlc3NfdG9rZW46IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYWNjZXNzVG9rZW4pLFxuICAgIGNsaWVudF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jbGllbnRJZCksXG4gICAgY2xpZW50X3NlY3JldDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jbGllbnRTZWNyZXQpLFxuICAgIGNvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdDogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2xhY2tDb25uZWN0b3JPQXV0aFJlcXVlc3RUb1RlcnJhZm9ybShzdHJ1Y3QhLmNvbm5lY3Rvck9BdXRoUmVxdWVzdCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbm93Zmxha2Uge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNwYXNzd29yZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNwYXNzd29yZH1cbiAgKi9cbiAgcmVhZG9ubHkgcGFzc3dvcmQ6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdXNlcm5hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjdXNlcm5hbWV9XG4gICovXG4gIHJlYWRvbmx5IHVzZXJuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbm93Zmxha2VUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbm93Zmxha2UpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgcGFzc3dvcmQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucGFzc3dvcmQpLFxuICAgIHVzZXJuYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnVzZXJuYW1lKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1RyZW5kbWljcm8ge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNhcGlfc2VjcmV0X2tleSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhcGlfc2VjcmV0X2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgYXBpU2VjcmV0S2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNUcmVuZG1pY3JvVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVHJlbmRtaWNybyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhcGlfc2VjcmV0X2tleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hcGlTZWNyZXRLZXkpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVmVldmEge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNwYXNzd29yZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNwYXNzd29yZH1cbiAgKi9cbiAgcmVhZG9ubHkgcGFzc3dvcmQ6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdXNlcm5hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjdXNlcm5hbWV9XG4gICovXG4gIHJlYWRvbmx5IHVzZXJuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNWZWV2YVRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1ZlZXZhKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIHBhc3N3b3JkOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBhc3N3b3JkKSxcbiAgICB1c2VybmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS51c2VybmFtZSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNaZW5kZXNrQ29ubmVjdG9yT0F1dGhSZXF1ZXN0IHtcbiAgLyoqXG4gICogVGhlIGNvZGUgcHJvdmlkZWQgYnkgdGhlIGNvbm5lY3RvciB3aGVuIGl0IGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQgdmlhIHRoZSBjb25uZWN0ZWQgYXBwLlxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2F1dGhfY29kZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhdXRoX2NvZGV9XG4gICovXG4gIHJlYWRvbmx5IGF1dGhDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgVVJMIHRvIHdoaWNoIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2ZXIgcmVkaXJlY3RzIHRoZSBicm93c2VyIGFmdGVyIGF1dGhvcml6YXRpb24gaGFzIGJlZW5cbmdyYW50ZWQuXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVkaXJlY3RfdXJpIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JlZGlyZWN0X3VyaX1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNaZW5kZXNrQ29ubmVjdG9yT0F1dGhSZXF1ZXN0VG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzWmVuZGVza0Nvbm5lY3Rvck9BdXRoUmVxdWVzdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhdXRoX2NvZGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYXV0aENvZGUpLFxuICAgIHJlZGlyZWN0X3VyaTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yZWRpcmVjdFVyaSksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNaZW5kZXNrIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYWNjZXNzX3Rva2VuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2FjY2Vzc190b2tlbn1cbiAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9pZCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjbGllbnRfaWR9XG4gICovXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2NsaWVudF9zZWNyZXQgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY2xpZW50X3NlY3JldH1cbiAgKi9cbiAgcmVhZG9ubHkgY2xpZW50U2VjcmV0OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNjb25uZWN0b3Jfb19hdXRoX3JlcXVlc3R9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3Rvck9BdXRoUmVxdWVzdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1plbmRlc2tDb25uZWN0b3JPQXV0aFJlcXVlc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNaZW5kZXNrVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzWmVuZGVzayk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBhY2Nlc3NfdG9rZW46IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYWNjZXNzVG9rZW4pLFxuICAgIGNsaWVudF9pZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jbGllbnRJZCksXG4gICAgY2xpZW50X3NlY3JldDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jbGllbnRTZWNyZXQpLFxuICAgIGNvbm5lY3Rvcl9vX2F1dGhfcmVxdWVzdDogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzWmVuZGVza0Nvbm5lY3Rvck9BdXRoUmVxdWVzdFRvVGVycmFmb3JtKHN0cnVjdCEuY29ubmVjdG9yT0F1dGhSZXF1ZXN0KSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFscyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2FtcGxpdHVkZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNhbXBsaXR1ZGV9XG4gICovXG4gIHJlYWRvbmx5IGFtcGxpdHVkZT86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0FtcGxpdHVkZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjZGF0YWRvZyBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNkYXRhZG9nfVxuICAqL1xuICByZWFkb25seSBkYXRhZG9nPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzRGF0YWRvZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjZHluYXRyYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2R5bmF0cmFjZX1cbiAgKi9cbiAgcmVhZG9ubHkgZHluYXRyYWNlPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzRHluYXRyYWNlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNnb29nbGVfYW5hbHl0aWNzIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2dvb2dsZV9hbmFseXRpY3N9XG4gICovXG4gIHJlYWRvbmx5IGdvb2dsZUFuYWx5dGljcz86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc0dvb2dsZUFuYWx5dGljcztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjaW5mb3JfbmV4dXMgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjaW5mb3JfbmV4dXN9XG4gICovXG4gIHJlYWRvbmx5IGluZm9yTmV4dXM/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNJbmZvck5leHVzO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNtYXJrZXRvIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI21hcmtldG99XG4gICovXG4gIHJlYWRvbmx5IG1hcmtldG8/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNNYXJrZXRvO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNyZWRzaGlmdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNyZWRzaGlmdH1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkc2hpZnQ/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNSZWRzaGlmdDtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjc2FsZXNmb3JjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNzYWxlc2ZvcmNlfVxuICAqL1xuICByZWFkb25seSBzYWxlc2ZvcmNlPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2FsZXNmb3JjZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjc2VydmljZV9ub3cgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjc2VydmljZV9ub3d9XG4gICovXG4gIHJlYWRvbmx5IHNlcnZpY2VOb3c/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTZXJ2aWNlTm93O1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzaW5ndWxhciBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNzaW5ndWxhcn1cbiAgKi9cbiAgcmVhZG9ubHkgc2luZ3VsYXI/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTaW5ndWxhcjtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjc2xhY2sgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjc2xhY2t9XG4gICovXG4gIHJlYWRvbmx5IHNsYWNrPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2xhY2s7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3Nub3dmbGFrZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNzbm93Zmxha2V9XG4gICovXG4gIHJlYWRvbmx5IHNub3dmbGFrZT86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1Nub3dmbGFrZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdHJlbmRtaWNybyBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSN0cmVuZG1pY3JvfVxuICAqL1xuICByZWFkb25seSB0cmVuZG1pY3JvPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVHJlbmRtaWNybztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdmVldmEgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjdmVldmF9XG4gICovXG4gIHJlYWRvbmx5IHZlZXZhPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVmVldmE7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3plbmRlc2sgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjemVuZGVza31cbiAgKi9cbiAgcmVhZG9ubHkgemVuZGVzaz86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1plbmRlc2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIHJldHVybiB7XG4gICAgYW1wbGl0dWRlOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNBbXBsaXR1ZGVUb1RlcnJhZm9ybShzdHJ1Y3QhLmFtcGxpdHVkZSksXG4gICAgZGF0YWRvZzogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzRGF0YWRvZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGF0YWRvZyksXG4gICAgZHluYXRyYWNlOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNEeW5hdHJhY2VUb1RlcnJhZm9ybShzdHJ1Y3QhLmR5bmF0cmFjZSksXG4gICAgZ29vZ2xlX2FuYWx5dGljczogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzR29vZ2xlQW5hbHl0aWNzVG9UZXJyYWZvcm0oc3RydWN0IS5nb29nbGVBbmFseXRpY3MpLFxuICAgIGluZm9yX25leHVzOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNJbmZvck5leHVzVG9UZXJyYWZvcm0oc3RydWN0IS5pbmZvck5leHVzKSxcbiAgICBtYXJrZXRvOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNNYXJrZXRvVG9UZXJyYWZvcm0oc3RydWN0IS5tYXJrZXRvKSxcbiAgICByZWRzaGlmdDogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzUmVkc2hpZnRUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZHNoaWZ0KSxcbiAgICBzYWxlc2ZvcmNlOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTYWxlc2ZvcmNlVG9UZXJyYWZvcm0oc3RydWN0IS5zYWxlc2ZvcmNlKSxcbiAgICBzZXJ2aWNlX25vdzogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzU2VydmljZU5vd1RvVGVycmFmb3JtKHN0cnVjdCEuc2VydmljZU5vdyksXG4gICAgc2luZ3VsYXI6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1Npbmd1bGFyVG9UZXJyYWZvcm0oc3RydWN0IS5zaW5ndWxhciksXG4gICAgc2xhY2s6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1NsYWNrVG9UZXJyYWZvcm0oc3RydWN0IS5zbGFjayksXG4gICAgc25vd2ZsYWtlOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHNTbm93Zmxha2VUb1RlcnJhZm9ybShzdHJ1Y3QhLnNub3dmbGFrZSksXG4gICAgdHJlbmRtaWNybzogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVHJlbmRtaWNyb1RvVGVycmFmb3JtKHN0cnVjdCEudHJlbmRtaWNybyksXG4gICAgdmVldmE6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsc1ZlZXZhVG9UZXJyYWZvcm0oc3RydWN0IS52ZWV2YSksXG4gICAgemVuZGVzazogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzWmVuZGVza1RvVGVycmFmb3JtKHN0cnVjdCEuemVuZGVzayksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0RhdGFkb2cge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNpbnN0YW5jZV91cmwgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjaW5zdGFuY2VfdXJsfVxuICAqL1xuICByZWFkb25seSBpbnN0YW5jZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNEYXRhZG9nVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNEYXRhZG9nKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGluc3RhbmNlX3VybDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVVybCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0R5bmF0cmFjZSB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2luc3RhbmNlX3VybCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNpbnN0YW5jZV91cmx9XG4gICovXG4gIHJlYWRvbmx5IGluc3RhbmNlVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0R5bmF0cmFjZVRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzRHluYXRyYWNlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGluc3RhbmNlX3VybDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVVybCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0luZm9yTmV4dXMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNpbnN0YW5jZV91cmwgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjaW5zdGFuY2VfdXJsfVxuICAqL1xuICByZWFkb25seSBpbnN0YW5jZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNJbmZvck5leHVzVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNJbmZvck5leHVzKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGluc3RhbmNlX3VybDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVVybCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc01hcmtldG8ge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNpbnN0YW5jZV91cmwgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjaW5zdGFuY2VfdXJsfVxuICAqL1xuICByZWFkb25seSBpbnN0YW5jZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNNYXJrZXRvVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNNYXJrZXRvKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGluc3RhbmNlX3VybDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVVybCksXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1JlZHNoaWZ0IHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYnVja2V0X25hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjYnVja2V0X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYnVja2V0X3ByZWZpeCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNidWNrZXRfcHJlZml4fVxuICAqL1xuICByZWFkb25seSBidWNrZXRQcmVmaXg/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2RhdGFiYXNlX3VybCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNkYXRhYmFzZV91cmx9XG4gICovXG4gIHJlYWRvbmx5IGRhdGFiYXNlVXJsOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3JvbGVfYXJuIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JvbGVfYXJufVxuICAqL1xuICByZWFkb25seSByb2xlQXJuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1JlZHNoaWZ0VG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNSZWRzaGlmdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBidWNrZXRfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5idWNrZXROYW1lKSxcbiAgICBidWNrZXRfcHJlZml4OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmJ1Y2tldFByZWZpeCksXG4gICAgZGF0YWJhc2VfdXJsOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmRhdGFiYXNlVXJsKSxcbiAgICByb2xlX2FybjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5yb2xlQXJuKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2FsZXNmb3JjZSB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2luc3RhbmNlX3VybCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNpbnN0YW5jZV91cmx9XG4gICovXG4gIHJlYWRvbmx5IGluc3RhbmNlVXJsPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNpc19zYW5kYm94X2Vudmlyb25tZW50IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2lzX3NhbmRib3hfZW52aXJvbm1lbnR9XG4gICovXG4gIHJlYWRvbmx5IGlzU2FuZGJveEVudmlyb25tZW50PzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTYWxlc2ZvcmNlVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTYWxlc2ZvcmNlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGluc3RhbmNlX3VybDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnN0YW5jZVVybCksXG4gICAgaXNfc2FuZGJveF9lbnZpcm9ubWVudDogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuaXNTYW5kYm94RW52aXJvbm1lbnQpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTZXJ2aWNlTm93IHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjaW5zdGFuY2VfdXJsIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2luc3RhbmNlX3VybH1cbiAgKi9cbiAgcmVhZG9ubHkgaW5zdGFuY2VVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2VydmljZU5vd1RvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2VydmljZU5vdyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZV91cmw6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW5zdGFuY2VVcmwpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTbGFjayB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2luc3RhbmNlX3VybCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNpbnN0YW5jZV91cmx9XG4gICovXG4gIHJlYWRvbmx5IGluc3RhbmNlVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1NsYWNrVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTbGFjayk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZV91cmw6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW5zdGFuY2VVcmwpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTbm93Zmxha2Uge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNhY2NvdW50X25hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjYWNjb3VudF9uYW1lfVxuICAqL1xuICByZWFkb25seSBhY2NvdW50TmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYnVja2V0X25hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjYnVja2V0X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjYnVja2V0X3ByZWZpeCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNidWNrZXRfcHJlZml4fVxuICAqL1xuICByZWFkb25seSBidWNrZXRQcmVmaXg/OiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3ByaXZhdGVfbGlua19zZXJ2aWNlX25hbWUgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjcHJpdmF0ZV9saW5rX3NlcnZpY2VfbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgcHJpdmF0ZUxpbmtTZXJ2aWNlTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjcmVnaW9uIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3JlZ2lvbn1cbiAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzdGFnZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNzdGFnZX1cbiAgKi9cbiAgcmVhZG9ubHkgc3RhZ2U6IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjd2FyZWhvdXNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3dhcmVob3VzZX1cbiAgKi9cbiAgcmVhZG9ubHkgd2FyZWhvdXNlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1Nub3dmbGFrZVRvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU25vd2ZsYWtlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICByZXR1cm4ge1xuICAgIGFjY291bnRfbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5hY2NvdW50TmFtZSksXG4gICAgYnVja2V0X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuYnVja2V0TmFtZSksXG4gICAgYnVja2V0X3ByZWZpeDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5idWNrZXRQcmVmaXgpLFxuICAgIHByaXZhdGVfbGlua19zZXJ2aWNlX25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEucHJpdmF0ZUxpbmtTZXJ2aWNlTmFtZSksXG4gICAgcmVnaW9uOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZ2lvbiksXG4gICAgc3RhZ2U6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3RhZ2UpLFxuICAgIHdhcmVob3VzZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS53YXJlaG91c2UpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNWZWV2YSB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2luc3RhbmNlX3VybCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNpbnN0YW5jZV91cmx9XG4gICovXG4gIHJlYWRvbmx5IGluc3RhbmNlVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1ZlZXZhVG9UZXJyYWZvcm0oc3RydWN0PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNWZWV2YSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZV91cmw6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW5zdGFuY2VVcmwpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNaZW5kZXNrIHtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjaW5zdGFuY2VfdXJsIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2luc3RhbmNlX3VybH1cbiAgKi9cbiAgcmVhZG9ubHkgaW5zdGFuY2VVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzWmVuZGVza1RvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzWmVuZGVzayk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZV91cmw6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW5zdGFuY2VVcmwpLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXMge1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNkYXRhZG9nIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI2RhdGFkb2d9XG4gICovXG4gIHJlYWRvbmx5IGRhdGFkb2c/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0RhdGFkb2c7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2R5bmF0cmFjZSBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNkeW5hdHJhY2V9XG4gICovXG4gIHJlYWRvbmx5IGR5bmF0cmFjZT86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzRHluYXRyYWNlO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNpbmZvcl9uZXh1cyBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNpbmZvcl9uZXh1c31cbiAgKi9cbiAgcmVhZG9ubHkgaW5mb3JOZXh1cz86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzSW5mb3JOZXh1cztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjbWFya2V0byBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNtYXJrZXRvfVxuICAqL1xuICByZWFkb25seSBtYXJrZXRvPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNNYXJrZXRvO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNyZWRzaGlmdCBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNyZWRzaGlmdH1cbiAgKi9cbiAgcmVhZG9ubHkgcmVkc2hpZnQ/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1JlZHNoaWZ0O1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzYWxlc2ZvcmNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3NhbGVzZm9yY2V9XG4gICovXG4gIHJlYWRvbmx5IHNhbGVzZm9yY2U/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1NhbGVzZm9yY2U7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI3NlcnZpY2Vfbm93IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlI3NlcnZpY2Vfbm93fVxuICAqL1xuICByZWFkb25seSBzZXJ2aWNlTm93PzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNTZXJ2aWNlTm93O1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzbGFjayBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSNzbGFja31cbiAgKi9cbiAgcmVhZG9ubHkgc2xhY2s/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1NsYWNrO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCNzbm93Zmxha2UgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjc25vd2ZsYWtlfVxuICAqL1xuICByZWFkb25seSBzbm93Zmxha2U/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1Nub3dmbGFrZTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjdmVldmEgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjdmVldmF9XG4gICovXG4gIHJlYWRvbmx5IHZlZXZhPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNWZWV2YTtcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjemVuZGVzayBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZSN6ZW5kZXNrfVxuICAqL1xuICByZWFkb25seSB6ZW5kZXNrPzogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNaZW5kZXNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllcyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBkYXRhZG9nOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc0RhdGFkb2dUb1RlcnJhZm9ybShzdHJ1Y3QhLmRhdGFkb2cpLFxuICAgIGR5bmF0cmFjZTogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNEeW5hdHJhY2VUb1RlcnJhZm9ybShzdHJ1Y3QhLmR5bmF0cmFjZSksXG4gICAgaW5mb3JfbmV4dXM6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzSW5mb3JOZXh1c1RvVGVycmFmb3JtKHN0cnVjdCEuaW5mb3JOZXh1cyksXG4gICAgbWFya2V0bzogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNNYXJrZXRvVG9UZXJyYWZvcm0oc3RydWN0IS5tYXJrZXRvKSxcbiAgICByZWRzaGlmdDogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNSZWRzaGlmdFRvVGVycmFmb3JtKHN0cnVjdCEucmVkc2hpZnQpLFxuICAgIHNhbGVzZm9yY2U6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2FsZXNmb3JjZVRvVGVycmFmb3JtKHN0cnVjdCEuc2FsZXNmb3JjZSksXG4gICAgc2VydmljZV9ub3c6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2VydmljZU5vd1RvVGVycmFmb3JtKHN0cnVjdCEuc2VydmljZU5vdyksXG4gICAgc2xhY2s6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU2xhY2tUb1RlcnJhZm9ybShzdHJ1Y3QhLnNsYWNrKSxcbiAgICBzbm93Zmxha2U6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzU25vd2ZsYWtlVG9UZXJyYWZvcm0oc3RydWN0IS5zbm93Zmxha2UpLFxuICAgIHZlZXZhOiBhcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllc1ZlZXZhVG9UZXJyYWZvcm0oc3RydWN0IS52ZWV2YSksXG4gICAgemVuZGVzazogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXNaZW5kZXNrVG9UZXJyYWZvcm0oc3RydWN0IS56ZW5kZXNrKSxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZyB7XG4gIC8qKlxuICAqIENvbm5lY3RvciBzcGVjaWZpYyBjb25maWd1cmF0aW9uIG5lZWRlZCB0byBjcmVhdGUgY29ubmVjdG9yIHByb2ZpbGUgYmFzZWQgb24gQXV0aGVudGljYXRpb24gbWVjaGFuaXNtXG4gICogXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwjY29ubmVjdG9yX3Byb2ZpbGVfY3JlZGVudGlhbHMgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY29ubmVjdG9yX3Byb2ZpbGVfY3JlZGVudGlhbHN9XG4gICovXG4gIHJlYWRvbmx5IGNvbm5lY3RvclByb2ZpbGVDcmVkZW50aWFsczogQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzO1xuICAvKipcbiAgKiBDb25uZWN0b3Igc3BlY2lmaWMgcHJvcGVydGllcyBuZWVkZWQgdG8gY3JlYXRlIGNvbm5lY3RvciBwcm9maWxlIC0gY3VycmVudGx5IG5vdCBuZWVkZWQgZm9yIEFtcGxpdHVkZSwgVHJlbmRtaWNybywgR29vZ2xlYW5hbHl0aWNzIGFuZCBTaW5ndWxhclxuICAqIFxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2RvY3MvcHJvdmlkZXJzL2F3c2NjL3IvYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZS5odG1sI2Nvbm5lY3Rvcl9wcm9maWxlX3Byb3BlcnRpZXMgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUjY29ubmVjdG9yX3Byb2ZpbGVfcHJvcGVydGllc31cbiAgKi9cbiAgcmVhZG9ubHkgY29ubmVjdG9yUHJvZmlsZVByb3BlcnRpZXM/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWdDb25uZWN0b3JQcm9maWxlUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdD86IEFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgcmV0dXJuIHtcbiAgICBjb25uZWN0b3JfcHJvZmlsZV9jcmVkZW50aWFsczogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnQ29ubmVjdG9yUHJvZmlsZUNyZWRlbnRpYWxzVG9UZXJyYWZvcm0oc3RydWN0IS5jb25uZWN0b3JQcm9maWxlQ3JlZGVudGlhbHMpLFxuICAgIGNvbm5lY3Rvcl9wcm9maWxlX3Byb3BlcnRpZXM6IGFwcGZsb3dDb25uZWN0b3JQcm9maWxlQ29ubmVjdG9yUHJvZmlsZUNvbmZpZ0Nvbm5lY3RvclByb2ZpbGVQcm9wZXJ0aWVzVG9UZXJyYWZvcm0oc3RydWN0IS5jb25uZWN0b3JQcm9maWxlUHJvcGVydGllcyksXG4gIH1cbn1cblxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvYXdzY2Mvci9hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlLmh0bWwgYXdzY2NfYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZX1cbiovXG5leHBvcnQgY2xhc3MgQXBwZmxvd0Nvbm5lY3RvclByb2ZpbGUgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZTogc3RyaW5nID0gXCJhd3NjY19hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlXCI7XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9kb2NzL3Byb3ZpZGVycy9hd3NjYy9yL2FwcGZsb3dfY29ubmVjdG9yX3Byb2ZpbGUuaHRtbCBhd3NjY19hcHBmbG93X2Nvbm5lY3Rvcl9wcm9maWxlfSBSZXNvdXJjZVxuICAqXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaWQgVGhlIHNjb3BlZCBjb25zdHJ1Y3QgSUQuIE11c3QgYmUgdW5pcXVlIGFtb25nc3Qgc2libGluZ3MgaW4gdGhlIHNhbWUgc2NvcGVcbiAgKiBAcGFyYW0gb3B0aW9ucyBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbmZpZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgdGVycmFmb3JtUmVzb3VyY2VUeXBlOiAnYXdzY2NfYXBwZmxvd19jb25uZWN0b3JfcHJvZmlsZScsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdhd3NjYydcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgZGVwZW5kc09uOiBjb25maWcuZGVwZW5kc09uLFxuICAgICAgY291bnQ6IGNvbmZpZy5jb3VudCxcbiAgICAgIGxpZmVjeWNsZTogY29uZmlnLmxpZmVjeWNsZVxuICAgIH0pO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb25Nb2RlID0gY29uZmlnLmNvbm5lY3Rpb25Nb2RlO1xuICAgIHRoaXMuX2Nvbm5lY3RvclByb2ZpbGVDb25maWcgPSBjb25maWcuY29ubmVjdG9yUHJvZmlsZUNvbmZpZztcbiAgICB0aGlzLl9jb25uZWN0b3JQcm9maWxlTmFtZSA9IGNvbmZpZy5jb25uZWN0b3JQcm9maWxlTmFtZTtcbiAgICB0aGlzLl9jb25uZWN0b3JUeXBlID0gY29uZmlnLmNvbm5lY3RvclR5cGU7XG4gICAgdGhpcy5fa21zQXJuID0gY29uZmlnLmttc0FybjtcbiAgfVxuXG4gIC8vID09PT09PT09PT1cbiAgLy8gQVRUUklCVVRFU1xuICAvLyA9PT09PT09PT09XG5cbiAgLy8gY29ubmVjdGlvbl9tb2RlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2Nvbm5lY3Rpb25Nb2RlOiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgY29ubmVjdGlvbk1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjb25uZWN0aW9uX21vZGUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNvbm5lY3Rpb25Nb2RlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uTW9kZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb25uZWN0aW9uTW9kZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uTW9kZVxuICB9XG5cbiAgLy8gY29ubmVjdG9yX3Byb2ZpbGVfYXJuIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yUHJvZmlsZUFybigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2Nvbm5lY3Rvcl9wcm9maWxlX2FybicpO1xuICB9XG5cbiAgLy8gY29ubmVjdG9yX3Byb2ZpbGVfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Nvbm5lY3RvclByb2ZpbGVDb25maWc/OiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWc7XG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yUHJvZmlsZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKCdjb25uZWN0b3JfcHJvZmlsZV9jb25maWcnKSBhcyBhbnk7XG4gIH1cbiAgcHVibGljIHNldCBjb25uZWN0b3JQcm9maWxlQ29uZmlnKHZhbHVlOiBBcHBmbG93Q29ubmVjdG9yUHJvZmlsZUNvbm5lY3RvclByb2ZpbGVDb25maWcgKSB7XG4gICAgdGhpcy5fY29ubmVjdG9yUHJvZmlsZUNvbmZpZyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENvbm5lY3RvclByb2ZpbGVDb25maWcoKSB7XG4gICAgdGhpcy5fY29ubmVjdG9yUHJvZmlsZUNvbmZpZyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yUHJvZmlsZUNvbmZpZ0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0b3JQcm9maWxlQ29uZmlnXG4gIH1cblxuICAvLyBjb25uZWN0b3JfcHJvZmlsZV9uYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2Nvbm5lY3RvclByb2ZpbGVOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yUHJvZmlsZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjb25uZWN0b3JfcHJvZmlsZV9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBjb25uZWN0b3JQcm9maWxlTmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29ubmVjdG9yUHJvZmlsZU5hbWUgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yUHJvZmlsZU5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yUHJvZmlsZU5hbWVcbiAgfVxuXG4gIC8vIGNvbm5lY3Rvcl90eXBlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2Nvbm5lY3RvclR5cGU6IHN0cmluZztcbiAgcHVibGljIGdldCBjb25uZWN0b3JUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY29ubmVjdG9yX3R5cGUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNvbm5lY3RvclR5cGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2Nvbm5lY3RvclR5cGUgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY29ubmVjdG9yVHlwZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0b3JUeXBlXG4gIH1cblxuICAvLyBjcmVkZW50aWFsc19hcm4gLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBjcmVkZW50aWFsc0FybigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2NyZWRlbnRpYWxzX2FybicpO1xuICB9XG5cbiAgLy8gaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogZmFsc2VcbiAgcHVibGljIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2lkJyk7XG4gIH1cblxuICAvLyBrbXNfYXJuIC0gY29tcHV0ZWQ6IHRydWUsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfa21zQXJuPzogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGttc0FybigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ttc19hcm4nKTtcbiAgfVxuICBwdWJsaWMgc2V0IGttc0Fybih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fa21zQXJuID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0S21zQXJuKCkge1xuICAgIHRoaXMuX2ttc0FybiA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQga21zQXJuSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ttc0FyblxuICB9XG5cbiAgLy8gPT09PT09PT09XG4gIC8vIFNZTlRIRVNJU1xuICAvLyA9PT09PT09PT1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB7XG4gICAgICBjb25uZWN0aW9uX21vZGU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHRoaXMuX2Nvbm5lY3Rpb25Nb2RlKSxcbiAgICAgIGNvbm5lY3Rvcl9wcm9maWxlX2NvbmZpZzogYXBwZmxvd0Nvbm5lY3RvclByb2ZpbGVDb25uZWN0b3JQcm9maWxlQ29uZmlnVG9UZXJyYWZvcm0odGhpcy5fY29ubmVjdG9yUHJvZmlsZUNvbmZpZyksXG4gICAgICBjb25uZWN0b3JfcHJvZmlsZV9uYW1lOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9jb25uZWN0b3JQcm9maWxlTmFtZSksXG4gICAgICBjb25uZWN0b3JfdHlwZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fY29ubmVjdG9yVHlwZSksXG4gICAgICBrbXNfYXJuOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9rbXNBcm4pLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==