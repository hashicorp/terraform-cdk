"use strict";
// https://www.terraform.io/docs/providers/awscc/r/ec2_prefix_list.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2PrefixList = exports.ec2PrefixListTagsToTerraform = exports.ec2PrefixListEntriesToTerraform = void 0;
const cdktf = require("cdktf");
function ec2PrefixListEntriesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cidr: cdktf.stringToTerraform(struct.cidr),
        description: cdktf.stringToTerraform(struct.description),
    };
}
exports.ec2PrefixListEntriesToTerraform = ec2PrefixListEntriesToTerraform;
function ec2PrefixListTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.ec2PrefixListTagsToTerraform = ec2PrefixListTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/ec2_prefix_list.html awscc_ec2_prefix_list}
*/
class Ec2PrefixList extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/ec2_prefix_list.html awscc_ec2_prefix_list} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2PrefixListConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_ec2_prefix_list',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._addressFamily = config.addressFamily;
        this._entries = config.entries;
        this._maxEntries = config.maxEntries;
        this._prefixListName = config.prefixListName;
        this._tags = config.tags;
    }
    get addressFamily() {
        return this.getStringAttribute('address_family');
    }
    set addressFamily(value) {
        this._addressFamily = value;
    }
    // Temporarily expose input value. Use with caution.
    get addressFamilyInput() {
        return this._addressFamily;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get entries() {
        return this.interpolationForAttribute('entries');
    }
    set entries(value) {
        this._entries = value;
    }
    resetEntries() {
        this._entries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entriesInput() {
        return this._entries;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get maxEntries() {
        return this.getNumberAttribute('max_entries');
    }
    set maxEntries(value) {
        this._maxEntries = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxEntriesInput() {
        return this._maxEntries;
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    // prefix_list_id - computed: true, optional: false, required: false
    get prefixListId() {
        return this.getStringAttribute('prefix_list_id');
    }
    get prefixListName() {
        return this.getStringAttribute('prefix_list_name');
    }
    set prefixListName(value) {
        this._prefixListName = value;
    }
    // Temporarily expose input value. Use with caution.
    get prefixListNameInput() {
        return this._prefixListName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getNumberAttribute('version');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            address_family: cdktf.stringToTerraform(this._addressFamily),
            entries: cdktf.listMapper(ec2PrefixListEntriesToTerraform)(this._entries),
            max_entries: cdktf.numberToTerraform(this._maxEntries),
            prefix_list_name: cdktf.stringToTerraform(this._prefixListName),
            tags: cdktf.listMapper(ec2PrefixListTagsToTerraform)(this._tags),
        };
    }
}
exports.Ec2PrefixList = Ec2PrefixList;
// =================
// STATIC PROPERTIES
// =================
Ec2PrefixList.tfResourceType = "awscc_ec2_prefix_list";
//# sourceMappingURL=data:application/json;base64,