"use strict";
// https://www.terraform.io/docs/providers/awscc/r/imagebuilder_container_recipe.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderContainerRecipe = exports.imagebuilderContainerRecipeTargetRepositoryToTerraform = exports.imagebuilderContainerRecipeInstanceConfigurationToTerraform = exports.imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsToTerraform = exports.imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsEbsToTerraform = exports.imagebuilderContainerRecipeComponentsToTerraform = void 0;
const cdktf = require("cdktf");
function imagebuilderContainerRecipeComponentsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        component_arn: cdktf.stringToTerraform(struct.componentArn),
    };
}
exports.imagebuilderContainerRecipeComponentsToTerraform = imagebuilderContainerRecipeComponentsToTerraform;
function imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsEbsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        snapshot_id: cdktf.stringToTerraform(struct.snapshotId),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsEbsToTerraform = imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsEbsToTerraform;
function imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        ebs: imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsEbsToTerraform(struct.ebs),
        no_device: cdktf.stringToTerraform(struct.noDevice),
        virtual_name: cdktf.stringToTerraform(struct.virtualName),
    };
}
exports.imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsToTerraform = imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsToTerraform;
function imagebuilderContainerRecipeInstanceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_device_mappings: cdktf.listMapper(imagebuilderContainerRecipeInstanceConfigurationBlockDeviceMappingsToTerraform)(struct.blockDeviceMappings),
        image: cdktf.stringToTerraform(struct.image),
    };
}
exports.imagebuilderContainerRecipeInstanceConfigurationToTerraform = imagebuilderContainerRecipeInstanceConfigurationToTerraform;
function imagebuilderContainerRecipeTargetRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        repository_name: cdktf.stringToTerraform(struct.repositoryName),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.imagebuilderContainerRecipeTargetRepositoryToTerraform = imagebuilderContainerRecipeTargetRepositoryToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_container_recipe.html awscc_imagebuilder_container_recipe}
*/
class ImagebuilderContainerRecipe extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/imagebuilder_container_recipe.html awscc_imagebuilder_container_recipe} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderContainerRecipeConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_imagebuilder_container_recipe',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._components = config.components;
        this._containerType = config.containerType;
        this._description = config.description;
        this._dockerfileTemplateData = config.dockerfileTemplateData;
        this._dockerfileTemplateUri = config.dockerfileTemplateUri;
        this._imageOsVersionOverride = config.imageOsVersionOverride;
        this._instanceConfiguration = config.instanceConfiguration;
        this._kmsKeyId = config.kmsKeyId;
        this._name = config.name;
        this._parentImage = config.parentImage;
        this._platformOverride = config.platformOverride;
        this._tags = config.tags;
        this._targetRepository = config.targetRepository;
        this._version = config.version;
        this._workingDirectory = config.workingDirectory;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get components() {
        return this.interpolationForAttribute('components');
    }
    set components(value) {
        this._components = value;
    }
    resetComponents() {
        this._components = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get componentsInput() {
        return this._components;
    }
    get containerType() {
        return this.getStringAttribute('container_type');
    }
    set containerType(value) {
        this._containerType = value;
    }
    resetContainerType() {
        this._containerType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerTypeInput() {
        return this._containerType;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get dockerfileTemplateData() {
        return this.getStringAttribute('dockerfile_template_data');
    }
    set dockerfileTemplateData(value) {
        this._dockerfileTemplateData = value;
    }
    resetDockerfileTemplateData() {
        this._dockerfileTemplateData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerfileTemplateDataInput() {
        return this._dockerfileTemplateData;
    }
    get dockerfileTemplateUri() {
        return this.getStringAttribute('dockerfile_template_uri');
    }
    set dockerfileTemplateUri(value) {
        this._dockerfileTemplateUri = value;
    }
    resetDockerfileTemplateUri() {
        this._dockerfileTemplateUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerfileTemplateUriInput() {
        return this._dockerfileTemplateUri;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get imageOsVersionOverride() {
        return this.getStringAttribute('image_os_version_override');
    }
    set imageOsVersionOverride(value) {
        this._imageOsVersionOverride = value;
    }
    resetImageOsVersionOverride() {
        this._imageOsVersionOverride = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageOsVersionOverrideInput() {
        return this._imageOsVersionOverride;
    }
    get instanceConfiguration() {
        return this.interpolationForAttribute('instance_configuration');
    }
    set instanceConfiguration(value) {
        this._instanceConfiguration = value;
    }
    resetInstanceConfiguration() {
        this._instanceConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceConfigurationInput() {
        return this._instanceConfiguration;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parentImage() {
        return this.getStringAttribute('parent_image');
    }
    set parentImage(value) {
        this._parentImage = value;
    }
    resetParentImage() {
        this._parentImage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parentImageInput() {
        return this._parentImage;
    }
    get platformOverride() {
        return this.getStringAttribute('platform_override');
    }
    set platformOverride(value) {
        this._platformOverride = value;
    }
    resetPlatformOverride() {
        this._platformOverride = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformOverrideInput() {
        return this._platformOverride;
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targetRepository() {
        return this.interpolationForAttribute('target_repository');
    }
    set targetRepository(value) {
        this._targetRepository = value;
    }
    resetTargetRepository() {
        this._targetRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetRepositoryInput() {
        return this._targetRepository;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get workingDirectory() {
        return this.getStringAttribute('working_directory');
    }
    set workingDirectory(value) {
        this._workingDirectory = value;
    }
    resetWorkingDirectory() {
        this._workingDirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workingDirectoryInput() {
        return this._workingDirectory;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            components: cdktf.listMapper(imagebuilderContainerRecipeComponentsToTerraform)(this._components),
            container_type: cdktf.stringToTerraform(this._containerType),
            description: cdktf.stringToTerraform(this._description),
            dockerfile_template_data: cdktf.stringToTerraform(this._dockerfileTemplateData),
            dockerfile_template_uri: cdktf.stringToTerraform(this._dockerfileTemplateUri),
            image_os_version_override: cdktf.stringToTerraform(this._imageOsVersionOverride),
            instance_configuration: imagebuilderContainerRecipeInstanceConfigurationToTerraform(this._instanceConfiguration),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            name: cdktf.stringToTerraform(this._name),
            parent_image: cdktf.stringToTerraform(this._parentImage),
            platform_override: cdktf.stringToTerraform(this._platformOverride),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            target_repository: imagebuilderContainerRecipeTargetRepositoryToTerraform(this._targetRepository),
            version: cdktf.stringToTerraform(this._version),
            working_directory: cdktf.stringToTerraform(this._workingDirectory),
        };
    }
}
exports.ImagebuilderContainerRecipe = ImagebuilderContainerRecipe;
// =================
// STATIC PROPERTIES
// =================
ImagebuilderContainerRecipe.tfResourceType = "awscc_imagebuilder_container_recipe";
//# sourceMappingURL=data:application/json;base64,