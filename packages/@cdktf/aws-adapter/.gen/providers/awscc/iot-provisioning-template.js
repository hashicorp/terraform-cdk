"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_provisioning_template.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotProvisioningTemplate = exports.iotProvisioningTemplateTagsToTerraform = exports.iotProvisioningTemplatePreProvisioningHookToTerraform = void 0;
const cdktf = require("cdktf");
function iotProvisioningTemplatePreProvisioningHookToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        payload_version: cdktf.stringToTerraform(struct.payloadVersion),
        target_arn: cdktf.stringToTerraform(struct.targetArn),
    };
}
exports.iotProvisioningTemplatePreProvisioningHookToTerraform = iotProvisioningTemplatePreProvisioningHookToTerraform;
function iotProvisioningTemplateTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotProvisioningTemplateTagsToTerraform = iotProvisioningTemplateTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_provisioning_template.html awscc_iot_provisioning_template}
*/
class IotProvisioningTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_provisioning_template.html awscc_iot_provisioning_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotProvisioningTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_provisioning_template',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._enabled = config.enabled;
        this._preProvisioningHook = config.preProvisioningHook;
        this._provisioningRoleArn = config.provisioningRoleArn;
        this._tags = config.tags;
        this._templateBody = config.templateBody;
        this._templateName = config.templateName;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get preProvisioningHook() {
        return this.interpolationForAttribute('pre_provisioning_hook');
    }
    set preProvisioningHook(value) {
        this._preProvisioningHook = value;
    }
    resetPreProvisioningHook() {
        this._preProvisioningHook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preProvisioningHookInput() {
        return this._preProvisioningHook;
    }
    get provisioningRoleArn() {
        return this.getStringAttribute('provisioning_role_arn');
    }
    set provisioningRoleArn(value) {
        this._provisioningRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningRoleArnInput() {
        return this._provisioningRoleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // template_arn - computed: true, optional: false, required: false
    get templateArn() {
        return this.getStringAttribute('template_arn');
    }
    get templateBody() {
        return this.getStringAttribute('template_body');
    }
    set templateBody(value) {
        this._templateBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get templateBodyInput() {
        return this._templateBody;
    }
    get templateName() {
        return this.getStringAttribute('template_name');
    }
    set templateName(value) {
        this._templateName = value;
    }
    resetTemplateName() {
        this._templateName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateNameInput() {
        return this._templateName;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            enabled: cdktf.booleanToTerraform(this._enabled),
            pre_provisioning_hook: iotProvisioningTemplatePreProvisioningHookToTerraform(this._preProvisioningHook),
            provisioning_role_arn: cdktf.stringToTerraform(this._provisioningRoleArn),
            tags: cdktf.listMapper(iotProvisioningTemplateTagsToTerraform)(this._tags),
            template_body: cdktf.stringToTerraform(this._templateBody),
            template_name: cdktf.stringToTerraform(this._templateName),
        };
    }
}
exports.IotProvisioningTemplate = IotProvisioningTemplate;
// =================
// STATIC PROPERTIES
// =================
IotProvisioningTemplate.tfResourceType = "awscc_iot_provisioning_template";
//# sourceMappingURL=data:application/json;base64,