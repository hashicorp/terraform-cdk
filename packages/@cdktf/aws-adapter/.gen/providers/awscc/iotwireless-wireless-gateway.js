"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_gateway.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotwirelessWirelessGateway = exports.iotwirelessWirelessGatewayTagsToTerraform = exports.iotwirelessWirelessGatewayLoRaWanToTerraform = void 0;
const cdktf = require("cdktf");
function iotwirelessWirelessGatewayLoRaWanToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        gateway_eui: cdktf.stringToTerraform(struct.gatewayEui),
        rf_region: cdktf.stringToTerraform(struct.rfRegion),
    };
}
exports.iotwirelessWirelessGatewayLoRaWanToTerraform = iotwirelessWirelessGatewayLoRaWanToTerraform;
function iotwirelessWirelessGatewayTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotwirelessWirelessGatewayTagsToTerraform = iotwirelessWirelessGatewayTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_gateway.html awscc_iotwireless_wireless_gateway}
*/
class IotwirelessWirelessGateway extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iotwireless_wireless_gateway.html awscc_iotwireless_wireless_gateway} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotwirelessWirelessGatewayConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_iotwireless_wireless_gateway',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._lastUplinkReceivedAt = config.lastUplinkReceivedAt;
        this._loRaWan = config.loRaWan;
        this._name = config.name;
        this._tags = config.tags;
        this._thingArn = config.thingArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get lastUplinkReceivedAt() {
        return this.getStringAttribute('last_uplink_received_at');
    }
    set lastUplinkReceivedAt(value) {
        this._lastUplinkReceivedAt = value;
    }
    resetLastUplinkReceivedAt() {
        this._lastUplinkReceivedAt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lastUplinkReceivedAtInput() {
        return this._lastUplinkReceivedAt;
    }
    get loRaWan() {
        return this.interpolationForAttribute('lo_ra_wan');
    }
    set loRaWan(value) {
        this._loRaWan = value;
    }
    // Temporarily expose input value. Use with caution.
    get loRaWanInput() {
        return this._loRaWan;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get thingArn() {
        return this.getStringAttribute('thing_arn');
    }
    set thingArn(value) {
        this._thingArn = value;
    }
    resetThingArn() {
        this._thingArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thingArnInput() {
        return this._thingArn;
    }
    // thing_name - computed: true, optional: false, required: false
    get thingName() {
        return this.getStringAttribute('thing_name');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            last_uplink_received_at: cdktf.stringToTerraform(this._lastUplinkReceivedAt),
            lo_ra_wan: iotwirelessWirelessGatewayLoRaWanToTerraform(this._loRaWan),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.listMapper(iotwirelessWirelessGatewayTagsToTerraform)(this._tags),
            thing_arn: cdktf.stringToTerraform(this._thingArn),
        };
    }
}
exports.IotwirelessWirelessGateway = IotwirelessWirelessGateway;
// =================
// STATIC PROPERTIES
// =================
IotwirelessWirelessGateway.tfResourceType = "awscc_iotwireless_wireless_gateway";
//# sourceMappingURL=data:application/json;base64,