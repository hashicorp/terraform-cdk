"use strict";
// https://www.terraform.io/docs/providers/awscc/d/s3objectlambda_access_point.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsccS3ObjectlambdaAccessPoint = exports.dataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform = exports.DataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfiguration = exports.dataAwsccS3ObjectlambdaAccessPointPolicyStatusToTerraform = exports.DataAwsccS3ObjectlambdaAccessPointPolicyStatus = exports.dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform = exports.DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfiguration = exports.dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform = exports.DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurations = void 0;
const cdktf = require("cdktf");
class DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurations extends cdktf.ComplexComputedList {
    // actions - computed: true, optional: false, required: false
    get actions() {
        return this.getListAttribute('actions');
    }
    // content_transformation - computed: true, optional: false, required: false
    get contentTransformation() {
        return this.interpolationForAttribute('content_transformation');
    }
}
exports.DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurations = DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurations;
function dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        content_transformation: cdktf.hashMapper(cdktf.stringToTerraform)(struct.contentTransformation),
    };
}
exports.dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform = dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform;
class DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfiguration extends cdktf.ComplexComputedList {
    // allowed_features - computed: true, optional: false, required: false
    get allowedFeatures() {
        return this.getListAttribute('allowed_features');
    }
    // cloudwatch_metrics_enabled - computed: true, optional: false, required: false
    get cloudwatchMetricsEnabled() {
        return this.getBooleanAttribute('cloudwatch_metrics_enabled');
    }
    // supporting_access_point - computed: true, optional: false, required: false
    get supportingAccessPoint() {
        return this.getStringAttribute('supporting_access_point');
    }
    // transformation_configurations - computed: true, optional: false, required: false
    get transformationConfigurations() {
        return this.interpolationForAttribute('transformation_configurations');
    }
}
exports.DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfiguration = DataAwsccS3ObjectlambdaAccessPointObjectLambdaConfiguration;
function dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allowed_features: cdktf.listMapper(cdktf.stringToTerraform)(struct.allowedFeatures),
        cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.cloudwatchMetricsEnabled),
        supporting_access_point: cdktf.stringToTerraform(struct.supportingAccessPoint),
        transformation_configurations: cdktf.listMapper(dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationTransformationConfigurationsToTerraform)(struct.transformationConfigurations),
    };
}
exports.dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform = dataAwsccS3ObjectlambdaAccessPointObjectLambdaConfigurationToTerraform;
class DataAwsccS3ObjectlambdaAccessPointPolicyStatus extends cdktf.ComplexComputedList {
    // is_public - computed: true, optional: false, required: false
    get isPublic() {
        return this.getBooleanAttribute('is_public');
    }
}
exports.DataAwsccS3ObjectlambdaAccessPointPolicyStatus = DataAwsccS3ObjectlambdaAccessPointPolicyStatus;
function dataAwsccS3ObjectlambdaAccessPointPolicyStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        is_public: cdktf.booleanToTerraform(struct.isPublic),
    };
}
exports.dataAwsccS3ObjectlambdaAccessPointPolicyStatusToTerraform = dataAwsccS3ObjectlambdaAccessPointPolicyStatusToTerraform;
class DataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfiguration extends cdktf.ComplexComputedList {
    // block_public_acls - computed: true, optional: false, required: false
    get blockPublicAcls() {
        return this.getBooleanAttribute('block_public_acls');
    }
    // block_public_policy - computed: true, optional: false, required: false
    get blockPublicPolicy() {
        return this.getBooleanAttribute('block_public_policy');
    }
    // ignore_public_acls - computed: true, optional: false, required: false
    get ignorePublicAcls() {
        return this.getBooleanAttribute('ignore_public_acls');
    }
    // restrict_public_buckets - computed: true, optional: false, required: false
    get restrictPublicBuckets() {
        return this.getBooleanAttribute('restrict_public_buckets');
    }
}
exports.DataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfiguration = DataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfiguration;
function dataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_public_acls: cdktf.booleanToTerraform(struct.blockPublicAcls),
        block_public_policy: cdktf.booleanToTerraform(struct.blockPublicPolicy),
        ignore_public_acls: cdktf.booleanToTerraform(struct.ignorePublicAcls),
        restrict_public_buckets: cdktf.booleanToTerraform(struct.restrictPublicBuckets),
    };
}
exports.dataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform = dataAwsccS3ObjectlambdaAccessPointPublicAccessBlockConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/d/s3objectlambda_access_point.html awscc_s3objectlambda_access_point}
*/
class DataAwsccS3ObjectlambdaAccessPoint extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/d/s3objectlambda_access_point.html awscc_s3objectlambda_access_point} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsccS3ObjectlambdaAccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_s3objectlambda_access_point',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // creation_date - computed: true, optional: false, required: false
    get creationDate() {
        return this.getStringAttribute('creation_date');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // object_lambda_configuration - computed: true, optional: false, required: false
    get objectLambdaConfiguration() {
        return this.interpolationForAttribute('object_lambda_configuration');
    }
    // policy_status - computed: true, optional: false, required: false
    get policyStatus() {
        return this.interpolationForAttribute('policy_status');
    }
    // public_access_block_configuration - computed: true, optional: false, required: false
    get publicAccessBlockConfiguration() {
        return this.interpolationForAttribute('public_access_block_configuration');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.DataAwsccS3ObjectlambdaAccessPoint = DataAwsccS3ObjectlambdaAccessPoint;
// =================
// STATIC PROPERTIES
// =================
DataAwsccS3ObjectlambdaAccessPoint.tfResourceType = "awscc_s3objectlambda_access_point";
//# sourceMappingURL=data:application/json;base64,