"use strict";
// https://www.terraform.io/docs/providers/awscc/r/frauddetector_detector.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrauddetectorDetector = exports.frauddetectorDetectorTagsToTerraform = exports.frauddetectorDetectorRulesToTerraform = exports.frauddetectorDetectorRulesTagsToTerraform = exports.frauddetectorDetectorRulesOutcomesToTerraform = exports.frauddetectorDetectorRulesOutcomesTagsToTerraform = exports.frauddetectorDetectorEventTypeToTerraform = exports.frauddetectorDetectorEventTypeTagsToTerraform = exports.frauddetectorDetectorEventTypeLabelsToTerraform = exports.frauddetectorDetectorEventTypeLabelsTagsToTerraform = exports.frauddetectorDetectorEventTypeEventVariablesToTerraform = exports.frauddetectorDetectorEventTypeEventVariablesTagsToTerraform = exports.frauddetectorDetectorEventTypeEntityTypesToTerraform = exports.frauddetectorDetectorEventTypeEntityTypesTagsToTerraform = exports.frauddetectorDetectorAssociatedModelsToTerraform = void 0;
const cdktf = require("cdktf");
function frauddetectorDetectorAssociatedModelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.frauddetectorDetectorAssociatedModelsToTerraform = frauddetectorDetectorAssociatedModelsToTerraform;
function frauddetectorDetectorEventTypeEntityTypesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorEventTypeEntityTypesTagsToTerraform = frauddetectorDetectorEventTypeEntityTypesTagsToTerraform;
function frauddetectorDetectorEventTypeEntityTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorDetectorEventTypeEntityTypesTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorDetectorEventTypeEntityTypesToTerraform = frauddetectorDetectorEventTypeEntityTypesToTerraform;
function frauddetectorDetectorEventTypeEventVariablesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorEventTypeEventVariablesTagsToTerraform = frauddetectorDetectorEventTypeEventVariablesTagsToTerraform;
function frauddetectorDetectorEventTypeEventVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        data_source: cdktf.stringToTerraform(struct.dataSource),
        data_type: cdktf.stringToTerraform(struct.dataType),
        default_value: cdktf.stringToTerraform(struct.defaultValue),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorDetectorEventTypeEventVariablesTagsToTerraform)(struct.tags),
        variable_type: cdktf.stringToTerraform(struct.variableType),
    };
}
exports.frauddetectorDetectorEventTypeEventVariablesToTerraform = frauddetectorDetectorEventTypeEventVariablesToTerraform;
function frauddetectorDetectorEventTypeLabelsTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorEventTypeLabelsTagsToTerraform = frauddetectorDetectorEventTypeLabelsTagsToTerraform;
function frauddetectorDetectorEventTypeLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorDetectorEventTypeLabelsTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorDetectorEventTypeLabelsToTerraform = frauddetectorDetectorEventTypeLabelsToTerraform;
function frauddetectorDetectorEventTypeTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorEventTypeTagsToTerraform = frauddetectorDetectorEventTypeTagsToTerraform;
function frauddetectorDetectorEventTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        entity_types: cdktf.listMapper(frauddetectorDetectorEventTypeEntityTypesToTerraform)(struct.entityTypes),
        event_variables: cdktf.listMapper(frauddetectorDetectorEventTypeEventVariablesToTerraform)(struct.eventVariables),
        inline: cdktf.booleanToTerraform(struct.inline),
        labels: cdktf.listMapper(frauddetectorDetectorEventTypeLabelsToTerraform)(struct.labels),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorDetectorEventTypeTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorDetectorEventTypeToTerraform = frauddetectorDetectorEventTypeToTerraform;
function frauddetectorDetectorRulesOutcomesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorRulesOutcomesTagsToTerraform = frauddetectorDetectorRulesOutcomesTagsToTerraform;
function frauddetectorDetectorRulesOutcomesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        inline: cdktf.booleanToTerraform(struct.inline),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        name: cdktf.stringToTerraform(struct.name),
        tags: cdktf.listMapper(frauddetectorDetectorRulesOutcomesTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorDetectorRulesOutcomesToTerraform = frauddetectorDetectorRulesOutcomesToTerraform;
function frauddetectorDetectorRulesTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorRulesTagsToTerraform = frauddetectorDetectorRulesTagsToTerraform;
function frauddetectorDetectorRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        created_time: cdktf.stringToTerraform(struct.createdTime),
        description: cdktf.stringToTerraform(struct.description),
        detector_id: cdktf.stringToTerraform(struct.detectorId),
        expression: cdktf.stringToTerraform(struct.expression),
        language: cdktf.stringToTerraform(struct.language),
        last_updated_time: cdktf.stringToTerraform(struct.lastUpdatedTime),
        outcomes: cdktf.listMapper(frauddetectorDetectorRulesOutcomesToTerraform)(struct.outcomes),
        rule_id: cdktf.stringToTerraform(struct.ruleId),
        rule_version: cdktf.stringToTerraform(struct.ruleVersion),
        tags: cdktf.listMapper(frauddetectorDetectorRulesTagsToTerraform)(struct.tags),
    };
}
exports.frauddetectorDetectorRulesToTerraform = frauddetectorDetectorRulesToTerraform;
function frauddetectorDetectorTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.frauddetectorDetectorTagsToTerraform = frauddetectorDetectorTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/frauddetector_detector.html awscc_frauddetector_detector}
*/
class FrauddetectorDetector extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/frauddetector_detector.html awscc_frauddetector_detector} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FrauddetectorDetectorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_frauddetector_detector',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._associatedModels = config.associatedModels;
        this._description = config.description;
        this._detectorId = config.detectorId;
        this._detectorVersionStatus = config.detectorVersionStatus;
        this._eventType = config.eventType;
        this._ruleExecutionMode = config.ruleExecutionMode;
        this._rules = config.rules;
        this._tags = config.tags;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get associatedModels() {
        return this.interpolationForAttribute('associated_models');
    }
    set associatedModels(value) {
        this._associatedModels = value;
    }
    resetAssociatedModels() {
        this._associatedModels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associatedModelsInput() {
        return this._associatedModels;
    }
    // created_time - computed: true, optional: false, required: false
    get createdTime() {
        return this.getStringAttribute('created_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get detectorId() {
        return this.getStringAttribute('detector_id');
    }
    set detectorId(value) {
        this._detectorId = value;
    }
    // Temporarily expose input value. Use with caution.
    get detectorIdInput() {
        return this._detectorId;
    }
    // detector_version_id - computed: true, optional: false, required: false
    get detectorVersionId() {
        return this.getStringAttribute('detector_version_id');
    }
    get detectorVersionStatus() {
        return this.getStringAttribute('detector_version_status');
    }
    set detectorVersionStatus(value) {
        this._detectorVersionStatus = value;
    }
    resetDetectorVersionStatus() {
        this._detectorVersionStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detectorVersionStatusInput() {
        return this._detectorVersionStatus;
    }
    get eventType() {
        return this.interpolationForAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_time - computed: true, optional: false, required: false
    get lastUpdatedTime() {
        return this.getStringAttribute('last_updated_time');
    }
    get ruleExecutionMode() {
        return this.getStringAttribute('rule_execution_mode');
    }
    set ruleExecutionMode(value) {
        this._ruleExecutionMode = value;
    }
    resetRuleExecutionMode() {
        this._ruleExecutionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleExecutionModeInput() {
        return this._ruleExecutionMode;
    }
    get rules() {
        return this.interpolationForAttribute('rules');
    }
    set rules(value) {
        this._rules = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            associated_models: cdktf.listMapper(frauddetectorDetectorAssociatedModelsToTerraform)(this._associatedModels),
            description: cdktf.stringToTerraform(this._description),
            detector_id: cdktf.stringToTerraform(this._detectorId),
            detector_version_status: cdktf.stringToTerraform(this._detectorVersionStatus),
            event_type: frauddetectorDetectorEventTypeToTerraform(this._eventType),
            rule_execution_mode: cdktf.stringToTerraform(this._ruleExecutionMode),
            rules: cdktf.listMapper(frauddetectorDetectorRulesToTerraform)(this._rules),
            tags: cdktf.listMapper(frauddetectorDetectorTagsToTerraform)(this._tags),
        };
    }
}
exports.FrauddetectorDetector = FrauddetectorDetector;
// =================
// STATIC PROPERTIES
// =================
FrauddetectorDetector.tfResourceType = "awscc_frauddetector_detector";
//# sourceMappingURL=data:application/json;base64,