"use strict";
// https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallFirewall = exports.networkfirewallFirewallTagsToTerraform = exports.networkfirewallFirewallSubnetMappingsToTerraform = void 0;
const cdktf = require("cdktf");
function networkfirewallFirewallSubnetMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
    };
}
exports.networkfirewallFirewallSubnetMappingsToTerraform = networkfirewallFirewallSubnetMappingsToTerraform;
function networkfirewallFirewallTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.networkfirewallFirewallTagsToTerraform = networkfirewallFirewallTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall.html awscc_networkfirewall_firewall}
*/
class NetworkfirewallFirewall extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/networkfirewall_firewall.html awscc_networkfirewall_firewall} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkfirewallFirewallConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_networkfirewall_firewall',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deleteProtection = config.deleteProtection;
        this._description = config.description;
        this._firewallName = config.firewallName;
        this._firewallPolicyArn = config.firewallPolicyArn;
        this._firewallPolicyChangeProtection = config.firewallPolicyChangeProtection;
        this._subnetChangeProtection = config.subnetChangeProtection;
        this._subnetMappings = config.subnetMappings;
        this._tags = config.tags;
        this._vpcId = config.vpcId;
    }
    get deleteProtection() {
        return this.getBooleanAttribute('delete_protection');
    }
    set deleteProtection(value) {
        this._deleteProtection = value;
    }
    resetDeleteProtection() {
        this._deleteProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteProtectionInput() {
        return this._deleteProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // endpoint_ids - computed: true, optional: false, required: false
    get endpointIds() {
        return this.getListAttribute('endpoint_ids');
    }
    // firewall_arn - computed: true, optional: false, required: false
    get firewallArn() {
        return this.getStringAttribute('firewall_arn');
    }
    // firewall_id - computed: true, optional: false, required: false
    get firewallId() {
        return this.getStringAttribute('firewall_id');
    }
    get firewallName() {
        return this.getStringAttribute('firewall_name');
    }
    set firewallName(value) {
        this._firewallName = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallNameInput() {
        return this._firewallName;
    }
    get firewallPolicyArn() {
        return this.getStringAttribute('firewall_policy_arn');
    }
    set firewallPolicyArn(value) {
        this._firewallPolicyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyArnInput() {
        return this._firewallPolicyArn;
    }
    get firewallPolicyChangeProtection() {
        return this.getBooleanAttribute('firewall_policy_change_protection');
    }
    set firewallPolicyChangeProtection(value) {
        this._firewallPolicyChangeProtection = value;
    }
    resetFirewallPolicyChangeProtection() {
        this._firewallPolicyChangeProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyChangeProtectionInput() {
        return this._firewallPolicyChangeProtection;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get subnetChangeProtection() {
        return this.getBooleanAttribute('subnet_change_protection');
    }
    set subnetChangeProtection(value) {
        this._subnetChangeProtection = value;
    }
    resetSubnetChangeProtection() {
        this._subnetChangeProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetChangeProtectionInput() {
        return this._subnetChangeProtection;
    }
    get subnetMappings() {
        return this.interpolationForAttribute('subnet_mappings');
    }
    set subnetMappings(value) {
        this._subnetMappings = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetMappingsInput() {
        return this._subnetMappings;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            delete_protection: cdktf.booleanToTerraform(this._deleteProtection),
            description: cdktf.stringToTerraform(this._description),
            firewall_name: cdktf.stringToTerraform(this._firewallName),
            firewall_policy_arn: cdktf.stringToTerraform(this._firewallPolicyArn),
            firewall_policy_change_protection: cdktf.booleanToTerraform(this._firewallPolicyChangeProtection),
            subnet_change_protection: cdktf.booleanToTerraform(this._subnetChangeProtection),
            subnet_mappings: cdktf.listMapper(networkfirewallFirewallSubnetMappingsToTerraform)(this._subnetMappings),
            tags: cdktf.listMapper(networkfirewallFirewallTagsToTerraform)(this._tags),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
        };
    }
}
exports.NetworkfirewallFirewall = NetworkfirewallFirewall;
// =================
// STATIC PROPERTIES
// =================
NetworkfirewallFirewall.tfResourceType = "awscc_networkfirewall_firewall";
//# sourceMappingURL=data:application/json;base64,