"use strict";
// https://www.terraform.io/docs/providers/awscc/r/iot_security_profile.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotSecurityProfile = exports.iotSecurityProfileTagsToTerraform = exports.iotSecurityProfileBehaviorsToTerraform = exports.iotSecurityProfileBehaviorsMetricDimensionToTerraform = exports.iotSecurityProfileBehaviorsCriteriaToTerraform = exports.iotSecurityProfileBehaviorsCriteriaValueToTerraform = exports.iotSecurityProfileBehaviorsCriteriaStatisticalThresholdToTerraform = exports.iotSecurityProfileBehaviorsCriteriaMlDetectionConfigToTerraform = exports.iotSecurityProfileAlertTargetsToTerraform = exports.iotSecurityProfileAdditionalMetricsToRetainV2ToTerraform = exports.iotSecurityProfileAdditionalMetricsToRetainV2MetricDimensionToTerraform = void 0;
const cdktf = require("cdktf");
function iotSecurityProfileAdditionalMetricsToRetainV2MetricDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimension_name: cdktf.stringToTerraform(struct.dimensionName),
        operator: cdktf.stringToTerraform(struct.operator),
    };
}
exports.iotSecurityProfileAdditionalMetricsToRetainV2MetricDimensionToTerraform = iotSecurityProfileAdditionalMetricsToRetainV2MetricDimensionToTerraform;
function iotSecurityProfileAdditionalMetricsToRetainV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        metric: cdktf.stringToTerraform(struct.metric),
        metric_dimension: iotSecurityProfileAdditionalMetricsToRetainV2MetricDimensionToTerraform(struct.metricDimension),
    };
}
exports.iotSecurityProfileAdditionalMetricsToRetainV2ToTerraform = iotSecurityProfileAdditionalMetricsToRetainV2ToTerraform;
function iotSecurityProfileAlertTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        alert_target_arn: cdktf.stringToTerraform(struct.alertTargetArn),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.iotSecurityProfileAlertTargetsToTerraform = iotSecurityProfileAlertTargetsToTerraform;
function iotSecurityProfileBehaviorsCriteriaMlDetectionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        confidence_level: cdktf.stringToTerraform(struct.confidenceLevel),
    };
}
exports.iotSecurityProfileBehaviorsCriteriaMlDetectionConfigToTerraform = iotSecurityProfileBehaviorsCriteriaMlDetectionConfigToTerraform;
function iotSecurityProfileBehaviorsCriteriaStatisticalThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        statistic: cdktf.stringToTerraform(struct.statistic),
    };
}
exports.iotSecurityProfileBehaviorsCriteriaStatisticalThresholdToTerraform = iotSecurityProfileBehaviorsCriteriaStatisticalThresholdToTerraform;
function iotSecurityProfileBehaviorsCriteriaValueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cidrs: cdktf.listMapper(cdktf.stringToTerraform)(struct.cidrs),
        count: cdktf.stringToTerraform(struct.count),
        number: cdktf.numberToTerraform(struct.number),
        numbers: cdktf.listMapper(cdktf.numberToTerraform)(struct.numbers),
        ports: cdktf.listMapper(cdktf.numberToTerraform)(struct.ports),
        strings: cdktf.listMapper(cdktf.stringToTerraform)(struct.strings),
    };
}
exports.iotSecurityProfileBehaviorsCriteriaValueToTerraform = iotSecurityProfileBehaviorsCriteriaValueToTerraform;
function iotSecurityProfileBehaviorsCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comparison_operator: cdktf.stringToTerraform(struct.comparisonOperator),
        consecutive_datapoints_to_alarm: cdktf.numberToTerraform(struct.consecutiveDatapointsToAlarm),
        consecutive_datapoints_to_clear: cdktf.numberToTerraform(struct.consecutiveDatapointsToClear),
        duration_seconds: cdktf.numberToTerraform(struct.durationSeconds),
        ml_detection_config: iotSecurityProfileBehaviorsCriteriaMlDetectionConfigToTerraform(struct.mlDetectionConfig),
        statistical_threshold: iotSecurityProfileBehaviorsCriteriaStatisticalThresholdToTerraform(struct.statisticalThreshold),
        value: iotSecurityProfileBehaviorsCriteriaValueToTerraform(struct.value),
    };
}
exports.iotSecurityProfileBehaviorsCriteriaToTerraform = iotSecurityProfileBehaviorsCriteriaToTerraform;
function iotSecurityProfileBehaviorsMetricDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimension_name: cdktf.stringToTerraform(struct.dimensionName),
        operator: cdktf.stringToTerraform(struct.operator),
    };
}
exports.iotSecurityProfileBehaviorsMetricDimensionToTerraform = iotSecurityProfileBehaviorsMetricDimensionToTerraform;
function iotSecurityProfileBehaviorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        criteria: iotSecurityProfileBehaviorsCriteriaToTerraform(struct.criteria),
        metric: cdktf.stringToTerraform(struct.metric),
        metric_dimension: iotSecurityProfileBehaviorsMetricDimensionToTerraform(struct.metricDimension),
        name: cdktf.stringToTerraform(struct.name),
        suppress_alerts: cdktf.booleanToTerraform(struct.suppressAlerts),
    };
}
exports.iotSecurityProfileBehaviorsToTerraform = iotSecurityProfileBehaviorsToTerraform;
function iotSecurityProfileTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.iotSecurityProfileTagsToTerraform = iotSecurityProfileTagsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/iot_security_profile.html awscc_iot_security_profile}
*/
class IotSecurityProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/iot_security_profile.html awscc_iot_security_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IotSecurityProfileConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'awscc_iot_security_profile',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._additionalMetricsToRetainV2 = config.additionalMetricsToRetainV2;
        this._alertTargets = config.alertTargets;
        this._behaviors = config.behaviors;
        this._securityProfileDescription = config.securityProfileDescription;
        this._securityProfileName = config.securityProfileName;
        this._tags = config.tags;
        this._targetArns = config.targetArns;
    }
    get additionalMetricsToRetainV2() {
        return this.interpolationForAttribute('additional_metrics_to_retain_v2');
    }
    set additionalMetricsToRetainV2(value) {
        this._additionalMetricsToRetainV2 = value;
    }
    resetAdditionalMetricsToRetainV2() {
        this._additionalMetricsToRetainV2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalMetricsToRetainV2Input() {
        return this._additionalMetricsToRetainV2;
    }
    get alertTargets() {
        return this.interpolationForAttribute('alert_targets');
    }
    set alertTargets(value) {
        this._alertTargets = value;
    }
    resetAlertTargets() {
        this._alertTargets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertTargetsInput() {
        return this._alertTargets;
    }
    get behaviors() {
        return this.interpolationForAttribute('behaviors');
    }
    set behaviors(value) {
        this._behaviors = value;
    }
    resetBehaviors() {
        this._behaviors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get behaviorsInput() {
        return this._behaviors;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // security_profile_arn - computed: true, optional: false, required: false
    get securityProfileArn() {
        return this.getStringAttribute('security_profile_arn');
    }
    get securityProfileDescription() {
        return this.getStringAttribute('security_profile_description');
    }
    set securityProfileDescription(value) {
        this._securityProfileDescription = value;
    }
    resetSecurityProfileDescription() {
        this._securityProfileDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProfileDescriptionInput() {
        return this._securityProfileDescription;
    }
    get securityProfileName() {
        return this.getStringAttribute('security_profile_name');
    }
    set securityProfileName(value) {
        this._securityProfileName = value;
    }
    resetSecurityProfileName() {
        this._securityProfileName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProfileNameInput() {
        return this._securityProfileName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get targetArns() {
        return this.getListAttribute('target_arns');
    }
    set targetArns(value) {
        this._targetArns = value;
    }
    resetTargetArns() {
        this._targetArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetArnsInput() {
        return this._targetArns;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            additional_metrics_to_retain_v2: cdktf.listMapper(iotSecurityProfileAdditionalMetricsToRetainV2ToTerraform)(this._additionalMetricsToRetainV2),
            alert_targets: cdktf.hashMapper(cdktf.anyToTerraform)(this._alertTargets),
            behaviors: cdktf.listMapper(iotSecurityProfileBehaviorsToTerraform)(this._behaviors),
            security_profile_description: cdktf.stringToTerraform(this._securityProfileDescription),
            security_profile_name: cdktf.stringToTerraform(this._securityProfileName),
            tags: cdktf.listMapper(iotSecurityProfileTagsToTerraform)(this._tags),
            target_arns: cdktf.listMapper(cdktf.stringToTerraform)(this._targetArns),
        };
    }
}
exports.IotSecurityProfile = IotSecurityProfile;
// =================
// STATIC PROPERTIES
// =================
IotSecurityProfile.tfResourceType = "awscc_iot_security_profile";
//# sourceMappingURL=data:application/json;base64,