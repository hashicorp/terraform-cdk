"use strict";
// https://www.terraform.io/docs/providers/awscc/r/stepfunctions_state_machine.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepfunctionsStateMachine = exports.stepfunctionsStateMachineTracingConfigurationToTerraform = exports.stepfunctionsStateMachineTagsToTerraform = exports.stepfunctionsStateMachineLoggingConfigurationToTerraform = exports.stepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform = exports.stepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform = exports.stepfunctionsStateMachineDefinitionS3LocationToTerraform = void 0;
const cdktf = require("cdktf");
function stepfunctionsStateMachineDefinitionS3LocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.stepfunctionsStateMachineDefinitionS3LocationToTerraform = stepfunctionsStateMachineDefinitionS3LocationToTerraform;
function stepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_group_arn: cdktf.stringToTerraform(struct.logGroupArn),
    };
}
exports.stepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform = stepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform;
function stepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logs_log_group: stepfunctionsStateMachineLoggingConfigurationDestinationsCloudwatchLogsLogGroupToTerraform(struct.cloudwatchLogsLogGroup),
    };
}
exports.stepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform = stepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform;
function stepfunctionsStateMachineLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destinations: cdktf.listMapper(stepfunctionsStateMachineLoggingConfigurationDestinationsToTerraform)(struct.destinations),
        include_execution_data: cdktf.booleanToTerraform(struct.includeExecutionData),
        level: cdktf.stringToTerraform(struct.level),
    };
}
exports.stepfunctionsStateMachineLoggingConfigurationToTerraform = stepfunctionsStateMachineLoggingConfigurationToTerraform;
function stepfunctionsStateMachineTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.stepfunctionsStateMachineTagsToTerraform = stepfunctionsStateMachineTagsToTerraform;
function stepfunctionsStateMachineTracingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.stepfunctionsStateMachineTracingConfigurationToTerraform = stepfunctionsStateMachineTracingConfigurationToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/stepfunctions_state_machine.html awscc_stepfunctions_state_machine}
*/
class StepfunctionsStateMachine extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/stepfunctions_state_machine.html awscc_stepfunctions_state_machine} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options StepfunctionsStateMachineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_stepfunctions_state_machine',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._definition = config.definition;
        this._definitionS3Location = config.definitionS3Location;
        this._definitionString = config.definitionString;
        this._definitionSubstitutions = config.definitionSubstitutions;
        this._loggingConfiguration = config.loggingConfiguration;
        this._roleArn = config.roleArn;
        this._stateMachineName = config.stateMachineName;
        this._stateMachineType = config.stateMachineType;
        this._tags = config.tags;
        this._tracingConfiguration = config.tracingConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get definition() {
        return this.interpolationForAttribute('definition');
    }
    set definition(value) {
        this._definition = value;
    }
    resetDefinition() {
        this._definition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get definitionInput() {
        return this._definition;
    }
    get definitionS3Location() {
        return this.interpolationForAttribute('definition_s3_location');
    }
    set definitionS3Location(value) {
        this._definitionS3Location = value;
    }
    resetDefinitionS3Location() {
        this._definitionS3Location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get definitionS3LocationInput() {
        return this._definitionS3Location;
    }
    get definitionString() {
        return this.getStringAttribute('definition_string');
    }
    set definitionString(value) {
        this._definitionString = value;
    }
    resetDefinitionString() {
        this._definitionString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get definitionStringInput() {
        return this._definitionString;
    }
    get definitionSubstitutions() {
        return this.interpolationForAttribute('definition_substitutions');
    }
    set definitionSubstitutions(value) {
        this._definitionSubstitutions = value;
    }
    resetDefinitionSubstitutions() {
        this._definitionSubstitutions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get definitionSubstitutionsInput() {
        return this._definitionSubstitutions;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loggingConfiguration() {
        return this.interpolationForAttribute('logging_configuration');
    }
    set loggingConfiguration(value) {
        this._loggingConfiguration = value;
    }
    resetLoggingConfiguration() {
        this._loggingConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigurationInput() {
        return this._loggingConfiguration;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get stateMachineName() {
        return this.getStringAttribute('state_machine_name');
    }
    set stateMachineName(value) {
        this._stateMachineName = value;
    }
    resetStateMachineName() {
        this._stateMachineName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateMachineNameInput() {
        return this._stateMachineName;
    }
    get stateMachineType() {
        return this.getStringAttribute('state_machine_type');
    }
    set stateMachineType(value) {
        this._stateMachineType = value;
    }
    resetStateMachineType() {
        this._stateMachineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateMachineTypeInput() {
        return this._stateMachineType;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tracingConfiguration() {
        return this.interpolationForAttribute('tracing_configuration');
    }
    set tracingConfiguration(value) {
        this._tracingConfiguration = value;
    }
    resetTracingConfiguration() {
        this._tracingConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tracingConfigurationInput() {
        return this._tracingConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            definition: cdktf.hashMapper(cdktf.anyToTerraform)(this._definition),
            definition_s3_location: stepfunctionsStateMachineDefinitionS3LocationToTerraform(this._definitionS3Location),
            definition_string: cdktf.stringToTerraform(this._definitionString),
            definition_substitutions: cdktf.hashMapper(cdktf.anyToTerraform)(this._definitionSubstitutions),
            logging_configuration: stepfunctionsStateMachineLoggingConfigurationToTerraform(this._loggingConfiguration),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            state_machine_name: cdktf.stringToTerraform(this._stateMachineName),
            state_machine_type: cdktf.stringToTerraform(this._stateMachineType),
            tags: cdktf.listMapper(stepfunctionsStateMachineTagsToTerraform)(this._tags),
            tracing_configuration: stepfunctionsStateMachineTracingConfigurationToTerraform(this._tracingConfiguration),
        };
    }
}
exports.StepfunctionsStateMachine = StepfunctionsStateMachine;
// =================
// STATIC PROPERTIES
// =================
StepfunctionsStateMachine.tfResourceType = "awscc_stepfunctions_state_machine";
//# sourceMappingURL=data:application/json;base64,