"use strict";
// https://www.terraform.io/docs/providers/awscc/r/dynamodb_global_table.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamodbGlobalTable = exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsToTerraform = exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform = exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = exports.dynamodbGlobalTableTimeToLiveSpecificationToTerraform = exports.dynamodbGlobalTableStreamSpecificationToTerraform = exports.dynamodbGlobalTableSseSpecificationToTerraform = exports.dynamodbGlobalTableReplicasToTerraform = exports.dynamodbGlobalTableReplicasTagsToTerraform = exports.dynamodbGlobalTableReplicasSseSpecificationToTerraform = exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsToTerraform = exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform = exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = exports.dynamodbGlobalTableReplicasPointInTimeRecoverySpecificationToTerraform = exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesToTerraform = exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsToTerraform = exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform = exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesContributorInsightsSpecificationToTerraform = exports.dynamodbGlobalTableReplicasContributorInsightsSpecificationToTerraform = exports.dynamodbGlobalTableLocalSecondaryIndexesToTerraform = exports.dynamodbGlobalTableLocalSecondaryIndexesProjectionToTerraform = exports.DynamodbGlobalTableLocalSecondaryIndexesProjection = exports.dynamodbGlobalTableLocalSecondaryIndexesKeySchemaToTerraform = exports.DynamodbGlobalTableLocalSecondaryIndexesKeySchema = exports.dynamodbGlobalTableKeySchemaToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesProjectionToTerraform = exports.dynamodbGlobalTableGlobalSecondaryIndexesKeySchemaToTerraform = exports.dynamodbGlobalTableAttributeDefinitionsToTerraform = void 0;
const cdktf = require("cdktf");
function dynamodbGlobalTableAttributeDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        attribute_type: cdktf.stringToTerraform(struct.attributeType),
    };
}
exports.dynamodbGlobalTableAttributeDefinitionsToTerraform = dynamodbGlobalTableAttributeDefinitionsToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesKeySchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesKeySchemaToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesKeySchemaToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesProjectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        non_key_attributes: cdktf.listMapper(cdktf.stringToTerraform)(struct.nonKeyAttributes),
        projection_type: cdktf.stringToTerraform(struct.projectionType),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesProjectionToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesProjectionToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        seed_capacity: cdktf.numberToTerraform(struct.seedCapacity),
        target_tracking_scaling_policy_configuration: dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct.targetTrackingScalingPolicyConfiguration),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        write_capacity_auto_scaling_settings: dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform(struct.writeCapacityAutoScalingSettings),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsToTerraform;
function dynamodbGlobalTableGlobalSecondaryIndexesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        index_name: cdktf.stringToTerraform(struct.indexName),
        key_schema: cdktf.listMapper(dynamodbGlobalTableGlobalSecondaryIndexesKeySchemaToTerraform)(struct.keySchema),
        projection: dynamodbGlobalTableGlobalSecondaryIndexesProjectionToTerraform(struct.projection),
        write_provisioned_throughput_settings: dynamodbGlobalTableGlobalSecondaryIndexesWriteProvisionedThroughputSettingsToTerraform(struct.writeProvisionedThroughputSettings),
    };
}
exports.dynamodbGlobalTableGlobalSecondaryIndexesToTerraform = dynamodbGlobalTableGlobalSecondaryIndexesToTerraform;
function dynamodbGlobalTableKeySchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.dynamodbGlobalTableKeySchemaToTerraform = dynamodbGlobalTableKeySchemaToTerraform;
class DynamodbGlobalTableLocalSecondaryIndexesKeySchema extends cdktf.ComplexComputedList {
    // attribute_name - computed: true, optional: false, required: true
    get attributeName() {
        return this.getStringAttribute('attribute_name');
    }
    // key_type - computed: true, optional: false, required: true
    get keyType() {
        return this.getStringAttribute('key_type');
    }
}
exports.DynamodbGlobalTableLocalSecondaryIndexesKeySchema = DynamodbGlobalTableLocalSecondaryIndexesKeySchema;
function dynamodbGlobalTableLocalSecondaryIndexesKeySchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.dynamodbGlobalTableLocalSecondaryIndexesKeySchemaToTerraform = dynamodbGlobalTableLocalSecondaryIndexesKeySchemaToTerraform;
class DynamodbGlobalTableLocalSecondaryIndexesProjection extends cdktf.ComplexComputedList {
    get nonKeyAttributes() {
        return this.getListAttribute('non_key_attributes');
    }
    set nonKeyAttributes(value) {
        this._nonKeyAttributes = value;
    }
    resetNonKeyAttributes() {
        this._nonKeyAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonKeyAttributesInput() {
        return this._nonKeyAttributes;
    }
    get projectionType() {
        return this.getStringAttribute('projection_type');
    }
    set projectionType(value) {
        this._projectionType = value;
    }
    resetProjectionType() {
        this._projectionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectionTypeInput() {
        return this._projectionType;
    }
}
exports.DynamodbGlobalTableLocalSecondaryIndexesProjection = DynamodbGlobalTableLocalSecondaryIndexesProjection;
function dynamodbGlobalTableLocalSecondaryIndexesProjectionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        non_key_attributes: cdktf.listMapper(cdktf.stringToTerraform)(struct.nonKeyAttributes),
        projection_type: cdktf.stringToTerraform(struct.projectionType),
    };
}
exports.dynamodbGlobalTableLocalSecondaryIndexesProjectionToTerraform = dynamodbGlobalTableLocalSecondaryIndexesProjectionToTerraform;
function dynamodbGlobalTableLocalSecondaryIndexesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        index_name: cdktf.stringToTerraform(struct.indexName),
        key_schema: cdktf.listMapper(dynamodbGlobalTableLocalSecondaryIndexesKeySchemaToTerraform)(struct.keySchema),
        projection: dynamodbGlobalTableLocalSecondaryIndexesProjectionToTerraform(struct.projection),
    };
}
exports.dynamodbGlobalTableLocalSecondaryIndexesToTerraform = dynamodbGlobalTableLocalSecondaryIndexesToTerraform;
function dynamodbGlobalTableReplicasContributorInsightsSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.dynamodbGlobalTableReplicasContributorInsightsSpecificationToTerraform = dynamodbGlobalTableReplicasContributorInsightsSpecificationToTerraform;
function dynamodbGlobalTableReplicasGlobalSecondaryIndexesContributorInsightsSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesContributorInsightsSpecificationToTerraform = dynamodbGlobalTableReplicasGlobalSecondaryIndexesContributorInsightsSpecificationToTerraform;
function dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
    };
}
exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform;
function dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        seed_capacity: cdktf.numberToTerraform(struct.seedCapacity),
        target_tracking_scaling_policy_configuration: dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct.targetTrackingScalingPolicyConfiguration),
    };
}
exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform = dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform;
function dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_capacity_auto_scaling_settings: dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform(struct.readCapacityAutoScalingSettings),
        read_capacity_units: cdktf.numberToTerraform(struct.readCapacityUnits),
    };
}
exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsToTerraform = dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsToTerraform;
function dynamodbGlobalTableReplicasGlobalSecondaryIndexesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contributor_insights_specification: dynamodbGlobalTableReplicasGlobalSecondaryIndexesContributorInsightsSpecificationToTerraform(struct.contributorInsightsSpecification),
        index_name: cdktf.stringToTerraform(struct.indexName),
        read_provisioned_throughput_settings: dynamodbGlobalTableReplicasGlobalSecondaryIndexesReadProvisionedThroughputSettingsToTerraform(struct.readProvisionedThroughputSettings),
    };
}
exports.dynamodbGlobalTableReplicasGlobalSecondaryIndexesToTerraform = dynamodbGlobalTableReplicasGlobalSecondaryIndexesToTerraform;
function dynamodbGlobalTableReplicasPointInTimeRecoverySpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        point_in_time_recovery_enabled: cdktf.booleanToTerraform(struct.pointInTimeRecoveryEnabled),
    };
}
exports.dynamodbGlobalTableReplicasPointInTimeRecoverySpecificationToTerraform = dynamodbGlobalTableReplicasPointInTimeRecoverySpecificationToTerraform;
function dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
    };
}
exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform;
function dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        seed_capacity: cdktf.numberToTerraform(struct.seedCapacity),
        target_tracking_scaling_policy_configuration: dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct.targetTrackingScalingPolicyConfiguration),
    };
}
exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform = dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform;
function dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_capacity_auto_scaling_settings: dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsReadCapacityAutoScalingSettingsToTerraform(struct.readCapacityAutoScalingSettings),
        read_capacity_units: cdktf.numberToTerraform(struct.readCapacityUnits),
    };
}
exports.dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsToTerraform = dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsToTerraform;
function dynamodbGlobalTableReplicasSseSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_master_key_id: cdktf.stringToTerraform(struct.kmsMasterKeyId),
    };
}
exports.dynamodbGlobalTableReplicasSseSpecificationToTerraform = dynamodbGlobalTableReplicasSseSpecificationToTerraform;
function dynamodbGlobalTableReplicasTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dynamodbGlobalTableReplicasTagsToTerraform = dynamodbGlobalTableReplicasTagsToTerraform;
function dynamodbGlobalTableReplicasToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        contributor_insights_specification: dynamodbGlobalTableReplicasContributorInsightsSpecificationToTerraform(struct.contributorInsightsSpecification),
        global_secondary_indexes: cdktf.listMapper(dynamodbGlobalTableReplicasGlobalSecondaryIndexesToTerraform)(struct.globalSecondaryIndexes),
        point_in_time_recovery_specification: dynamodbGlobalTableReplicasPointInTimeRecoverySpecificationToTerraform(struct.pointInTimeRecoverySpecification),
        read_provisioned_throughput_settings: dynamodbGlobalTableReplicasReadProvisionedThroughputSettingsToTerraform(struct.readProvisionedThroughputSettings),
        region: cdktf.stringToTerraform(struct.region),
        sse_specification: dynamodbGlobalTableReplicasSseSpecificationToTerraform(struct.sseSpecification),
        tags: cdktf.listMapper(dynamodbGlobalTableReplicasTagsToTerraform)(struct.tags),
    };
}
exports.dynamodbGlobalTableReplicasToTerraform = dynamodbGlobalTableReplicasToTerraform;
function dynamodbGlobalTableSseSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sse_enabled: cdktf.booleanToTerraform(struct.sseEnabled),
        sse_type: cdktf.stringToTerraform(struct.sseType),
    };
}
exports.dynamodbGlobalTableSseSpecificationToTerraform = dynamodbGlobalTableSseSpecificationToTerraform;
function dynamodbGlobalTableStreamSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        stream_view_type: cdktf.stringToTerraform(struct.streamViewType),
    };
}
exports.dynamodbGlobalTableStreamSpecificationToTerraform = dynamodbGlobalTableStreamSpecificationToTerraform;
function dynamodbGlobalTableTimeToLiveSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_name: cdktf.stringToTerraform(struct.attributeName),
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.dynamodbGlobalTableTimeToLiveSpecificationToTerraform = dynamodbGlobalTableTimeToLiveSpecificationToTerraform;
function dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
    };
}
exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform = dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform;
function dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        seed_capacity: cdktf.numberToTerraform(struct.seedCapacity),
        target_tracking_scaling_policy_configuration: dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsTargetTrackingScalingPolicyConfigurationToTerraform(struct.targetTrackingScalingPolicyConfiguration),
    };
}
exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform = dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform;
function dynamodbGlobalTableWriteProvisionedThroughputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        write_capacity_auto_scaling_settings: dynamodbGlobalTableWriteProvisionedThroughputSettingsWriteCapacityAutoScalingSettingsToTerraform(struct.writeCapacityAutoScalingSettings),
    };
}
exports.dynamodbGlobalTableWriteProvisionedThroughputSettingsToTerraform = dynamodbGlobalTableWriteProvisionedThroughputSettingsToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/awscc/r/dynamodb_global_table.html awscc_dynamodb_global_table}
*/
class DynamodbGlobalTable extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/awscc/r/dynamodb_global_table.html awscc_dynamodb_global_table} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DynamodbGlobalTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'awscc_dynamodb_global_table',
            terraformGeneratorMetadata: {
                providerName: 'awscc'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._attributeDefinitions = config.attributeDefinitions;
        this._billingMode = config.billingMode;
        this._globalSecondaryIndexes = config.globalSecondaryIndexes;
        this._keySchema = config.keySchema;
        this._localSecondaryIndexes = config.localSecondaryIndexes;
        this._replicas = config.replicas;
        this._sseSpecification = config.sseSpecification;
        this._streamSpecification = config.streamSpecification;
        this._tableName = config.tableName;
        this._timeToLiveSpecification = config.timeToLiveSpecification;
        this._writeProvisionedThroughputSettings = config.writeProvisionedThroughputSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get attributeDefinitions() {
        return this.interpolationForAttribute('attribute_definitions');
    }
    set attributeDefinitions(value) {
        this._attributeDefinitions = value;
    }
    // Temporarily expose input value. Use with caution.
    get attributeDefinitionsInput() {
        return this._attributeDefinitions;
    }
    get billingMode() {
        return this.getStringAttribute('billing_mode');
    }
    set billingMode(value) {
        this._billingMode = value;
    }
    resetBillingMode() {
        this._billingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get billingModeInput() {
        return this._billingMode;
    }
    get globalSecondaryIndexes() {
        return this.interpolationForAttribute('global_secondary_indexes');
    }
    set globalSecondaryIndexes(value) {
        this._globalSecondaryIndexes = value;
    }
    resetGlobalSecondaryIndexes() {
        this._globalSecondaryIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalSecondaryIndexesInput() {
        return this._globalSecondaryIndexes;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get keySchema() {
        return this.interpolationForAttribute('key_schema');
    }
    set keySchema(value) {
        this._keySchema = value;
    }
    // Temporarily expose input value. Use with caution.
    get keySchemaInput() {
        return this._keySchema;
    }
    get localSecondaryIndexes() {
        return this.interpolationForAttribute('local_secondary_indexes');
    }
    set localSecondaryIndexes(value) {
        this._localSecondaryIndexes = value;
    }
    resetLocalSecondaryIndexes() {
        this._localSecondaryIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSecondaryIndexesInput() {
        return this._localSecondaryIndexes;
    }
    get replicas() {
        return this.interpolationForAttribute('replicas');
    }
    set replicas(value) {
        this._replicas = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicasInput() {
        return this._replicas;
    }
    get sseSpecification() {
        return this.interpolationForAttribute('sse_specification');
    }
    set sseSpecification(value) {
        this._sseSpecification = value;
    }
    resetSseSpecification() {
        this._sseSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sseSpecificationInput() {
        return this._sseSpecification;
    }
    // stream_arn - computed: true, optional: false, required: false
    get streamArn() {
        return this.getStringAttribute('stream_arn');
    }
    get streamSpecification() {
        return this.interpolationForAttribute('stream_specification');
    }
    set streamSpecification(value) {
        this._streamSpecification = value;
    }
    resetStreamSpecification() {
        this._streamSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamSpecificationInput() {
        return this._streamSpecification;
    }
    // table_id - computed: true, optional: false, required: false
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    resetTableName() {
        this._tableName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get timeToLiveSpecification() {
        return this.interpolationForAttribute('time_to_live_specification');
    }
    set timeToLiveSpecification(value) {
        this._timeToLiveSpecification = value;
    }
    resetTimeToLiveSpecification() {
        this._timeToLiveSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeToLiveSpecificationInput() {
        return this._timeToLiveSpecification;
    }
    get writeProvisionedThroughputSettings() {
        return this.interpolationForAttribute('write_provisioned_throughput_settings');
    }
    set writeProvisionedThroughputSettings(value) {
        this._writeProvisionedThroughputSettings = value;
    }
    resetWriteProvisionedThroughputSettings() {
        this._writeProvisionedThroughputSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeProvisionedThroughputSettingsInput() {
        return this._writeProvisionedThroughputSettings;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            attribute_definitions: cdktf.listMapper(dynamodbGlobalTableAttributeDefinitionsToTerraform)(this._attributeDefinitions),
            billing_mode: cdktf.stringToTerraform(this._billingMode),
            global_secondary_indexes: cdktf.listMapper(dynamodbGlobalTableGlobalSecondaryIndexesToTerraform)(this._globalSecondaryIndexes),
            key_schema: cdktf.listMapper(dynamodbGlobalTableKeySchemaToTerraform)(this._keySchema),
            local_secondary_indexes: cdktf.listMapper(dynamodbGlobalTableLocalSecondaryIndexesToTerraform)(this._localSecondaryIndexes),
            replicas: cdktf.listMapper(dynamodbGlobalTableReplicasToTerraform)(this._replicas),
            sse_specification: dynamodbGlobalTableSseSpecificationToTerraform(this._sseSpecification),
            stream_specification: dynamodbGlobalTableStreamSpecificationToTerraform(this._streamSpecification),
            table_name: cdktf.stringToTerraform(this._tableName),
            time_to_live_specification: dynamodbGlobalTableTimeToLiveSpecificationToTerraform(this._timeToLiveSpecification),
            write_provisioned_throughput_settings: dynamodbGlobalTableWriteProvisionedThroughputSettingsToTerraform(this._writeProvisionedThroughputSettings),
        };
    }
}
exports.DynamodbGlobalTable = DynamodbGlobalTable;
// =================
// STATIC PROPERTIES
// =================
DynamodbGlobalTable.tfResourceType = "awscc_dynamodb_global_table";
//# sourceMappingURL=data:application/json;base64,