// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSII Language Support complex aws example csharp snapshot 1`] = `
"using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Aws;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        new Provider.AwsProvider(this, \\"aws\\", new AwsProviderConfig {
            Region = \\"us-east-1\\"
        });
        var awsKmsKeyExamplekms = new KmsKey.KmsKey(this, \\"examplekms\\", new KmsKeyConfig {
            DeletionWindowInDays = 7,
            Description = \\"KMS key 1\\"
        });
        var awsS3BucketExamplebucket = new S3Bucket.S3Bucket(this, \\"examplebucket\\", new S3BucketConfig {
            Acl = \\"private\\",
            Bucket = \\"examplebuckettftest\\"
        });
        new S3BucketObject.S3BucketObject(this, \\"examplebucket_object\\", new S3BucketObjectConfig {
            Bucket = $\\"\\\\\\\\\${element({awsS3BucketExamplebucket.fqn}, 0).id}\\",
            Key = \\"someobject\\",
            KmsKeyId = awsKmsKeyExamplekms.Arn,
            Source = \\"index.html\\"
        });
        new SecurityGroup.SecurityGroup(this, \\"allow_tls\\", new SecurityGroupConfig {
            Description = \\"Allow TLS inbound traffic\\",
            Egress = new [] { new SecurityGroupEgress {
                CidrBlocks = new [] { \\"0.0.0.0/0\\" },
                FromPort = 0,
                Ipv6CidrBlocks = new [] { \\"::/0\\" },
                Protocol = \\"-1\\",
                ToPort = 0
            } },
            Ingress = new [] { new SecurityGroupIngress {
                Description = \\"TLS from VPC\\",
                FromPort = 443,
                Protocol = \\"tcp\\",
                ToPort = 443
            }, new SecurityGroupIngress {
                Description = \\"TLS from VPC\\",
                FromPort = 80,
                Protocol = \\"tcp\\",
                ToPort = 80
            }, new SecurityGroupIngress {
                FromPort = 8080,
                Protocol = \\"tcp\\",
                ToPort = 8080
            } },
            Name = \\"allow_tls\\",
            Tags = new Dictionary<string, string> {
                { \\"Name\\", \\"allow_tls\\" }
            }
        });
    }
}"
`;

exports[`JSII Language Support complex aws example go snapshot 1`] = `
"import constructs \\"github.com/aws/constructs-go/constructs\\"
import cdktf \\"github.com/hashicorp/terraform-cdk-go/cdktf\\"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import \\"github.com/aws-samples/dummy/gen/providers/aws/provider\\"
import \\"github.com/aws-samples/dummy/gen/providers/aws/kmsKey\\"
import \\"github.com/aws-samples/dummy/gen/providers/aws/s3Bucket\\"
import \\"github.com/aws-samples/dummy/gen/providers/aws/s3BucketObject\\"
import \\"github.com/aws-samples/dummy/gen/providers/aws/securityGroup\\"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	provider.NewAwsProvider(this, jsii.String(\\"aws\\"), &awsProviderConfig{
		region: jsii.String(\\"us-east-1\\"),
	})
	awsKmsKeyExamplekms := kmsKey.NewKmsKey(this, jsii.String(\\"examplekms\\"), &kmsKeyConfig{
		deletionWindowInDays: jsii.Number(7),
		description: jsii.String(\\"KMS key 1\\"),
	})
	awsS3BucketExamplebucket := s3Bucket.NewS3Bucket(this, jsii.String(\\"examplebucket\\"), &s3BucketConfig{
		acl: jsii.String(\\"private\\"),
		bucket: jsii.String(\\"examplebuckettftest\\"),
	})
	s3BucketObject.NewS3BucketObject(this, jsii.String(\\"examplebucket_object\\"), &s3BucketObjectConfig{
		bucket: fmt.Sprintf(\\"\\\\\\\\\${element(%v, 0).id}\\", awsS3BucketExamplebucket.fqn),
		key: jsii.String(\\"someobject\\"),
		kmsKeyId: awsKmsKeyExamplekms.arn,
		source: jsii.String(\\"index.html\\"),
	})
	securityGroup.NewSecurityGroup(this, jsii.String(\\"allow_tls\\"), &securityGroupConfig{
		description: jsii.String(\\"Allow TLS inbound traffic\\"),
		egress: []interface{}{
			&securityGroupEgress{
				cidrBlocks: []*string{
					jsii.String(\\"0.0.0.0/0\\"),
				},
				fromPort: jsii.Number(0),
				ipv6CidrBlocks: []*string{
					jsii.String(\\"::/0\\"),
				},
				protocol: jsii.String(\\"-1\\"),
				toPort: jsii.Number(0),
			},
		},
		ingress: []interface{}{
			&securityGroupIngress{
				description: jsii.String(\\"TLS from VPC\\"),
				fromPort: jsii.Number(443),
				protocol: jsii.String(\\"tcp\\"),
				toPort: jsii.Number(443),
			},
			&securityGroupIngress{
				description: jsii.String(\\"TLS from VPC\\"),
				fromPort: jsii.Number(80),
				protocol: jsii.String(\\"tcp\\"),
				toPort: jsii.Number(80),
			},
			&securityGroupIngress{
				fromPort: jsii.Number(8080),
				protocol: jsii.String(\\"tcp\\"),
				toPort: jsii.Number(8080),
			},
		},
		name: jsii.String(\\"allow_tls\\"),
		tags: map[string]*string{
			\\"Name\\": jsii.String(\\"allow_tls\\"),
		},
	})
	return this
}"
`;

exports[`JSII Language Support complex aws example java snapshot 1`] = `
"import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.aws.provider.*;
import gen.providers.aws.kmsKey.*;
import gen.providers.aws.s3Bucket.*;
import gen.providers.aws.s3BucketObject.*;
import gen.providers.aws.securityGroup.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        new AwsProvider(this, \\"aws\\", new AwsProviderConfig()
                .region(\\"us-east-1\\")
                );
        KmsKey awsKmsKeyExamplekms = new KmsKey(this, \\"examplekms\\", new KmsKeyConfig()
                .deletionWindowInDays(7)
                .description(\\"KMS key 1\\")
                );
        S3Bucket awsS3BucketExamplebucket = new S3Bucket(this, \\"examplebucket\\", new S3BucketConfig()
                .acl(\\"private\\")
                .bucket(\\"examplebuckettftest\\")
                );
        new S3BucketObject(this, \\"examplebucket_object\\", new S3BucketObjectConfig()
                .bucket(String.format(\\"\\\\\\\\\${element(%s, 0).id}\\", awsS3BucketExamplebucket.getFqn()))
                .key(\\"someobject\\")
                .kmsKeyId(awsKmsKeyExamplekms.getArn())
                .source(\\"index.html\\")
                );
        new SecurityGroup(this, \\"allow_tls\\", new SecurityGroupConfig()
                .description(\\"Allow TLS inbound traffic\\")
                .egress(List.of(new SecurityGroupEgress()
                        .cidrBlocks(List.of(\\"0.0.0.0/0\\"))
                        .fromPort(0)
                        .ipv6CidrBlocks(List.of(\\"::/0\\"))
                        .protocol(\\"-1\\")
                        .toPort(0)
                        ))
                .ingress(List.of(new SecurityGroupIngress()
                        .description(\\"TLS from VPC\\")
                        .fromPort(443)
                        .protocol(\\"tcp\\")
                        .toPort(443)
                        , new SecurityGroupIngress()
                        .description(\\"TLS from VPC\\")
                        .fromPort(80)
                        .protocol(\\"tcp\\")
                        .toPort(80)
                        , new SecurityGroupIngress()
                        .fromPort(8080)
                        .protocol(\\"tcp\\")
                        .toPort(8080)
                        ))
                .name(\\"allow_tls\\")
                .tags(Map.of(
                        \\"Name\\", \\"allow_tls\\"))
                );
    }
}"
`;

exports[`JSII Language Support complex aws example python snapshot 1`] = `
"import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.provider.AwsProvider(self, \\"aws\\",
            region=\\"us-east-1\\"
        )
        aws_kms_key_examplekms = aws.kms_key.KmsKey(self, \\"examplekms\\",
            deletion_window_in_days=7,
            description=\\"KMS key 1\\"
        )
        aws_s3_bucket_examplebucket = aws.s3_bucket.S3Bucket(self, \\"examplebucket\\",
            acl=\\"private\\",
            bucket=\\"examplebuckettftest\\"
        )
        aws.s3_bucket_object.S3BucketObject(self, \\"examplebucket_object\\",
            bucket=f\\"\\\\\\\\\${element({awsS3BucketExamplebucket.fqn}, 0).id}\\",
            key=\\"someobject\\",
            kms_key_id=aws_kms_key_examplekms.arn,
            source=\\"index.html\\"
        )
        aws.security_group.SecurityGroup(self, \\"allow_tls\\",
            description=\\"Allow TLS inbound traffic\\",
            egress=[SecurityGroupEgress(
                cidr_blocks=[\\"0.0.0.0/0\\"],
                from_port=0,
                ipv6_cidr_blocks=[\\"::/0\\"],
                protocol=\\"-1\\",
                to_port=0
            )
            ],
            ingress=[SecurityGroupIngress(
                description=\\"TLS from VPC\\",
                from_port=443,
                protocol=\\"tcp\\",
                to_port=443
            ), SecurityGroupIngress(
                description=\\"TLS from VPC\\",
                from_port=80,
                protocol=\\"tcp\\",
                to_port=80
            ), SecurityGroupIngress(
                from_port=8080,
                protocol=\\"tcp\\",
                to_port=8080
            )
            ],
            name=\\"allow_tls\\",
            tags={
                \\"Name\\": \\"allow_tls\\"
            }
        )"
`;

exports[`JSII Language Support complex aws example typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsKmsKeyExamplekms = new aws.kmsKey.KmsKey(this, \\"examplekms\\", {
      deletionWindowInDays: 7,
      description: \\"KMS key 1\\",
    });
    const awsS3BucketExamplebucket = new aws.s3Bucket.S3Bucket(
      this,
      \\"examplebucket\\",
      {
        acl: \\"private\\",
        bucket: \\"examplebuckettftest\\",
      }
    );
    new aws.s3BucketObject.S3BucketObject(this, \\"examplebucket_object\\", {
      bucket: \`\\\\\${element(\${awsS3BucketExamplebucket.fqn}, 0).id}\`,
      key: \\"someobject\\",
      kmsKeyId: cdktf.Token.asString(awsKmsKeyExamplekms.arn),
      source: \\"index.html\\",
    });
    new aws.securityGroup.SecurityGroup(this, \\"allow_tls\\", {
      description: \\"Allow TLS inbound traffic\\",
      egress: [
        {
          cidrBlocks: [\\"0.0.0.0/0\\"],
          fromPort: 0,
          ipv6CidrBlocks: [\\"::/0\\"],
          protocol: \\"-1\\",
          toPort: 0,
        },
      ],
      ingress: [
        {
          description: \\"TLS from VPC\\",
          fromPort: 443,
          protocol: \\"tcp\\",
          toPort: 443,
        },
        {
          description: \\"TLS from VPC\\",
          fromPort: 80,
          protocol: \\"tcp\\",
          toPort: 80,
        },
        {
          fromPort: 8080,
          protocol: \\"tcp\\",
          toPort: 8080,
        },
      ],
      name: \\"allow_tls\\",
      tags: {
        Name: \\"allow_tls\\",
      },
    });
  }
}
"
`;
