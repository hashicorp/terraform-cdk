// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSII Language Support complex aws example snapshot csharp 1`] = `
"using Constructs;
using HashiCorp.Cdktf;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
using aws.Kms.Key;
using aws.Provider;
using aws.S3.Bucket;
using aws.S3.Bucket.Object;
using aws.Security.Group;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        new AwsProvider(this, "aws", new AwsProviderConfig {
            Region = "us-east-1"
        });
        var examplekms = new KmsKey(this, "examplekms", new KmsKeyConfig {
            DeletionWindowInDays = 7,
            Description = "KMS key 1"
        });
        var examplebucket = new S3Bucket(this, "examplebucket", new S3BucketConfig {
            Acl = "private",
            Bucket = "examplebuckettftest"
        });
        new S3BucketObject(this, "examplebucket_object", new S3BucketObjectConfig {
            Bucket = examplebucket.Bucket,
            Key = "someobject",
            KmsKeyId = examplekms.Arn,
            Source = "index.html"
        });
        new SecurityGroup(this, "allow_tls", new SecurityGroupConfig {
            Description = "Allow TLS inbound traffic",
            Egress = new [] { new SecurityGroupEgress {
                CidrBlocks = new [] { "0.0.0.0/0" },
                FromPort = 0,
                Ipv6CidrBlocks = new [] { "::/0" },
                Protocol = "-1",
                ToPort = 0
            } },
            Ingress = new [] { new SecurityGroupIngress {
                Description = "TLS from VPC",
                FromPort = 443,
                Protocol = "tcp",
                ToPort = 443
            }, new SecurityGroupIngress {
                Description = "TLS from VPC",
                FromPort = 80,
                Protocol = "tcp",
                ToPort = 80
            }, new SecurityGroupIngress {
                FromPort = 8080,
                Protocol = "tcp",
                ToPort = 8080
            } },
            Name = "allow_tls",
            Tags = new Dictionary<string, string> {
                { "Name", "allow_tls" }
            }
        });
    }
}"
`;

exports[`JSII Language Support complex aws example snapshot go 1`] = `
"import "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import "cdk.tf/go/stack/generated/aws/kmskey"
import "cdk.tf/go/stack/generated/aws/provider"
import "cdk.tf/go/stack/generated/aws/s3bucket"
import "cdk.tf/go/stack/generated/aws/s3bucketobject"
import "cdk.tf/go/stack/generated/aws/securitygroup"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	newTerraformStack_Override(this, scope, name)
	genprovidersawsprovider.NewAwsProvider(this, jsii.String("aws"), &awsProviderConfig{
		region: jsii.String("us-east-1"),
	})
	examplekms := genprovidersawskmskey.NewKmsKey(this, jsii.String("examplekms"), &kmsKeyConfig{
		deletionWindowInDays: jsii.Number(7),
		description: jsii.String("KMS key 1"),
	})
	examplebucket := genprovidersawss3bucket.NewS3Bucket(this, jsii.String("examplebucket"), &s3BucketConfig{
		acl: jsii.String("private"),
		bucket: jsii.String("examplebuckettftest"),
	})
	genprovidersawss3bucketobject.NewS3BucketObject(this, jsii.String("examplebucket_object"), &s3BucketObjectConfig{
		bucket: examplebucket.bucket,
		key: jsii.String("someobject"),
		kmsKeyId: examplekms.arn,
		source: jsii.String("index.html"),
	})
	genprovidersawssecuritygroup.NewSecurityGroup(this, jsii.String("allow_tls"), &securityGroupConfig{
		description: jsii.String("Allow TLS inbound traffic"),
		egress: []interface{}{
			&securityGroupEgress{
				cidrBlocks: []*string{
					jsii.String("0.0.0.0/0"),
				},
				fromPort: jsii.Number(0),
				ipv6CidrBlocks: []*string{
					jsii.String("::/0"),
				},
				protocol: jsii.String("-1"),
				toPort: jsii.Number(0),
			},
		},
		ingress: []interface{}{
			&securityGroupIngress{
				description: jsii.String("TLS from VPC"),
				fromPort: jsii.Number(443),
				protocol: jsii.String("tcp"),
				toPort: jsii.Number(443),
			},
			&securityGroupIngress{
				description: jsii.String("TLS from VPC"),
				fromPort: jsii.Number(80),
				protocol: jsii.String("tcp"),
				toPort: jsii.Number(80),
			},
			&securityGroupIngress{
				fromPort: jsii.Number(8080),
				protocol: jsii.String("tcp"),
				toPort: jsii.Number(8080),
			},
		},
		name: jsii.String("allow_tls"),
		tags: map[string]*string{
			"Name": jsii.String("allow_tls"),
		},
	})
	return this
}"
`;

exports[`JSII Language Support complex aws example snapshot java 1`] = `
"import software.constructs.Construct;
import com.hashicorp.cdktf.TerraformStack;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import imports.aws.kms.key.KmsKey;
import imports.aws.provider.AwsProvider;
import imports.aws.s3.bucket.S3Bucket;
import imports.aws.s3.bucket.object.S3BucketObject;
import imports.aws.security.group.SecurityGroup;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        new AwsProvider(this, "aws", new AwsProviderConfig()
                .region("us-east-1")
                );
        KmsKey examplekms = new KmsKey(this, "examplekms", new KmsKeyConfig()
                .deletionWindowInDays(7)
                .description("KMS key 1")
                );
        S3Bucket examplebucket = new S3Bucket(this, "examplebucket", new S3BucketConfig()
                .acl("private")
                .bucket("examplebuckettftest")
                );
        new S3BucketObject(this, "examplebucket_object", new S3BucketObjectConfig()
                .bucket(examplebucket.getBucket())
                .key("someobject")
                .kmsKeyId(examplekms.getArn())
                .source("index.html")
                );
        new SecurityGroup(this, "allow_tls", new SecurityGroupConfig()
                .description("Allow TLS inbound traffic")
                .egress(List.of(new SecurityGroupEgress()
                        .cidrBlocks(List.of("0.0.0.0/0"))
                        .fromPort(0)
                        .ipv6CidrBlocks(List.of("::/0"))
                        .protocol("-1")
                        .toPort(0)
                        ))
                .ingress(List.of(new SecurityGroupIngress()
                        .description("TLS from VPC")
                        .fromPort(443)
                        .protocol("tcp")
                        .toPort(443)
                        , new SecurityGroupIngress()
                        .description("TLS from VPC")
                        .fromPort(80)
                        .protocol("tcp")
                        .toPort(80)
                        , new SecurityGroupIngress()
                        .fromPort(8080)
                        .protocol("tcp")
                        .toPort(8080)
                        ))
                .name("allow_tls")
                .tags(Map.of(
                        "Name", "allow_tls"))
                );
    }
}"
`;

exports[`JSII Language Support complex aws example snapshot python 1`] = `
"from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running \`cdktf get\`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.kms_key import KmsKey
from imports.aws.provider import AwsProvider
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_object import S3BucketObject
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AwsProvider(self, "aws",
            region="us-east-1"
        )
        examplekms = KmsKey(self, "examplekms",
            deletion_window_in_days=7,
            description="KMS key 1"
        )
        examplebucket = S3Bucket(self, "examplebucket",
            acl="private",
            bucket="examplebuckettftest"
        )
        S3BucketObject(self, "examplebucket_object",
            bucket=examplebucket.bucket,
            key="someobject",
            kms_key_id=examplekms.arn,
            source="index.html"
        )
        SecurityGroup(self, "allow_tls",
            description="Allow TLS inbound traffic",
            egress=[SecurityGroupEgress(
                cidr_blocks=["0.0.0.0/0"],
                from_port=0,
                ipv6_cidr_blocks=["::/0"],
                protocol="-1",
                to_port=0
            )
            ],
            ingress=[SecurityGroupIngress(
                description="TLS from VPC",
                from_port=443,
                protocol="tcp",
                to_port=443
            ), SecurityGroupIngress(
                description="TLS from VPC",
                from_port=80,
                protocol="tcp",
                to_port=80
            ), SecurityGroupIngress(
                from_port=8080,
                protocol="tcp",
                to_port=8080
            )
            ],
            name="allow_tls",
            tags={
                "Name": "allow_tls"
            }
        )"
`;

exports[`JSII Language Support complex aws example snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
import { SecurityGroup } from "./.gen/providers/aws/security-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const examplekms = new KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const examplebucket = new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "examplebuckettftest",
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: examplebucket.bucket,
      key: "someobject",
      kmsKeyId: examplekms.arn,
      source: "index.html",
    });
    new SecurityGroup(this, "allow_tls", {
      description: "Allow TLS inbound traffic",
      egress: [
        {
          cidrBlocks: ["0.0.0.0/0"],
          fromPort: 0,
          ipv6CidrBlocks: ["::/0"],
          protocol: "-1",
          toPort: 0,
        },
      ],
      ingress: [
        {
          description: "TLS from VPC",
          fromPort: 443,
          protocol: "tcp",
          toPort: 443,
        },
        {
          description: "TLS from VPC",
          fromPort: 80,
          protocol: "tcp",
          toPort: 80,
        },
        {
          fromPort: 8080,
          protocol: "tcp",
          toPort: 8080,
        },
      ],
      name: "allow_tls",
      tags: {
        Name: "allow_tls",
      },
    });
  }
}
"
`;
