// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`variables basic snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new LocalProvider(this, "local", {});
    const imageId = new TerraformVariable(this, "image_id", {
      type: VariableType.STRING,
    });
    new DataLocalFile(this, "foo", {
      filename: "./\${" + imageId.value + "}.img",
    });
  }
}
"
`;

exports[`variables complex type and default snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new LocalProvider(this, "local", {});
    const dockerPorts = new TerraformVariable(this, "docker_ports", {
      default: [
        {
          external: 8300,
          internal: 8300,
          protocol: "tcp",
        },
      ],
      type: VariableType.list(
        VariableType.object({
          external: VariableType.NUMBER,
          internal: VariableType.NUMBER,
          protocol: VariableType.STRING,
        })
      ),
    });
    new DataLocalFile(this, "foo", {
      filename:
        "./" +
        Token.asString(Fn.lookupNested(dockerPorts.value, ["0", "protocol"])) +
        ".img",
    });
  }
}
"
`;

exports[`variables sensitive and required snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new LocalProvider(this, "local", {});
    const userInformation = new TerraformVariable(this, "user_information", {
      sensitive: true,
      nullable: false,
      type: VariableType.object({
        address: VariableType.STRING,
        name: VariableType.STRING,
      }),
    });
    new DataLocalFile(this, "foo", {
      filename:
        "./" +
        Token.asString(Fn.lookupNested(userInformation.value, ["name"])) +
        ".img",
    });
  }
}
"
`;

exports[`variables validations snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new LocalProvider(this, "local", {});
    const imageId = new TerraformVariable(this, "image_id", {
      description: "The id of the machine image (AMI) to use for the server.",
      validation: [
        {
          errorMessage:
            "The image_id value must be a valid AMI id, starting with ami-.",
          condition:
            '\${length(var.image_id) > 4 && substr(var.image_id, 0, 4) == "ami-"}',
        },
      ],
      type: VariableType.STRING,
    });
    new DataLocalFile(this, "foo", {
      filename: "./\${" + imageId.value + "}.img",
    });
  }
}
"
`;
