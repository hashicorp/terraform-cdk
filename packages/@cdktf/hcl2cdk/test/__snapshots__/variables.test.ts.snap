// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`variables basic typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from "./.gen/providers/local";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new local.provider.LocalProvider(this, "local", {});
    const imageId = new cdktf.TerraformVariable(this, "image_id", {
      type: cdktf.VariableType.STRING,
    });
    new local.dataLocalFile.DataLocalFile(this, "foo", {
      filename: "./\${" + imageId.value + "}.img",
    });
  }
}
"
`;

exports[`variables complex type and default typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from "./.gen/providers/local";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new local.provider.LocalProvider(this, "local", {});
    const dockerPorts = new cdktf.TerraformVariable(this, "docker_ports", {
      default: [
        {
          external: 8300,
          internal: 8300,
          protocol: "tcp",
        },
      ],
      type: cdktf.VariableType.list(
        cdktf.VariableType.object({
          external: cdktf.VariableType.NUMBER,
          internal: cdktf.VariableType.NUMBER,
          protocol: cdktf.VariableType.STRING,
        })
      ),
    });
    new local.dataLocalFile.DataLocalFile(this, "foo", {
      filename: "./\${" + ("\${" + dockerPorts.value + "}[0].protocol") + "}.img",
    });
  }
}
"
`;

exports[`variables sensitive and required typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from "./.gen/providers/local";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new local.provider.LocalProvider(this, "local", {});
    const userInformation = new cdktf.TerraformVariable(
      this,
      "user_information",
      {
        sensitive: true,
        nullable: false,
        type: cdktf.VariableType.object({
          address: cdktf.VariableType.STRING,
          name: cdktf.VariableType.STRING,
        }),
      }
    );
    new local.dataLocalFile.DataLocalFile(this, "foo", {
      filename: "./\${" + ("\${" + userInformation.value + "}.name") + "}.img",
    });
  }
}
"
`;

exports[`variables validations typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from "./.gen/providers/local";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new local.provider.LocalProvider(this, "local", {});
    const imageId = new cdktf.TerraformVariable(this, "image_id", {
      description: "The id of the machine image (AMI) to use for the server.",
      validation: [
        {
          errorMessage:
            "The image_id value must be a valid AMI id, starting with ami-.",
          condition:
            '\${length(var.image_id) > 4 && substr(var.image_id, 0, 4) == "ami-"}',
        },
      ],
      type: cdktf.VariableType.STRING,
    });
    new local.dataLocalFile.DataLocalFile(this, "foo", {
      filename: "./\${" + imageId.value + "}.img",
    });
  }
}
"
`;
