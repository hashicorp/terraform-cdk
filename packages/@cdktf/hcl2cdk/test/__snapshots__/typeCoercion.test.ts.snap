// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`type coercion coerces string literal to number snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Op, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { SecurityGroupRule } from "./.gen/providers/aws/security-group-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new SecurityGroupRule(this, "client_alb_allow_outbound", {
      cidrBlocks: ["0.0.0.0/0"],
      description: "Allow any outbound traffic.",
      fromPort: 0,
      ipv6CidrBlocks: ["::/0"],
      protocol: Token.asString(Op.negate(1)),
      securityGroupId: "sg-1234567890",
      toPort: 0,
      type: "egress",
    });
  }
}
"
`;

exports[`type coercion expressions need to be coerced to required type snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksCluster } from "./.gen/providers/aws/eks-cluster";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const exampleSpotAndFargateName = new TerraformVariable(
      this,
      "example_spot_and_fargate_name",
      {
        type: VariableType.STRING,
      }
    );
    const privateSubnets = new TerraformVariable(this, "private_subnets", {
      type: VariableType.list(
        VariableType.object({
          id: VariableType.STRING,
        })
      ),
    });
    const publicSubnets = new TerraformVariable(this, "public_subnets", {
      type: VariableType.list(
        VariableType.object({
          id: VariableType.STRING,
        })
      ),
    });
    const roleArn = new TerraformVariable(this, "role_arn", {
      type: VariableType.STRING,
    });
    new EksCluster(this, "example_spot_and_fargate_eks_cluster", {
      name: exampleSpotAndFargateName.stringValue,
      roleArn: roleArn.stringValue,
      vpcConfig: {
        subnetIds: Token.asList(
          Fn.concat([
            Fn.lookupNested(privateSubnets.value, ["*", "id"]),
            Fn.lookupNested(publicSubnets.value, ["*", "id"]),
          ])
        ),
      },
    });
  }
}
"
`;

exports[`type coercion function arguments get coerced to the correct type snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Token,
  Fn,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53Record } from "./.gen/providers/aws/route53-record";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const zoneId = new TerraformVariable(this, "zone_id", {
      type: VariableType.STRING,
    });
    new Route53Record(this, "example_aws_route53_simple_record", {
      name: "example.com",
      records: ["example"],
      ttl: Token.asNumber("300"),
      type: "TXT",
      zoneId: Token.asString(
        Fn.textencodebase64(zoneId.stringValue, "UTF-16LE")
      ),
    });
  }
}
"
`;

exports[`type coercion references used in resource for_eachs need to understand how the value is used snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Token,
  TerraformIterator,
  Fn,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamUserGroupMembership } from "./.gen/providers/aws/iam-user-group-membership";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const iamGroupsUsers = new TerraformVariable(this, "iam_groups_users", {
      type: VariableType.map(
        VariableType.object({
          groups: VariableType.ANY,
        })
      ),
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const iamUserGroupMembershipUserGroupsForEachIterator =
      TerraformIterator.fromList(Token.asAny(iamGroupsUsers.value));
    new IamUserGroupMembership(this, "iam_user_group_membership_user_groups", {
      groups: Token.asList(
        Fn.lookupNested(iamUserGroupMembershipUserGroupsForEachIterator.value, [
          '["groups"]',
        ])
      ),
      user: Token.asString(iamUserGroupMembershipUserGroupsForEachIterator.key),
      forEach: iamUserGroupMembershipUserGroupsForEachIterator,
    });
  }
}
"
`;

exports[`type coercion references used in resources need to use Token.asString snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53Record } from "./.gen/providers/aws/route53-record";
import { Route53Zone } from "./.gen/providers/aws/route53-zone";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const exampleAwsRoute53SimpleZone = new Route53Zone(
      this,
      "example_aws_route53_simple_zone",
      {
        name: "example.com",
      }
    );
    new Route53Record(this, "example_aws_route53_simple_record", {
      name: "example.com",
      records: ["example"],
      ttl: Token.asNumber("300"),
      type: "TXT",
      zoneId: exampleAwsRoute53SimpleZone.zoneId,
    });
  }
}
"
`;

exports[`type coercion variables used in resources need to use stringValue snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53Record } from "./.gen/providers/aws/route53-record";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const zoneId = new TerraformVariable(this, "zone_id", {
      type: VariableType.STRING,
    });
    new Route53Record(this, "example_aws_route53_simple_record", {
      name: "example.com",
      records: ["example"],
      ttl: Token.asNumber("300"),
      type: "TXT",
      zoneId: zoneId.stringValue,
    });
  }
}
"
`;
