// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`type coercion expressions need to be coerced to required type typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const exampleSpotAndFargateName = new cdktf.TerraformVariable(
      this,
      \\"example_spot_and_fargate_name\\",
      {}
    );
    const privateSubnets = new cdktf.TerraformVariable(
      this,
      \\"private_subnets\\",
      {}
    );
    const publicSubnets = new cdktf.TerraformVariable(
      this,
      \\"public_subnets\\",
      {}
    );
    const roleArn = new cdktf.TerraformVariable(this, \\"role_arn\\", {});
    new aws.eksCluster.EksCluster(
      this,
      \\"example_spot_and_fargate_eks_cluster\\",
      {
        name: exampleSpotAndFargateName.stringValue,
        roleArn: roleArn.stringValue,
        vpcConfig: {
          subnetIds: cdktf.Token.asList(
            \`\\\\\${concat(\${privateSubnets.value}.*.id, \${publicSubnets.value}.*.id)}\`
          ),
        },
      }
    );
  }
}
"
`;

exports[`type coercion references used in resource for_eachs need to understand how the value is used typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const iamGroupsUsers = new cdktf.TerraformVariable(
      this,
      \\"iam_groups_users\\",
      {}
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsIamUserGroupMembershipIamUserGroupMembershipUserGroupsForEachIterator =
      cdktf.TerraformIterator.fromList(cdktf.Token.asAny(iamGroupsUsers.value));
    new aws.iamUserGroupMembership.IamUserGroupMembership(
      this,
      \\"iam_user_group_membership_user_groups\\",
      {
        groups: cdktf.Token.asList(
          \`\\\\\${\${awsIamUserGroupMembershipIamUserGroupMembershipUserGroupsForEachIterator.value}[\\"groups\\"]}\`
        ),
        user: awsIamUserGroupMembershipIamUserGroupMembershipUserGroupsForEachIterator.key,
      }
    );
  }
}
"
`;

exports[`type coercion references used in resources need to use Token.asString typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsRoute53ZoneExampleAwsRoute53SimpleZone =
      new aws.route53Zone.Route53Zone(this, \\"example_aws_route53_simple_zone\\", {
        name: \\"example.com\\",
      });
    new aws.route53Record.Route53Record(
      this,
      \\"example_aws_route53_simple_record\\",
      {
        name: \\"example.com\\",
        records: [\\"example\\"],
        ttl: cdktf.Token.asNumber(\\"300\\"),
        type: \\"TXT\\",
        zoneId: cdktf.Token.asString(
          awsRoute53ZoneExampleAwsRoute53SimpleZone.zoneId
        ),
      }
    );
  }
}
"
`;

exports[`type coercion variables used in resources need to use stringValue typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const zoneId = new cdktf.TerraformVariable(this, \\"zone_id\\", {});
    new aws.route53Record.Route53Record(
      this,
      \\"example_aws_route53_simple_record\\",
      {
        name: \\"example.com\\",
        records: [\\"example\\"],
        ttl: cdktf.Token.asNumber(\\"300\\"),
        type: \\"TXT\\",
        zoneId: zoneId.stringValue,
      }
    );
  }
}
"
`;
