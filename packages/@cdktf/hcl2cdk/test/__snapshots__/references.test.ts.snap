// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`references aliased duplicate provider with var reference typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from "./.gen/providers/auth0";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const clientId = new cdktf.TerraformVariable(this, "client_id", {
      description: "A client_id",
    });
    const clientSecret = new cdktf.TerraformVariable(this, "client_secret", {
      description: "A client_secret",
    });
    const domain = new cdktf.TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new auth0.provider.Auth0Provider(this, "auth0", {
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      domain: domain.stringValue,
    });
    new auth0.provider.Auth0Provider(this, "auth0_4", {
      alias: "private_auth0",
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      debug: true,
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references data local_file typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from "./.gen/providers/local";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new local.provider.LocalProvider(this, "local", {});
    new local.dataLocalFile.DataLocalFile(this, "_01_please_verify", {
      filename: "./email_templates/01_please_verify/template.html",
    });
  }
}
"
`;

exports[`references data references typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new cdktf.TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: cdktf.VariableType.STRING,
    });
    const dataAwsS3BucketExamplebucket =
      new aws.dataAwsS3Bucket.DataAwsS3Bucket(this, "examplebucket", {
        bucket: bucketName.stringValue,
      });
    new aws.s3BucketObject.S3BucketObject(this, "examplebucket_object", {
      bucket: cdktf.Token.asString(dataAwsS3BucketExamplebucket.arn),
      key: "someobject",
      source: "index.html",
    });
  }
}
"
`;

exports[`references double references typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new cdktf.TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: cdktf.VariableType.STRING,
    });
    new aws.s3Bucket.S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName.stringValue,
      tags: {
        "tag-key": bucketName.stringValue,
      },
    });
  }
}
"
`;

exports[`references locals references typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = "foo";
    new aws.s3Bucket.S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName,
    });
  }
}
"
`;

exports[`references provider with var reference typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from "./.gen/providers/auth0";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const domain = new cdktf.TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new auth0.provider.Auth0Provider(this, "auth0", {
      clientId: "client_id",
      clientSecret: "client_secret",
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references resource references typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsKmsKeyExamplekms = new aws.kmsKey.KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const awsS3BucketExamplebucket = new aws.s3Bucket.S3Bucket(
      this,
      "examplebucket",
      {
        acl: "private",
        bucket: "examplebuckettftest",
      }
    );
    new aws.s3BucketObject.S3BucketObject(this, "examplebucket_object", {
      bucket: cdktf.Token.asString(awsS3BucketExamplebucket.id),
      key: "someobject",
      kmsKeyId: cdktf.Token.asString(awsKmsKeyExamplekms.arn),
      source: "index.html",
    });
  }
}
"
`;

exports[`references resource references with HCL functions typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsKmsKeyExamplekms = new aws.kmsKey.KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const awsS3BucketExamplebucket = new aws.s3Bucket.S3Bucket(
      this,
      "examplebucket",
      {
        acl: "private",
        bucket: "examplebuckettftest-\${count.index}",
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    awsS3BucketExamplebucket.addOverride("count", 2);
    new aws.s3BucketObject.S3BucketObject(this, "examplebucket_object", {
      bucket: cdktf.Token.asString(
        cdktf.propertyAccess(cdktf.Fn.element(awsS3BucketExamplebucket, 0), [
          "id",
        ])
      ),
      key: "someobject",
      kmsKeyId: cdktf.Token.asString(awsKmsKeyExamplekms.arn),
      source: "index.html",
    });
  }
}
"
`;

exports[`references variable references typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new cdktf.TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: cdktf.VariableType.STRING,
    });
    new aws.s3Bucket.S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName.stringValue,
    });
  }
}
"
`;
