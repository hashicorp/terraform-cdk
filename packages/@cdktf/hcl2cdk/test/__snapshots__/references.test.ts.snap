// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`references aliased duplicate provider with var reference typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Auth0Provider } from "./.gen/providers/auth0/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const clientId = new TerraformVariable(this, "client_id", {
      description: "A client_id",
    });
    const clientSecret = new TerraformVariable(this, "client_secret", {
      description: "A client_secret",
    });
    const domain = new TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new Auth0Provider(this, "auth0", {
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      domain: domain.stringValue,
    });
    new Auth0Provider(this, "auth0_4", {
      alias: "private_auth0",
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      debug: true,
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references data local_file typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LocalProvider(this, "local", {});
    new DataLocalFile(this, "_01_please_verify", {
      filename: "./email_templates/01_please_verify/template.html",
    });
  }
}
"
`;

exports[`references data references typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsS3Bucket } from "./.gen/providers/aws/data-aws-s3-bucket";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: VariableType.STRING,
    });
    const examplebucket = new DataAwsS3Bucket(this, "examplebucket", {
      bucket: bucketName.stringValue,
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: Token.asString(examplebucket.arn),
      key: "someobject",
      source: "index.html",
    });
  }
}
"
`;

exports[`references double references typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: VariableType.STRING,
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName.stringValue,
      tags: {
        "tag-key": bucketName.stringValue,
      },
    });
  }
}
"
`;

exports[`references locals references typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = "foo";
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName,
    });
  }
}
"
`;

exports[`references provider with var reference typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Auth0Provider } from "./.gen/providers/auth0/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const domain = new TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new Auth0Provider(this, "auth0", {
      clientId: "client_id",
      clientSecret: "client_secret",
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references resource references typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const examplekms = new KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const examplebucket = new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "examplebuckettftest",
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: examplebucket.id,
      key: "someobject",
      kmsKeyId: examplekms.arn,
      source: "index.html",
    });
  }
}
"
`;

exports[`references resource references with HCL functions typescript snapshot 1`] = `
"import { Construct } from "constructs";
import {
  Token,
  TerraformCount,
  Fn,
  propertyAccess,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const examplekms = new KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const examplebucketCount = TerraformCount.of(Token.asNumber("2"));
    const examplebucket = new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "examplebuckettftest-\${" + examplebucketCount.index + "}",
      count: examplebucketCount,
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: Token.asString(
        propertyAccess(Fn.element(examplebucket, 0), ["id"])
      ),
      key: "someobject",
      kmsKeyId: examplekms.arn,
      source: "index.html",
    });
  }
}
"
`;

exports[`references resources with splat expressions should work typescript snapshot 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  propertyAccess,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const keyValuePairs = new TerraformVariable(this, "key_value_pairs", {
      default: [
        {
          bar: "not food",
          foo: "foo",
        },
        {
          bar: "not beer",
          foo: "bar",
        },
      ],
      description: "List of key value pairs",
      type: VariableType.list(
        VariableType.object({
          bar: VariableType.STRING,
          foo: VariableType.STRING,
        })
      ),
    });
    new TerraformOutput(this, "values", {
      value: propertyAccess(keyValuePairs.value, ["*", "bar"]),
    });
  }
}
"
`;

exports[`references variable references typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { VariableType, TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const bucketName = new TerraformVariable(this, "bucket_name", {
      default: "demo",
      type: VariableType.STRING,
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: bucketName.stringValue,
    });
  }
}
"
`;

exports[`references variables with maps need to use accessor syntax typescript snapshot 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  propertyAccess,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Eip } from "./.gen/providers/aws/eip";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const defaultTags = new TerraformVariable(this, "default_tags", {
      default: [
        {
          project: "Learning Live with AWS & HashiCorp",
        },
      ],
      description: "Map of default tags to apply to resources",
      type: VariableType.map(VariableType.STRING),
    });
    new Eip(this, "nat", {
      tags: {
        Name:
          Token.asString(propertyAccess(defaultTags.value, ["project"])) +
          "-nat-eip",
      },
      vpc: true,
    });
  }
}
"
`;
