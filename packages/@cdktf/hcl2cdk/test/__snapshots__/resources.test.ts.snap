// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resources blocks should be arrays typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new google.provider.GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    new google.computeAutoscaler.ComputeAutoscaler(this, "example", {
      autoscalingPolicy: {
        cooldownPeriod: 60,
        cpuUtilization: {
          target: 0.5,
        },
        maxReplicas: 8,
        minReplicas: 2,
      },
      name: "example-autoscaler",
      target: "target-for-example-autoscaler",
      zone: "us-east1-b",
    });
  }
}
"
`;

exports[`resources complex resource typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new aws.cloudfrontDistribution.CloudfrontDistribution(
      this,
      "s3_distribution",
      {
        aliases: ["mysite.example.com", "yoursite.example.com"],
        comment: "Some comment",
        defaultCacheBehavior: {
          allowedMethods: [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
          ],
          cachedMethods: ["GET", "HEAD"],
          defaultTtl: 3600,
          forwardedValues: {
            cookies: {
              forward: "none",
            },
            queryString: false,
          },
          maxTtl: 86400,
          minTtl: 0,
          targetOriginId: "local_s3_origin_id",
          viewerProtocolPolicy: "allow-all",
        },
        defaultRootObject: "index.html",
        enabled: true,
        isIpv6Enabled: true,
        loggingConfig: {
          bucket: "mylogs.s3.amazonaws.com",
          includeCookies: false,
          prefix: "myprefix",
        },
        orderedCacheBehavior: [
          {
            allowedMethods: ["GET", "HEAD", "OPTIONS"],
            cachedMethods: ["GET", "HEAD", "OPTIONS"],
            compress: true,
            defaultTtl: 86400,
            forwardedValues: {
              cookies: {
                forward: "none",
              },
              headers: ["Origin"],
              queryString: false,
            },
            maxTtl: 31536000,
            minTtl: 0,
            pathPattern: "/content/immutable/*",
            targetOriginId: "local_s3_origin_id",
            viewerProtocolPolicy: "redirect-to-https",
          },
          {
            allowedMethods: ["GET", "HEAD", "OPTIONS"],
            cachedMethods: ["GET", "HEAD"],
            compress: true,
            defaultTtl: 3600,
            forwardedValues: {
              cookies: {
                forward: "none",
              },
              queryString: false,
            },
            maxTtl: 86400,
            minTtl: 0,
            pathPattern: "/content/*",
            targetOriginId: "local_s3_origin_id",
            viewerProtocolPolicy: "redirect-to-https",
          },
        ],
        origin: [
          {
            domainName: "aws_s3_bucket.b.bucket_regional_domain_name",
            originId: "local_s3_origin_id",
            s3OriginConfig: {
              originAccessIdentity:
                "origin-access-identity/cloudfront/ABCDEFG1234567",
            },
          },
        ],
        priceClass: "PriceClass_200",
        restrictions: {
          geoRestriction: {
            locations: ["US", "CA", "GB", "DE"],
            restrictionType: "whitelist",
          },
        },
        tags: {
          Environment: "production",
        },
        viewerCertificate: {
          cloudfrontDefaultCertificate: true,
        },
      }
    );
  }
}
"
`;

exports[`resources handle special resource names typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as scaleway from "./.gen/providers/scaleway";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new scaleway.provider.ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const scalewayObjectBucketSomeBucket =
      new scaleway.objectBucket.ObjectBucket(this, "some_bucket", {
        name: "some-unique-name",
      });
    new scaleway.objectResource.ObjectResource(this, "some_file", {
      bucket: scalewayObjectBucketSomeBucket.name,
      file: "myfile",
      hash: cdktf.Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources handles special resource names without schema typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as scaleway from "./.gen/providers/scaleway";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: scaleway.
    For a more precise conversion please use the --provider flag in convert.*/
    new scaleway.provider.ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const scalewayObjectBucketSomeBucket =
      new scaleway.objectBucket.ObjectBucket(this, "some_bucket", {
        name: "some-unique-name",
      });
    new scaleway.objectResource.ObjectResource(this, "some_file", {
      bucket: scalewayObjectBucketSomeBucket.name,
      file: "myfile",
      hash: cdktf.Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources maps are not arrays typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from "./.gen/providers/kubernetes";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new kubernetes.provider.KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new kubernetes.secret.Secret(this, "secrets-xxx", {
      data: {
        xxx: "yyy",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources maps dont get camel case keys typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from "./.gen/providers/kubernetes";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new kubernetes.provider.KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new kubernetes.secret.Secret(this, "secrets-xxx", {
      data: {
        camel_cased_key: "yes",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources multiple blocks typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new aws.securityGroup.SecurityGroup(this, "allow_tls", {
      description: "Allow TLS inbound traffic",
      egress: [
        {
          cidrBlocks: ["0.0.0.0/0"],
          fromPort: 0,
          ipv6CidrBlocks: ["::/0"],
          protocol: "-1",
          toPort: 0,
        },
      ],
      ingress: [
        {
          description: "TLS from VPC",
          fromPort: 443,
          protocol: "tcp",
          toPort: 443,
        },
        {
          description: "TLS from VPC",
          fromPort: 80,
          protocol: "tcp",
          toPort: 80,
        },
        {
          fromPort: 8080,
          protocol: "tcp",
          toPort: 8080,
        },
      ],
      name: "allow_tls",
      tags: {
        Name: "allow_tls",
      },
    });
  }
}
"
`;

exports[`resources property level renamings typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new aws.guarddutyFilter.GuarddutyFilter(this, "MyFilter", {
      action: "ARCHIVE",
      detectorId: "id",
      findingCriteria: {
        criterion: [
          {
            equalTo: ["eu-west-1"],
            field: "region",
          },
          {
            field: "service.additionalInfo.threatListName",
            notEquals: ["some-threat", "another-threat"],
          },
          {
            field: "updatedAt",
            greaterThan: "2020-01-01T00:00:00Z",
            lessThan: "2020-02-01T00:00:00Z",
          },
          {
            field: "severity",
            greaterThanOrEqual: "4",
          },
        ],
      },
      name: "MyFilter",
      rank: 1,
    });
  }
}
"
`;

exports[`resources same name local, var, out typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const test = new cdktf.TerraformVariable(this, "test", {});
    const localTest = "\${" + test.value + "} + 1";
    const cdktfTerraformOutputTest = new cdktf.TerraformOutput(this, "test_1", {
      value: localTest,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    cdktfTerraformOutputTest.overrideLogicalId("test");
  }
}
"
`;

exports[`resources simple data source typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new aws.dataAwsSubnet.DataAwsSubnet(this, "selected", {
      vpcId: "subnet_id",
    });
  }
}
"
`;

exports[`resources simple resource typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new aws.vpc.Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
    });
  }
}
"
`;

exports[`resources tricky to parse items typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const tags = new cdktf.TerraformVariable(this, "tags", {});
    new aws.instance.Instance(this, "play", {
      ami: cdktf.Fn.join(
        "-",
        cdktf.Token.asList([
          "\${" + tags.value + "}.app",
          "\${" + tags.value + "}.env",
        ])
      ),
      associatePublicIpAddress: true,
      connection: {
        host: cdktf.TerraformSelf.getAny("public_ip"),
        private_key: cdktf.Fn.file("./terraform_key"),
        type: "ssh",
        user: "ubuntu",
      },
      instanceType: "t3.small",
      keyName: awsKeyPairMasterKey.id,
      subnetId: awsSubnetMain.id,
      vpcSecurityGroupIds: [awsSecurityGroupSsh.id],
    });
  }
}
"
`;
