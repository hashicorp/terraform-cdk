// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resources access use fqn for data source snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { EbsVolume } from "./.gen/providers/aws/ebs-volume";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const changemeAzListEbsSnapshot = new DataAwsAvailabilityZones(
      this,
      "changeme_az_list_ebs_snapshot",
      {
        state: "available",
      }
    );
    new EbsVolume(this, "changeme_ebs_volume_snapshot", {
      availabilityZone: Token.asString(
        Fn.lookupNested(changemeAzListEbsSnapshot.names, ["0"])
      ),
      encrypted: false,
      size: 10,
      tags: {
        Name: "changeme_ebs_volume_tag",
      },
      type: "standard",
    });
  }
}
"
`;

exports[`resources blocks should be arrays snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeAutoscaler } from "./.gen/providers/google/compute-autoscaler";
import { GoogleProvider } from "./.gen/providers/google/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    new ComputeAutoscaler(this, "example", {
      autoscalingPolicy: {
        cooldownPeriod: 60,
        cpuUtilization: {
          target: 0.5,
        },
        maxReplicas: 8,
        minReplicas: 2,
      },
      name: "example-autoscaler",
      target: "target-for-example-autoscaler",
      zone: "us-east1-b",
    });
  }
}
"
`;

exports[`resources complex resource snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontDistribution } from "./.gen/providers/aws/cloudfront-distribution";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new CloudfrontDistribution(this, "s3_distribution", {
      aliases: ["mysite.example.com", "yoursite.example.com"],
      comment: "Some comment",
      defaultCacheBehavior: {
        allowedMethods: [
          "DELETE",
          "GET",
          "HEAD",
          "OPTIONS",
          "PATCH",
          "POST",
          "PUT",
        ],
        cachedMethods: ["GET", "HEAD"],
        defaultTtl: 3600,
        forwardedValues: {
          cookies: {
            forward: "none",
          },
          queryString: false,
        },
        maxTtl: 86400,
        minTtl: 0,
        targetOriginId: "local_s3_origin_id",
        viewerProtocolPolicy: "allow-all",
      },
      defaultRootObject: "index.html",
      enabled: true,
      isIpv6Enabled: true,
      loggingConfig: {
        bucket: "mylogs.s3.amazonaws.com",
        includeCookies: false,
        prefix: "myprefix",
      },
      orderedCacheBehavior: [
        {
          allowedMethods: ["GET", "HEAD", "OPTIONS"],
          cachedMethods: ["GET", "HEAD", "OPTIONS"],
          compress: true,
          defaultTtl: 86400,
          forwardedValues: {
            cookies: {
              forward: "none",
            },
            headers: ["Origin"],
            queryString: false,
          },
          maxTtl: 31536000,
          minTtl: 0,
          pathPattern: "/content/immutable/*",
          targetOriginId: "local_s3_origin_id",
          viewerProtocolPolicy: "redirect-to-https",
        },
        {
          allowedMethods: ["GET", "HEAD", "OPTIONS"],
          cachedMethods: ["GET", "HEAD"],
          compress: true,
          defaultTtl: 3600,
          forwardedValues: {
            cookies: {
              forward: "none",
            },
            queryString: false,
          },
          maxTtl: 86400,
          minTtl: 0,
          pathPattern: "/content/*",
          targetOriginId: "local_s3_origin_id",
          viewerProtocolPolicy: "redirect-to-https",
        },
      ],
      origin: [
        {
          domainName: "aws_s3_bucket.b.bucket_regional_domain_name",
          originId: "local_s3_origin_id",
          s3OriginConfig: {
            originAccessIdentity:
              "origin-access-identity/cloudfront/ABCDEFG1234567",
          },
        },
      ],
      priceClass: "PriceClass_200",
      restrictions: {
        geoRestriction: {
          locations: ["US", "CA", "GB", "DE"],
          restrictionType: "whitelist",
        },
      },
      tags: {
        Environment: "production",
      },
      viewerCertificate: {
        cloudfrontDefaultCertificate: true,
      },
    });
  }
}
"
`;

exports[`resources handle special resource names snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ObjectBucket } from "./.gen/providers/scaleway/object-bucket";
import { ObjectResource } from "./.gen/providers/scaleway/object-resource";
import { ScalewayProvider } from "./.gen/providers/scaleway/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const someBucket = new ObjectBucket(this, "some_bucket", {
      name: "some-unique-name",
    });
    new ObjectResource(this, "some_file", {
      bucket: someBucket.name,
      file: "myfile",
      hash: Token.asString(Fn.filemd5("myfile")),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources handles JSON encoded blocks snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new EcsTaskDefinition(this, "client", {
      containerDefinitions: Token.asString(
        Fn.jsonencode([
          {
            cpu: 0,
            environment: [
              {
                name: "NAME",
                value: "client",
              },
              {
                name: "MESSAGE",
                value: "Hello from the client!",
              },
            ],
            essential: true,
            image: "crccheck/hello-world",
            name: "client",
            portMappings: [
              {
                containerPort: 8000,
                hostPort: 8000,
                protocol: "tcp",
              },
            ],
          },
        ])
      ),
      cpu: Token.asString(256),
      family: "client",
      memory: Token.asString(512),
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
    });
  }
}
"
`;

exports[`resources handles special resource names without schema snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ObjectBucket } from "./.gen/providers/scaleway/object-bucket";
import { ObjectResource } from "./.gen/providers/scaleway/object-resource";
import { ScalewayProvider } from "./.gen/providers/scaleway/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: scaleway.
    For a more precise conversion please use the --provider flag in convert.*/
    new ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const someBucket = new ObjectBucket(this, "some_bucket", {
      name: "some-unique-name",
    });
    new ObjectResource(this, "some_file", {
      bucket: someBucket.name,
      file: "myfile",
      hash: Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources maps are not arrays snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { Secret } from "./.gen/providers/kubernetes/secret";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new Secret(this, "secrets-xxx", {
      data: {
        xxx: "yyy",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources maps dont get camel case keys snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { Secret } from "./.gen/providers/kubernetes/secret";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new Secret(this, "secrets-xxx", {
      data: {
        camel_cased_key: "yes",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources multiple blocks snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { SecurityGroup } from "./.gen/providers/aws/security-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new SecurityGroup(this, "allow_tls", {
      description: "Allow TLS inbound traffic",
      egress: [
        {
          cidrBlocks: ["0.0.0.0/0"],
          fromPort: 0,
          ipv6CidrBlocks: ["::/0"],
          protocol: "-1",
          toPort: 0,
        },
      ],
      ingress: [
        {
          description: "TLS from VPC",
          fromPort: 443,
          protocol: "tcp",
          toPort: 443,
        },
        {
          description: "TLS from VPC",
          fromPort: 80,
          protocol: "tcp",
          toPort: 80,
        },
        {
          fromPort: 8080,
          protocol: "tcp",
          toPort: 8080,
        },
      ],
      name: "allow_tls",
      tags: {
        Name: "allow_tls",
      },
    });
  }
}
"
`;

exports[`resources property level renamings snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GuarddutyFilter } from "./.gen/providers/aws/guardduty-filter";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new GuarddutyFilter(this, "MyFilter", {
      action: "ARCHIVE",
      detectorId: "id",
      findingCriteria: {
        criterion: [
          {
            equalTo: ["eu-west-1"],
            field: "region",
          },
          {
            field: "service.additionalInfo.threatListName",
            notEquals: ["some-threat", "another-threat"],
          },
          {
            field: "updatedAt",
            greaterThan: "2020-01-01T00:00:00Z",
            lessThan: "2020-02-01T00:00:00Z",
          },
          {
            field: "severity",
            greaterThanOrEqual: "4",
          },
        ],
      },
      name: "MyFilter",
      rank: 1,
    });
  }
}
"
`;

exports[`resources same name local, var, out snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const test = new TerraformVariable(this, "test", {
      type: VariableType.STRING,
    });
    const localTest = "\${" + test.value + "} + 1";
    const cdktfTerraformOutputTest = new TerraformOutput(this, "test_1", {
      value: localTest,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    cdktfTerraformOutputTest.overrideLogicalId("test");
  }
}
"
`;

exports[`resources simple data source snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSubnet } from "./.gen/providers/aws/data-aws-subnet";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new DataAwsSubnet(this, "selected", {
      vpcId: "subnet_id",
    });
  }
}
"
`;

exports[`resources simple resource snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
    });
  }
}
"
`;

exports[`resources tricky to parse items snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformSelf,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const tags = new TerraformVariable(this, "tags", {
      type: VariableType.ANY,
    });
    new Instance(this, "play", {
      ami: Token.asString(
        Fn.join(
          "-",
          Token.asList([
            Fn.lookupNested(tags.value, ["app"]),
            Fn.lookupNested(tags.value, ["env"]),
          ])
        )
      ),
      associatePublicIpAddress: true,
      connection: {
        host: TerraformSelf.getAny("public_ip"),
        private_key: Fn.file("./terraform_key"),
        type: "ssh",
        user: "ubuntu",
      },
      instanceType: "t3.small",
      keyName: masterKey.id,
      subnetId: main.id,
      vpcSecurityGroupIds: [ssh.id],
    });
  }
}
"
`;
