// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resources access use fqn for data source typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { propertyAccess, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { EbsVolume } from "./.gen/providers/aws/ebs-volume";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const changemeAzListEbsSnapshot = new DataAwsAvailabilityZones(
      this,
      "changeme_az_list_ebs_snapshot",
      {
        state: "available",
      }
    );
    new EbsVolume(this, "changeme_ebs_volume_snapshot", {
      availabilityZone: Token.asString(
        propertyAccess(changemeAzListEbsSnapshot.names, ["0"])
      ),
      encrypted: false,
      size: 10,
      tags: {
        Name: "changeme_ebs_volume_tag",
      },
      type: "standard",
    });
  }
}
"
`;

exports[`resources blocks should be arrays typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeAutoscaler } from "./.gen/providers/google/compute-autoscaler";
import { GoogleProvider } from "./.gen/providers/google/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    new ComputeAutoscaler(this, "example", {
      autoscalingPolicy: {
        cooldownPeriod: 60,
        cpuUtilization: {
          target: 0.5,
        },
        maxReplicas: 8,
        minReplicas: 2,
      },
      name: "example-autoscaler",
      target: "target-for-example-autoscaler",
      zone: "us-east1-b",
    });
  }
}
"
`;

exports[`resources handle special resource names snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ObjectBucket } from "./.gen/providers/scaleway/object-bucket";
import { ObjectResource } from "./.gen/providers/scaleway/object-resource";
import { ScalewayProvider } from "./.gen/providers/scaleway/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const someBucket = new ObjectBucket(this, "some_bucket", {
      name: "some-unique-name",
    });
    new ObjectResource(this, "some_file", {
      bucket: someBucket.name,
      file: "myfile",
      hash: Token.asString(Fn.filemd5("myfile")),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources handles special resource names without schema snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ObjectBucket } from "./.gen/providers/scaleway/object-bucket";
import { ObjectResource } from "./.gen/providers/scaleway/object-resource";
import { ScalewayProvider } from "./.gen/providers/scaleway/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: scaleway.
    For a more precise conversion please use the --provider flag in convert.*/
    new ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const someBucket = new ObjectBucket(this, "some_bucket", {
      name: "some-unique-name",
    });
    new ObjectResource(this, "some_file", {
      bucket: someBucket.name,
      file: "myfile",
      hash: Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources maps are not arrays snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { Secret } from "./.gen/providers/kubernetes/secret";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new Secret(this, "secrets-xxx", {
      data: {
        xxx: "yyy",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources maps dont get camel case keys snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { Secret } from "./.gen/providers/kubernetes/secret";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new Secret(this, "secrets-xxx", {
      data: {
        camel_cased_key: "yes",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources same name local, var, out snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const test = new TerraformVariable(this, "test", {
      type: VariableType.STRING,
    });
    const localTest = "\${" + test.value + "} + 1";
    const cdktfTerraformOutputTest = new TerraformOutput(this, "test_1", {
      value: localTest,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    cdktfTerraformOutputTest.overrideLogicalId("test");
  }
}
"
`;

exports[`resources simple data source typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSubnet } from "./.gen/providers/aws/data-aws-subnet";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new DataAwsSubnet(this, "selected", {
      vpcId: "subnet_id",
    });
  }
}
"
`;

exports[`resources simple resource typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
    });
  }
}
"
`;

exports[`resources tricky to parse items typescript snapshot 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  propertyAccess,
  Fn,
  Token,
  TerraformSelf,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const tags = new TerraformVariable(this, "tags", {
      type: VariableType.ANY,
    });
    new Instance(this, "play", {
      ami: Token.asString(
        Fn.join(
          "-",
          Token.asList([
            propertyAccess(tags.value, ["app"]),
            propertyAccess(tags.value, ["env"]),
          ])
        )
      ),
      associatePublicIpAddress: true,
      connection: {
        host: TerraformSelf.getAny("public_ip"),
        private_key: Fn.file("./terraform_key"),
        type: "ssh",
        user: "ubuntu",
      },
      instanceType: "t3.small",
      keyName: masterKey.id,
      subnetId: main.id,
      vpcSecurityGroupIds: [ssh.id],
    });
  }
}
"
`;
