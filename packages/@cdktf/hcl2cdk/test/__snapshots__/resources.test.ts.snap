// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resources blocks should be arrays snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from \\"./.gen/providers/google\\";
new google.provider.GoogleProvider(this, \\"google\\", {
  project: \\"my-project\\",
  region: \\"us-central1\\",
});
new google.computeAutoscaler.ComputeAutoscaler(this, \\"example\\", {
  autoscalingPolicy: {
    cooldownPeriod: 60,
    cpuUtilization: {
      target: 0.5,
    },
    maxReplicas: 8,
    minReplicas: 2,
  },
  name: \\"example-autoscaler\\",
  target: \\"target-for-example-autoscaler\\",
  zone: \\"us-east1-b\\",
});
"
`;

exports[`resources complex resource snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.cloudfrontDistribution.CloudfrontDistribution(this, \\"s3_distribution\\", {
  aliases: [\\"mysite.example.com\\", \\"yoursite.example.com\\"],
  comment: \\"Some comment\\",
  defaultCacheBehavior: {
    allowedMethods: [
      \\"DELETE\\",
      \\"GET\\",
      \\"HEAD\\",
      \\"OPTIONS\\",
      \\"PATCH\\",
      \\"POST\\",
      \\"PUT\\",
    ],
    cachedMethods: [\\"GET\\", \\"HEAD\\"],
    defaultTtl: 3600,
    forwardedValues: {
      cookies: {
        forward: \\"none\\",
      },
      queryString: false,
    },
    maxTtl: 86400,
    minTtl: 0,
    targetOriginId: \\"local_s3_origin_id\\",
    viewerProtocolPolicy: \\"allow-all\\",
  },
  defaultRootObject: \\"index.html\\",
  enabled: true,
  isIpv6Enabled: true,
  loggingConfig: {
    bucket: \\"mylogs.s3.amazonaws.com\\",
    includeCookies: false,
    prefix: \\"myprefix\\",
  },
  orderedCacheBehavior: [
    {
      allowed_methods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cached_methods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      compress: true,
      default_ttl: 86400,
      forwarded_values: [
        {
          cookies: [
            {
              forward: \\"none\\",
            },
          ],
          headers: [\\"Origin\\"],
          query_string: false,
        },
      ],
      max_ttl: 31536000,
      min_ttl: 0,
      path_pattern: \\"/content/immutable/*\\",
      target_origin_id: \\"local_s3_origin_id\\",
      viewer_protocol_policy: \\"redirect-to-https\\",
    },
    {
      allowed_methods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cached_methods: [\\"GET\\", \\"HEAD\\"],
      compress: true,
      default_ttl: 3600,
      forwarded_values: [
        {
          cookies: [
            {
              forward: \\"none\\",
            },
          ],
          query_string: false,
        },
      ],
      max_ttl: 86400,
      min_ttl: 0,
      path_pattern: \\"/content/*\\",
      target_origin_id: \\"local_s3_origin_id\\",
      viewer_protocol_policy: \\"redirect-to-https\\",
    },
  ],
  origin: [
    {
      domain_name: \\"aws_s3_bucket.b.bucket_regional_domain_name\\",
      origin_id: \\"local_s3_origin_id\\",
      s3_origin_config: [
        {
          origin_access_identity:
            \\"origin-access-identity/cloudfront/ABCDEFG1234567\\",
        },
      ],
    },
  ],
  priceClass: \\"PriceClass_200\\",
  restrictions: {
    geoRestriction: {
      locations: [\\"US\\", \\"CA\\", \\"GB\\", \\"DE\\"],
      restrictionType: \\"whitelist\\",
    },
  },
  tags: {
    Environment: \\"production\\",
  },
  viewerCertificate: {
    cloudfrontDefaultCertificate: true,
  },
});
"
`;

exports[`resources maps are not arrays snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from \\"./.gen/providers/kubernetes\\";
new kubernetes.provider.KubernetesProvider(this, \\"kubernetes\\", {
  configContext: \\"my-context\\",
  configPath: \\"~/.kube/config\\",
});
new kubernetes.secret.Secret(this, \\"secrets-xxx\\", {
  data: {
    xxx: \\"yyy\\",
  },
  metadata: {
    name: \\"secrets-xxx\\",
  },
});
"
`;

exports[`resources maps dont get camel case keys snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from \\"./.gen/providers/kubernetes\\";
new kubernetes.provider.KubernetesProvider(this, \\"kubernetes\\", {
  configContext: \\"my-context\\",
  configPath: \\"~/.kube/config\\",
});
new kubernetes.secret.Secret(this, \\"secrets-xxx\\", {
  data: {
    camel_cased_key: \\"yes\\",
  },
  metadata: {
    name: \\"secrets-xxx\\",
  },
});
"
`;

exports[`resources multiple blocks snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.securityGroup.SecurityGroup(this, \\"allow_tls\\", {
  description: \\"Allow TLS inbound traffic\\",
  egress: [
    {
      cidr_blocks: [\\"0.0.0.0/0\\"],
      from_port: 0,
      ipv6_cidr_blocks: [\\"::/0\\"],
      protocol: \\"-1\\",
      to_port: 0,
    },
  ],
  ingress: [
    {
      description: \\"TLS from VPC\\",
      from_port: 443,
      protocol: \\"tcp\\",
      to_port: 443,
    },
    {
      description: \\"TLS from VPC\\",
      from_port: 80,
      protocol: \\"tcp\\",
      to_port: 80,
    },
    {
      from_port: 8080,
      protocol: \\"tcp\\",
      to_port: 8080,
    },
  ],
  name: \\"allow_tls\\",
  tags: {
    Name: \\"allow_tls\\",
  },
});
"
`;

exports[`resources property level renamings snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.guarddutyFilter.GuarddutyFilter(this, \\"MyFilter\\", {
  action: \\"ARCHIVE\\",
  detectorId: \\"id\\",
  findingCriteria: {
    criterion: [
      {
        equals: [\\"eu-west-1\\"],
        field: \\"region\\",
      },
      {
        field: \\"service.additionalInfo.threatListName\\",
        not_equals: [\\"some-threat\\", \\"another-threat\\"],
      },
      {
        field: \\"updatedAt\\",
        greater_than: \\"2020-01-01T00:00:00Z\\",
        less_than: \\"2020-02-01T00:00:00Z\\",
      },
      {
        field: \\"severity\\",
        greater_than_or_equal: \\"4\\",
      },
    ],
  },
  name: \\"MyFilter\\",
  rank: 1,
});
"
`;

exports[`resources same name local, var, out snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const test = new cdktf.TerraformVariable(this, \\"test\\", {});
const localTest = \`\\\\\${\${test.value}} + 1\`;
const cdktfTerraformOutputTest = new cdktf.TerraformOutput(this, \\"test_1\\", {
  value: localTest,
});
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
cdktfTerraformOutputTest.overrideLogicalId(\\"test\\");
"
`;

exports[`resources simple data source snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.dataAwsSubnet.DataAwsSubnet(this, \\"selected\\", {
  vpcId: \\"subnet_id\\",
});
"
`;

exports[`resources simple resource snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.vpc.Vpc(this, \\"example\\", {
  cidrBlock: \\"10.0.0.0/16\\",
});
"
`;

exports[`resources tricky to parse items snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.provider.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const tags = new cdktf.TerraformVariable(this, \\"tags\\", {});
new aws.instance.Instance(this, \\"play\\", {
  ami: \`\\\\\${join(\\"-\\", [\${tags.app.value}, \${tags.env.value}])}\`,
  associatePublicIpAddress: true,
  connection: [
    {
      host: \\"\${self.public_ip}\\",
      private_key: '\${file(\\"./terraform_key\\")}',
      type: \\"ssh\\",
      user: \\"ubuntu\\",
    },
  ],
  instanceType: \\"t3.small\\",
  keyName: \\"\${aws_key_pair.master_key.id}\\",
  subnetId: \\"\${aws_subnet.main.id}\\",
  vpcSecurityGroupIds: [\\"\${aws_security_group.ssh.id}\\"],
});
"
`;
