// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`meta-properties depends_on depends on typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsIamRolePolicyExample = new aws.iamRolePolicy.IamRolePolicy(
      this,
      \\"example\\",
      {
        name: \\"example\\",
        policy: cdktf.Fn.jsonencode(\\"\\"),
        role: \\"role\\",
      }
    );
    const awsInstanceExample = new aws.instance.Instance(this, \\"example_2\\", {
      ami: \\"ami-a1b2c3d4\\",
      dependsOn: [awsIamRolePolicyExample],
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceExample.overrideLogicalId(\\"example\\");
  }
}
"
`;

exports[`meta-properties lifecycle all lifecycle properties typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsIamRolePolicyExample = new aws.iamRolePolicy.IamRolePolicy(
      this,
      \\"example\\",
      {
        name: \\"example\\",
        policy: cdktf.Fn.jsonencode(\\"\\"),
        role: \\"role\\",
      }
    );
    const awsInstanceExample = new aws.instance.Instance(this, \\"example_2\\", {
      ami: \\"ami-a1b2c3d4\\",
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      lifecycle: {
        createBeforeDestroy: true,
        ignoreChanges: [\\"ami\\", \\"instance_type\\"],
        preventDestroy: true,
        replaceTriggeredBy: [awsIamRolePolicyExample.id],
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceExample.overrideLogicalId(\\"example\\");
  }
}
"
`;

exports[`meta-properties lifecycle preconditions and postconditions typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new aws.instance.Instance(this, \\"example\\", {
      ami: \\"ami-a1b2c3d4\\",
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      lifecycle: {
        postcondition: [
          {
            condition: cdktf.Op.neq(\\"\${self.public_dns}\\", \\"\\"),
            errorMessage:
              \\"EC2 instance must be in a VPC that has public DNS hostnames enabled.\\",
          },
        ],
        precondition: [
          {
            condition: cdktf.Op.eq('\${self.tags[\\"Component\\"]}', \\"nomad-server\\"),
            errorMessage: \\"Please add the nomad-server tag to this instance.\\",
          },
        ],
      },
    });
  }
}
"
`;

exports[`meta-properties provider passing providers typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from \\"./.gen/providers/google\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new google.provider.GoogleProvider(this, \\"google\\", {
      region: \\"us-central1\\",
    });
    const googleEurope = new google.provider.GoogleProvider(this, \\"google_1\\", {
      alias: \\"europe\\",
      region: \\"europe-west1\\",
    });
    new google.computeInstance.ComputeInstance(this, \\"default\\", {
      bootDisk: {
        initializeParams: {
          image: \\"debian-cloud/debian-11\\",
          labels: {
            my_label: \\"value\\",
          },
        },
      },
      machineType: \\"e2-medium\\",
      metadata: {
        foo: \\"bar\\",
      },
      metadataStartupScript: \\"echo hi > /test.txt\\",
      name: \\"test\\",
      networkInterface: [
        {
          accessConfig: [{}],
          network: \\"default\\",
        },
      ],
      provider: googleEurope,
      scratchDisk: [
        {
          interface: \\"SCSI\\",
        },
      ],
      tags: [\\"foo\\", \\"bar\\"],
      zone: \\"us-central1-a\\",
    });
  }
}
"
`;

exports[`meta-properties provisioner file typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new aws.instance.Instance(this, \\"example\\", {
      ami: \\"ami-a1b2c3d4\\",
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      provisioners: [
        {
          type: \\"file\\",
          destination: \\"/etc/myapp.conf\\",
          source: \\"conf/myapp.conf\\",
        },
        {
          type: \\"file\\",
          content: \\"ami used: \${self.ami}\\",
          destination: \\"/tmp/file.log\\",
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner local-exec typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new aws.instance.Instance(this, \\"example\\", {
      ami: \\"ami-a1b2c3d4\\",
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      provisioners: [
        {
          type: \\"local-exec\\",
          command: \\"echo \${self.private_ip} >> private_ips.txt\\",
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner remote-exec with connection block typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new aws.instance.Instance(this, \\"example\\", {
      ami: \\"ami-a1b2c3d4\\",
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      provisioners: [
        {
          type: \\"remote-exec\\",
          connection: {
            host: \\"\${self.public_ip}\\",
            password: \\"password\\",
            type: \\"ssh\\",
            user: \\"root\\",
          },
          inline: [
            \\"puppet apply\\",
            \\"consul join \${\\" + awsInstanceWeb.privateIp + \\"}\\",
          ],
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner remote-exec with global connection block typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new aws.instance.Instance(this, \\"example\\", {
      ami: \\"ami-a1b2c3d4\\",
      connection: {
        host: \\"\${self.public_ip}\\",
        password: \\"password\\",
        type: \\"ssh\\",
        user: \\"root\\",
      },
      iamInstanceProfile: \\"aws_iam_instance_profile\\",
      instanceType: \\"t2.micro\\",
      provisioners: [
        {
          type: \\"remote-exec\\",
          inline: [
            \\"puppet apply\\",
            \\"consul join \${\\" + awsInstanceWeb.privateIp + \\"}\\",
          ],
        },
      ],
    });
  }
}
"
`;
