// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`meta-properties depends_on depends on typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicy } from "./.gen/providers/aws/iamRolePolicy";
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example", {
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "s3:*",
              Effect: "Allow",
            },
          ],
        })
      ),
      role: "role",
    });
    const awsInstanceExample = new Instance(this, "example_2", {
      ami: "ami-a1b2c3d4",
      dependsOn: [awsIamRolePolicyExample],
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceExample.overrideLogicalId("example");
  }
}
"
`;

exports[`meta-properties lifecycle all lifecycle properties typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicy } from "./.gen/providers/aws/iamRolePolicy";
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example", {
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "s3:*",
              Effect: "Allow",
            },
          ],
        })
      ),
      role: "role",
    });
    const awsInstanceExample = new Instance(this, "example_2", {
      ami: "ami-a1b2c3d4",
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      lifecycle: {
        createBeforeDestroy: true,
        ignoreChanges: ["ami", "instance_type"],
        preventDestroy: true,
        replaceTriggeredBy: [awsIamRolePolicyExample.id],
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceExample.overrideLogicalId("example");
  }
}
"
`;

exports[`meta-properties lifecycle preconditions and postconditions typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformSelf, Op, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new Instance(this, "example", {
      ami: "ami-a1b2c3d4",
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      lifecycle: {
        postcondition: [
          {
            condition: Op.neq(TerraformSelf.getAny("public_dns"), ""),
            errorMessage:
              "EC2 instance must be in a VPC that has public DNS hostnames enabled.",
          },
        ],
        precondition: [
          {
            condition: Op.eq(
              TerraformSelf.getAny('tags["Component"]'),
              "nomad-server"
            ),
            errorMessage: "Please add the nomad-server tag to this instance.",
          },
        ],
      },
    });
  }
}
"
`;

exports[`meta-properties provider passing providers typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeInstance } from "./.gen/providers/google/computeInstance";
import { GoogleProvider } from "./.gen/providers/google/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GoogleProvider(this, "google", {
      region: "us-central1",
    });
    const googleEurope = new GoogleProvider(this, "google_1", {
      alias: "europe",
      region: "europe-west1",
    });
    new ComputeInstance(this, "default", {
      bootDisk: {
        initializeParams: {
          image: "debian-cloud/debian-11",
          labels: {
            my_label: "value",
          },
        },
      },
      machineType: "e2-medium",
      metadata: {
        foo: "bar",
      },
      metadataStartupScript: "echo hi > /test.txt",
      name: "test",
      networkInterface: [
        {
          accessConfig: [{}],
          network: "default",
        },
      ],
      provider: googleEurope,
      scratchDisk: [
        {
          interface: "SCSI",
        },
      ],
      tags: ["foo", "bar"],
      zone: "us-central1-a",
    });
  }
}
"
`;

exports[`meta-properties provisioner file typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformSelf, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new Instance(this, "example", {
      ami: "ami-a1b2c3d4",
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      provisioners: [
        {
          type: "file",
          destination: "/etc/myapp.conf",
          source: "conf/myapp.conf",
        },
        {
          type: "file",
          content: "ami used: " + Token.asString(TerraformSelf.getAny("ami")),
          destination: "/tmp/file.log",
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner local-exec typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformSelf, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    new Instance(this, "example", {
      ami: "ami-a1b2c3d4",
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      provisioners: [
        {
          type: "local-exec",
          command:
            "echo " +
            Token.asString(TerraformSelf.getAny("private_ip")) +
            " >> private_ips.txt",
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner remote-exec with connection block typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformSelf, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsInstanceWeb = new Instance(this, "web", {
      ami: "ami-a1b2c3d4",
      instanceType: "t2.micro",
    });
    new Instance(this, "example", {
      ami: "ami-a1b2c3d4",
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      provisioners: [
        {
          type: "remote-exec",
          connection: {
            host: TerraformSelf.getAny("public_ip"),
            password: "password",
            type: "ssh",
            user: "root",
          },
          inline: [
            "puppet apply",
            "consul join \${" + awsInstanceWeb.privateIp + "}",
          ],
        },
      ],
    });
  }
}
"
`;

exports[`meta-properties provisioner remote-exec with global connection block typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { TerraformSelf, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsInstanceWeb = new Instance(this, "web", {
      ami: "ami-a1b2c3d4",
      instanceType: "t2.micro",
    });
    new Instance(this, "example", {
      ami: "ami-a1b2c3d4",
      connection: {
        host: TerraformSelf.getAny("public_ip"),
        password: "password",
        type: "ssh",
        user: "root",
      },
      iamInstanceProfile: "aws_iam_instance_profile",
      instanceType: "t2.micro",
      provisioners: [
        {
          type: "remote-exec",
          inline: [
            "puppet apply",
            "consul join \${" + awsInstanceWeb.privateIp + "}",
          ],
        },
      ],
    });
  }
}
"
`;
