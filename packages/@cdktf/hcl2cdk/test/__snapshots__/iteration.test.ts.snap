// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iteration complex for each loops typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsAcmCertificateExample = new aws.acmCertificate.AcmCertificate(
      this,
      \\"example\\",
      {
        domainName: \\"example.com\\",
        validationMethod: \\"DNS\\",
      }
    );
    const dataAwsRoute53ZoneExample =
      new aws.dataAwsRoute53Zone.DataAwsRoute53Zone(this, \\"example_2\\", {
        name: \\"example.com\\",
        privateZone: false,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRoute53ZoneExample.overrideLogicalId(\\"example\\");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsRoute53RecordExampleForEachIterator =
      cdktf.TerraformIterator.fromList(
        cdktf.Token.asAny(\`\\\\\${{
          for dvo in \${awsAcmCertificateExample.domainValidationOptions} : dvo.domain_name => {
            name   = dvo.resource_record_name
            record = dvo.resource_record_value
            type   = dvo.resource_record_type
          }
        }}\`)
      );
    const awsRoute53RecordExample = new aws.route53Record.Route53Record(
      this,
      \\"example_3\\",
      {
        allowOverwrite: true,
        name: cdktf.Token.asString(
          cdktf.propertyAccess(awsRoute53RecordExampleForEachIterator.value, [
            \\"name\\",
          ])
        ),
        records: [
          cdktf.Token.asString(
            cdktf.propertyAccess(awsRoute53RecordExampleForEachIterator.value, [
              \\"record\\",
            ])
          ),
        ],
        ttl: 60,
        type: cdktf.Token.asString(
          cdktf.propertyAccess(awsRoute53RecordExampleForEachIterator.value, [
            \\"type\\",
          ])
        ),
        zoneId: cdktf.Token.asString(dataAwsRoute53ZoneExample.zoneId),
        forEach: awsRoute53RecordExampleForEachIterator,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53RecordExample.overrideLogicalId(\\"example\\");
    const awsAcmCertificateValidationExample =
      new aws.acmCertificateValidation.AcmCertificateValidation(
        this,
        \\"example_4\\",
        {
          certificateArn: cdktf.Token.asString(awsAcmCertificateExample.arn),
          validationRecordFqdns: cdktf.Token.asList(
            \`\\\\\${[for record in \${awsRoute53RecordExample.fqn} : record.fqdn]}\`
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmCertificateValidationExample.overrideLogicalId(\\"example\\");
    const awsLbListenerExample = new aws.lbListener.LbListener(
      this,
      \\"example_5\\",
      {
        certificateArn: cdktf.Token.asString(
          awsAcmCertificateValidationExample.certificateArn
        ),
        defaultAction: [
          {
            targetGroupArn: \\"best-target\\",
            type: \\"forward\\",
          },
        ],
        loadBalancerArn: \\"best-lb-arn\\",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbListenerExample.overrideLogicalId(\\"example\\");
  }
}
"
`;

exports[`iteration count loops typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const users = new cdktf.TerraformVariable(this, \\"users\\", {});
    const awsIamUserLb = new aws.iamUser.IamUser(this, \\"lb\\", {
      name: \`\\\\\${element(\${users.value}, count.index)}\`,
      path: \\"/system/\\",
      tags: {
        \\"tag-key\\": \\"tag-value\\",
      },
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    awsIamUserLb.addOverride(\\"count\\", \`\\\\\${length(\${users.value})}\`);
  }
}
"
`;

exports[`iteration dynamic blocks typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const namespace = new cdktf.TerraformVariable(this, \\"namespace\\", {});
    const settings = new cdktf.TerraformVariable(this, \\"settings\\", {});
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsElasticBeanstalkEnvironmentTfenvtestDynamicIterator0 =
      cdktf.TerraformIterator.fromList(cdktf.Token.asAny(settings.value));
    new aws.elasticBeanstalkEnvironment.ElasticBeanstalkEnvironment(
      this,
      \\"tfenvtest\\",
      {
        application: \\"best-app\\",
        name: \\"tf-test-name\\",
        solutionStackName:
          \\"64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\\",
        setting:
          awsElasticBeanstalkEnvironmentTfenvtestDynamicIterator0.dynamic({
            name: '\${setting.value[\\"name\\"]}',
            namespace: namespace.value,
            value: '\${setting.value[\\"value\\"]}',
          }),
      }
    );
  }
}
"
`;

exports[`iteration for each on list using splat typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const buckets = new cdktf.TerraformVariable(this, \\"buckets\\", {});
    const awsKmsKeyExamplekms = new aws.kmsKey.KmsKey(this, \\"examplekms\\", {
      deletionWindowInDays: 7,
      description: \\"KMS key 1\\",
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsS3BucketExamplebucketForEachIterator =
      cdktf.TerraformIterator.fromList(
        cdktf.Token.asAny(\`\\\\\${toset(\${buckets.value}.*)}\`)
      );
    const awsS3BucketExamplebucket = new aws.s3Bucket.S3Bucket(
      this,
      \\"examplebucket\\",
      {
        acl: \\"private\\",
        bucket: awsS3BucketExamplebucketForEachIterator.key,
        forEach: awsS3BucketExamplebucketForEachIterator,
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsS3BucketObjectExamplebucketObjectForEachIterator =
      cdktf.TerraformIterator.fromList(
        cdktf.Token.asAny(\`\\\\\${toset(\${awsS3BucketExamplebucket.fqn}.*)}\`)
      );
    new aws.s3BucketObject.S3BucketObject(this, \\"examplebucket_object\\", {
      bucket: awsS3BucketObjectExamplebucketObjectForEachIterator.key,
      key: \\"someobject\\",
      kmsKeyId: cdktf.Token.asString(awsKmsKeyExamplekms.arn),
      source: \\"index.html\\",
      forEach: awsS3BucketObjectExamplebucketObjectForEachIterator,
    });
  }
}
"
`;

exports[`iteration for_each loops typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const users = new cdktf.TerraformVariable(this, \\"users\\", {});
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsIamUserLbForEachIterator = cdktf.TerraformIterator.fromList(
      cdktf.Token.asAny(users.value)
    );
    new aws.iamUser.IamUser(this, \\"lb\\", {
      name: awsIamUserLbForEachIterator.key,
      path: \\"/system/\\",
      tags: {
        \\"tag-key\\": \\"tag-value\\",
      },
      forEach: awsIamUserLbForEachIterator,
    });
  }
}
"
`;

exports[`iteration for_each with var usage typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azuread from \\"./.gen/providers/azuread\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new azuread.provider.AzureadProvider(this, \\"azuread\\", {
      tenantId: \\"00000000-0000-0000-0000-000000000000\\",
    });
    const azureAdDomainName = new cdktf.TerraformVariable(
      this,
      \\"azure_ad_domain_name\\",
      {
        description: \\"domain\\",
      }
    );
    const oneSetOfUsers = new cdktf.TerraformVariable(
      this,
      \\"one_set_of_users\\",
      {
        description: \\"users\\",
      }
    );
    const otherSetOfUsers = new cdktf.TerraformVariable(
      this,
      \\"other_set_of_users\\",
      {
        description: \\"users\\",
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const azureadUserAzureUsersForEachIterator =
      cdktf.TerraformIterator.fromList(
        cdktf.Token.asAny(\`\\\\\${merge(
              \${oneSetOfUsers.value},
              \${otherSetOfUsers.value},
            )}\`)
      );
    new azuread.user.User(this, \\"azure_users\\", {
      displayName: azureadUserAzureUsersForEachIterator.key,
      userPrincipalName: \`\\\\\${\${azureadUserAzureUsersForEachIterator.value}}\\\\\${\${azureAdDomainName.value}}\`,
      forEach: azureadUserAzureUsersForEachIterator,
    });
  }
}
"
`;

exports[`iteration nested dynamic blocks typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azuread from \\"./.gen/providers/azuread\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new azuread.provider.AzureadProvider(this, \\"azuread\\", {
      tenantId: \\"00000000-0000-0000-0000-000000000000\\",
    });
    const requiredResourceAccess = new cdktf.TerraformVariable(
      this,
      \\"required_resource_access\\",
      {
        default: [
          {
            resource_access: [
              {
                id: \\"7ab1d382-f21e-4acd-a863-ba3e13f7da61\\",
                type: \\"Role\\",
              },
            ],
            resource_app_id: \\"00000003-0000-0000-c000-000000000000\\",
          },
        ],
      }
    );
    const azureadApplicationBootstrap = new azuread.application.Application(
      this,
      \\"bootstrap\\",
      {
        displayName: \\"test\\",
        requiredResourceAccess: [],
        groupMembershipClaims: cdktf.Token.asList(\\"All\\"),
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    azureadApplicationBootstrap.addOverride(
      \\"dynamic.required_resource_access\\",
      {
        for_each: requiredResourceAccess.value,
        content: [
          {
            resource_access: [],
            resource_app_id:
              '\${required_resource_access.value[\\"resource_app_id\\"]}',
          },
        ],
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    azureadApplicationBootstrap.addOverride(
      \\"dynamic.required_resource_access.0.content.0.dynamic.resource_access\\",
      {
        for_each: '\${required_resource_access.value[\\"resource_access\\"]}',
        content: [
          {
            id: '\${resource_access.value[\\"id\\"]}',
            type: '\${resource_access.value[\\"type\\"]}',
          },
        ],
      }
    );
  }
}
"
`;

exports[`iteration simple count typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    const awsInstanceMultipleServers = new aws.instance.Instance(
      this,
      \\"multiple_servers\\",
      {
        ami: \\"ami-0c2b8ca1dad447f8a\\",
        instanceType: \\"t2.micro\\",
        tags: {
          Name: \\"Server \${count.index}\\",
        },
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    awsInstanceMultipleServers.addOverride(\\"count\\", 4);
  }
}
"
`;
