// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tfExpressions arithmetics typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const admins = new cdktf.TerraformVariable(this, "admins", {
      type: cdktf.VariableType.NUMBER,
    });
    const members = new cdktf.TerraformVariable(this, "members", {
      type: cdktf.VariableType.NUMBER,
    });
    new cdktf.TerraformOutput(this, "arithmetics", {
      value: cdktf.Op.add(members.value, admins.value),
    });
  }
}
"
`;

exports[`tfExpressions conditionals typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const awsKmsKeyExamplekms = new aws.kmsKey.KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const awsS3BucketExamplebucket = new aws.s3Bucket.S3Bucket(
      this,
      "examplebucket",
      {
        acl: "private",
        bucket: "examplebuckettftest",
      }
    );
    new aws.s3BucketObject.S3BucketObject(this, "examplebucket_object", {
      bucket: cdktf.Token.asString(
        cdktf.conditional(
          cdktf.Op.gt(awsKmsKeyExamplekms.deletionWindowInDays, 3),
          awsS3BucketExamplebucket.id,
          []
        )
      ),
      key: "someobject",
      kmsKeyId: cdktf.Token.asString(awsKmsKeyExamplekms.arn),
      source: "index.html",
    });
  }
}
"
`;

exports[`tfExpressions for expression 1 typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new cdktf.TerraformVariable(this, "users", {
      type: cdktf.VariableType.map(
        cdktf.VariableType.object({
          is_admin: cdktf.VariableType.ANY,
        })
      ),
    });
    const adminUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if user.is_admin}}";
    const regularUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if !user.is_admin}}";
    new cdktf.TerraformOutput(this, "combined-so-it-does-not-get-removed", {
      value: "\${" + adminUsers + "},\${" + regularUsers + "}",
    });
  }
}
"
`;

exports[`tfExpressions for expression 2 typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new cdktf.TerraformVariable(this, "users", {
      type: cdktf.VariableType.map(
        cdktf.VariableType.object({
          role: cdktf.VariableType.STRING,
        })
      ),
    });
    const usersByRole =
      "\${{ for name, user in \${" + users.value + "} : user.role => name...}}";
    new cdktf.TerraformOutput(this, "so-it-does-not-get-removed", {
      value: usersByRole,
    });
  }
}
"
`;

exports[`tfExpressions for expression 3 typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as datadog from "./.gen/providers/datadog";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new datadog.provider.DatadogProvider(this, "datadog", {
      apiKey: "api_key",
      appKey: "app_key",
    });
    const users = new cdktf.TerraformVariable(this, "users", {
      type: cdktf.VariableType.list(
        cdktf.VariableType.object({
          id: cdktf.VariableType.STRING,
        })
      ),
    });
    new datadog.monitor.Monitor(this, "hard_query", {
      message: "here we go",
      name: "queries are hard",
      query: cdktf.Fn.join(
        " && ",
        cdktf.Token.asList(
          "\${[ for o in \${" + users.value + '} : "!(!\${o.id})"]}'
        )
      ),
      type: "metric alert",
    });
  }
}
"
`;

exports[`tfExpressions list access through square brackets typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new cdktf.TerraformVariable(this, "settings", {
      type: cdktf.VariableType.list(
        cdktf.VariableType.map(cdktf.VariableType.STRING)
      ),
    });
    new aws.s3Bucket.S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "\${" + settings.value + '}[0]["bucket_name"]',
    });
  }
}
"
`;

exports[`tfExpressions numeric property access typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new google.provider.GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    const googleComputeInstanceExample =
      new google.computeInstance.ComputeInstance(this, "example", {
        bootDisk: {
          initializeParams: {
            image: "debian-cloud/debian-9",
          },
        },
        machineType: "f1-micro",
        name: "example",
        networkInterface: [
          {
            accessConfig: [{}],
            network: "default",
          },
        ],
        zone: "us-east1-b",
      });
    new cdktf.TerraformOutput(this, "public_ip", {
      value:
        "\${" +
        googleComputeInstanceExample.fqn +
        "}.network_interface[0].access_config[0].assigned_nat_ip",
    });
  }
}
"
`;

exports[`tfExpressions property access through square brackets typescript snapshot 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new cdktf.TerraformVariable(this, "settings", {
      type: cdktf.VariableType.map(cdktf.VariableType.STRING),
    });
    new aws.s3Bucket.S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "\${" + settings.value + '}["bucket_name"]',
    });
  }
}
"
`;
