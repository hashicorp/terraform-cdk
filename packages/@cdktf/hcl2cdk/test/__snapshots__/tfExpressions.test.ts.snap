// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tfExpressions arithmetics snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  Op,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const admins = new TerraformVariable(this, "admins", {
      type: VariableType.NUMBER,
    });
    const members = new TerraformVariable(this, "members", {
      type: VariableType.NUMBER,
    });
    new TerraformOutput(this, "arithmetics", {
      value: Op.add(members.value, admins.value),
    });
  }
}
"
`;

exports[`tfExpressions conditionals snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Op, conditional, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const examplekms = new KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const examplebucket = new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "examplebuckettftest",
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: Token.asString(
        conditional(
          Op.gt(examplekms.deletionWindowInDays, 3),
          examplebucket.id,
          []
        )
      ),
      key: "someobject",
      kmsKeyId: examplekms.arn,
      source: "index.html",
    });
  }
}
"
`;

exports[`tfExpressions for expression 1 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new TerraformVariable(this, "users", {
      type: VariableType.map(
        VariableType.object({
          is_admin: VariableType.ANY,
        })
      ),
    });
    const adminUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if user.is_admin}}";
    const regularUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if !user.is_admin}}";
    new TerraformOutput(this, "combined-so-it-does-not-get-removed", {
      value: "\${" + adminUsers + "},\${" + regularUsers + "}",
    });
  }
}
"
`;

exports[`tfExpressions for expression 2 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new TerraformVariable(this, "users", {
      type: VariableType.map(
        VariableType.object({
          role: VariableType.STRING,
        })
      ),
    });
    const usersByRole =
      "\${{ for name, user in \${" + users.value + "} : user.role => name...}}";
    new TerraformOutput(this, "so-it-does-not-get-removed", {
      value: usersByRole,
    });
  }
}
"
`;

exports[`tfExpressions for expression 3 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Monitor } from "./.gen/providers/datadog/monitor";
import { DatadogProvider } from "./.gen/providers/datadog/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new DatadogProvider(this, "datadog", {
      apiKey: "api_key",
      appKey: "app_key",
    });
    const users = new TerraformVariable(this, "users", {
      type: VariableType.list(
        VariableType.object({
          id: VariableType.STRING,
        })
      ),
    });
    new Monitor(this, "hard_query", {
      message: "here we go",
      name: "queries are hard",
      query: Token.asString(
        Fn.join(
          " && ",
          Token.asList("\${[ for o in \${" + users.value + '} : "!(!\${o.id})"]}')
        )
      ),
      type: "metric alert",
    });
  }
}
"
`;

exports[`tfExpressions list access through square brackets snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  propertyAccess,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new TerraformVariable(this, "settings", {
      type: VariableType.list(VariableType.map(VariableType.STRING)),
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: Token.asString(
        propertyAccess(settings.value, ["0", '"bucket_name"'])
      ),
    });
  }
}
"
`;

exports[`tfExpressions multi-line strings are supported snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new TerraformOutput(this, "hash", {
      value:
        '{\\n  "example_hash_key": {"S": "something"},\\n  "example_attribute": {"N": "11111"}\\n}\\n\\n',
    });
  }
}
"
`;

exports[`tfExpressions numeric property access snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformOutput, propertyAccess, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeInstance } from "./.gen/providers/google/compute-instance";
import { GoogleProvider } from "./.gen/providers/google/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    const example = new ComputeInstance(this, "example", {
      bootDisk: {
        initializeParams: {
          image: "debian-cloud/debian-9",
        },
      },
      machineType: "f1-micro",
      name: "example",
      networkInterface: [
        {
          accessConfig: [{}],
          network: "default",
        },
      ],
      zone: "us-east1-b",
    });
    new TerraformOutput(this, "public_ip", {
      value: propertyAccess(example.networkInterface, [
        "0",
        "access_config",
        "0",
        "assigned_nat_ip",
      ]),
    });
  }
}
"
`;

exports[`tfExpressions property access through square brackets snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  propertyAccess,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new TerraformVariable(this, "settings", {
      type: VariableType.map(VariableType.STRING),
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: Token.asString(propertyAccess(settings.value, ['"bucket_name"'])),
    });
  }
}
"
`;
