// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tfExpressions arithmetics snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  Op,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const admins = new TerraformVariable(this, "admins", {
      type: VariableType.NUMBER,
    });
    const members = new TerraformVariable(this, "members", {
      type: VariableType.NUMBER,
    });
    new TerraformOutput(this, "arithmetics", {
      value: Op.add(members.value, admins.value),
    });
  }
}
"
`;

exports[`tfExpressions conditionals snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { Op, conditional, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketObject } from "./.gen/providers/aws/s3-bucket-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const examplekms = new KmsKey(this, "examplekms", {
      deletionWindowInDays: 7,
      description: "KMS key 1",
    });
    const examplebucket = new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: "examplebuckettftest",
    });
    new S3BucketObject(this, "examplebucket_object", {
      bucket: Token.asString(
        conditional(
          Op.gt(examplekms.deletionWindowInDays, 3),
          examplebucket.id,
          []
        )
      ),
      key: "someobject",
      kmsKeyId: examplekms.arn,
      source: "index.html",
    });
  }
}
"
`;

exports[`tfExpressions escaping dollar-curly in template strings works snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsoadminInstanceAccessControlAttributes } from "./.gen/providers/aws/ssoadmin-instance-access-control-attributes";
interface MyConfig {
  key: any;
  instanceArn: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new SsoadminInstanceAccessControlAttributes(this, "example", {
      attribute: [
        {
          value: [
            {
              source: ["$\${path:name.givenName}"],
            },
          ],
          key: config.key,
        },
      ],
      instanceArn: config.instanceArn,
    });
  }
}
"
`;

exports[`tfExpressions for expression 1 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new TerraformVariable(this, "users", {
      type: VariableType.map(
        VariableType.object({
          is_admin: VariableType.ANY,
        })
      ),
    });
    const adminUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if user.is_admin}}";
    const regularUsers =
      "\${{ for name, user in \${" +
      users.value +
      "} : name => user if !user.is_admin}}";
    new TerraformOutput(this, "combined-so-it-does-not-get-removed", {
      value: "\${" + adminUsers + "},\${" + regularUsers + "}",
    });
  }
}
"
`;

exports[`tfExpressions for expression 2 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const users = new TerraformVariable(this, "users", {
      type: VariableType.map(
        VariableType.object({
          role: VariableType.STRING,
        })
      ),
    });
    const usersByRole =
      "\${{ for name, user in \${" + users.value + "} : user.role => name...}}";
    new TerraformOutput(this, "so-it-does-not-get-removed", {
      value: usersByRole,
    });
  }
}
"
`;

exports[`tfExpressions for expression 3 snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Monitor } from "./.gen/providers/datadog/monitor";
import { DatadogProvider } from "./.gen/providers/datadog/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new DatadogProvider(this, "datadog", {
      apiKey: "api_key",
      appKey: "app_key",
    });
    const users = new TerraformVariable(this, "users", {
      type: VariableType.list(
        VariableType.object({
          id: VariableType.STRING,
        })
      ),
    });
    new Monitor(this, "hard_query", {
      message: "here we go",
      name: "queries are hard",
      query: Token.asString(
        Fn.join(
          " && ",
          Token.asList("\${[ for o in \${" + users.value + '} : "!(!\${o.id})"]}')
        )
      ),
      type: "metric alert",
    });
  }
}
"
`;

exports[`tfExpressions list access through square brackets snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new TerraformVariable(this, "settings", {
      type: VariableType.list(VariableType.map(VariableType.STRING)),
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: Token.asString(
        Fn.lookupNested(settings.value, ["0", '"bucket_name"'])
      ),
    });
  }
}
"
`;

exports[`tfExpressions multi-line strings are supported snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new TerraformOutput(this, "hash", {
      value:
        '{\\n  "example_hash_key": {"S": "something"},\\n  "example_attribute": {"N": "11111"}\\n}\\n\\n',
    });
  }
}
"
`;

exports[`tfExpressions numeric property access snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformOutput, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeInstance } from "./.gen/providers/google/compute-instance";
import { GoogleProvider } from "./.gen/providers/google/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    const example = new ComputeInstance(this, "example", {
      bootDisk: {
        initializeParams: {
          image: "debian-cloud/debian-9",
        },
      },
      machineType: "f1-micro",
      name: "example",
      networkInterface: [
        {
          accessConfig: [{}],
          network: "default",
        },
      ],
      zone: "us-east1-b",
    });
    new TerraformOutput(this, "public_ip", {
      value: Fn.lookupNested(example.networkInterface, [
        "0",
        "access_config",
        "0",
        "assigned_nat_ip",
      ]),
    });
  }
}
"
`;

exports[`tfExpressions property access in maps works snapshot csharp 1`] = `
"using Constructs;
using HashiCorp.Cdktf;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
using aws.Eip;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
            You can read more about this at https://cdk.tf/variables*/
        var defaultTags = new TerraformVariable(this, "default_tags", new TerraformVariableConfig {
            Default = new [] { new Dictionary<string, string> {
                { "project", "Learning Live with AWS & HashiCorp" }
            } },
            Description = "Map of default tags to apply to resources",
            Type = VariableType.Map(VariableType.STRING)
        });
        new Eip(this, "nat", new EipConfig {
            Tags = new Dictionary<string, string> {
                { "Name", Token.AsString(Fn.LookupNested(defaultTags.Value, new [] { "project" })) + "-nat-eip" }
            },
            Vpc = true
        });
    }
}"
`;

exports[`tfExpressions property access in maps works snapshot go 1`] = `
"import "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import "cdk.tf/go/stack/generated/aws/eip"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	newTerraformStack_Override(this, scope, name)
	/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
	    You can read more about this at https://cdk.tf/variables*/
	defaultTags := cdktf.NewTerraformVariable(this, jsii.String("default_tags"), &TerraformVariableConfig{
		Default: []interface{}{
			map[string]*string{
				"project": jsii.String("Learning Live with AWS & HashiCorp"),
			},
		},
		Description: jsii.String("Map of default tags to apply to resources"),
		Type: cdktf.VariableType_Map(cdktf.VariableType_STRING()),
	})
	genprovidersawseip.NewEip(this, jsii.String("nat"), &eipConfig{
		tags: map[string]*string{
			"Name": jsii.String(cdktf.Token_asString(cdktf.Fn_lookupNested(defaultTags.value, []interface{}{
				jsii.String("project"),
			})) + "-nat-eip"),
		},
		vpc: jsii.Boolean(true),
	})
	return this
}"
`;

exports[`tfExpressions property access in maps works snapshot java 1`] = `
"import software.constructs.Construct;
import com.hashicorp.cdktf.VariableType;
import com.hashicorp.cdktf.TerraformVariable;
import com.hashicorp.cdktf.Fn;
import com.hashicorp.cdktf.Token;
import com.hashicorp.cdktf.TerraformStack;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import imports.aws.eip.Eip;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
            You can read more about this at https://cdk.tf/variables*/
        TerraformVariable defaultTags = TerraformVariable.Builder.create(this, "default_tags")
                .default(List.of(Map.of(
                        "project", "Learning Live with AWS & HashiCorp")))
                .description("Map of default tags to apply to resources")
                .type(VariableType.map(VariableType.STRING))
                .build();
        new Eip(this, "nat", new EipConfig()
                .tags(Map.of(
                        "Name", Token.asString(Fn.lookupNested(defaultTags.getValue(), List.of("project"))) + "-nat-eip"))
                .vpc(true)
                );
    }
}"
`;

exports[`tfExpressions property access in maps works snapshot python 1`] = `
"from constructs import Construct
from cdktf import VariableType, TerraformVariable, Fn, Token, TerraformStack
#
# Provider bindings are generated by running \`cdktf get\`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.eip import Eip
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        default_tags = TerraformVariable(self, "default_tags",
            default=[{
                "project": "Learning Live with AWS & HashiCorp"
            }
            ],
            description="Map of default tags to apply to resources",
            type=VariableType.map(VariableType.STRING)
        )
        Eip(self, "nat",
            tags={
                "Name":
                Token.as_string(Fn.lookup_nested(default_tags.value, ["project"])) + "-nat-eip"
            },
            vpc=True
        )"
`;

exports[`tfExpressions property access in maps works snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Eip } from "./.gen/providers/aws/eip";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const defaultTags = new TerraformVariable(this, "default_tags", {
      default: [
        {
          project: "Learning Live with AWS & HashiCorp",
        },
      ],
      description: "Map of default tags to apply to resources",
      type: VariableType.map(VariableType.STRING),
    });
    new Eip(this, "nat", {
      tags: {
        Name:
          Token.asString(Fn.lookupNested(defaultTags.value, ["project"])) +
          "-nat-eip",
      },
      vpc: true,
    });
  }
}
"
`;

exports[`tfExpressions property access through square brackets snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  Fn,
  Token,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const settings = new TerraformVariable(this, "settings", {
      type: VariableType.map(VariableType.STRING),
    });
    new S3Bucket(this, "examplebucket", {
      acl: "private",
      bucket: Token.asString(
        Fn.lookupNested(settings.value, ['"bucket_name"'])
      ),
    });
  }
}
"
`;

exports[`tfExpressions strings containing single outer quotes are supported snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new TerraformOutput(this, "hash", {
      value: "'static'",
    });
  }
}
"
`;
