// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`granular-imports nested sub-structs csharp snapshot 1`] = `
"using Constructs;
using HashiCorp.Cdktf;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
using Gen.Providers.Kubernetes.Deployment;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        new Deployment(this, "example", new DeploymentConfig {
            Metadata = new DeploymentMetadata {
                Labels = new Dictionary<string, string> {
                    { "test", "MyExampleApp" }
                },
                Name = "terraform-example"
            },
            Spec = new DeploymentSpec {
                Replicas = Token.AsString(3),
                Selector = new DeploymentSpecSelector {
                    MatchLabels = new Dictionary<string, string> {
                        { "test", "MyExampleApp" }
                    }
                },
                Template = new DeploymentSpecTemplate {
                    Metadata = new DeploymentSpecTemplateMetadata {
                        Labels = new Dictionary<string, string> {
                            { "test", "MyExampleApp" }
                        }
                    },
                    Spec = new DeploymentSpecTemplateSpec {
                        Container = new [] { new DeploymentSpecTemplateSpecContainer {
                            Image = "nginx:1.21.6",
                            LivenessProbe = new DeploymentSpecTemplateSpecContainerLivenessProbe {
                                HttpGet = new DeploymentSpecTemplateSpecContainerLivenessProbeHttpGet {
                                    HttpHeader = new [] { new DeploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
                                        Name = "X-Custom-Header",
                                        Value = "Awesome"
                                    } },
                                    Path = "/",
                                    Port = Token.AsString(80)
                                },
                                InitialDelaySeconds = 3,
                                PeriodSeconds = 3
                            },
                            Name = "example",
                            Resources = new DeploymentSpecTemplateSpecContainerResources {
                                Limits = new Dictionary<string, string> {
                                    { "cpu", "0.5" },
                                    { "memory", "512Mi" }
                                },
                                Requests = new Dictionary<string, string> {
                                    { "cpu", "250m" },
                                    { "memory", "50Mi" }
                                }
                            }
                        } }
                    }
                }
            }
        });
    }
}"
`;

exports[`granular-imports nested sub-structs go snapshot 1`] = `
"import "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import "github.com/aws-samples/dummy/gen/providers/kubernetes/deployment"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	newTerraformStack_Override(this, scope, name)
	genproviderskubernetesdeployment.NewDeployment(this, jsii.String("example"), &deploymentConfig{
		metadata: &deploymentMetadata{
			labels: map[string]*string{
				"test": jsii.String("MyExampleApp"),
			},
			name: jsii.String("terraform-example"),
		},
		spec: &deploymentSpec{
			replicas: cdktf.Token_AsString(jsii.Number(3)),
			selector: &deploymentSpecSelector{
				matchLabels: map[string]*string{
					"test": jsii.String("MyExampleApp"),
				},
			},
			template: &deploymentSpecTemplate{
				metadata: &deploymentSpecTemplateMetadata{
					labels: map[string]*string{
						"test": jsii.String("MyExampleApp"),
					},
				},
				spec: &deploymentSpecTemplateSpec{
					container: []interface{}{
						&deploymentSpecTemplateSpecContainer{
							image: jsii.String("nginx:1.21.6"),
							livenessProbe: &deploymentSpecTemplateSpecContainerLivenessProbe{
								httpGet: &deploymentSpecTemplateSpecContainerLivenessProbeHttpGet{
									httpHeader: []interface{}{
										&deploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader{
											name: jsii.String("X-Custom-Header"),
											value: jsii.String("Awesome"),
										},
									},
									path: jsii.String("/"),
									port: cdktf.Token_*AsString(jsii.Number(80)),
								},
								initialDelaySeconds: jsii.Number(3),
								periodSeconds: jsii.Number(3),
							},
							name: jsii.String("example"),
							resources: &deploymentSpecTemplateSpecContainerResources{
								limits: map[string]*string{
									"cpu": jsii.String("0.5"),
									"memory": jsii.String("512Mi"),
								},
								requests: map[string]*string{
									"cpu": jsii.String("250m"),
									"memory": jsii.String("50Mi"),
								},
							},
						},
					},
				},
			},
		},
	})
	return this
}"
`;

exports[`granular-imports nested sub-structs java snapshot 1`] = `
"import software.constructs.Construct;
import com.hashicorp.cdktf.Token;
import com.hashicorp.cdktf.TerraformStack;
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import gen.providers.kubernetes.deployment.Deployment;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        new Deployment(this, "example", new DeploymentConfig()
                .metadata(new DeploymentMetadata()
                        .labels(Map.of(
                                "test", "MyExampleApp"))
                        .name("terraform-example")
                        )
                .spec(new DeploymentSpec()
                        .replicas(Token.asString(3))
                        .selector(new DeploymentSpecSelector()
                                .matchLabels(Map.of(
                                        "test", "MyExampleApp"))
                                )
                        .template(new DeploymentSpecTemplate()
                                .metadata(new DeploymentSpecTemplateMetadata()
                                        .labels(Map.of(
                                                "test", "MyExampleApp"))
                                        )
                                .spec(new DeploymentSpecTemplateSpec()
                                        .container(List.of(new DeploymentSpecTemplateSpecContainer()
                                                .image("nginx:1.21.6")
                                                .livenessProbe(new DeploymentSpecTemplateSpecContainerLivenessProbe()
                                                        .httpGet(new DeploymentSpecTemplateSpecContainerLivenessProbeHttpGet()
                                                                .httpHeader(List.of(new DeploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader()
                                                                        .name("X-Custom-Header")
                                                                        .value("Awesome")
                                                                        ))
                                                                .path("/")
                                                                .port(Token.asString(80))
                                                                )
                                                        .initialDelaySeconds(3)
                                                        .periodSeconds(3)
                                                        )
                                                .name("example")
                                                .resources(new DeploymentSpecTemplateSpecContainerResources()
                                                        .limits(Map.of(
                                                                "cpu", "0.5",
                                                                "memory", "512Mi"))
                                                        .requests(Map.of(
                                                                "cpu", "250m",
                                                                "memory", "50Mi"))
                                                        )
                                                ))
                                        )
                                )
                        )
                );
    }
}"
`;

exports[`granular-imports nested sub-structs python snapshot 1`] = `
"from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running \`cdktf get\`.
# See https://cdk.tf/provider-generation for more details.
#
from ...gen.providers.kubernetes.deployment import Deployment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Deployment(self, "example",
            metadata=DeploymentMetadata(
                labels={
                    "test": "MyExampleApp"
                },
                name="terraform-example"
            ),
            spec=DeploymentSpec(
                replicas=Token.as_string(3),
                selector=DeploymentSpecSelector(
                    match_labels={
                        "test": "MyExampleApp"
                    }
                ),
                template=DeploymentSpecTemplate(
                    metadata=DeploymentSpecTemplateMetadata(
                        labels={
                            "test": "MyExampleApp"
                        }
                    ),
                    spec=DeploymentSpecTemplateSpec(
                        container=[DeploymentSpecTemplateSpecContainer(
                            image="nginx:1.21.6",
                            liveness_probe=DeploymentSpecTemplateSpecContainerLivenessProbe(
                                http_get=DeploymentSpecTemplateSpecContainerLivenessProbeHttpGet(
                                    http_header=[DeploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader(
                                        name="X-Custom-Header",
                                        value="Awesome"
                                    )
                                    ],
                                    path="/",
                                    port=Token.as_string(80)
                                ),
                                initial_delay_seconds=3,
                                period_seconds=3
                            ),
                            name="example",
                            resources=DeploymentSpecTemplateSpecContainerResources(
                                limits={
                                    "cpu": "0.5",
                                    "memory": "512Mi"
                                },
                                requests={
                                    "cpu": "250m",
                                    "memory": "50Mi"
                                }
                            )
                        )
                        ]
                    )
                )
            )
        )"
`;

exports[`granular-imports nested sub-structs typescript snapshot 1`] = `
"import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Deployment } from "./.gen/providers/kubernetes/deployment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Deployment(this, "example", {
      metadata: {
        labels: {
          test: "MyExampleApp",
        },
        name: "terraform-example",
      },
      spec: {
        replicas: Token.asString(3),
        selector: {
          matchLabels: {
            test: "MyExampleApp",
          },
        },
        template: {
          metadata: {
            labels: {
              test: "MyExampleApp",
            },
          },
          spec: {
            container: [
              {
                image: "nginx:1.21.6",
                livenessProbe: {
                  httpGet: {
                    httpHeader: [
                      {
                        name: "X-Custom-Header",
                        value: "Awesome",
                      },
                    ],
                    path: "/",
                    port: Token.asString(80),
                  },
                  initialDelaySeconds: 3,
                  periodSeconds: 3,
                },
                name: "example",
                resources: {
                  limits: {
                    cpu: "0.5",
                    memory: "512Mi",
                  },
                  requests: {
                    cpu: "250m",
                    memory: "50Mi",
                  },
                },
              },
            ],
          },
        },
      },
    });
  }
}
"
`;

exports[`granular-imports should handle most cdktf and provider constructs for granular imports typescript snapshot 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  Token,
  TerraformCount,
  Op,
  RemoteBackend,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ComputeAutoscaler } from "./.gen/providers/google/compute-autoscaler";
import { ComputeInstanceGroupManager } from "./.gen/providers/google/compute-instance-group-manager";
import { GoogleProvider } from "./.gen/providers/google/provider";
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new RemoteBackend(this, {
      organization: "example_corp",
      workspaces: [
        {
          name: "my-app-prod",
        },
      ],
    });
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    new LocalProvider(this, "local", {});
    const imageId = new TerraformVariable(this, "image_id", {
      type: VariableType.STRING,
    });
    const cdktfTerraformOutputImageId = new TerraformOutput(
      this,
      "image_id_3",
      {
        value: imageId.value,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    cdktfTerraformOutputImageId.overrideLogicalId("image_id");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const googleComputeAutoscalerExampleCount = TerraformCount.of(
      Token.asNumber("2")
    );
    new ComputeAutoscaler(this, "example", {
      autoscalingPolicy: {
        cooldownPeriod: 60,
        cpuUtilization: {
          target: 0.5,
        },
        maxReplicas: 8,
        minReplicas: 2,
      },
      name: "example-autoscaler",
      target: "target-for-example-autoscaler",
      zone: "us-east1-b",
      count: googleComputeAutoscalerExampleCount,
    });
    const googleComputeInstanceGroupManagerDefault =
      new ComputeInstanceGroupManager(this, "default", {
        baseInstanceName: "autoscaler-sample",
        name: "my-igm",
        targetPools: [],
        version: [
          {
            instanceTemplate: Token.asString(1),
            name: "primary",
          },
        ],
        zone: "us-central1-f",
      });
    new DataLocalFile(this, "foo", {
      filename: "./\${" + imageId.value + "}.img",
    });
    const googleComputeAutoscalerDefault = new ComputeAutoscaler(
      this,
      "default_7",
      {
        autoscalingPolicy: {
          cooldownPeriod: 60,
          maxReplicas: Token.asNumber(Op.add(5, 2)),
          metric: [
            {
              filter:
                "resource.type = pubsub_subscription AND resource.label.subscription_id = our-subscription",
              name: "pubsub.googleapis.com/subscription/num_undelivered_messages",
              single_instance_assignment: 65535,
            },
          ],
          minReplicas: 1,
        },
        name: "my-autoscaler",
        target: Token.asString(googleComputeInstanceGroupManagerDefault.id),
        zone: "us-central1-f",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeAutoscalerDefault.overrideLogicalId("default");
  }
}
"
`;
