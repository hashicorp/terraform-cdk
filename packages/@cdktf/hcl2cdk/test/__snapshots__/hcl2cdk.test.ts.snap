// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convert Cross-Language Support supports csharp 1`] = `Promise {}`;

exports[`convert Cross-Language Support supports java 1`] = `Promise {}`;

exports[`convert Cross-Language Support supports python 1`] = `Promise {}`;

exports[`convert Cross-Language Support supports typescript 1`] = `Promise {}`;

exports[`convert aliased duplicate provider with var reference snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from \\"./.gen/providers/auth0\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const clientId = new cdktf.TerraformVariable(this, \\"client_id\\", {
  description: \\"A client_id\\",
});
const clientSecret = new cdktf.TerraformVariable(this, \\"client_secret\\", {
  description: \\"A client_secret\\",
});
const domain = new cdktf.TerraformVariable(this, \\"domain\\", {
  description: \\"A domain\\",
});
new auth0.Auth0Provider(this, \\"auth0\\", {
  clientId: clientId.value,
  clientSecret: clientSecret.value,
  domain: domain.value,
});
new auth0.Auth0Provider(this, \\"auth0_4\\", {
  alias: \\"private_auth0\\",
  clientId: clientId.value,
  clientSecret: clientSecret.value,
  debug: true,
  domain: domain.value,
});
"
`;

exports[`convert all module types snapshot 1`] = `
"import * as Consul from \\"./.gen/modules/consul\\";
import * as TerraformConsulAws from \\"./.gen/modules/hashicorp/terraform-consul-aws\\";
import * as Example from \\"./.gen/modules/hashicorp/example\\";
import * as Example from \\"./.gen/modules/hashicorp/example\\";
import * as K8SCluster from \\"./.gen/modules/example-corp/azurerm/k8s-cluster\\";
import * as Consul from \\"./.gen/modules/hashicorp/aws/consul\\";
import * as Storage from \\"./.gen/modules/storage\\";
import * as Vpc from \\"./.gen/modules/vpc\\";
new Consul.Consul(this, \\"consul\\", {});
new TerraformConsulAws.TerraformConsulAws(this, \\"consul-butbucket\\", {});
new Example.Example(this, \\"consul-git\\", {});
new Example.Example(this, \\"consul-github\\", {});
new K8SCluster.K8SCluster(this, \\"consul-hosted-registry\\", {});
new Consul.Consul(this, \\"consul-registry\\", {});
new Storage.Storage(this, \\"storage\\", {});
new Vpc.Vpc(this, \\"vpc\\", {});
"
`;

exports[`convert arithmetics snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const admins = new cdktf.TerraformVariable(this, \\"admins\\", {});
const members = new cdktf.TerraformVariable(this, \\"members\\", {});
new cdktf.TerraformOutput(this, \\"arithmetics\\", {
  value: \`\\\\\${\${members.value} + \${admins.value}}\`,
});
"
`;

exports[`convert blocks should be arrays snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from \\"./.gen/providers/google\\";
new google.GoogleProvider(this, \\"google\\", {
  project: \\"my-project\\",
  region: \\"us-central1\\",
});
new google.compute.ComputeAutoscaler(this, \\"example\\", {
  autoscalingPolicy: {
    cooldownPeriod: 60,
    cpuUtilization: {
      target: 0.5,
    },
    maxReplicas: 8,
    minReplicas: 2,
  },
  name: \\"example-autoscaler\\",
  target: \\"target-for-example-autoscaler\\",
  zone: \\"us-east1-b\\",
});
"
`;

exports[`convert complex for each loops snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsAcmCertificateExample = new aws.acm.AcmCertificate(this, \\"example\\", {
  domainName: \\"example.com\\",
  validationMethod: \\"DNS\\",
});
const dataAwsRoute53ZoneExample = new aws.route53.DataAwsRoute53Zone(
  this,
  \\"example_2\\",
  {
    name: \\"example.com\\",
    privateZone: false,
  }
);

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
dataAwsRoute53ZoneExample.overrideLogicalId(\\"example\\");
const awsRoute53RecordExample = new aws.route53.Route53Record(
  this,
  \\"example_3\\",
  {
    allowOverwrite: true,
    name: \\"\${each.value.name}\\",
    records: [\\"\${each.value.record}\\"],
    ttl: 60,
    type: \\"\${each.value.type}\\",
    zoneId: dataAwsRoute53ZoneExample.zoneId,
  }
);

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
awsRoute53RecordExample.overrideLogicalId(\\"example\\");

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsRoute53RecordExample.addOverride(
  \\"for_each\\",
  \`\\\\\${{
      for dvo in \${awsAcmCertificateExample.domainValidationOptions} : dvo.domain_name => {
        name   = dvo.resource_record_name
        record = dvo.resource_record_value
        type   = dvo.resource_record_type
      }
    }}\`
);
const awsAcmCertificateValidationExample = new aws.acm.AcmCertificateValidation(
  this,
  \\"example_4\\",
  {
    certificateArn: awsAcmCertificateExample.arn,
    validationRecordFqdns: [
      \`\\\\\${[for record in \${awsRoute53RecordExample.fqn} : record.fqdn]}\`,
    ],
  }
);

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
awsAcmCertificateValidationExample.overrideLogicalId(\\"example\\");
const awsLbListenerExample = new aws.elb.LbListener(this, \\"example_5\\", {
  certificateArn: awsAcmCertificateValidationExample.certificateArn,
  defaultAction: [
    {
      targetGroupArn: \\"best-target\\",
      type: \\"forward\\",
    },
  ],
  loadBalancerArn: \\"best-lb-arn\\",
});

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
awsLbListenerExample.overrideLogicalId(\\"example\\");
"
`;

exports[`convert complex resource snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.cloudfront.CloudfrontDistribution(this, \\"s3_distribution\\", {
  aliases: [\\"mysite.example.com\\", \\"yoursite.example.com\\"],
  comment: \\"Some comment\\",
  defaultCacheBehavior: {
    allowedMethods: [
      \\"DELETE\\",
      \\"GET\\",
      \\"HEAD\\",
      \\"OPTIONS\\",
      \\"PATCH\\",
      \\"POST\\",
      \\"PUT\\",
    ],
    cachedMethods: [\\"GET\\", \\"HEAD\\"],
    defaultTtl: 3600,
    forwardedValues: {
      cookies: {
        forward: \\"none\\",
      },
      queryString: false,
    },
    maxTtl: 86400,
    minTtl: 0,
    targetOriginId: \\"local_s3_origin_id\\",
    viewerProtocolPolicy: \\"allow-all\\",
  },
  defaultRootObject: \\"index.html\\",
  enabled: true,
  isIpv6Enabled: true,
  loggingConfig: {
    bucket: \\"mylogs.s3.amazonaws.com\\",
    includeCookies: false,
    prefix: \\"myprefix\\",
  },
  orderedCacheBehavior: [
    {
      allowedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cachedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      compress: true,
      defaultTtl: 86400,
      forwardedValues: {
        cookies: {
          forward: \\"none\\",
        },
        headers: [\\"Origin\\"],
        queryString: false,
      },
      maxTtl: 31536000,
      minTtl: 0,
      pathPattern: \\"/content/immutable/*\\",
      targetOriginId: \\"local_s3_origin_id\\",
      viewerProtocolPolicy: \\"redirect-to-https\\",
    },
    {
      allowedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cachedMethods: [\\"GET\\", \\"HEAD\\"],
      compress: true,
      defaultTtl: 3600,
      forwardedValues: {
        cookies: {
          forward: \\"none\\",
        },
        queryString: false,
      },
      maxTtl: 86400,
      minTtl: 0,
      pathPattern: \\"/content/*\\",
      targetOriginId: \\"local_s3_origin_id\\",
      viewerProtocolPolicy: \\"redirect-to-https\\",
    },
  ],
  origin: [
    {
      domainName: \\"aws_s3_bucket.b.bucket_regional_domain_name\\",
      originId: \\"local_s3_origin_id\\",
      s3OriginConfig: {
        originAccessIdentity:
          \\"origin-access-identity/cloudfront/ABCDEFG1234567\\",
      },
    },
  ],
  priceClass: \\"PriceClass_200\\",
  restrictions: {
    geoRestriction: {
      locations: [\\"US\\", \\"CA\\", \\"GB\\", \\"DE\\"],
      restrictionType: \\"whitelist\\",
    },
  },
  tags: {
    Environment: \\"production\\",
  },
  viewerCertificate: {
    cloudfrontDefaultCertificate: true,
  },
});
"
`;

exports[`convert conditionals snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsKmsKeyExamplekms = new aws.kms.KmsKey(this, \\"examplekms\\", {
  deletionWindowInDays: 7,
  description: \\"KMS key 1\\",
});
const awsS3BucketExamplebucket = new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \\"examplebuckettftest\\",
});
new aws.s3.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: \`\\\\\${\${awsKmsKeyExamplekms.deletionWindowInDays} > 3 ? \${awsS3BucketExamplebucket.id} : []}\`,
  key: \\"someobject\\",
  kmsKeyId: awsKmsKeyExamplekms.arn,
  source: \\"index.html\\",
});
"
`;

exports[`convert count loops snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const users = new cdktf.TerraformVariable(this, \\"users\\", {});
const awsIamUserLb = new aws.iam.IamUser(this, \\"lb\\", {
  name: \`\\\\\${element(\${users.value}, count.index)}\`,
  path: \\"/system/\\",
  tags: {
    \\"tag-key\\": \\"tag-value\\",
  },
});

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsIamUserLb.addOverride(\\"count\\", \`\\\\\${length(\${users.value})}\`);
"
`;

exports[`convert data local_file snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as local from \\"./.gen/providers/local\\";
new local.LocalProvider(this, \\"local\\", {});
new local.DataLocalFile(this, \\"_01_please_verify\\", {
  filename: \\"./email_templates/01_please_verify/template.html\\",
});
"
`;

exports[`convert data references snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const bucketName = new cdktf.TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
const dataAwsS3BucketExamplebucket = new aws.s3.DataAwsS3Bucket(
  this,
  \\"examplebucket\\",
  {
    bucket: bucketName.value,
  }
);
new aws.s3.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: dataAwsS3BucketExamplebucket.arn,
  key: \\"someobject\\",
  source: \\"index.html\\",
});
"
`;

exports[`convert double references snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const bucketName = new cdktf.TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: bucketName.value,
  tags: {
    \\"tag-key\\": bucketName.value,
  },
});
"
`;

exports[`convert duplicate modules snapshot 1`] = `
"import * as Vpc from \\"./.gen/modules/terraform-aws-modules/aws/vpc\\";
new Vpc.Vpc(this, \\"vpca\\", {
  name: \\"my-vpc-a\\",
});
new Vpc.Vpc(this, \\"vpcb\\", {
  name: \\"my-vpc-b\\",
});
"
`;

exports[`convert dynamic blocks snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const namespace = new cdktf.TerraformVariable(this, \\"namespace\\", {});
const settings = new cdktf.TerraformVariable(this, \\"settings\\", {});
const awsElasticBeanstalkEnvironmentTfenvtest =
  new aws.elasticbeanstalk.ElasticBeanstalkEnvironment(this, \\"tfenvtest\\", {
    application: \\"best-app\\",
    setting: [],
    name: \\"tf-test-name\\",
    solutionStackName: \\"64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\\",
  });

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsElasticBeanstalkEnvironmentTfenvtest.addOverride(\\"setting\\", {
  for_each: settings.value,
  content: [
    {
      name: '\${setting.value[\\"name\\"]}',
      namespace: namespace.value,
      value: '\${setting.value[\\"value\\"]}',
    },
  ],
});
"
`;

exports[`convert empty provider snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as docker from \\"./.gen/providers/docker\\";
new docker.DockerProvider(this, \\"docker\\", {});
"
`;

exports[`convert for each on list using splat snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const buckets = new cdktf.TerraformVariable(this, \\"buckets\\", {});
const awsKmsKeyExamplekms = new aws.kms.KmsKey(this, \\"examplekms\\", {
  deletionWindowInDays: 7,
  description: \\"KMS key 1\\",
});
const awsS3BucketExamplebucket = new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \\"\${each.key}\\",
});

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsS3BucketExamplebucket.addOverride(
  \\"for_each\\",
  \`\\\\\${toset(\${buckets.value}.*)}\`
);
const awsS3BucketObjectExamplebucketObject = new aws.s3.S3BucketObject(
  this,
  \\"examplebucket_object\\",
  {
    bucket: \\"\${each.key}\\",
    key: \\"someobject\\",
    kmsKeyId: awsKmsKeyExamplekms.arn,
    source: \\"index.html\\",
  }
);

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsS3BucketObjectExamplebucketObject.addOverride(
  \\"for_each\\",
  \`\\\\\${toset(\${awsS3BucketExamplebucket.fqn}.*)}\`
);
"
`;

exports[`convert for expression 1 snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const users = new cdktf.TerraformVariable(this, \\"users\\", {});
const adminUsers = \`\\\\\${{
            for name, user in \${users.value} : name => user
            if user.is_admin
          }}\`;
const regularUsers = \`\\\\\${{
            for name, user in \${users.value} : name => user
            if !user.is_admin
          }}\`;
new cdktf.TerraformOutput(this, \\"combined-so-it-does-not-get-removed\\", {
  value: \`\\\\\${\${adminUsers}},\\\\\${\${regularUsers}}\`,
});
"
`;

exports[`convert for expression 2 snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const users = new cdktf.TerraformVariable(this, \\"users\\", {});
const usersByRole = \`\\\\\${{
          for name, user in \${users.value} : user.role => name...
        }}\`;
new cdktf.TerraformOutput(this, \\"so-it-does-not-get-removed\\", {
  value: usersByRole,
});
"
`;

exports[`convert for expression 3 snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as datadog from \\"./.gen/providers/datadog\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new datadog.DatadogProvider(this, \\"datadog\\", {
  apiKey: \\"api_key\\",
  appKey: \\"app_key\\",
});
const users = new cdktf.TerraformVariable(this, \\"users\\", {});
new datadog.Monitor(this, \\"hard_query\\", {
  message: \\"here we go\\",
  name: \\"queries are hard\\",
  query: \`\\\\\${join(\\" && \\", [for o in \${users.value} : \\"!(!\\\\\${o.id})\\"])}\`,
  type: \\"metric alert\\",
});
"
`;

exports[`convert for_each loops snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const users = new cdktf.TerraformVariable(this, \\"users\\", {});
const awsIamUserLb = new aws.iam.IamUser(this, \\"lb\\", {
  name: \\"\${each.key}\\",
  path: \\"/system/\\",
  tags: {
    \\"tag-key\\": \\"tag-value\\",
  },
});

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsIamUserLb.addOverride(\\"for_each\\", users.value);
"
`;

exports[`convert for_each with var usage snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azuread from \\"./.gen/providers/azuread\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new azuread.AzureadProvider(this, \\"azuread\\", {
  tenantId: \\"00000000-0000-0000-0000-000000000000\\",
});
const azureAdDomainName = new cdktf.TerraformVariable(
  this,
  \\"azure_ad_domain_name\\",
  {
    description: \\"domain\\",
  }
);
const oneSetOfUsers = new cdktf.TerraformVariable(this, \\"one_set_of_users\\", {
  description: \\"users\\",
});
const otherSetOfUsers = new cdktf.TerraformVariable(
  this,
  \\"other_set_of_users\\",
  {
    description: \\"users\\",
  }
);
const azureadUserAzureUsers = new azuread.User(this, \\"azure_users\\", {
  displayName: \\"\${each.key}\\",
  userPrincipalName: \`\\\\\${each.value}\\\\\${\${azureAdDomainName.value}}\`,
});

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
azureadUserAzureUsers.addOverride(
  \\"for_each\\",
  \`\\\\\${merge(
          \${oneSetOfUsers.value},
          \${otherSetOfUsers.value},
        )}\`
);
"
`;

exports[`convert list access through square brackets snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const settings = new cdktf.TerraformVariable(this, \\"settings\\", {});
new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \`\\\\\${\${settings.value}[0][\\"bucket_name\\"]}\`,
});
"
`;

exports[`convert local backend snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.LocalBackend(this, {
  path: \\"relative/path/to/terraform.tfstate\\",
});
"
`;

exports[`convert local module snapshot 1`] = `
"import * as AwsVpc from \\"./.gen/modules/aws_vpc\\";
new AwsVpc.AwsVpc(this, \\"aws_vpc\\", {});
"
`;

exports[`convert locals references snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const bucketName = \\"foo\\";
new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: bucketName,
});
"
`;

exports[`convert locals snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
const howMany = 42;
const isItGreat = true;
const owner = \\"Community Team\\";
const serviceName = \\"forum\\";
new cdktf.TerraformOutput(this, \\"combined-so-it-does-not-get-removed\\", {
  value: \`\\\\\${\${serviceName}},\\\\\${\${owner}},\\\\\${\${isItGreat}},\\\\\${\${howMany}}\`,
});
"
`;

exports[`convert maps are not arrays snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from \\"./.gen/providers/kubernetes\\";
new kubernetes.KubernetesProvider(this, \\"kubernetes\\", {
  configContext: \\"my-context\\",
  configPath: \\"~/.kube/config\\",
});
new kubernetes.Secret(this, \\"secrets-xxx\\", {
  data: {
    xxx: \\"yyy\\",
  },
  metadata: {
    name: \\"secrets-xxx\\",
  },
});
"
`;

exports[`convert maps dont get camel case keys snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from \\"./.gen/providers/kubernetes\\";
new kubernetes.KubernetesProvider(this, \\"kubernetes\\", {
  configContext: \\"my-context\\",
  configPath: \\"~/.kube/config\\",
});
new kubernetes.Secret(this, \\"secrets-xxx\\", {
  data: {
    camel_cased_key: \\"yes\\",
  },
  metadata: {
    name: \\"secrets-xxx\\",
  },
});
"
`;

exports[`convert modules snapshot 1`] = `
"import * as Vpc from \\"./.gen/modules/terraform-aws-modules/aws/vpc\\";
new Vpc.Vpc(this, \\"vpc\\", {
  azs: [\\"eu-west-1a\\", \\"eu-west-1b\\", \\"eu-west-1c\\"],
  cidr: \\"10.0.0.0/16\\",
  enableNatGateway: true,
  enableVpnGateway: true,
  name: \\"my-vpc\\",
  privateSubnets: [\\"10.0.1.0/24\\", \\"10.0.2.0/24\\", \\"10.0.3.0/24\\"],
  publicSubnets: [\\"10.0.101.0/24\\", \\"10.0.102.0/24\\", \\"10.0.103.0/24\\"],
  tags: {
    Environment: \\"dev\\",
    Terraform: \\"true\\",
  },
});
"
`;

exports[`convert multiple blocks snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.vpc.SecurityGroup(this, \\"allow_tls\\", {
  description: \\"Allow TLS inbound traffic\\",
  egress: [
    {
      cidrBlocks: [\\"0.0.0.0/0\\"],
      fromPort: 0,
      ipv6CidrBlocks: [\\"::/0\\"],
      protocol: \\"-1\\",
      toPort: 0,
    },
  ],
  ingress: [
    {
      description: \\"TLS from VPC\\",
      fromPort: 443,
      protocol: \\"tcp\\",
      toPort: 443,
    },
    {
      description: \\"TLS from VPC\\",
      fromPort: 80,
      protocol: \\"tcp\\",
      toPort: 80,
    },
    {
      fromPort: 8080,
      protocol: \\"tcp\\",
      toPort: 8080,
    },
  ],
  name: \\"allow_tls\\",
  tags: {
    Name: \\"allow_tls\\",
  },
});
"
`;

exports[`convert multiple locals blocks snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
const owner = \\"Community Team\\";
const serviceName = \\"forum\\";
const howMany = 42;
const isItGreat = true;
new cdktf.TerraformOutput(this, \\"combined-so-it-does-not-get-removed\\", {
  value: \`\\\\\${\${serviceName}},\\\\\${\${owner}},\\\\\${\${isItGreat}},\\\\\${\${howMany}}\`,
});
"
`;

exports[`convert multiple outputs snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.TerraformOutput(this, \\"first_cidr_out\\", {
  value: \\"first\\",
});
new cdktf.TerraformOutput(this, \\"second_cidr_out\\", {
  value: \\"second\\",
});
"
`;

exports[`convert null provider snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as NullProvider from \\"./.gen/providers/null\\";
new NullProvider.NullProvider(this, \\"null\\", {});
new NullProvider.Resource(this, \\"test\\", {});
"
`;

exports[`convert number output snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.TerraformOutput(this, \\"test\\", {
  value: 42,
});
"
`;

exports[`convert numeric property access snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from \\"./.gen/providers/google\\";
new google.GoogleProvider(this, \\"google\\", {
  project: \\"my-project\\",
  region: \\"us-central1\\",
});
const googleComputeInstanceExample = new google.compute.ComputeInstance(
  this,
  \\"example\\",
  {
    bootDisk: {
      initializeParams: {
        image: \\"debian-cloud/debian-9\\",
      },
    },
    machineType: \\"f1-micro\\",
    name: \\"example\\",
    networkInterface: [
      {
        accessConfig: [{}],
        network: \\"default\\",
      },
    ],
    zone: \\"us-east1-b\\",
  }
);
new cdktf.TerraformOutput(this, \\"public_ip\\", {
  value: \`\\\\\${\${googleComputeInstanceExample.networkInterface}.0.access_config.0.assigned_nat_ip}\`,
});
"
`;

exports[`convert output snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
});
"
`;

exports[`convert output withdescription snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
  description: \\"Best output\\",
  sensitive: true,
});
"
`;

exports[`convert property access through square brackets snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const settings = new cdktf.TerraformVariable(this, \\"settings\\", {});
new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \`\\\\\${\${settings.value}[\\"bucket_name\\"]}\`,
});
"
`;

exports[`convert property level renamings snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.guardduty.GuarddutyFilter(this, \\"MyFilter\\", {
  action: \\"ARCHIVE\\",
  detectorId: \\"id\\",
  findingCriteria: {
    criterion: [
      {
        equalTo: [\\"eu-west-1\\"],
        field: \\"region\\",
      },
      {
        field: \\"service.additionalInfo.threatListName\\",
        notEquals: [\\"some-threat\\", \\"another-threat\\"],
      },
      {
        field: \\"updatedAt\\",
        greaterThan: \\"2020-01-01T00:00:00Z\\",
        lessThan: \\"2020-02-01T00:00:00Z\\",
      },
      {
        field: \\"severity\\",
        greaterThanOrEqual: \\"4\\",
      },
    ],
  },
  name: \\"MyFilter\\",
  rank: 1,
});
"
`;

exports[`convert provider alias snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
import * as Vpc from \\"./.gen/modules/terraform-aws-modules/aws/vpc\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsWest = new aws.AwsProvider(this, \\"aws_1\\", {
  alias: \\"west\\",
  region: \\"us-west-2\\",
});
new Vpc.Vpc(this, \\"vpc\\", {
  providers: [
    {
      moduleAlias: \\"aws\\",
      provider: \`\\\\\${\${awsWest.fqn}}\`,
    },
  ],
});
new aws.ec2.Instance(this, \\"foo\\", {
  foo: \\"bar\\",
  provider: \`\\\\\${\${awsWest.fqn}}\`,
});
"
`;

exports[`convert provider with complex config snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  accessKey: \\"mock_access_key\\",
  endpoints: [
    {
      dynamodb: \\"http://localhost:8000\\",
    },
  ],
  region: \\"us-east-1\\",
  secretKey: \\"mock_secret_key\\",
  skipCredentialsValidation: true,
  skipRequestingAccountId: true,
});
"
`;

exports[`convert provider with var reference snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from \\"./.gen/providers/auth0\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const domain = new cdktf.TerraformVariable(this, \\"domain\\", {
  description: \\"A domain\\",
});
new auth0.Auth0Provider(this, \\"auth0\\", {
  clientId: \\"client_id\\",
  clientSecret: \\"client_secret\\",
  domain: domain.value,
});
"
`;

exports[`convert referenced modules snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
import * as Vpc from \\"./.gen/modules/terraform-aws-modules/aws/vpc\\";
const vpc = new Vpc.Vpc(this, \\"vpc\\", {
  azs: [\\"eu-west-1a\\", \\"eu-west-1b\\", \\"eu-west-1c\\"],
  cidr: \\"10.0.0.0/16\\",
  enableNatGateway: true,
  enableVpnGateway: true,
  name: \\"my-vpc\\",
  privateSubnets: [\\"10.0.1.0/24\\", \\"10.0.2.0/24\\", \\"10.0.3.0/24\\"],
  publicSubnets: [\\"10.0.101.0/24\\", \\"10.0.102.0/24\\", \\"10.0.103.0/24\\"],
  tags: {
    Environment: \\"dev\\",
    Terraform: \\"true\\",
  },
});
new cdktf.TerraformOutput(this, \\"subnet_ids\\", {
  value: vpc.publicSubnetsOutput,
});
"
`;

exports[`convert remote backend snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.RemoteBackend(this, {
  hostname: \\"app.terraform.io\\",
  organization: \\"company\\",
  workspaces: [
    {
      name: \\"my-app-prod\\",
    },
  ],
});
"
`;

exports[`convert remote state snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.DataTerraformRemoteState(this, \\"vpc\\", {
  organization: \\"hashicorp\\",
  workspaces: [
    {
      name: \\"vpc-prod\\",
    },
  ],
});
"
`;

exports[`convert remote state types snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.DataTerraformRemoteStateEtcdV3(this, \\"etcdv3\\", {
  endpoints: [\\"etcd-1:2379\\", \\"etcd-2:2379\\", \\"etcd-3:2379\\"],
  lock: true,
  prefix: \\"terraform-state/\\",
});
new cdktf.DataTerraformRemoteStateS3(this, \\"s3\\", {
  bucket: \\"mybucket\\",
  key: \\"path/to/my/key\\",
  region: \\"us-east-1\\",
});
"
`;

exports[`convert required namespaced provider snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from \\"./.gen/providers/auth0\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const domain = new cdktf.TerraformVariable(this, \\"domain\\", {
  description: \\"A domain\\",
});
new auth0.Auth0Provider(this, \\"auth0\\", {
  clientId: \\"42\\",
  clientSecret: \\"secret\\",
  domain: domain.value,
});
"
`;

exports[`convert resource references snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsKmsKeyExamplekms = new aws.kms.KmsKey(this, \\"examplekms\\", {
  deletionWindowInDays: 7,
  description: \\"KMS key 1\\",
});
const awsS3BucketExamplebucket = new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \\"examplebuckettftest\\",
});
new aws.s3.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: awsS3BucketExamplebucket.id,
  key: \\"someobject\\",
  kmsKeyId: awsKmsKeyExamplekms.arn,
  source: \\"index.html\\",
});
"
`;

exports[`convert resource references with HCL functions snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsKmsKeyExamplekms = new aws.kms.KmsKey(this, \\"examplekms\\", {
  deletionWindowInDays: 7,
  description: \\"KMS key 1\\",
});
const awsS3BucketExamplebucket = new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \\"examplebuckettftest\\",
});
new aws.s3.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: \`\\\\\${element(\${awsS3BucketExamplebucket.fqn}, 0).id}\`,
  key: \\"someobject\\",
  kmsKeyId: awsKmsKeyExamplekms.arn,
  source: \\"index.html\\",
});
"
`;

exports[`convert same name local, var, out snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const test = new cdktf.TerraformVariable(this, \\"test\\", {});
const localTest = \`\\\\\${\${test.value}} + 1\`;
const cdktfTerraformOutputTest = new cdktf.TerraformOutput(this, \\"test_1\\", {
  value: localTest,
});

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
cdktfTerraformOutputTest.overrideLogicalId(\\"test\\");
"
`;

exports[`convert sensitive output snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";
new cdktf.TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
  sensitive: true,
});
"
`;

exports[`convert simple count snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const awsInstanceMultipleServers = new aws.ec2.Instance(
  this,
  \\"multiple_servers\\",
  {
    ami: \\"ami-0c2b8ca1dad447f8a\\",
    instanceType: \\"t2.micro\\",
    tags: {
      Name: \\"Server \${count.index}\\",
    },
  }
);

/*In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.*/
awsInstanceMultipleServers.addOverride(\\"count\\", 4);
"
`;

exports[`convert simple data source snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.vpc.DataAwsSubnet(this, \\"selected\\", {
  vpcId: \\"subnet_id\\",
});
"
`;

exports[`convert simple resource snapshot 1`] = `
"/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
new aws.vpc.Vpc(this, \\"example\\", {
  cidrBlock: \\"10.0.0.0/16\\",
});
"
`;

exports[`convert terraform workspace snapshot 1`] = `
"import * as MyModule from \\"./.gen/modules/my-module\\";
new MyModule.MyModule(this, \\"example\\", {
  namePrefix: \\"app-\${terraform.workspace}\\",
});
"
`;

exports[`convert tricky to parse items snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const tags = new cdktf.TerraformVariable(this, \\"tags\\", {});
new aws.ec2.Instance(this, \\"play\\", {
  ami: \`\\\\\${join(\\"-\\", [\${tags.app.value}, \${tags.env.value}])}\`,
  associatePublicIpAddress: true,
  connection: [
    {
      host: \\"\${self.public_ip}\\",
      private_key: '\${file(\\"./terraform_key\\")}',
      type: \\"ssh\\",
      user: \\"ubuntu\\",
    },
  ],
  instanceType: \\"t3.small\\",
  keyName: \\"\${aws_key_pair.master_key.id}\\",
  subnetId: \\"\${aws_subnet.main.id}\\",
  vpcSecurityGroupIds: [\\"\${aws_security_group.ssh.id}\\"],
});
"
`;

exports[`convert variable references snapshot 1`] = `
"import * as cdktf from \\"cdktf\\";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";

/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
new aws.AwsProvider(this, \\"aws\\", {
  region: \\"us-east-1\\",
});
const bucketName = new cdktf.TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
new aws.s3.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: bucketName.value,
});
"
`;
