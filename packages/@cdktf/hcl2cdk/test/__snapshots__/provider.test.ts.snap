// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`provider empty provider snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DockerProvider } from "./.gen/providers/docker/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DockerProvider(this, "docker", {});
  }
}
"
`;

exports[`provider null provider snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NullProvider } from "./.gen/providers/null/provider";
import { Resource } from "./.gen/providers/null/resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NullProvider(this, "null", {});
    new Resource(this, "test", {});
  }
}
"
`;

exports[`provider provider alias snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { AwsProvider } from "./.gen/providers/aws/provider";
import * as Vpc from "./.gen/modules/terraform-aws-modules/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const west = new AwsProvider(this, "aws_1", {
      alias: "west",
      region: "us-west-2",
    });
    new Vpc.Vpc(this, "vpc", {
      providers: [
        {
          moduleAlias: "aws",
          provider: west,
        },
      ],
    });
    new Instance(this, "foo", {
      foo: "bar",
      provider: west,
    });
  }
}
"
`;

exports[`provider provider with complex config snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      accessKey: "mock_access_key",
      endpoints: [
        {
          dynamodb: "http://localhost:8000",
        },
      ],
      region: "us-east-1",
      secretKey: "mock_secret_key",
      skipCredentialsValidation: true,
      skipRequestingAccountId: true,
    });
  }
}
"
`;

exports[`provider required namespaced provider snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Auth0Provider } from "./.gen/providers/auth0/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const domain = new TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new Auth0Provider(this, "auth0", {
      clientId: "42",
      clientSecret: "secret",
      domain: domain.stringValue,
    });
  }
}
"
`;
