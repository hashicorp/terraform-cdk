/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Language } from "@cdktf/commons";
import { postProcessTypescriptContentForLanguage } from "../post-process";

const content = `import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as auth0 from "./.gen/providers/auth0";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const domain = new cdktf.TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new auth0.provider.Auth0Provider(this, "auth0", {
      clientId: "client_id",
      clientSecret: "client_secret",
      domain: domain.stringValue,
    });
  }
}`;

describe("postProcessTypescriptForLanguage", () => {
  it("updates imports to the right path for language", () => {
    const result = postProcessTypescriptContentForLanguage(
      { fileName: "main.ts", contents: content },
      Language.PYTHON
    );

    expect(result).toMatchInlineSnapshot(`
      "import * as constructs from "constructs";
      import * as cdktf from "cdktf";
      /*Provider bindings are generated by running cdktf get.
      See https://cdk.tf/provider-generation for more details.*/
      import * as auth0 from "./imports/providers/auth0";
      class MyConvertedCode extends cdktf.TerraformStack {
        constructor(scope: constructs.Construct, name: string) {
          super(scope, name);
          /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
          You can read more about this at https://cdk.tf/variables*/
          const domain = new cdktf.TerraformVariable(this, "domain", {
            description: "A domain",
          });
          new auth0.provider.Auth0Provider(this, "auth0", {
            clientId: "client_id",
            clientSecret: "client_secret",
            domain: domain.stringValue,
          });
        }
      }
      "
    `);
  });
});
