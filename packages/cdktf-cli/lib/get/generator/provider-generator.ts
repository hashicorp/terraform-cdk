import { CodeMaker } from 'codemaker';
import { Provider, ProviderSchema } from './provider-schema';
import { ResourceModel } from "./models"
import { ResourceParser } from './resource-parser'
import { ResourceEmitter, StructEmitter } from './emitter'

export class TerraformGenerator {
  private resourceParser = new ResourceParser();
  private resourceEmitter:  ResourceEmitter;
  private structEmitter:  StructEmitter;

  constructor(private readonly code: CodeMaker, schema: ProviderSchema) {
    this.code.indentation = 2;
    this.resourceEmitter = new ResourceEmitter(this.code)
    this.structEmitter = new StructEmitter(this.code)

    if (!schema.provider_schemas) {
      console.error('warning: no providers');
      return;
    }

    for (const [name, provider] of Object.entries(schema.provider_schemas)) {
      this.emitProvider(name, provider);
    }
  }

  public async save(outdir: string) {
    await this.code.save(outdir);
  }

  private emitProvider(name: string, provider: Provider) {
    const files: string[] = []
    for (const [type, resource] of Object.entries(provider.resource_schemas)) {
      files.push(this.emitResourceFile(this.resourceParser.parse(name, type, resource)));
    }

    if (provider.provider) {
      const providerResource = this.resourceParser.parse(name, `provider`, provider.provider)
      files.push(this.emitResourceFile(providerResource));
    }

    this.emitIndexFile(name, files)
  }

  private emitIndexFile(provider: string, files: string[]): void {
    const folder = `providers/${provider}`
    const filePath = `${folder}/index.ts`
    this.code.openFile(filePath);
    this.code.line('// generated by cdktf get')
    for (const file of files) {
      this.code.line(`export * from './${file.replace(`${folder}/`, '').replace('.ts', '')}';`);
    }
    this.code.line()
    this.code.closeFile(filePath)
  }

  private emitResourceFile(resource: ResourceModel): string {
    this.code.openFile(resource.filePath);
      this.emitFileHeader(resource)
      this.structEmitter.emit(resource);
      this.resourceEmitter.emit(resource)
    this.code.closeFile(resource.filePath);

    return resource.filePath;
  }

  private emitFileHeader(resource: ResourceModel) {
    this.code.line(`// ${resource.linkToDocs}`);
    this.code.line(`// generated from terraform resource schema`);
    this.code.line();
    this.code.line('/*');
    this.code.line(resource.schemaAsJson);
    this.code.line('*/');
    resource.importStatements.forEach(statement => this.code.line(statement))
    this.code.line();
    this.code.line('// Configuration');
    this.code.line();
  }
}